
main.elf:     file format elf32-littlenios2
main.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x0c0001bc

Program Header:
    LOAD off    0x00001000 vaddr 0x0c000000 paddr 0x0c000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x0c000020 paddr 0x0c000020 align 2**12
         filesz 0x000226c4 memsz 0x000226c4 flags r-x
    LOAD off    0x000236e4 vaddr 0x0c0226e4 paddr 0x0c024214 align 2**12
         filesz 0x00001b30 memsz 0x00001b30 flags rw-
    LOAD off    0x00025d44 vaddr 0x0c025d44 paddr 0x0c025d44 align 2**12
         filesz 0x00000000 memsz 0x000824e4 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  0c000000  0c000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000019c  0c000020  0c000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000179c0  0c0001bc  0c0001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000ab68  0c017b7c  0c017b7c  00018b7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b30  0c0226e4  0c024214  000236e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00082722  0c025d44  0c025d44  00025d44  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  0c0a8228  0c0a8228  00025214  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00025214  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000f88  00000000  00000000  00025238  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0002b66e  00000000  00000000  000261c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000af42  00000000  00000000  0005182e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000d716  00000000  00000000  0005c770  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00003758  00000000  00000000  00069e88  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000043b2  00000000  00000000  0006d5e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00017732  00000000  00000000  00071992  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000050  00000000  00000000  000890c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001380  00000000  00000000  00089118  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0008eb86  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0008eb89  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0008eb95  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0008eb96  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  0008eb97  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  0008eba2  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  0008ebad  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000b  00000000  00000000  0008ebb8  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000001e  00000000  00000000  0008ebc3  2**0
                  CONTENTS, READONLY
 26 .jdi          00004b4c  00000000  00000000  0008ebe1  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     00078593  00000000  00000000  0009372d  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
0c000000 l    d  .entry	00000000 .entry
0c000020 l    d  .exceptions	00000000 .exceptions
0c0001bc l    d  .text	00000000 .text
0c017b7c l    d  .rodata	00000000 .rodata
0c0226e4 l    d  .rwdata	00000000 .rwdata
0c025d44 l    d  .bss	00000000 .bss
0c0a8228 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../main_bsp//obj/HAL/src/crt0.o
0c0001f4 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
0c000094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 camera.c
0c017ba8 l     O .rodata	0000000e __FUNCTION__.2611
00000000 l    df *ABS*	00000000 camera_test.c
00000000 l    df *ABS*	00000000 debug.c
00000000 l    df *ABS*	00000000 graphics.c
00000000 l    df *ABS*	00000000 gui.c
00000000 l    df *ABS*	00000000 main.c
0c025d80 l     O .bss	000802c8 nj
0c0221ac l     O .rodata	00000040 njZZ
0c003768 l     F .text	00000048 njClip
0c0037b0 l     F .text	000003b8 njRowIDCT
0c003b68 l     F .text	000004a0 njColIDCT
0c004008 l     F .text	0000030c njShowBits
0c004314 l     F .text	00000088 njSkipBits
0c00439c l     F .text	00000040 njGetBits
0c0043dc l     F .text	00000050 njByteAlign
0c00442c l     F .text	000000a0 njSkip
0c0044cc l     F .text	00000048 njDecode16
0c004514 l     F .text	000000a8 njDecodeLength
0c0045bc l     F .text	0000003c njSkipMarker
0c0045f8 l     F .text	000006c4 njDecodeSOF
0c004cbc l     F .text	000002e4 njDecodeDHT
0c0a6048 l     O .bss	00000010 counts.2381
0c004fa0 l     F .text	00000148 njDecodeDQT
0c0050e8 l     F .text	000000a8 njDecodeDRI
0c005190 l     F .text	00000118 njGetVLC
0c0052a8 l     F .text	000002b8 njDecodeBlock
0c005560 l     F .text	00000490 njDecodeScan
0c0059f0 l     F .text	00000494 njUpsampleH
0c005e84 l     F .text	0000051c njUpsampleV
0c0063a0 l     F .text	00000428 njConvert
00000000 l    df *ABS*	00000000 motor.c
0c0241c8 l     O .rwdata	00000008 __FUNCTION__.1486
0c022358 l     O .rodata	0000000a __FUNCTION__.1490
0c022364 l     O .rodata	0000000a __FUNCTION__.1494
0c022370 l     O .rodata	0000000b __FUNCTION__.1498
0c02237c l     O .rodata	00000010 __FUNCTION__.1502
00000000 l    df *ABS*	00000000 serial.c
0c0076e0 l     F .text	00000040 handle_serial_interrupts
00000000 l    df *ABS*	00000000 touch_screen.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0c008bac l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 assert.c
00000000 l    df *ABS*	00000000 fiprintf.c
00000000 l    df *ABS*	00000000 impure.c
0c0226e4 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfiprintfr_1.c
00000000 l    df *ABS*	00000000 vfprintf.c
0c022516 l     O .rodata	00000010 zeroes.4181
0c022526 l     O .rodata	00000010 blanks.4180
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 dtoa.c
0c00bb9c l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0c00d71c l     F .text	00000008 __fp_lock
0c00d724 l     F .text	00000008 __fp_unlock
0c00d738 l     F .text	000001a0 __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
0c022f30 l     O .rwdata	00000020 lc_ctype_charset
0c022f10 l     O .rwdata	00000020 lc_message_charset
0c022f50 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
0c022554 l     O .rodata	0000000c p05.2678
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
0c0105a8 l     F .text	000000fc __sprint_r.part.0
0c022688 l     O .rodata	00000010 blanks.4125
0c022678 l     O .rodata	00000010 zeroes.4126
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
0c014a3c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0c014b5c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0c014bbc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_getpid.c
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0c014e8c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_kill.c
0c014f80 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0c015100 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0c0151e4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0c0153c0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0c024208 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0c01564c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0c015794 l     F .text	00000038 alt_dev_reg
0c023130 l     O .rwdata	00001060 jtag_uart_0
0c024190 l     O .rwdata	0000002c character_lcd_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0c015a98 l     F .text	00000204 altera_avalon_jtag_uart_irq
0c015c9c l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0c0162bc l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0c016b14 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0c017050 l     F .text	000000c0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
0c017188 l     F .text	00000050 alt_get_errno
0c0171d8 l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0c009848 g     F .text	00000018 putchar
0c00f7d4 g     F .text	00000074 _mprec_log10
0c00f8c0 g     F .text	0000008c __any_on
0c012068 g     F .text	00000054 _isatty_r
0c007720 g     F .text	0000008c init_serial
0c022560 g     O .rodata	00000028 __mprec_tinytens
0c015308 g     F .text	00000078 alt_main
0c009860 g     F .text	000000b8 _puts_r
0c0a8128 g     O .bss	00000100 alt_irq
0c000c24 g     F .text	000000b0 vertical_line
0c0120bc g     F .text	0000005c _lseek_r
0c0a6080 g     O .bss	00000065 camera_buffer
0c024214 g       *ABS*	00000000 __flash_rwdata_start
0c01642c g     F .text	0000003c alt_up_character_lcd_send_cmd
0c013760 g     F .text	00000084 .hidden __eqdf2
0c00060c g     F .text	00000030 resume_picture
0c000560 g     F .text	0000007c set_image_resolution
0c0a8228 g       *ABS*	00000000 __alt_heap_start
0c0067c8 g     F .text	0000003c njInit
0c025d47 g     O .bss	00000001 motor_speed
0c01036c g     F .text	00000058 _kill_r
0c0016cc g     F .text	000007c4 draw_button
0c009804 g     F .text	0000003c printf
0c017e5a g     O .rodata	00000a64 Font10x14
0c012174 g     F .text	0000009c _wcrtomb_r
0c0a60e8 g     O .bss	00001f40 XYStack
0c010130 g     F .text	00000084 _signal_r
0c000b74 g     F .text	000000b0 horizontal_line
0c000d74 g     F .text	0000008c rectangle
0c0104a0 g     F .text	0000005c __sseek
0c00da6c g     F .text	00000010 __sinit
0c011a3c g     F .text	00000154 __swbuf_r
0c000384 g     F .text	000000ac run_command
0c00e4e4 g     F .text	0000007c _setlocale_r
0c007c44 g     F .text	00000030 WaitForTouch
0c00d8d8 g     F .text	00000064 __sfmoreglue
0c003340 g     F .text	0000008c security_callback
0c0153a0 g     F .text	00000020 __malloc_unlock
0c0068cc g     F .text	00000218 njDecode
0c007b94 g     F .text	00000080 init_touch
0c0079a4 g     F .text	00000090 serial_read_timeout
0c0028bc g     F .text	000000e0 poll_touch
0c00e864 g     F .text	0000015c memmove
0c000e00 g     F .text	00000158 right_triangle
0c00da54 g     F .text	00000018 _cleanup
0c00e9c0 g     F .text	000000a8 _Balloc
0c0137e4 g     F .text	000000e0 .hidden __gtdf2
00000000  w      *UND*	00000000 __errno
0c0163b8 g     F .text	00000074 get_DDRAM_addr
0c007a34 g     F .text	00000030 test_for_received_data
0c000000 g     F .entry	0000001c __reset
0c025d48 g     O .bss	00000001 edge_capture
0c000020 g       *ABS*	00000000 __flash_exceptions_start
0c000730 g     F .text	00000044 camera_reset
0c012010 g     F .text	00000058 _fstat_r
0c0077ac g     F .text	00000050 enable_device_recv_irq
0c006b0c g     F .text	00000028 njGetHeight
0c025d58 g     O .bss	00000004 errno
0c01041c g     F .text	00000008 __seofread
0c025d70 g     O .bss	00000004 alt_argv
0c02c1bc g       *ABS*	00000000 _gp
0c01561c g     F .text	00000030 usleep
0c014cbc g     F .text	00000020 getpid
0c022fb0 g     O .rwdata	00000180 alt_fd_list
0c009840 g     F .text	00000008 _putchar_r
0c016cc0 g     F .text	00000090 alt_find_dev
0c00957c g     F .text	00000138 memcpy
0c0165c8 g     F .text	00000050 alt_up_character_lcd_write_fd
0c002534 g     F .text	00000190 OutGraphicsCharFont2a
0c00d72c g     F .text	0000000c _cleanup_r
0c008a78 g     F .text	000000d0 .hidden __floatsidf
0c017110 g     F .text	00000078 alt_io_redirect
0c0138c4 g     F .text	000000e0 .hidden __ltdf2
0c017b7c g       *ABS*	00000000 __DTOR_END__
0c006c04 g     F .text	000006e8 cam_unit_test
0c009918 g     F .text	00000014 puts
0c007e34 g     F .text	00000178 get_press
0c0075c8 g     F .text	000000a8 move_right
0c010054 g     F .text	00000074 __fpclassifyd
0c00f730 g     F .text	000000a4 __ratio
0c0034d4 g     F .text	000000a8 right_callback
0c025d44 g     O .bss	00000002 frame_ptr
0c011a18 g     F .text	00000024 __vfiprintf_internal
0c015e98 g     F .text	0000020c altera_avalon_jtag_uart_read
0c008dac g     F .text	00000014 malloc
0c007524 g     F .text	000000a4 move_left
0c0097d8 g     F .text	0000002c _printf_r
0c008cc8 g     F .text	00000008 .hidden __udivsi3
0c014edc g     F .text	000000a4 isatty
0c0101b4 g     F .text	000000bc _raise_r
0c008cd8 g     F .text	00000064 __assert_func
0c0225b0 g     O .rodata	000000c8 __mprec_tens
0c00342c g     F .text	000000a8 left_callback
0c01c950 g     O .rodata	00005794 Font38x59
0c00e560 g     F .text	0000000c __locale_charset
0c00299c g     F .text	00000380 retrieve_and_process_image
0c017780 g     F .text	0000008c alt_icache_flush
0c025d54 g     O .bss	00000004 __malloc_top_pad
0c00063c g     F .text	000000f4 frame_length
0c0103c4 g     F .text	00000004 _getpid_r
0c007468 g     F .text	000000bc move_down
0c0241c0 g     O .rwdata	00000004 Next
0c0241e4 g     O .rwdata	00000004 __mb_cur_max
0c007fac g     F .text	00000178 get_release
0c00e590 g     F .text	0000000c _localeconv_r
0c0027ac g     F .text	000000a8 print_image
0c00edc0 g     F .text	0000003c __i2b
0c00ded0 g     F .text	000004a4 __sfvwrite_r
0c010270 g     F .text	000000a8 __sigtramp_r
0c001208 g     F .text	00000158 up_triangle
0c00992c g     F .text	00000054 _sbrk_r
0c012118 g     F .text	0000005c _read_r
0c0241fc g     O .rwdata	00000004 alt_max_fd
0c011d20 g     F .text	00000100 _fclose_r
0c000cd4 g     F .text	000000a0 line
0c00d6ec g     F .text	00000030 fflush
0c025d50 g     O .bss	00000004 __malloc_max_sbrked_mem
0c014cdc g     F .text	000001b0 alt_irq_register
0c012ec4 g     F .text	0000089c .hidden __adddf3
0c00f4d8 g     F .text	0000011c __b2d
0c012934 g     F .text	00000590 .hidden __umoddi3
0c015234 g     F .text	000000d4 lseek
0c0241d4 g     O .rwdata	00000004 _global_impure_ptr
0c00fab4 g     F .text	000005a0 _realloc_r
0c0a8228 g       *ABS*	00000000 __bss_end
0c016f60 g     F .text	000000f0 alt_iic_isr_register
0c017494 g     F .text	00000104 alt_tick
0c012374 g     F .text	000005c0 .hidden __udivdi3
0c0009ec g     F .text	0000007c write_a_pixel
0c011e34 g     F .text	00000184 _fputwc_r
0c022588 g     O .rodata	00000028 __mprec_bigtens
0c00eba4 g     F .text	00000104 __s2b
0c00bb84 g     F .text	00000018 abort
0c014998 g     F .text	000000a4 .hidden __floatunsidf
0c00f280 g     F .text	00000060 __mcmp
0c00159c g     F .text	00000098 reticle
0c00da8c g     F .text	00000018 __fp_lock_all
0c016f14 g     F .text	0000004c alt_ic_irq_enabled
0c000a68 g     F .text	00000090 read_a_pixel
0c0173fc g     F .text	00000098 alt_alarm_stop
0c0188be g     O .rodata	0000140a Font16x27
0c025d68 g     O .bss	00000004 alt_irq_active
0c0000ec g     F .exceptions	000000d0 alt_irq_handler
0c022f88 g     O .rwdata	00000028 alt_dev_null
0c007b24 g     F .text	00000070 verify_touch_report
0c025d46 g     O .bss	00000001 buffer_length
0c001f84 g     F .text	00000404 fill
0c002388 g     F .text	000001ac OutGraphicsCharFont1
0c01685c g     F .text	00000034 alt_up_character_lcd_cursor_blink_on
0c016af8 g     F .text	0000001c alt_dcache_flush_all
0c00eca8 g     F .text	00000068 __hi0bits
0c002854 g     F .text	00000068 check_if_pressed
0c0002fc g     F .text	00000088 verify_response
0c000430 g     F .text	00000058 camera_frame_buff_ctrl
0c0089f0 g     F .text	00000088 .hidden __fixdfsi
0c024214 g       *ABS*	00000000 __ram_rwdata_end
0c0241f4 g     O .rwdata	00000008 alt_dev_list
0c01569c g     F .text	000000f8 write
0c00f94c g     F .text	000000a0 _putc_r
0c003228 g     F .text	0000008c manual_callback
0c0226e4 g       *ABS*	00000000 __ram_rodata_end
0c014c0c g     F .text	000000b0 fstat
0c014fd0 g     F .text	00000130 kill
0c0138c4 g     F .text	000000e0 .hidden __ledf2
0c00781c g     F .text	00000054 serial_putchar
0c007c14 g     F .text	00000030 ScreenTouched
0c007370 g     F .text	00000040 init_motors
0c00eff8 g     F .text	00000140 __pow5mult
0c025d64 g     O .bss	00000004 __nlocale_changed
0c0106bc g     F .text	0000135c ___vfiprintf_internal_r
0c008cd0 g     F .text	00000008 .hidden __umodsi3
0c0a8228 g       *ABS*	00000000 end
0c0159d4 g     F .text	000000c4 altera_avalon_jtag_uart_init
0c017b7c g       *ABS*	00000000 __CTOR_LIST__
10000000 g       *ABS*	00000000 __alt_stack_pointer
0c016330 g     F .text	00000088 alt_avalon_timer_sc_init
0c008b48 g     F .text	00000064 .hidden __clzsi2
0c0160a4 g     F .text	00000218 altera_avalon_jtag_uart_write
0c00da7c g     F .text	00000004 __sfp_lock_acquire
0c00e77c g     F .text	000000e8 memchr
0c0164dc g     F .text	00000078 alt_up_character_lcd_write
0c009a34 g     F .text	00001ffc ___vfprintf_internal_r
0c001360 g     F .text	000001e0 circle
0c00dbe0 g     F .text	000002f0 _free_r
0c00e56c g     F .text	00000010 __locale_mb_cur_max
0c001e90 g     F .text	0000005c push_pixel
0c0179e8 g     F .text	00000194 __call_exitprocs
0c025d60 g     O .bss	00000004 __mlocale_changed
0c0241dc g     O .rwdata	00000004 __malloc_sbrk_base
0c0001bc g     F .text	0000003c _start
0c025d78 g     O .bss	00000004 _alt_tick_rate
0c00f138 g     F .text	00000148 __lshift
0c025d7c g     O .bss	00000004 _alt_nticks
0c01032c g     F .text	0000001c signal
0c015410 g     F .text	000000fc read
0c015800 g     F .text	00000070 alt_sys_init
0c016714 g     F .text	00000088 alt_up_character_lcd_shift_display
0c0077fc g     F .text	00000020 test_irq
0c0178d4 g     F .text	00000114 __register_exitproc
0c007ae0 g     F .text	00000044 get_raw_coordinates
0c00edfc g     F .text	000001fc __multiply
0c01679c g     F .text	0000008c alt_up_character_lcd_erase_pos
0c000974 g     F .text	00000078 print_byte_array
0c006ae4 g     F .text	00000028 njGetWidth
0c015d44 g     F .text	00000068 altera_avalon_jtag_uart_close
0c0226e4 g       *ABS*	00000000 __ram_rwdata_start
0c017b7c g       *ABS*	00000000 __ram_rodata_start
0c0a6058 g     O .bss	00000028 __malloc_current_mallinfo
0c00f5f4 g     F .text	0000013c __d2b
0c015870 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0c0176cc g     F .text	000000b4 alt_get_fd
0c0169d0 g     F .text	00000128 alt_busy_sleep
0c011c08 g     F .text	00000054 _close_r
0c001634 g     F .text	00000098 print_display
0c017858 g     F .text	0000007c memcmp
0c015930 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0c0073b0 g     F .text	000000b8 move_up
0c0a8228 g       *ABS*	00000000 __alt_stack_base
0c015980 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0c00ba54 g     F .text	00000130 __swsetup_r
0c008124 g     F .text	000008cc .hidden __divdf3
0c00d93c g     F .text	00000118 __sfp
0c00f848 g     F .text	00000078 __copybits
0c000270 g     F .text	0000008c read_response
0c022b08 g     O .rwdata	00000408 __malloc_av_
0c00da88 g     F .text	00000004 __sinit_lock_release
0c0078b4 g     F .text	0000007c serial_write
0c0139a4 g     F .text	00000724 .hidden __muldf3
0c0103c8 g     F .text	00000054 __sread
0c0175b8 g     F .text	00000114 alt_find_file
0c016b64 g     F .text	000000a4 alt_dev_llist_insert
0c015380 g     F .text	00000020 __malloc_lock
0c01556c g     F .text	000000b0 sbrk
0c00d4c4 g     F .text	00000228 _fflush_r
0c011c5c g     F .text	000000c4 _calloc_r
0c0001f8 g     F .text	00000078 send_command
0c006b34 g     F .text	00000030 njIsColor
0c025d44 g       *ABS*	00000000 __bss_start
0c0096b4 g     F .text	00000124 memset
0c0072ec g     F .text	00000084 main
0c025d74 g     O .bss	00000004 alt_envp
0c025d4c g     O .bss	00000004 __malloc_max_total_mem
0c0158d0 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0c011b90 g     F .text	0000001c __swbuf
0c003624 g     F .text	000000a8 down_callback
0c01668c g     F .text	00000088 alt_up_character_lcd_shift_cursor
0c007670 g     F .text	00000070 set_motor_speed
0c0104fc g     F .text	00000008 __sclose
10000000 g       *ABS*	00000000 __alt_heap_limit
0c011e20 g     F .text	00000014 fclose
0c00bd9c g     F .text	00001728 _dtoa_r
0c008dd4 g     F .text	000007a8 _malloc_r
0c0122e8 g     F .text	00000030 __ascii_wctomb
0c0004d4 g     F .text	0000008c get_image_resolution
0c024200 g     O .rwdata	00000004 alt_errno
0c007c74 g     F .text	000001c0 get_press_timeout
0c008d50 g     F .text	00000020 _fiprintf_r
0c010348 g     F .text	00000010 _init_signal
0c00e374 g     F .text	000000b8 _fwalk
0c00f9ec g     F .text	000000c8 putc
0c008c18 g     F .text	00000054 .hidden __divsi3
0c01649c g     F .text	00000040 alt_up_character_lcd_open_dev
0c00dabc g     F .text	00000124 _malloc_trim_r
0c017b7c g       *ABS*	00000000 __CTOR_END__
0c0241d0 g     O .rwdata	00000003 ENABLE_TOUCH_COMMAND
0c0031ac g     F .text	0000007c proccess_buttons
0c016468 g     F .text	00000034 alt_up_character_lcd_init
0c010504 g     F .text	000000a4 strcmp
0c017b7c g       *ABS*	00000000 __flash_rodata_start
0c017b7c g       *ABS*	00000000 __DTOR_LIST__
0c001eec g     F .text	00000060 pop_pixel
0c007a64 g     F .text	0000007c wait_for_received_data
0c013760 g     F .text	00000084 .hidden __nedf2
0c0157cc g     F .text	00000034 alt_irq_init
0c01550c g     F .text	00000060 alt_release_fd
0c016828 g     F .text	00000034 alt_up_character_lcd_cursor_off
0c02238c g     O .rodata	00000100 .hidden __clz_tab
0c025d5c g     O .bss	00000004 _PathLocale
0c0026c4 g     F .text	000000e8 init_palette
0c01780c g     F .text	00000014 atexit
0c011bac g     F .text	0000005c _write_r
0c00086c g     F .text	00000108 read_picture_to_ptr
0c00e59c g     F .text	0000001c setlocale
0c0241d8 g     O .rwdata	00000004 _impure_ptr
0c025d6c g     O .bss	00000004 alt_argc
0c016c64 g     F .text	0000005c _do_dtors
0c00e588 g     F .text	00000008 __locale_cjk_lang
0c0032b4 g     F .text	0000008c automatic_callback
0c017bc0 g     O .rodata	00000299 Font5x7
0c000020 g       .exceptions	00000000 alt_irq_entry
0c00f478 g     F .text	00000060 __ulp
0c00daa4 g     F .text	00000018 __fp_unlock_all
0c0241c4 g     O .rwdata	00000004 button_array_size
0c0241ec g     O .rwdata	00000008 alt_fs_list
0c000774 g     F .text	000000f8 read_picture
0c002d1c g     F .text	00000490 init_gui
0c000020 g       *ABS*	00000000 __ram_exceptions_start
0c00e5b8 g     F .text	0000000c localeconv
0c007930 g     F .text	00000074 serial_read
0c016d80 g     F .text	00000050 alt_ic_isr_register
0c024214 g       *ABS*	00000000 _edata
0c0a8228 g       *ABS*	00000000 _end
0c0001bc g       *ABS*	00000000 __ram_exceptions_end
0c015dac g     F .text	000000ec altera_avalon_jtag_uart_ioctl
0c0010b0 g     F .text	00000158 down_triangle
0c001f4c g     F .text	00000038 is_stack_empty
0c0033cc g     F .text	00000060 fire_callback
0c016e70 g     F .text	000000a4 alt_ic_irq_disable
0c0036cc g     F .text	0000009c buttons_not_pressed
0c010424 g     F .text	0000007c __swrite
0c0241e0 g     O .rwdata	00000004 __malloc_trim_threshold
0c017598 g     F .text	00000020 altera_nios2_qsys_irq_init
0c00e57c g     F .text	0000000c __locale_msgcharset
0c017820 g     F .text	00000038 exit
0c008d70 g     F .text	0000003c fiprintf
0c009a18 g     F .text	0000001c _vfiprintf_r
0c00e42c g     F .text	000000b8 _fwalk_reent
0c00f2e0 g     F .text	00000198 __mdiff
0c008c6c g     F .text	0000005c .hidden __modsi3
10000000 g       *ABS*	00000000 __alt_data_end
0c000020 g     F .exceptions	00000000 alt_exception
0c006bbc g     F .text	00000048 njGetImageSize
0c00da80 g     F .text	00000004 __sfp_lock_release
0c000000 g       *ABS*	00000000 __alt_mem_sdram
0c016554 g     F .text	00000074 alt_up_character_lcd_string
0c006b64 g     F .text	00000058 njGetImage
0c019cc8 g     O .rodata	00002c88 Font22x40
0c0005dc g     F .text	00000030 take_picture
0c014b88 g     F .text	00000034 _exit
0c016890 g     F .text	00000140 alt_alarm_start
0c000488 g     F .text	0000004c cam_init
0c00e5c4 g     F .text	000001b8 __smakebuf_r
0c009980 g     F .text	00000098 strlen
0c0100c8 g     F .text	00000068 _init_signal_r
0c0172a4 g     F .text	00000158 open
0c0137e4 g     F .text	000000e0 .hidden __gedf2
0c006804 g     F .text	000000c8 njDone
0c008d3c g     F .text	00000014 __assert
0c0241e8 g     O .rwdata	00000004 __wctomb
0c0106a4 g     F .text	00000018 __sprint_r
0c016d50 g     F .text	00000030 alt_icache_flush_all
0c00357c g     F .text	000000a8 up_callback
0c016618 g     F .text	00000074 alt_up_character_lcd_set_cursor_pos
0c024204 g     O .rwdata	00000004 alt_priority_mask
0c007870 g     F .text	00000044 serial_getchar
0c000f58 g     F .text	00000158 left_triangle
0c000af8 g     F .text	0000007c program_palette
0c016dd0 g     F .text	000000a0 alt_ic_irq_enable
0c00ba30 g     F .text	00000024 __vfprintf_internal
0c012318 g     F .text	0000005c _wctomb_r
0c001540 g     F .text	0000005c clear_screen
0c0140c8 g     F .text	000008d0 .hidden __subdf3
0c00ed10 g     F .text	000000b0 __lo0bits
0c02420c g     O .rwdata	00000008 alt_alarm_list
0c016c08 g     F .text	0000005c _do_ctors
0c010358 g     F .text	00000014 __sigtramp
0c0a8028 g     O .bss	00000100 button_array
0c012210 g     F .text	000000d8 wcrtomb
0c014a8c g     F .text	000000d0 close
0c015164 g     F .text	00000080 alt_load
0c0241bc g     O .rwdata	00000002 COMMAND_HEADER
0c011fb8 g     F .text	00000058 fputwc
0c010318 g     F .text	00000014 raise
0c008dc0 g     F .text	00000014 free
0c00da84 g     F .text	00000004 __sinit_lock_acquire
0c00ea90 g     F .text	00000114 __multadd
0c00ea68 g     F .text	00000028 _Bfree



Disassembly of section .entry:

0c000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 c000000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 c000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 c000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 c00000c:	00bffd16 	blt	zero,r2,c000004 <__alt_data_end+0xfc000004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 c000010:	00430034 	movhi	at,3072
    ori r1, r1, %lo(_start)
 c000014:	08406f14 	ori	at,at,444
    jmp r1
 c000018:	0800683a 	jmp	at
 c00001c:	00000000 	call	0 <__alt_mem_sdram-0xc000000>

Disassembly of section .exceptions:

0c000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 c000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 c000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 c000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 c00002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 c000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 c000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 c000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 c00003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 c000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 c000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 c000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 c00004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 c000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 c000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 c000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 c00005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 c000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 c000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 c000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 c00006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 c000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 c000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 c000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 c00007c:	10000326 	beq	r2,zero,c00008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 c000080:	20000226 	beq	r4,zero,c00008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 c000084:	c0000ec0 	call	c0000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 c000088:	00000306 	br	c000098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 c00008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 c000090:	e8bfff17 	ldw	r2,-4(ea)

0c000094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 c000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 c000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 c00009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 c0000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 c0000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 c0000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 c0000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 c0000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 c0000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 c0000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 c0000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 c0000c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 c0000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 c0000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 c0000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 c0000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 c0000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 c0000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 c0000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 c0000e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 c0000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 c0000e8:	ef80083a 	eret

0c0000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 c0000ec:	defff904 	addi	sp,sp,-28
 c0000f0:	dfc00615 	stw	ra,24(sp)
 c0000f4:	df000515 	stw	fp,20(sp)
 c0000f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 c0000fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 c000100:	0005313a 	rdctl	r2,ipending
 c000104:	e0bffe15 	stw	r2,-8(fp)

  return active;
 c000108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 c00010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 c000110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 c000114:	00800044 	movi	r2,1
 c000118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 c00011c:	e0fffb17 	ldw	r3,-20(fp)
 c000120:	e0bffc17 	ldw	r2,-16(fp)
 c000124:	1884703a 	and	r2,r3,r2
 c000128:	10001426 	beq	r2,zero,c00017c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 c00012c:	008302f4 	movhi	r2,3083
 c000130:	10a04a04 	addi	r2,r2,-32472
 c000134:	e0fffd17 	ldw	r3,-12(fp)
 c000138:	180690fa 	slli	r3,r3,3
 c00013c:	10c5883a 	add	r2,r2,r3
 c000140:	10c00017 	ldw	r3,0(r2)
 c000144:	008302f4 	movhi	r2,3083
 c000148:	10a04a04 	addi	r2,r2,-32472
 c00014c:	e13ffd17 	ldw	r4,-12(fp)
 c000150:	200890fa 	slli	r4,r4,3
 c000154:	1105883a 	add	r2,r2,r4
 c000158:	10800104 	addi	r2,r2,4
 c00015c:	10800017 	ldw	r2,0(r2)
 c000160:	1009883a 	mov	r4,r2
 c000164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 c000168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 c00016c:	0005313a 	rdctl	r2,ipending
 c000170:	e0bfff15 	stw	r2,-4(fp)

  return active;
 c000174:	e0bfff17 	ldw	r2,-4(fp)
 c000178:	00000706 	br	c000198 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 c00017c:	e0bffc17 	ldw	r2,-16(fp)
 c000180:	1085883a 	add	r2,r2,r2
 c000184:	e0bffc15 	stw	r2,-16(fp)
      i++;
 c000188:	e0bffd17 	ldw	r2,-12(fp)
 c00018c:	10800044 	addi	r2,r2,1
 c000190:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 c000194:	003fe106 	br	c00011c <__alt_data_end+0xfc00011c>

    active = alt_irq_pending ();
 c000198:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 c00019c:	e0bffb17 	ldw	r2,-20(fp)
 c0001a0:	103fdb1e 	bne	r2,zero,c000110 <__alt_data_end+0xfc000110>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 c0001a4:	0001883a 	nop
}
 c0001a8:	e037883a 	mov	sp,fp
 c0001ac:	dfc00117 	ldw	ra,4(sp)
 c0001b0:	df000017 	ldw	fp,0(sp)
 c0001b4:	dec00204 	addi	sp,sp,8
 c0001b8:	f800283a 	ret

Disassembly of section .text:

0c0001bc <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 c0001bc:	06c40034 	movhi	sp,4096
    ori sp, sp, %lo(__alt_stack_pointer)
 c0001c0:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 c0001c4:	068300b4 	movhi	gp,3074
    ori gp, gp, %lo(_gp)
 c0001c8:	d6b06f14 	ori	gp,gp,49596
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 c0001cc:	008300b4 	movhi	r2,3074
    ori r2, r2, %lo(__bss_start)
 c0001d0:	10975114 	ori	r2,r2,23876

    movhi r3, %hi(__bss_end)
 c0001d4:	00c302b4 	movhi	r3,3082
    ori r3, r3, %lo(__bss_end)
 c0001d8:	18e08a14 	ori	r3,r3,33320

    beq r2, r3, 1f
 c0001dc:	10c00326 	beq	r2,r3,c0001ec <_start+0x30>

0:
    stw zero, (r2)
 c0001e0:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 c0001e4:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 c0001e8:	10fffd36 	bltu	r2,r3,c0001e0 <__alt_data_end+0xfc0001e0>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 c0001ec:	c0151640 	call	c015164 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 c0001f0:	c0153080 	call	c015308 <alt_main>

0c0001f4 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 c0001f4:	003fff06 	br	c0001f4 <__alt_data_end+0xfc0001f4>

0c0001f8 <send_command>:

//===================================================================
// Private Function Definitions
//===================================================================
void send_command(uint8_t cmd, uint8_t *command_args, uint8_t args_length)
{
 c0001f8:	defffb04 	addi	sp,sp,-20
 c0001fc:	dfc00415 	stw	ra,16(sp)
 c000200:	df000315 	stw	fp,12(sp)
 c000204:	df000304 	addi	fp,sp,12
 c000208:	2007883a 	mov	r3,r4
 c00020c:	e17ffe15 	stw	r5,-8(fp)
 c000210:	3005883a 	mov	r2,r6
 c000214:	e0fffd05 	stb	r3,-12(fp)
 c000218:	e0bfff05 	stb	r2,-4(fp)
    // The format of every message is :
    // [SYNC BYTE | SERIAL ID BYTE | COMMAND_BYTE | COMMAND_ARG_BYTES]
    serial_write(CAMERA, COMMAND_HEADER, 2);
 c00021c:	01210034 	movhi	r4,33792
 c000220:	21008404 	addi	r4,r4,528
 c000224:	d1600004 	addi	r5,gp,-32768
 c000228:	01800084 	movi	r6,2
 c00022c:	c0078b40 	call	c0078b4 <serial_write>
    serial_write(CAMERA, &cmd, 1);
 c000230:	01210034 	movhi	r4,33792
 c000234:	21008404 	addi	r4,r4,528
 c000238:	e17ffd04 	addi	r5,fp,-12
 c00023c:	01800044 	movi	r6,1
 c000240:	c0078b40 	call	c0078b4 <serial_write>
    serial_write(CAMERA, command_args, args_length);
 c000244:	e0bfff03 	ldbu	r2,-4(fp)
 c000248:	01210034 	movhi	r4,33792
 c00024c:	21008404 	addi	r4,r4,528
 c000250:	e17ffe17 	ldw	r5,-8(fp)
 c000254:	100d883a 	mov	r6,r2
 c000258:	c0078b40 	call	c0078b4 <serial_write>
}
 c00025c:	e037883a 	mov	sp,fp
 c000260:	dfc00117 	ldw	ra,4(sp)
 c000264:	df000017 	ldw	fp,0(sp)
 c000268:	dec00204 	addi	sp,sp,8
 c00026c:	f800283a 	ret

0c000270 <read_response>:
 *             bytes.
 * \return This function returns the amount of bytes that it managed to read
 *         from the serial interface before the timeout.
 */
uint8_t read_response(uint8_t numbytes, uint8_t timeout)
{
 c000270:	defffc04 	addi	sp,sp,-16
 c000274:	dfc00315 	stw	ra,12(sp)
 c000278:	df000215 	stw	fp,8(sp)
 c00027c:	df000204 	addi	fp,sp,8
 c000280:	2007883a 	mov	r3,r4
 c000284:	2805883a 	mov	r2,r5
 c000288:	e0fffe05 	stb	r3,-8(fp)
 c00028c:	e0bfff05 	stb	r2,-4(fp)
    // Ensure that we don't overrun the global recv buffer.
    assert(numbytes <= CAMERA_BUFFER_SIZE);
 c000290:	e0bffe03 	ldbu	r2,-8(fp)
 c000294:	10801970 	cmpltui	r2,r2,101
 c000298:	1000081e 	bne	r2,zero,c0002bc <read_response+0x4c>
 c00029c:	01030074 	movhi	r4,3073
 c0002a0:	211edf04 	addi	r4,r4,31612
 c0002a4:	01401344 	movi	r5,77
 c0002a8:	01830074 	movhi	r6,3073
 c0002ac:	319eea04 	addi	r6,r6,31656
 c0002b0:	01c30074 	movhi	r7,3073
 c0002b4:	39dee204 	addi	r7,r7,31624
 c0002b8:	c008cd80 	call	c008cd8 <__assert_func>

    buffer_length = serial_read_timeout(CAMERA, camera_buffer,
 c0002bc:	e0bffe03 	ldbu	r2,-8(fp)
 c0002c0:	01210034 	movhi	r4,33792
 c0002c4:	21008404 	addi	r4,r4,528
 c0002c8:	014302b4 	movhi	r5,3082
 c0002cc:	29582004 	addi	r5,r5,24704
 c0002d0:	100d883a 	mov	r6,r2
 c0002d4:	01c00074 	movhi	r7,1
 c0002d8:	39c45c04 	addi	r7,r7,4464
 c0002dc:	c0079a40 	call	c0079a4 <serial_read_timeout>
 c0002e0:	d0a6e285 	stb	r2,-25718(gp)
                                        numbytes, STD_WAIT);
//    print_byte_array(camera_buffer, buffer_length);
    return buffer_length;
 c0002e4:	d0a6e283 	ldbu	r2,-25718(gp)
}
 c0002e8:	e037883a 	mov	sp,fp
 c0002ec:	dfc00117 	ldw	ra,4(sp)
 c0002f0:	df000017 	ldw	fp,0(sp)
 c0002f4:	dec00204 	addi	sp,sp,8
 c0002f8:	f800283a 	ret

0c0002fc <verify_response>:
 * \param [in] cmd, The command byte sent.
 * \return This function returns 1 if the response from the device is well
 *         formed, else it returns 0.
 */
int verify_response(uint8_t cmd)
{
 c0002fc:	defffe04 	addi	sp,sp,-8
 c000300:	df000115 	stw	fp,4(sp)
 c000304:	df000104 	addi	fp,sp,4
 c000308:	2005883a 	mov	r2,r4
 c00030c:	e0bfff05 	stb	r2,-4(fp)
    // A well formed message consists of the following:
    // [RESPONSE_BYTE | SERIAL_ID | cmd | 0x00]
    if ((camera_buffer[0] != RESPONSE_BYTE) ||
 c000310:	008302b4 	movhi	r2,3082
 c000314:	10982004 	addi	r2,r2,24704
 c000318:	10800003 	ldbu	r2,0(r2)
 c00031c:	10803fcc 	andi	r2,r2,255
 c000320:	10801d98 	cmpnei	r2,r2,118
 c000324:	1000101e 	bne	r2,zero,c000368 <verify_response+0x6c>
        (camera_buffer[1] != SERIAL_ID) ||
 c000328:	008302b4 	movhi	r2,3082
 c00032c:	10982004 	addi	r2,r2,24704
 c000330:	10800043 	ldbu	r2,1(r2)
 */
int verify_response(uint8_t cmd)
{
    // A well formed message consists of the following:
    // [RESPONSE_BYTE | SERIAL_ID | cmd | 0x00]
    if ((camera_buffer[0] != RESPONSE_BYTE) ||
 c000334:	10803fcc 	andi	r2,r2,255
 c000338:	10000b1e 	bne	r2,zero,c000368 <verify_response+0x6c>
        (camera_buffer[1] != SERIAL_ID) ||
        (camera_buffer[2] != cmd) ||
 c00033c:	008302b4 	movhi	r2,3082
 c000340:	10982004 	addi	r2,r2,24704
 c000344:	10800083 	ldbu	r2,2(r2)
int verify_response(uint8_t cmd)
{
    // A well formed message consists of the following:
    // [RESPONSE_BYTE | SERIAL_ID | cmd | 0x00]
    if ((camera_buffer[0] != RESPONSE_BYTE) ||
        (camera_buffer[1] != SERIAL_ID) ||
 c000348:	10c03fcc 	andi	r3,r2,255
 c00034c:	e0bfff03 	ldbu	r2,-4(fp)
 c000350:	1880051e 	bne	r3,r2,c000368 <verify_response+0x6c>
        (camera_buffer[2] != cmd) ||
        (camera_buffer[3] != 0x00))
 c000354:	008302b4 	movhi	r2,3082
 c000358:	10982004 	addi	r2,r2,24704
 c00035c:	108000c3 	ldbu	r2,3(r2)
{
    // A well formed message consists of the following:
    // [RESPONSE_BYTE | SERIAL_ID | cmd | 0x00]
    if ((camera_buffer[0] != RESPONSE_BYTE) ||
        (camera_buffer[1] != SERIAL_ID) ||
        (camera_buffer[2] != cmd) ||
 c000360:	10803fcc 	andi	r2,r2,255
 c000364:	10000226 	beq	r2,zero,c000370 <verify_response+0x74>
        (camera_buffer[3] != 0x00))
            return 0;
 c000368:	0005883a 	mov	r2,zero
 c00036c:	00000106 	br	c000374 <verify_response+0x78>

    return 1;
 c000370:	00800044 	movi	r2,1
}
 c000374:	e037883a 	mov	sp,fp
 c000378:	df000017 	ldw	fp,0(sp)
 c00037c:	dec00104 	addi	sp,sp,4
 c000380:	f800283a 	ret

0c000384 <run_command>:
 * \return This function returns 1 if the response from the device is well
 *         formed, else it returns 0.
 */
int run_command(uint8_t cmd, uint8_t *command_args, uint8_t command_arg_length,
                uint8_t response_length, int flush_buffer)
{
 c000384:	defff904 	addi	sp,sp,-28
 c000388:	dfc00615 	stw	ra,24(sp)
 c00038c:	df000515 	stw	fp,20(sp)
 c000390:	df000504 	addi	fp,sp,20
 c000394:	e17ffd15 	stw	r5,-12(fp)
 c000398:	3007883a 	mov	r3,r6
 c00039c:	3805883a 	mov	r2,r7
 c0003a0:	e13ffc05 	stb	r4,-16(fp)
 c0003a4:	e0fffe05 	stb	r3,-8(fp)
 c0003a8:	e0bfff05 	stb	r2,-4(fp)
    if (flush_buffer)
 c0003ac:	e0800217 	ldw	r2,8(fp)
 c0003b0:	10000326 	beq	r2,zero,c0003c0 <run_command+0x3c>
        read_response(CAMERA_BUFFER_SIZE, 10);
 c0003b4:	01001904 	movi	r4,100
 c0003b8:	01400284 	movi	r5,10
 c0003bc:	c0002700 	call	c000270 <read_response>

    send_command(cmd, command_args, command_arg_length);
 c0003c0:	e0fffc03 	ldbu	r3,-16(fp)
 c0003c4:	e0bffe03 	ldbu	r2,-8(fp)
 c0003c8:	1809883a 	mov	r4,r3
 c0003cc:	e17ffd17 	ldw	r5,-12(fp)
 c0003d0:	100d883a 	mov	r6,r2
 c0003d4:	c0001f80 	call	c0001f8 <send_command>
    uint8_t received_response_length = read_response(response_length, STD_WAIT);
 c0003d8:	e0bfff03 	ldbu	r2,-4(fp)
 c0003dc:	1009883a 	mov	r4,r2
 c0003e0:	01401c04 	movi	r5,112
 c0003e4:	c0002700 	call	c000270 <read_response>
 c0003e8:	e0bffb05 	stb	r2,-20(fp)
    if (received_response_length != response_length)
 c0003ec:	e0fffb03 	ldbu	r3,-20(fp)
 c0003f0:	e0bfff03 	ldbu	r2,-4(fp)
 c0003f4:	18800226 	beq	r3,r2,c000400 <run_command+0x7c>
        return 0;
 c0003f8:	0005883a 	mov	r2,zero
 c0003fc:	00000706 	br	c00041c <run_command+0x98>

    if (!verify_response(cmd))
 c000400:	e0bffc03 	ldbu	r2,-16(fp)
 c000404:	1009883a 	mov	r4,r2
 c000408:	c0002fc0 	call	c0002fc <verify_response>
 c00040c:	1000021e 	bne	r2,zero,c000418 <run_command+0x94>
        return 0;
 c000410:	0005883a 	mov	r2,zero
 c000414:	00000106 	br	c00041c <run_command+0x98>

    return 1;
 c000418:	00800044 	movi	r2,1

}
 c00041c:	e037883a 	mov	sp,fp
 c000420:	dfc00117 	ldw	ra,4(sp)
 c000424:	df000017 	ldw	fp,0(sp)
 c000428:	dec00204 	addi	sp,sp,8
 c00042c:	f800283a 	ret

0c000430 <camera_frame_buff_ctrl>:

int camera_frame_buff_ctrl(uint8_t command)
{
 c000430:	defffb04 	addi	sp,sp,-20
 c000434:	dfc00415 	stw	ra,16(sp)
 c000438:	df000315 	stw	fp,12(sp)
 c00043c:	df000304 	addi	fp,sp,12
 c000440:	2005883a 	mov	r2,r4
 c000444:	e0bfff05 	stb	r2,-4(fp)
	uint8_t args[] = {0x1, command};
 c000448:	00800044 	movi	r2,1
 c00044c:	e0bffe05 	stb	r2,-8(fp)
 c000450:	e0bfff03 	ldbu	r2,-4(fp)
 c000454:	e0bffe45 	stb	r2,-7(fp)
	return run_command(COMMAND_FBUF_CTRL, args, 2, 5, 1);
 c000458:	00800044 	movi	r2,1
 c00045c:	d8800015 	stw	r2,0(sp)
 c000460:	01000d84 	movi	r4,54
 c000464:	e17ffe04 	addi	r5,fp,-8
 c000468:	01800084 	movi	r6,2
 c00046c:	01c00144 	movi	r7,5
 c000470:	c0003840 	call	c000384 <run_command>
}
 c000474:	e037883a 	mov	sp,fp
 c000478:	dfc00117 	ldw	ra,4(sp)
 c00047c:	df000017 	ldw	fp,0(sp)
 c000480:	dec00204 	addi	sp,sp,8
 c000484:	f800283a 	ret

0c000488 <cam_init>:

//===================================================================
// Public Function Definitions
//===================================================================
void cam_init(void)
{
 c000488:	defffe04 	addi	sp,sp,-8
 c00048c:	dfc00115 	stw	ra,4(sp)
 c000490:	df000015 	stw	fp,0(sp)
 c000494:	d839883a 	mov	fp,sp
	buffer_length = 0;
 c000498:	d026e285 	stb	zero,-25718(gp)
	frame_ptr = 0;
 c00049c:	d026e20d 	sth	zero,-25720(gp)

    init_serial(CAMERA);
 c0004a0:	01210034 	movhi	r4,33792
 c0004a4:	21008404 	addi	r4,r4,528
 c0004a8:	c0077200 	call	c007720 <init_serial>
    memset(camera_buffer, 0, CAMERA_BUFFER_SIZE +1);
 c0004ac:	010302b4 	movhi	r4,3082
 c0004b0:	21182004 	addi	r4,r4,24704
 c0004b4:	000b883a 	mov	r5,zero
 c0004b8:	01801944 	movi	r6,101
 c0004bc:	c0096b40 	call	c0096b4 <memset>
}
 c0004c0:	e037883a 	mov	sp,fp
 c0004c4:	dfc00117 	ldw	ra,4(sp)
 c0004c8:	df000017 	ldw	fp,0(sp)
 c0004cc:	dec00204 	addi	sp,sp,8
 c0004d0:	f800283a 	ret

0c0004d4 <get_image_resolution>:

resolution get_image_resolution()
{
 c0004d4:	defffa04 	addi	sp,sp,-24
 c0004d8:	dfc00515 	stw	ra,20(sp)
 c0004dc:	df000415 	stw	fp,16(sp)
 c0004e0:	df000404 	addi	fp,sp,16
    uint8_t command_arguments[] = {0x04, 0x04, 0x01, 0x00, 0x19};
 c0004e4:	00800104 	movi	r2,4
 c0004e8:	e0bffe05 	stb	r2,-8(fp)
 c0004ec:	00800104 	movi	r2,4
 c0004f0:	e0bffe45 	stb	r2,-7(fp)
 c0004f4:	00800044 	movi	r2,1
 c0004f8:	e0bffe85 	stb	r2,-6(fp)
 c0004fc:	e03ffec5 	stb	zero,-5(fp)
 c000500:	00800644 	movi	r2,25
 c000504:	e0bfff05 	stb	r2,-4(fp)
    int command_result = run_command(COMMAND_READ_DATA, command_arguments,
 c000508:	e0fffe04 	addi	r3,fp,-8
 c00050c:	00800044 	movi	r2,1
 c000510:	d8800015 	stw	r2,0(sp)
 c000514:	01000c04 	movi	r4,48
 c000518:	180b883a 	mov	r5,r3
 c00051c:	01800144 	movi	r6,5
 c000520:	01c00184 	movi	r7,6
 c000524:	c0003840 	call	c000384 <run_command>
 c000528:	e0bffd15 	stw	r2,-12(fp)
                                     0x05, 0x06, 1);
    if (!command_result)
 c00052c:	e0bffd17 	ldw	r2,-12(fp)
 c000530:	1000021e 	bne	r2,zero,c00053c <get_image_resolution+0x68>
        return 0xFF;
 c000534:	00803fc4 	movi	r2,255
 c000538:	00000406 	br	c00054c <get_image_resolution+0x78>

    return camera_buffer[5];
 c00053c:	008302b4 	movhi	r2,3082
 c000540:	10982004 	addi	r2,r2,24704
 c000544:	10800143 	ldbu	r2,5(r2)
 c000548:	10803fcc 	andi	r2,r2,255
}
 c00054c:	e037883a 	mov	sp,fp
 c000550:	dfc00117 	ldw	ra,4(sp)
 c000554:	df000017 	ldw	fp,0(sp)
 c000558:	dec00204 	addi	sp,sp,8
 c00055c:	f800283a 	ret

0c000560 <set_image_resolution>:

int set_image_resolution(resolution new_resolution)
{
 c000560:	defff904 	addi	sp,sp,-28
 c000564:	dfc00615 	stw	ra,24(sp)
 c000568:	df000515 	stw	fp,20(sp)
 c00056c:	df000504 	addi	fp,sp,20
 c000570:	e13fff15 	stw	r4,-4(fp)
    uint8_t command_arguments[] = {0x05, 0x04, 0x01, 0x00, 0x19,
 c000574:	00800144 	movi	r2,5
 c000578:	e0bffd05 	stb	r2,-12(fp)
 c00057c:	00800104 	movi	r2,4
 c000580:	e0bffd45 	stb	r2,-11(fp)
 c000584:	00800044 	movi	r2,1
 c000588:	e0bffd85 	stb	r2,-10(fp)
 c00058c:	e03ffdc5 	stb	zero,-9(fp)
 c000590:	00800644 	movi	r2,25
 c000594:	e0bffe05 	stb	r2,-8(fp)
 c000598:	e0bfff17 	ldw	r2,-4(fp)
 c00059c:	e0bffe45 	stb	r2,-7(fp)
                                   new_resolution};
    int command_response = run_command(COMMAND_WRITE_DATA, command_arguments,
 c0005a0:	e0fffd04 	addi	r3,fp,-12
 c0005a4:	00800044 	movi	r2,1
 c0005a8:	d8800015 	stw	r2,0(sp)
 c0005ac:	01000c44 	movi	r4,49
 c0005b0:	180b883a 	mov	r5,r3
 c0005b4:	01800184 	movi	r6,6
 c0005b8:	01c00144 	movi	r7,5
 c0005bc:	c0003840 	call	c000384 <run_command>
 c0005c0:	e0bffc15 	stw	r2,-16(fp)
                                       0x06, 0x05, 1);
    return command_response;
 c0005c4:	e0bffc17 	ldw	r2,-16(fp)
}
 c0005c8:	e037883a 	mov	sp,fp
 c0005cc:	dfc00117 	ldw	ra,4(sp)
 c0005d0:	df000017 	ldw	fp,0(sp)
 c0005d4:	dec00204 	addi	sp,sp,8
 c0005d8:	f800283a 	ret

0c0005dc <take_picture>:

int take_picture(void)
{
 c0005dc:	defffe04 	addi	sp,sp,-8
 c0005e0:	dfc00115 	stw	ra,4(sp)
 c0005e4:	df000015 	stw	fp,0(sp)
 c0005e8:	d839883a 	mov	fp,sp
	frame_ptr = 0;
 c0005ec:	d026e20d 	sth	zero,-25720(gp)
	return camera_frame_buff_ctrl(COMMAND_STOPCURRENTFRAME);
 c0005f0:	0009883a 	mov	r4,zero
 c0005f4:	c0004300 	call	c000430 <camera_frame_buff_ctrl>
}
 c0005f8:	e037883a 	mov	sp,fp
 c0005fc:	dfc00117 	ldw	ra,4(sp)
 c000600:	df000017 	ldw	fp,0(sp)
 c000604:	dec00204 	addi	sp,sp,8
 c000608:	f800283a 	ret

0c00060c <resume_picture>:

int resume_picture(void)
{
 c00060c:	defffe04 	addi	sp,sp,-8
 c000610:	dfc00115 	stw	ra,4(sp)
 c000614:	df000015 	stw	fp,0(sp)
 c000618:	d839883a 	mov	fp,sp
    frame_ptr = 0;
 c00061c:	d026e20d 	sth	zero,-25720(gp)
    return camera_frame_buff_ctrl(COMMAND_RESUMEFRAME);
 c000620:	010000c4 	movi	r4,3
 c000624:	c0004300 	call	c000430 <camera_frame_buff_ctrl>
}
 c000628:	e037883a 	mov	sp,fp
 c00062c:	dfc00117 	ldw	ra,4(sp)
 c000630:	df000017 	ldw	fp,0(sp)
 c000634:	dec00204 	addi	sp,sp,8
 c000638:	f800283a 	ret

0c00063c <frame_length>:
uint32_t frame_length(void)
{
 c00063c:	defffa04 	addi	sp,sp,-24
 c000640:	dfc00515 	stw	ra,20(sp)
 c000644:	df000415 	stw	fp,16(sp)
 c000648:	df000404 	addi	fp,sp,16
	uint8_t args[] = {0x01, 0x00};
 c00064c:	00800044 	movi	r2,1
 c000650:	e0bfff05 	stb	r2,-4(fp)
 c000654:	e03fff45 	stb	zero,-3(fp)
	int command_response = run_command(COMMAND_GET_FBUF_LEN, args, 2, 9, 1);
 c000658:	e0ffff04 	addi	r3,fp,-4
 c00065c:	00800044 	movi	r2,1
 c000660:	d8800015 	stw	r2,0(sp)
 c000664:	01000d04 	movi	r4,52
 c000668:	180b883a 	mov	r5,r3
 c00066c:	01800084 	movi	r6,2
 c000670:	01c00244 	movi	r7,9
 c000674:	c0003840 	call	c000384 <run_command>
 c000678:	e0bffd15 	stw	r2,-12(fp)

	if(!command_response)
 c00067c:	e0bffd17 	ldw	r2,-12(fp)
 c000680:	1000021e 	bne	r2,zero,c00068c <frame_length+0x50>
		return 0;
 c000684:	0005883a 	mov	r2,zero
 c000688:	00002406 	br	c00071c <frame_length+0xe0>

	uint32_t len;
	len = camera_buffer[5];
 c00068c:	008302b4 	movhi	r2,3082
 c000690:	10982004 	addi	r2,r2,24704
 c000694:	10800143 	ldbu	r2,5(r2)
 c000698:	10803fcc 	andi	r2,r2,255
 c00069c:	e0bffe15 	stw	r2,-8(fp)
	len <<= 8;
 c0006a0:	e0bffe17 	ldw	r2,-8(fp)
 c0006a4:	1004923a 	slli	r2,r2,8
 c0006a8:	e0bffe15 	stw	r2,-8(fp)
	len |= camera_buffer[6];
 c0006ac:	008302b4 	movhi	r2,3082
 c0006b0:	10982004 	addi	r2,r2,24704
 c0006b4:	10800183 	ldbu	r2,6(r2)
 c0006b8:	10803fcc 	andi	r2,r2,255
 c0006bc:	e0fffe17 	ldw	r3,-8(fp)
 c0006c0:	1884b03a 	or	r2,r3,r2
 c0006c4:	e0bffe15 	stw	r2,-8(fp)
	len <<= 8;
 c0006c8:	e0bffe17 	ldw	r2,-8(fp)
 c0006cc:	1004923a 	slli	r2,r2,8
 c0006d0:	e0bffe15 	stw	r2,-8(fp)
	len |= camera_buffer[7];
 c0006d4:	008302b4 	movhi	r2,3082
 c0006d8:	10982004 	addi	r2,r2,24704
 c0006dc:	108001c3 	ldbu	r2,7(r2)
 c0006e0:	10803fcc 	andi	r2,r2,255
 c0006e4:	e0fffe17 	ldw	r3,-8(fp)
 c0006e8:	1884b03a 	or	r2,r3,r2
 c0006ec:	e0bffe15 	stw	r2,-8(fp)
	len <<= 8;
 c0006f0:	e0bffe17 	ldw	r2,-8(fp)
 c0006f4:	1004923a 	slli	r2,r2,8
 c0006f8:	e0bffe15 	stw	r2,-8(fp)
	len |= camera_buffer[8];
 c0006fc:	008302b4 	movhi	r2,3082
 c000700:	10982004 	addi	r2,r2,24704
 c000704:	10800203 	ldbu	r2,8(r2)
 c000708:	10803fcc 	andi	r2,r2,255
 c00070c:	e0fffe17 	ldw	r3,-8(fp)
 c000710:	1884b03a 	or	r2,r3,r2
 c000714:	e0bffe15 	stw	r2,-8(fp)

	return len;
 c000718:	e0bffe17 	ldw	r2,-8(fp)
}
 c00071c:	e037883a 	mov	sp,fp
 c000720:	dfc00117 	ldw	ra,4(sp)
 c000724:	df000017 	ldw	fp,0(sp)
 c000728:	dec00204 	addi	sp,sp,8
 c00072c:	f800283a 	ret

0c000730 <camera_reset>:

int camera_reset(void)
{
 c000730:	defffc04 	addi	sp,sp,-16
 c000734:	dfc00315 	stw	ra,12(sp)
 c000738:	df000215 	stw	fp,8(sp)
 c00073c:	df000204 	addi	fp,sp,8
  uint8_t args[] = {0x0};
 c000740:	e03fff05 	stb	zero,-4(fp)

  return run_command(COMMAND_RESET, args, 1, 5, 1);
 c000744:	00800044 	movi	r2,1
 c000748:	d8800015 	stw	r2,0(sp)
 c00074c:	01000984 	movi	r4,38
 c000750:	e17fff04 	addi	r5,fp,-4
 c000754:	01800044 	movi	r6,1
 c000758:	01c00144 	movi	r7,5
 c00075c:	c0003840 	call	c000384 <run_command>
}
 c000760:	e037883a 	mov	sp,fp
 c000764:	dfc00117 	ldw	ra,4(sp)
 c000768:	df000017 	ldw	fp,0(sp)
 c00076c:	dec00204 	addi	sp,sp,8
 c000770:	f800283a 	ret

0c000774 <read_picture>:



uint8_t *read_picture(uint8_t n)
{
 c000774:	defff704 	addi	sp,sp,-36
 c000778:	dfc00815 	stw	ra,32(sp)
 c00077c:	df000715 	stw	fp,28(sp)
 c000780:	df000704 	addi	fp,sp,28
 c000784:	2005883a 	mov	r2,r4
 c000788:	e0bfff05 	stb	r2,-4(fp)
    uint8_t args[] = {0x0C, 0x0, 0x0A, 0, 0, frame_ptr >> 8, frame_ptr & 0xFF,
 c00078c:	00800304 	movi	r2,12
 c000790:	e0bffb05 	stb	r2,-20(fp)
 c000794:	e03ffb45 	stb	zero,-19(fp)
 c000798:	00800284 	movi	r2,10
 c00079c:	e0bffb85 	stb	r2,-18(fp)
 c0007a0:	e03ffbc5 	stb	zero,-17(fp)
 c0007a4:	e03ffc05 	stb	zero,-16(fp)
 c0007a8:	d0a6e20b 	ldhu	r2,-25720(gp)
 c0007ac:	10bfffcc 	andi	r2,r2,65535
 c0007b0:	1004d23a 	srli	r2,r2,8
 c0007b4:	e0bffc45 	stb	r2,-15(fp)
 c0007b8:	d0a6e20b 	ldhu	r2,-25720(gp)
 c0007bc:	e0bffc85 	stb	r2,-14(fp)
 c0007c0:	e03ffcc5 	stb	zero,-13(fp)
 c0007c4:	e03ffd05 	stb	zero,-12(fp)
 c0007c8:	e03ffd45 	stb	zero,-11(fp)
 c0007cc:	e0bfff03 	ldbu	r2,-4(fp)
 c0007d0:	e0bffd85 	stb	r2,-10(fp)
 c0007d4:	e03ffdc5 	stb	zero,-9(fp)
 c0007d8:	00800284 	movi	r2,10
 c0007dc:	e0bffe05 	stb	r2,-8(fp)
            0, 0, 0, n, CAMERADELAY >> 8, CAMERADELAY & 0xFF};

    int response = run_command(COMMAND_READ_FBUF, args, sizeof(args), 5, 0);
 c0007e0:	e0bffb04 	addi	r2,fp,-20
 c0007e4:	d8000015 	stw	zero,0(sp)
 c0007e8:	01000c84 	movi	r4,50
 c0007ec:	100b883a 	mov	r5,r2
 c0007f0:	01800344 	movi	r6,13
 c0007f4:	01c00144 	movi	r7,5
 c0007f8:	c0003840 	call	c000384 <run_command>
 c0007fc:	e0bffa15 	stw	r2,-24(fp)

    if(!response)
 c000800:	e0bffa17 	ldw	r2,-24(fp)
 c000804:	1000021e 	bne	r2,zero,c000810 <read_picture+0x9c>
        return 0;
 c000808:	0005883a 	mov	r2,zero
 c00080c:	00001206 	br	c000858 <read_picture+0xe4>

    response = read_response(n+5, CAMERADELAY);
 c000810:	e0bfff03 	ldbu	r2,-4(fp)
 c000814:	10800144 	addi	r2,r2,5
 c000818:	10803fcc 	andi	r2,r2,255
 c00081c:	1009883a 	mov	r4,r2
 c000820:	01400284 	movi	r5,10
 c000824:	c0002700 	call	c000270 <read_response>
 c000828:	10803fcc 	andi	r2,r2,255
 c00082c:	e0bffa15 	stw	r2,-24(fp)
    //printf("THIS IS TILTING ME by requesting: %d, and getting %d\n", n+5, response);
    if(!response)
 c000830:	e0bffa17 	ldw	r2,-24(fp)
 c000834:	1000021e 	bne	r2,zero,c000840 <read_picture+0xcc>
        return 0;
 c000838:	0005883a 	mov	r2,zero
 c00083c:	00000606 	br	c000858 <read_picture+0xe4>

    frame_ptr += n;
 c000840:	e0ffff03 	ldbu	r3,-4(fp)
 c000844:	d0a6e20b 	ldhu	r2,-25720(gp)
 c000848:	1885883a 	add	r2,r3,r2
 c00084c:	d0a6e20d 	sth	r2,-25720(gp)

    return camera_buffer;
 c000850:	008302b4 	movhi	r2,3082
 c000854:	10982004 	addi	r2,r2,24704
}
 c000858:	e037883a 	mov	sp,fp
 c00085c:	dfc00117 	ldw	ra,4(sp)
 c000860:	df000017 	ldw	fp,0(sp)
 c000864:	dec00204 	addi	sp,sp,8
 c000868:	f800283a 	ret

0c00086c <read_picture_to_ptr>:

read_picture_to_ptr(uint8_t * jpeg_buffer, uint8_t n)
{
 c00086c:	defff504 	addi	sp,sp,-44
 c000870:	dfc00a15 	stw	ra,40(sp)
 c000874:	df000915 	stw	fp,36(sp)
 c000878:	df000904 	addi	fp,sp,36
 c00087c:	e13ffe15 	stw	r4,-8(fp)
 c000880:	2805883a 	mov	r2,r5
 c000884:	e0bfff05 	stb	r2,-4(fp)
    uint8_t args[] = {0x0C, 0x0, 0x0A, 0, 0, frame_ptr >> 8, frame_ptr & 0xFF,
 c000888:	00800304 	movi	r2,12
 c00088c:	e0bffa05 	stb	r2,-24(fp)
 c000890:	e03ffa45 	stb	zero,-23(fp)
 c000894:	00800284 	movi	r2,10
 c000898:	e0bffa85 	stb	r2,-22(fp)
 c00089c:	e03ffac5 	stb	zero,-21(fp)
 c0008a0:	e03ffb05 	stb	zero,-20(fp)
 c0008a4:	d0a6e20b 	ldhu	r2,-25720(gp)
 c0008a8:	10bfffcc 	andi	r2,r2,65535
 c0008ac:	1004d23a 	srli	r2,r2,8
 c0008b0:	e0bffb45 	stb	r2,-19(fp)
 c0008b4:	d0a6e20b 	ldhu	r2,-25720(gp)
 c0008b8:	e0bffb85 	stb	r2,-18(fp)
 c0008bc:	e03ffbc5 	stb	zero,-17(fp)
 c0008c0:	e03ffc05 	stb	zero,-16(fp)
 c0008c4:	e03ffc45 	stb	zero,-15(fp)
 c0008c8:	e0bfff03 	ldbu	r2,-4(fp)
 c0008cc:	e0bffc85 	stb	r2,-14(fp)
 c0008d0:	e03ffcc5 	stb	zero,-13(fp)
 c0008d4:	00800284 	movi	r2,10
 c0008d8:	e0bffd05 	stb	r2,-12(fp)
            0, 0, 0, n, CAMERADELAY >> 8, CAMERADELAY & 0xFF};

    int response = run_command(COMMAND_READ_FBUF, args, sizeof(args), 5, 0);
 c0008dc:	e0bffa04 	addi	r2,fp,-24
 c0008e0:	d8000015 	stw	zero,0(sp)
 c0008e4:	01000c84 	movi	r4,50
 c0008e8:	100b883a 	mov	r5,r2
 c0008ec:	01800344 	movi	r6,13
 c0008f0:	01c00144 	movi	r7,5
 c0008f4:	c0003840 	call	c000384 <run_command>
 c0008f8:	e0bff815 	stw	r2,-32(fp)

    if(!response)
 c0008fc:	e0bff817 	ldw	r2,-32(fp)
 c000900:	1000021e 	bne	r2,zero,c00090c <read_picture_to_ptr+0xa0>
        return 0;
 c000904:	0005883a 	mov	r2,zero
 c000908:	00001506 	br	c000960 <read_picture_to_ptr+0xf4>

    int buffer_length = serial_read_timeout(CAMERA, jpeg_buffer + frame_ptr,
 c00090c:	d0a6e20b 	ldhu	r2,-25720(gp)
 c000910:	10bfffcc 	andi	r2,r2,65535
 c000914:	e0fffe17 	ldw	r3,-8(fp)
 c000918:	1887883a 	add	r3,r3,r2
            n+5, 1000);
 c00091c:	e0bfff03 	ldbu	r2,-4(fp)
 c000920:	10800144 	addi	r2,r2,5
    int response = run_command(COMMAND_READ_FBUF, args, sizeof(args), 5, 0);

    if(!response)
        return 0;

    int buffer_length = serial_read_timeout(CAMERA, jpeg_buffer + frame_ptr,
 c000924:	01210034 	movhi	r4,33792
 c000928:	21008404 	addi	r4,r4,528
 c00092c:	180b883a 	mov	r5,r3
 c000930:	100d883a 	mov	r6,r2
 c000934:	01c0fa04 	movi	r7,1000
 c000938:	c0079a40 	call	c0079a4 <serial_read_timeout>
 c00093c:	e0bff915 	stw	r2,-28(fp)
            n+5, 1000);

    if(!response)
 c000940:	e0bff817 	ldw	r2,-32(fp)
 c000944:	1000021e 	bne	r2,zero,c000950 <read_picture_to_ptr+0xe4>
        return 0;
 c000948:	0005883a 	mov	r2,zero
 c00094c:	00000406 	br	c000960 <read_picture_to_ptr+0xf4>

    frame_ptr += n;
 c000950:	e0ffff03 	ldbu	r3,-4(fp)
 c000954:	d0a6e20b 	ldhu	r2,-25720(gp)
 c000958:	1885883a 	add	r2,r3,r2
 c00095c:	d0a6e20d 	sth	r2,-25720(gp)

}
 c000960:	e037883a 	mov	sp,fp
 c000964:	dfc00117 	ldw	ra,4(sp)
 c000968:	df000017 	ldw	fp,0(sp)
 c00096c:	dec00204 	addi	sp,sp,8
 c000970:	f800283a 	ret

0c000974 <print_byte_array>:
 *      Author: Zeyad
 */


void print_byte_array(unsigned char * byte_array, int size)
{
 c000974:	defffb04 	addi	sp,sp,-20
 c000978:	dfc00415 	stw	ra,16(sp)
 c00097c:	df000315 	stw	fp,12(sp)
 c000980:	df000304 	addi	fp,sp,12
 c000984:	e13ffe15 	stw	r4,-8(fp)
 c000988:	e17fff15 	stw	r5,-4(fp)
    int byte_array_index;
    for (byte_array_index = 0; byte_array_index < size; byte_array_index++)
 c00098c:	e03ffd15 	stw	zero,-12(fp)
 c000990:	00000c06 	br	c0009c4 <print_byte_array+0x50>
        printf("[%02x]", byte_array[byte_array_index]);
 c000994:	e0bffd17 	ldw	r2,-12(fp)
 c000998:	e0fffe17 	ldw	r3,-8(fp)
 c00099c:	1885883a 	add	r2,r3,r2
 c0009a0:	10800003 	ldbu	r2,0(r2)
 c0009a4:	10803fcc 	andi	r2,r2,255
 c0009a8:	01030074 	movhi	r4,3073
 c0009ac:	211eee04 	addi	r4,r4,31672
 c0009b0:	100b883a 	mov	r5,r2
 c0009b4:	c0098040 	call	c009804 <printf>


void print_byte_array(unsigned char * byte_array, int size)
{
    int byte_array_index;
    for (byte_array_index = 0; byte_array_index < size; byte_array_index++)
 c0009b8:	e0bffd17 	ldw	r2,-12(fp)
 c0009bc:	10800044 	addi	r2,r2,1
 c0009c0:	e0bffd15 	stw	r2,-12(fp)
 c0009c4:	e0fffd17 	ldw	r3,-12(fp)
 c0009c8:	e0bfff17 	ldw	r2,-4(fp)
 c0009cc:	18bff116 	blt	r3,r2,c000994 <__alt_data_end+0xfc000994>
        printf("[%02x]", byte_array[byte_array_index]);
    printf("\n");
 c0009d0:	01000284 	movi	r4,10
 c0009d4:	c0098480 	call	c009848 <putchar>
}
 c0009d8:	e037883a 	mov	sp,fp
 c0009dc:	dfc00117 	ldw	ra,4(sp)
 c0009e0:	df000017 	ldw	fp,0(sp)
 c0009e4:	dec00204 	addi	sp,sp,8
 c0009e8:	f800283a 	ret

0c0009ec <write_a_pixel>:
/*
 * This function writes a single pixel to the x,y coords specified using the specified colour
 * Note colour is a byte and represents a palette number (0-255) not a 24 bit RGB value
 */
void write_a_pixel(int x, int y, int colour)
{
 c0009ec:	defffc04 	addi	sp,sp,-16
 c0009f0:	df000315 	stw	fp,12(sp)
 c0009f4:	df000304 	addi	fp,sp,12
 c0009f8:	e13ffd15 	stw	r4,-12(fp)
 c0009fc:	e17ffe15 	stw	r5,-8(fp)
 c000a00:	e1bfff15 	stw	r6,-4(fp)
	WAIT_FOR_GRAPHICS;				// is graphics ready for new command
 c000a04:	0001883a 	nop
 c000a08:	00a10034 	movhi	r2,33792
 c000a0c:	1080000b 	ldhu	r2,0(r2)
 c000a10:	10bfffcc 	andi	r2,r2,65535
 c000a14:	1080004c 	andi	r2,r2,1
 c000a18:	103ffb26 	beq	r2,zero,c000a08 <__alt_data_end+0xfc000a08>

	GraphicsX1Reg = x;				// write coords to x1, y1
 c000a1c:	00a10034 	movhi	r2,33792
 c000a20:	10800084 	addi	r2,r2,2
 c000a24:	e0fffd17 	ldw	r3,-12(fp)
 c000a28:	10c0000d 	sth	r3,0(r2)
	GraphicsY1Reg = y;
 c000a2c:	00a10034 	movhi	r2,33792
 c000a30:	10800104 	addi	r2,r2,4
 c000a34:	e0fffe17 	ldw	r3,-8(fp)
 c000a38:	10c0000d 	sth	r3,0(r2)
	GraphicsColourReg = colour;			// set pixel colour
 c000a3c:	00a10034 	movhi	r2,33792
 c000a40:	10800384 	addi	r2,r2,14
 c000a44:	e0ffff17 	ldw	r3,-4(fp)
 c000a48:	10c0000d 	sth	r3,0(r2)
	GraphicsCommandReg = PutAPixel;			// give graphics "write pixel" command
 c000a4c:	00a10034 	movhi	r2,33792
 c000a50:	00c00284 	movi	r3,10
 c000a54:	10c0000d 	sth	r3,0(r2)
}
 c000a58:	e037883a 	mov	sp,fp
 c000a5c:	df000017 	ldw	fp,0(sp)
 c000a60:	dec00104 	addi	sp,sp,4
 c000a64:	f800283a 	ret

0c000a68 <read_a_pixel>:
/*
 * This function read a single pixel from the x,y coords specified and returns its colour
 * Note returned colour is a byte and represents a palette number (0-255) not a 24 bit RGB value
 */
int read_a_pixel(int x, int y)
{
 c000a68:	defffd04 	addi	sp,sp,-12
 c000a6c:	df000215 	stw	fp,8(sp)
 c000a70:	df000204 	addi	fp,sp,8
 c000a74:	e13ffe15 	stw	r4,-8(fp)
 c000a78:	e17fff15 	stw	r5,-4(fp)
	WAIT_FOR_GRAPHICS;			// is graphics ready for new command
 c000a7c:	0001883a 	nop
 c000a80:	00a10034 	movhi	r2,33792
 c000a84:	1080000b 	ldhu	r2,0(r2)
 c000a88:	10bfffcc 	andi	r2,r2,65535
 c000a8c:	1080004c 	andi	r2,r2,1
 c000a90:	103ffb26 	beq	r2,zero,c000a80 <__alt_data_end+0xfc000a80>

	GraphicsX1Reg = x;			// write coords to x1, y1
 c000a94:	00a10034 	movhi	r2,33792
 c000a98:	10800084 	addi	r2,r2,2
 c000a9c:	e0fffe17 	ldw	r3,-8(fp)
 c000aa0:	10c0000d 	sth	r3,0(r2)
	GraphicsY1Reg = y;
 c000aa4:	00a10034 	movhi	r2,33792
 c000aa8:	10800104 	addi	r2,r2,4
 c000aac:	e0ffff17 	ldw	r3,-4(fp)
 c000ab0:	10c0000d 	sth	r3,0(r2)
	GraphicsCommandReg = GetAPixel;		// give graphics a "get pixel" command
 c000ab4:	00a10034 	movhi	r2,33792
 c000ab8:	00c002c4 	movi	r3,11
 c000abc:	10c0000d 	sth	r3,0(r2)

	WAIT_FOR_GRAPHICS;			// is graphics done reading pixel
 c000ac0:	0001883a 	nop
 c000ac4:	00a10034 	movhi	r2,33792
 c000ac8:	1080000b 	ldhu	r2,0(r2)
 c000acc:	10bfffcc 	andi	r2,r2,65535
 c000ad0:	1080004c 	andi	r2,r2,1
 c000ad4:	103ffb26 	beq	r2,zero,c000ac4 <__alt_data_end+0xfc000ac4>
	return (int)(GraphicsColourReg) ;	// return the palette number (colour)
 c000ad8:	00a10034 	movhi	r2,33792
 c000adc:	10800384 	addi	r2,r2,14
 c000ae0:	1080000b 	ldhu	r2,0(r2)
 c000ae4:	10bfffcc 	andi	r2,r2,65535
}
 c000ae8:	e037883a 	mov	sp,fp
 c000aec:	df000017 	ldw	fp,0(sp)
 c000af0:	dec00104 	addi	sp,sp,4
 c000af4:	f800283a 	ret

0c000af8 <program_palette>:
 * subroutine to program a hardware (graphics chip) palette number with an RGB value
 * e.g. program_palette(RED, 0x00FF0000) ;
 *
 */
void program_palette(int PaletteNumber, uint32_t RGB)
{
 c000af8:	defffd04 	addi	sp,sp,-12
 c000afc:	df000215 	stw	fp,8(sp)
 c000b00:	df000204 	addi	fp,sp,8
 c000b04:	e13ffe15 	stw	r4,-8(fp)
 c000b08:	e17fff15 	stw	r5,-4(fp)
    WAIT_FOR_GRAPHICS;
 c000b0c:	0001883a 	nop
 c000b10:	00a10034 	movhi	r2,33792
 c000b14:	1080000b 	ldhu	r2,0(r2)
 c000b18:	10bfffcc 	andi	r2,r2,65535
 c000b1c:	1080004c 	andi	r2,r2,1
 c000b20:	103ffb26 	beq	r2,zero,c000b10 <__alt_data_end+0xfc000b10>
    GraphicsColourReg = PaletteNumber;
 c000b24:	00a10034 	movhi	r2,33792
 c000b28:	10800384 	addi	r2,r2,14
 c000b2c:	e0fffe17 	ldw	r3,-8(fp)
 c000b30:	10c0000d 	sth	r3,0(r2)
    GraphicsX1Reg = RGB >> 16   ;        // program red value in ls.8 bit of X1 reg
 c000b34:	00a10034 	movhi	r2,33792
 c000b38:	10800084 	addi	r2,r2,2
 c000b3c:	e0ffff17 	ldw	r3,-4(fp)
 c000b40:	1806d43a 	srli	r3,r3,16
 c000b44:	10c0000d 	sth	r3,0(r2)
    GraphicsY1Reg = RGB ;                // program green and blue into ls 16 bit of Y1 reg
 c000b48:	00a10034 	movhi	r2,33792
 c000b4c:	10800104 	addi	r2,r2,4
 c000b50:	e0ffff17 	ldw	r3,-4(fp)
 c000b54:	10c0000d 	sth	r3,0(r2)
    GraphicsCommandReg = ProgramPaletteColour; // issue command
 c000b58:	00a10034 	movhi	r2,33792
 c000b5c:	00c00404 	movi	r3,16
 c000b60:	10c0000d 	sth	r3,0(r2)
}
 c000b64:	e037883a 	mov	sp,fp
 c000b68:	df000017 	ldw	fp,0(sp)
 c000b6c:	dec00104 	addi	sp,sp,4
 c000b70:	f800283a 	ret

0c000b74 <horizontal_line>:

/*
 * This function draw a horizontal line, 1 pixel at a time starting at the x,y coords specified
 */
void horizontal_line(int x1, int y1, int length, int colour)
{
 c000b74:	defffa04 	addi	sp,sp,-24
 c000b78:	df000515 	stw	fp,20(sp)
 c000b7c:	df000504 	addi	fp,sp,20
 c000b80:	e13ffc15 	stw	r4,-16(fp)
 c000b84:	e17ffd15 	stw	r5,-12(fp)
 c000b88:	e1bffe15 	stw	r6,-8(fp)
 c000b8c:	e1ffff15 	stw	r7,-4(fp)
	int x2 = x1 + length;
 c000b90:	e0fffc17 	ldw	r3,-16(fp)
 c000b94:	e0bffe17 	ldw	r2,-8(fp)
 c000b98:	1885883a 	add	r2,r3,r2
 c000b9c:	e0bffb15 	stw	r2,-20(fp)
	WAIT_FOR_GRAPHICS;				// is graphics ready for new command
 c000ba0:	0001883a 	nop
 c000ba4:	00a10034 	movhi	r2,33792
 c000ba8:	1080000b 	ldhu	r2,0(r2)
 c000bac:	10bfffcc 	andi	r2,r2,65535
 c000bb0:	1080004c 	andi	r2,r2,1
 c000bb4:	103ffb26 	beq	r2,zero,c000ba4 <__alt_data_end+0xfc000ba4>
	GraphicsX1Reg = x1;				// write coords to x1, y1
 c000bb8:	00a10034 	movhi	r2,33792
 c000bbc:	10800084 	addi	r2,r2,2
 c000bc0:	e0fffc17 	ldw	r3,-16(fp)
 c000bc4:	10c0000d 	sth	r3,0(r2)
	GraphicsY1Reg = y1;
 c000bc8:	00a10034 	movhi	r2,33792
 c000bcc:	10800104 	addi	r2,r2,4
 c000bd0:	e0fffd17 	ldw	r3,-12(fp)
 c000bd4:	10c0000d 	sth	r3,0(r2)
	GraphicsX2Reg = x2;
 c000bd8:	00a10034 	movhi	r2,33792
 c000bdc:	10800184 	addi	r2,r2,6
 c000be0:	e0fffb17 	ldw	r3,-20(fp)
 c000be4:	10c0000d 	sth	r3,0(r2)
	GraphicsY2Reg = y1;
 c000be8:	00a10034 	movhi	r2,33792
 c000bec:	10800204 	addi	r2,r2,8
 c000bf0:	e0fffd17 	ldw	r3,-12(fp)
 c000bf4:	10c0000d 	sth	r3,0(r2)
	GraphicsColourReg = colour;			// set pixel colour
 c000bf8:	00a10034 	movhi	r2,33792
 c000bfc:	10800384 	addi	r2,r2,14
 c000c00:	e0ffff17 	ldw	r3,-4(fp)
 c000c04:	10c0000d 	sth	r3,0(r2)
	GraphicsCommandReg = DrawHLine;			// give graphics "write pixel" command
 c000c08:	00a10034 	movhi	r2,33792
 c000c0c:	00c00044 	movi	r3,1
 c000c10:	10c0000d 	sth	r3,0(r2)
}
 c000c14:	e037883a 	mov	sp,fp
 c000c18:	df000017 	ldw	fp,0(sp)
 c000c1c:	dec00104 	addi	sp,sp,4
 c000c20:	f800283a 	ret

0c000c24 <vertical_line>:

/*
 *This function draw a vertical line, 1 pixel at a time starting at the x,y coords specified
 */
void vertical_line(int x1, int y1, int length, int colour)
{
 c000c24:	defffa04 	addi	sp,sp,-24
 c000c28:	df000515 	stw	fp,20(sp)
 c000c2c:	df000504 	addi	fp,sp,20
 c000c30:	e13ffc15 	stw	r4,-16(fp)
 c000c34:	e17ffd15 	stw	r5,-12(fp)
 c000c38:	e1bffe15 	stw	r6,-8(fp)
 c000c3c:	e1ffff15 	stw	r7,-4(fp)
	int y2 = y1 + length;
 c000c40:	e0fffd17 	ldw	r3,-12(fp)
 c000c44:	e0bffe17 	ldw	r2,-8(fp)
 c000c48:	1885883a 	add	r2,r3,r2
 c000c4c:	e0bffb15 	stw	r2,-20(fp)
	WAIT_FOR_GRAPHICS;				// is graphics ready for new command
 c000c50:	0001883a 	nop
 c000c54:	00a10034 	movhi	r2,33792
 c000c58:	1080000b 	ldhu	r2,0(r2)
 c000c5c:	10bfffcc 	andi	r2,r2,65535
 c000c60:	1080004c 	andi	r2,r2,1
 c000c64:	103ffb26 	beq	r2,zero,c000c54 <__alt_data_end+0xfc000c54>
	GraphicsX1Reg = x1;				// write coords to x1, y1
 c000c68:	00a10034 	movhi	r2,33792
 c000c6c:	10800084 	addi	r2,r2,2
 c000c70:	e0fffc17 	ldw	r3,-16(fp)
 c000c74:	10c0000d 	sth	r3,0(r2)
	GraphicsY1Reg = y1;
 c000c78:	00a10034 	movhi	r2,33792
 c000c7c:	10800104 	addi	r2,r2,4
 c000c80:	e0fffd17 	ldw	r3,-12(fp)
 c000c84:	10c0000d 	sth	r3,0(r2)
	GraphicsX2Reg = x1;
 c000c88:	00a10034 	movhi	r2,33792
 c000c8c:	10800184 	addi	r2,r2,6
 c000c90:	e0fffc17 	ldw	r3,-16(fp)
 c000c94:	10c0000d 	sth	r3,0(r2)
	GraphicsY2Reg = y2;
 c000c98:	00a10034 	movhi	r2,33792
 c000c9c:	10800204 	addi	r2,r2,8
 c000ca0:	e0fffb17 	ldw	r3,-20(fp)
 c000ca4:	10c0000d 	sth	r3,0(r2)
	GraphicsColourReg = colour;			// set pixel colour
 c000ca8:	00a10034 	movhi	r2,33792
 c000cac:	10800384 	addi	r2,r2,14
 c000cb0:	e0ffff17 	ldw	r3,-4(fp)
 c000cb4:	10c0000d 	sth	r3,0(r2)
	GraphicsCommandReg = DrawVLine;			// give graphics "write pixel" command
 c000cb8:	00a10034 	movhi	r2,33792
 c000cbc:	00c00084 	movi	r3,2
 c000cc0:	10c0000d 	sth	r3,0(r2)
}
 c000cc4:	e037883a 	mov	sp,fp
 c000cc8:	df000017 	ldw	fp,0(sp)
 c000ccc:	dec00104 	addi	sp,sp,4
 c000cd0:	f800283a 	ret

0c000cd4 <line>:

/*
 * Implementation of Bresenhams line drawing algorithm
 */
void line(int x1, int y1, int x2, int y2, int colour)
{
 c000cd4:	defffb04 	addi	sp,sp,-20
 c000cd8:	df000415 	stw	fp,16(sp)
 c000cdc:	df000404 	addi	fp,sp,16
 c000ce0:	e13ffc15 	stw	r4,-16(fp)
 c000ce4:	e17ffd15 	stw	r5,-12(fp)
 c000ce8:	e1bffe15 	stw	r6,-8(fp)
 c000cec:	e1ffff15 	stw	r7,-4(fp)
	WAIT_FOR_GRAPHICS;				// is graphics ready for new command
 c000cf0:	0001883a 	nop
 c000cf4:	00a10034 	movhi	r2,33792
 c000cf8:	1080000b 	ldhu	r2,0(r2)
 c000cfc:	10bfffcc 	andi	r2,r2,65535
 c000d00:	1080004c 	andi	r2,r2,1
 c000d04:	103ffb26 	beq	r2,zero,c000cf4 <__alt_data_end+0xfc000cf4>
	GraphicsX1Reg = x1;				// write coords to x1, y1
 c000d08:	00a10034 	movhi	r2,33792
 c000d0c:	10800084 	addi	r2,r2,2
 c000d10:	e0fffc17 	ldw	r3,-16(fp)
 c000d14:	10c0000d 	sth	r3,0(r2)
	GraphicsY1Reg = y1;
 c000d18:	00a10034 	movhi	r2,33792
 c000d1c:	10800104 	addi	r2,r2,4
 c000d20:	e0fffd17 	ldw	r3,-12(fp)
 c000d24:	10c0000d 	sth	r3,0(r2)
	GraphicsX2Reg = x2;
 c000d28:	00a10034 	movhi	r2,33792
 c000d2c:	10800184 	addi	r2,r2,6
 c000d30:	e0fffe17 	ldw	r3,-8(fp)
 c000d34:	10c0000d 	sth	r3,0(r2)
	GraphicsY2Reg = y2;
 c000d38:	00a10034 	movhi	r2,33792
 c000d3c:	10800204 	addi	r2,r2,8
 c000d40:	e0ffff17 	ldw	r3,-4(fp)
 c000d44:	10c0000d 	sth	r3,0(r2)
	GraphicsColourReg = colour;		// set pixel colour
 c000d48:	00a10034 	movhi	r2,33792
 c000d4c:	10800384 	addi	r2,r2,14
 c000d50:	e0c00117 	ldw	r3,4(fp)
 c000d54:	10c0000d 	sth	r3,0(r2)
	GraphicsCommandReg = DrawLine;	// give graphics "write pixel" command
 c000d58:	00a10034 	movhi	r2,33792
 c000d5c:	00c000c4 	movi	r3,3
 c000d60:	10c0000d 	sth	r3,0(r2)
}
 c000d64:	e037883a 	mov	sp,fp
 c000d68:	df000017 	ldw	fp,0(sp)
 c000d6c:	dec00104 	addi	sp,sp,4
 c000d70:	f800283a 	ret

0c000d74 <rectangle>:

/*
 * Draw a rectangle with top left corner x1,y1 and bottom right corner x2,y2, and with colour
 */
void rectangle(int x1, int y1, int x2, int y2, int colour)
{
 c000d74:	defff804 	addi	sp,sp,-32
 c000d78:	dfc00715 	stw	ra,28(sp)
 c000d7c:	df000615 	stw	fp,24(sp)
 c000d80:	df000604 	addi	fp,sp,24
 c000d84:	e13ffc15 	stw	r4,-16(fp)
 c000d88:	e17ffd15 	stw	r5,-12(fp)
 c000d8c:	e1bffe15 	stw	r6,-8(fp)
 c000d90:	e1ffff15 	stw	r7,-4(fp)
	int i;

	for(i = 0; i < (y2-y1); i++){
 c000d94:	e03ffb15 	stw	zero,-20(fp)
 c000d98:	00000f06 	br	c000dd8 <rectangle+0x64>
		line(x1,y1+i,x2,y1+i,colour);
 c000d9c:	e0fffd17 	ldw	r3,-12(fp)
 c000da0:	e0bffb17 	ldw	r2,-20(fp)
 c000da4:	188b883a 	add	r5,r3,r2
 c000da8:	e0fffd17 	ldw	r3,-12(fp)
 c000dac:	e0bffb17 	ldw	r2,-20(fp)
 c000db0:	1887883a 	add	r3,r3,r2
 c000db4:	e0800217 	ldw	r2,8(fp)
 c000db8:	d8800015 	stw	r2,0(sp)
 c000dbc:	e13ffc17 	ldw	r4,-16(fp)
 c000dc0:	e1bffe17 	ldw	r6,-8(fp)
 c000dc4:	180f883a 	mov	r7,r3
 c000dc8:	c000cd40 	call	c000cd4 <line>
 */
void rectangle(int x1, int y1, int x2, int y2, int colour)
{
	int i;

	for(i = 0; i < (y2-y1); i++){
 c000dcc:	e0bffb17 	ldw	r2,-20(fp)
 c000dd0:	10800044 	addi	r2,r2,1
 c000dd4:	e0bffb15 	stw	r2,-20(fp)
 c000dd8:	e0ffff17 	ldw	r3,-4(fp)
 c000ddc:	e0bffd17 	ldw	r2,-12(fp)
 c000de0:	1885c83a 	sub	r2,r3,r2
 c000de4:	e0fffb17 	ldw	r3,-20(fp)
 c000de8:	18bfec16 	blt	r3,r2,c000d9c <__alt_data_end+0xfc000d9c>
		line(x1,y1+i,x2,y1+i,colour);
	}
}
 c000dec:	e037883a 	mov	sp,fp
 c000df0:	dfc00117 	ldw	ra,4(sp)
 c000df4:	df000017 	ldw	fp,0(sp)
 c000df8:	dec00204 	addi	sp,sp,8
 c000dfc:	f800283a 	ret

0c000e00 <right_triangle>:

/*
 * Draw a right pointing triangle with top edge at x1,y1 with height and colour
 */
void right_triangle(int x1, int y1, int height, int colour)
{
 c000e00:	defff804 	addi	sp,sp,-32
 c000e04:	dfc00715 	stw	ra,28(sp)
 c000e08:	df000615 	stw	fp,24(sp)
 c000e0c:	df000604 	addi	fp,sp,24
 c000e10:	e13ffc15 	stw	r4,-16(fp)
 c000e14:	e17ffd15 	stw	r5,-12(fp)
 c000e18:	e1bffe15 	stw	r6,-8(fp)
 c000e1c:	e1ffff15 	stw	r7,-4(fp)
	int i;
	for(i=0;i<(height/2);i++){
 c000e20:	e03ffb15 	stw	zero,-20(fp)
 c000e24:	00001106 	br	c000e6c <right_triangle+0x6c>
		line(x1,y1+i,x1+i,y1+i,colour);
 c000e28:	e0fffd17 	ldw	r3,-12(fp)
 c000e2c:	e0bffb17 	ldw	r2,-20(fp)
 c000e30:	188b883a 	add	r5,r3,r2
 c000e34:	e0fffc17 	ldw	r3,-16(fp)
 c000e38:	e0bffb17 	ldw	r2,-20(fp)
 c000e3c:	188d883a 	add	r6,r3,r2
 c000e40:	e0fffd17 	ldw	r3,-12(fp)
 c000e44:	e0bffb17 	ldw	r2,-20(fp)
 c000e48:	1887883a 	add	r3,r3,r2
 c000e4c:	e0bfff17 	ldw	r2,-4(fp)
 c000e50:	d8800015 	stw	r2,0(sp)
 c000e54:	e13ffc17 	ldw	r4,-16(fp)
 c000e58:	180f883a 	mov	r7,r3
 c000e5c:	c000cd40 	call	c000cd4 <line>
 * Draw a right pointing triangle with top edge at x1,y1 with height and colour
 */
void right_triangle(int x1, int y1, int height, int colour)
{
	int i;
	for(i=0;i<(height/2);i++){
 c000e60:	e0bffb17 	ldw	r2,-20(fp)
 c000e64:	10800044 	addi	r2,r2,1
 c000e68:	e0bffb15 	stw	r2,-20(fp)
 c000e6c:	e0bffe17 	ldw	r2,-8(fp)
 c000e70:	1006d7fa 	srli	r3,r2,31
 c000e74:	1885883a 	add	r2,r3,r2
 c000e78:	1005d07a 	srai	r2,r2,1
 c000e7c:	1007883a 	mov	r3,r2
 c000e80:	e0bffb17 	ldw	r2,-20(fp)
 c000e84:	10ffe816 	blt	r2,r3,c000e28 <__alt_data_end+0xfc000e28>
		line(x1,y1+i,x1+i,y1+i,colour);
	}
	for(i=0;i<(height/2);i++){
 c000e88:	e03ffb15 	stw	zero,-20(fp)
 c000e8c:	00002606 	br	c000f28 <right_triangle+0x128>
		line(x1,y1+(height/2)+i-1,x1+(height/2)-i-1,y1+(height/2)+i-1,colour);
 c000e90:	e0bffe17 	ldw	r2,-8(fp)
 c000e94:	1006d7fa 	srli	r3,r2,31
 c000e98:	1885883a 	add	r2,r3,r2
 c000e9c:	1005d07a 	srai	r2,r2,1
 c000ea0:	1007883a 	mov	r3,r2
 c000ea4:	e0bffd17 	ldw	r2,-12(fp)
 c000ea8:	1887883a 	add	r3,r3,r2
 c000eac:	e0bffb17 	ldw	r2,-20(fp)
 c000eb0:	1885883a 	add	r2,r3,r2
 c000eb4:	117fffc4 	addi	r5,r2,-1
 c000eb8:	e0bffe17 	ldw	r2,-8(fp)
 c000ebc:	1006d7fa 	srli	r3,r2,31
 c000ec0:	1885883a 	add	r2,r3,r2
 c000ec4:	1005d07a 	srai	r2,r2,1
 c000ec8:	1007883a 	mov	r3,r2
 c000ecc:	e0bffc17 	ldw	r2,-16(fp)
 c000ed0:	1887883a 	add	r3,r3,r2
 c000ed4:	e0bffb17 	ldw	r2,-20(fp)
 c000ed8:	1885c83a 	sub	r2,r3,r2
 c000edc:	11bfffc4 	addi	r6,r2,-1
 c000ee0:	e0bffe17 	ldw	r2,-8(fp)
 c000ee4:	1006d7fa 	srli	r3,r2,31
 c000ee8:	1885883a 	add	r2,r3,r2
 c000eec:	1005d07a 	srai	r2,r2,1
 c000ef0:	1007883a 	mov	r3,r2
 c000ef4:	e0bffd17 	ldw	r2,-12(fp)
 c000ef8:	1887883a 	add	r3,r3,r2
 c000efc:	e0bffb17 	ldw	r2,-20(fp)
 c000f00:	1885883a 	add	r2,r3,r2
 c000f04:	10ffffc4 	addi	r3,r2,-1
 c000f08:	e0bfff17 	ldw	r2,-4(fp)
 c000f0c:	d8800015 	stw	r2,0(sp)
 c000f10:	e13ffc17 	ldw	r4,-16(fp)
 c000f14:	180f883a 	mov	r7,r3
 c000f18:	c000cd40 	call	c000cd4 <line>
{
	int i;
	for(i=0;i<(height/2);i++){
		line(x1,y1+i,x1+i,y1+i,colour);
	}
	for(i=0;i<(height/2);i++){
 c000f1c:	e0bffb17 	ldw	r2,-20(fp)
 c000f20:	10800044 	addi	r2,r2,1
 c000f24:	e0bffb15 	stw	r2,-20(fp)
 c000f28:	e0bffe17 	ldw	r2,-8(fp)
 c000f2c:	1006d7fa 	srli	r3,r2,31
 c000f30:	1885883a 	add	r2,r3,r2
 c000f34:	1005d07a 	srai	r2,r2,1
 c000f38:	1007883a 	mov	r3,r2
 c000f3c:	e0bffb17 	ldw	r2,-20(fp)
 c000f40:	10ffd316 	blt	r2,r3,c000e90 <__alt_data_end+0xfc000e90>
		line(x1,y1+(height/2)+i-1,x1+(height/2)-i-1,y1+(height/2)+i-1,colour);
	}
}
 c000f44:	e037883a 	mov	sp,fp
 c000f48:	dfc00117 	ldw	ra,4(sp)
 c000f4c:	df000017 	ldw	fp,0(sp)
 c000f50:	dec00204 	addi	sp,sp,8
 c000f54:	f800283a 	ret

0c000f58 <left_triangle>:

/*
 * Draw a left pointing triangle with top edge at x1,y1 with height and colour
 */
void left_triangle(int x1, int y1, int height, int colour)
{
 c000f58:	defff804 	addi	sp,sp,-32
 c000f5c:	dfc00715 	stw	ra,28(sp)
 c000f60:	df000615 	stw	fp,24(sp)
 c000f64:	df000604 	addi	fp,sp,24
 c000f68:	e13ffc15 	stw	r4,-16(fp)
 c000f6c:	e17ffd15 	stw	r5,-12(fp)
 c000f70:	e1bffe15 	stw	r6,-8(fp)
 c000f74:	e1ffff15 	stw	r7,-4(fp)
	int i;
	for(i=0;i<(height/2);i++){
 c000f78:	e03ffb15 	stw	zero,-20(fp)
 c000f7c:	00001106 	br	c000fc4 <left_triangle+0x6c>
		line(x1,y1+i,x1-i,y1+i,colour);
 c000f80:	e0fffd17 	ldw	r3,-12(fp)
 c000f84:	e0bffb17 	ldw	r2,-20(fp)
 c000f88:	188b883a 	add	r5,r3,r2
 c000f8c:	e0fffc17 	ldw	r3,-16(fp)
 c000f90:	e0bffb17 	ldw	r2,-20(fp)
 c000f94:	188dc83a 	sub	r6,r3,r2
 c000f98:	e0fffd17 	ldw	r3,-12(fp)
 c000f9c:	e0bffb17 	ldw	r2,-20(fp)
 c000fa0:	1887883a 	add	r3,r3,r2
 c000fa4:	e0bfff17 	ldw	r2,-4(fp)
 c000fa8:	d8800015 	stw	r2,0(sp)
 c000fac:	e13ffc17 	ldw	r4,-16(fp)
 c000fb0:	180f883a 	mov	r7,r3
 c000fb4:	c000cd40 	call	c000cd4 <line>
 * Draw a left pointing triangle with top edge at x1,y1 with height and colour
 */
void left_triangle(int x1, int y1, int height, int colour)
{
	int i;
	for(i=0;i<(height/2);i++){
 c000fb8:	e0bffb17 	ldw	r2,-20(fp)
 c000fbc:	10800044 	addi	r2,r2,1
 c000fc0:	e0bffb15 	stw	r2,-20(fp)
 c000fc4:	e0bffe17 	ldw	r2,-8(fp)
 c000fc8:	1006d7fa 	srli	r3,r2,31
 c000fcc:	1885883a 	add	r2,r3,r2
 c000fd0:	1005d07a 	srai	r2,r2,1
 c000fd4:	1007883a 	mov	r3,r2
 c000fd8:	e0bffb17 	ldw	r2,-20(fp)
 c000fdc:	10ffe816 	blt	r2,r3,c000f80 <__alt_data_end+0xfc000f80>
		line(x1,y1+i,x1-i,y1+i,colour);
	}
	for(i=0;i<(height/2);i++){
 c000fe0:	e03ffb15 	stw	zero,-20(fp)
 c000fe4:	00002606 	br	c001080 <left_triangle+0x128>
		line(x1,y1+(height/2)+i-1,x1-(height/2)+i-1,y1+(height/2)+i-1,colour);
 c000fe8:	e0bffe17 	ldw	r2,-8(fp)
 c000fec:	1006d7fa 	srli	r3,r2,31
 c000ff0:	1885883a 	add	r2,r3,r2
 c000ff4:	1005d07a 	srai	r2,r2,1
 c000ff8:	1007883a 	mov	r3,r2
 c000ffc:	e0bffd17 	ldw	r2,-12(fp)
 c001000:	1887883a 	add	r3,r3,r2
 c001004:	e0bffb17 	ldw	r2,-20(fp)
 c001008:	1885883a 	add	r2,r3,r2
 c00100c:	117fffc4 	addi	r5,r2,-1
 c001010:	e0bffe17 	ldw	r2,-8(fp)
 c001014:	1006d7fa 	srli	r3,r2,31
 c001018:	1885883a 	add	r2,r3,r2
 c00101c:	1005d07a 	srai	r2,r2,1
 c001020:	1007883a 	mov	r3,r2
 c001024:	e0bffc17 	ldw	r2,-16(fp)
 c001028:	10c7c83a 	sub	r3,r2,r3
 c00102c:	e0bffb17 	ldw	r2,-20(fp)
 c001030:	1885883a 	add	r2,r3,r2
 c001034:	11bfffc4 	addi	r6,r2,-1
 c001038:	e0bffe17 	ldw	r2,-8(fp)
 c00103c:	1006d7fa 	srli	r3,r2,31
 c001040:	1885883a 	add	r2,r3,r2
 c001044:	1005d07a 	srai	r2,r2,1
 c001048:	1007883a 	mov	r3,r2
 c00104c:	e0bffd17 	ldw	r2,-12(fp)
 c001050:	1887883a 	add	r3,r3,r2
 c001054:	e0bffb17 	ldw	r2,-20(fp)
 c001058:	1885883a 	add	r2,r3,r2
 c00105c:	10ffffc4 	addi	r3,r2,-1
 c001060:	e0bfff17 	ldw	r2,-4(fp)
 c001064:	d8800015 	stw	r2,0(sp)
 c001068:	e13ffc17 	ldw	r4,-16(fp)
 c00106c:	180f883a 	mov	r7,r3
 c001070:	c000cd40 	call	c000cd4 <line>
{
	int i;
	for(i=0;i<(height/2);i++){
		line(x1,y1+i,x1-i,y1+i,colour);
	}
	for(i=0;i<(height/2);i++){
 c001074:	e0bffb17 	ldw	r2,-20(fp)
 c001078:	10800044 	addi	r2,r2,1
 c00107c:	e0bffb15 	stw	r2,-20(fp)
 c001080:	e0bffe17 	ldw	r2,-8(fp)
 c001084:	1006d7fa 	srli	r3,r2,31
 c001088:	1885883a 	add	r2,r3,r2
 c00108c:	1005d07a 	srai	r2,r2,1
 c001090:	1007883a 	mov	r3,r2
 c001094:	e0bffb17 	ldw	r2,-20(fp)
 c001098:	10ffd316 	blt	r2,r3,c000fe8 <__alt_data_end+0xfc000fe8>
		line(x1,y1+(height/2)+i-1,x1-(height/2)+i-1,y1+(height/2)+i-1,colour);
	}
}
 c00109c:	e037883a 	mov	sp,fp
 c0010a0:	dfc00117 	ldw	ra,4(sp)
 c0010a4:	df000017 	ldw	fp,0(sp)
 c0010a8:	dec00204 	addi	sp,sp,8
 c0010ac:	f800283a 	ret

0c0010b0 <down_triangle>:

/*
 * Draw a downwards pointing triangle with left edge at x1,y1 with height and colour
 */
void down_triangle(int x1, int y1, int height, int colour)
{
 c0010b0:	defff804 	addi	sp,sp,-32
 c0010b4:	dfc00715 	stw	ra,28(sp)
 c0010b8:	df000615 	stw	fp,24(sp)
 c0010bc:	df000604 	addi	fp,sp,24
 c0010c0:	e13ffc15 	stw	r4,-16(fp)
 c0010c4:	e17ffd15 	stw	r5,-12(fp)
 c0010c8:	e1bffe15 	stw	r6,-8(fp)
 c0010cc:	e1ffff15 	stw	r7,-4(fp)
	int i;
	for(i=0;i<(height/2);i++){
 c0010d0:	e03ffb15 	stw	zero,-20(fp)
 c0010d4:	00001106 	br	c00111c <down_triangle+0x6c>
		line(x1+i,y1,x1+i,y1+i,colour);
 c0010d8:	e0fffc17 	ldw	r3,-16(fp)
 c0010dc:	e0bffb17 	ldw	r2,-20(fp)
 c0010e0:	1889883a 	add	r4,r3,r2
 c0010e4:	e0fffc17 	ldw	r3,-16(fp)
 c0010e8:	e0bffb17 	ldw	r2,-20(fp)
 c0010ec:	188d883a 	add	r6,r3,r2
 c0010f0:	e0fffd17 	ldw	r3,-12(fp)
 c0010f4:	e0bffb17 	ldw	r2,-20(fp)
 c0010f8:	1887883a 	add	r3,r3,r2
 c0010fc:	e0bfff17 	ldw	r2,-4(fp)
 c001100:	d8800015 	stw	r2,0(sp)
 c001104:	e17ffd17 	ldw	r5,-12(fp)
 c001108:	180f883a 	mov	r7,r3
 c00110c:	c000cd40 	call	c000cd4 <line>
 * Draw a downwards pointing triangle with left edge at x1,y1 with height and colour
 */
void down_triangle(int x1, int y1, int height, int colour)
{
	int i;
	for(i=0;i<(height/2);i++){
 c001110:	e0bffb17 	ldw	r2,-20(fp)
 c001114:	10800044 	addi	r2,r2,1
 c001118:	e0bffb15 	stw	r2,-20(fp)
 c00111c:	e0bffe17 	ldw	r2,-8(fp)
 c001120:	1006d7fa 	srli	r3,r2,31
 c001124:	1885883a 	add	r2,r3,r2
 c001128:	1005d07a 	srai	r2,r2,1
 c00112c:	1007883a 	mov	r3,r2
 c001130:	e0bffb17 	ldw	r2,-20(fp)
 c001134:	10ffe816 	blt	r2,r3,c0010d8 <__alt_data_end+0xfc0010d8>
		line(x1+i,y1,x1+i,y1+i,colour);
	}
	for(i=0;i<(height/2);i++){
 c001138:	e03ffb15 	stw	zero,-20(fp)
 c00113c:	00002606 	br	c0011d8 <down_triangle+0x128>
		line(x1+(height/2)+i-1,y1,x1+(height/2)+i-1,y1+(height/2)-i-1,colour);
 c001140:	e0bffe17 	ldw	r2,-8(fp)
 c001144:	1006d7fa 	srli	r3,r2,31
 c001148:	1885883a 	add	r2,r3,r2
 c00114c:	1005d07a 	srai	r2,r2,1
 c001150:	1007883a 	mov	r3,r2
 c001154:	e0bffc17 	ldw	r2,-16(fp)
 c001158:	1887883a 	add	r3,r3,r2
 c00115c:	e0bffb17 	ldw	r2,-20(fp)
 c001160:	1885883a 	add	r2,r3,r2
 c001164:	113fffc4 	addi	r4,r2,-1
 c001168:	e0bffe17 	ldw	r2,-8(fp)
 c00116c:	1006d7fa 	srli	r3,r2,31
 c001170:	1885883a 	add	r2,r3,r2
 c001174:	1005d07a 	srai	r2,r2,1
 c001178:	1007883a 	mov	r3,r2
 c00117c:	e0bffc17 	ldw	r2,-16(fp)
 c001180:	1887883a 	add	r3,r3,r2
 c001184:	e0bffb17 	ldw	r2,-20(fp)
 c001188:	1885883a 	add	r2,r3,r2
 c00118c:	11bfffc4 	addi	r6,r2,-1
 c001190:	e0bffe17 	ldw	r2,-8(fp)
 c001194:	1006d7fa 	srli	r3,r2,31
 c001198:	1885883a 	add	r2,r3,r2
 c00119c:	1005d07a 	srai	r2,r2,1
 c0011a0:	1007883a 	mov	r3,r2
 c0011a4:	e0bffd17 	ldw	r2,-12(fp)
 c0011a8:	1887883a 	add	r3,r3,r2
 c0011ac:	e0bffb17 	ldw	r2,-20(fp)
 c0011b0:	1885c83a 	sub	r2,r3,r2
 c0011b4:	10ffffc4 	addi	r3,r2,-1
 c0011b8:	e0bfff17 	ldw	r2,-4(fp)
 c0011bc:	d8800015 	stw	r2,0(sp)
 c0011c0:	e17ffd17 	ldw	r5,-12(fp)
 c0011c4:	180f883a 	mov	r7,r3
 c0011c8:	c000cd40 	call	c000cd4 <line>
{
	int i;
	for(i=0;i<(height/2);i++){
		line(x1+i,y1,x1+i,y1+i,colour);
	}
	for(i=0;i<(height/2);i++){
 c0011cc:	e0bffb17 	ldw	r2,-20(fp)
 c0011d0:	10800044 	addi	r2,r2,1
 c0011d4:	e0bffb15 	stw	r2,-20(fp)
 c0011d8:	e0bffe17 	ldw	r2,-8(fp)
 c0011dc:	1006d7fa 	srli	r3,r2,31
 c0011e0:	1885883a 	add	r2,r3,r2
 c0011e4:	1005d07a 	srai	r2,r2,1
 c0011e8:	1007883a 	mov	r3,r2
 c0011ec:	e0bffb17 	ldw	r2,-20(fp)
 c0011f0:	10ffd316 	blt	r2,r3,c001140 <__alt_data_end+0xfc001140>
		line(x1+(height/2)+i-1,y1,x1+(height/2)+i-1,y1+(height/2)-i-1,colour);
	}
}
 c0011f4:	e037883a 	mov	sp,fp
 c0011f8:	dfc00117 	ldw	ra,4(sp)
 c0011fc:	df000017 	ldw	fp,0(sp)
 c001200:	dec00204 	addi	sp,sp,8
 c001204:	f800283a 	ret

0c001208 <up_triangle>:

/*
 * Draw an upwards pointing triangle with left edge at x1,y1 with height and colour
 */
void up_triangle(int x1, int y1, int height, int colour)
{
 c001208:	defff804 	addi	sp,sp,-32
 c00120c:	dfc00715 	stw	ra,28(sp)
 c001210:	df000615 	stw	fp,24(sp)
 c001214:	df000604 	addi	fp,sp,24
 c001218:	e13ffc15 	stw	r4,-16(fp)
 c00121c:	e17ffd15 	stw	r5,-12(fp)
 c001220:	e1bffe15 	stw	r6,-8(fp)
 c001224:	e1ffff15 	stw	r7,-4(fp)
	int i;
	for(i=0;i<(height/2);i++){
 c001228:	e03ffb15 	stw	zero,-20(fp)
 c00122c:	00001106 	br	c001274 <up_triangle+0x6c>
		line(x1+i,y1,x1+i,y1-i,colour);
 c001230:	e0fffc17 	ldw	r3,-16(fp)
 c001234:	e0bffb17 	ldw	r2,-20(fp)
 c001238:	1889883a 	add	r4,r3,r2
 c00123c:	e0fffc17 	ldw	r3,-16(fp)
 c001240:	e0bffb17 	ldw	r2,-20(fp)
 c001244:	188d883a 	add	r6,r3,r2
 c001248:	e0fffd17 	ldw	r3,-12(fp)
 c00124c:	e0bffb17 	ldw	r2,-20(fp)
 c001250:	1887c83a 	sub	r3,r3,r2
 c001254:	e0bfff17 	ldw	r2,-4(fp)
 c001258:	d8800015 	stw	r2,0(sp)
 c00125c:	e17ffd17 	ldw	r5,-12(fp)
 c001260:	180f883a 	mov	r7,r3
 c001264:	c000cd40 	call	c000cd4 <line>
 * Draw an upwards pointing triangle with left edge at x1,y1 with height and colour
 */
void up_triangle(int x1, int y1, int height, int colour)
{
	int i;
	for(i=0;i<(height/2);i++){
 c001268:	e0bffb17 	ldw	r2,-20(fp)
 c00126c:	10800044 	addi	r2,r2,1
 c001270:	e0bffb15 	stw	r2,-20(fp)
 c001274:	e0bffe17 	ldw	r2,-8(fp)
 c001278:	1006d7fa 	srli	r3,r2,31
 c00127c:	1885883a 	add	r2,r3,r2
 c001280:	1005d07a 	srai	r2,r2,1
 c001284:	1007883a 	mov	r3,r2
 c001288:	e0bffb17 	ldw	r2,-20(fp)
 c00128c:	10ffe816 	blt	r2,r3,c001230 <__alt_data_end+0xfc001230>
		line(x1+i,y1,x1+i,y1-i,colour);
	}
	for(i=0;i<(height/2);i++){
 c001290:	e03ffb15 	stw	zero,-20(fp)
 c001294:	00002606 	br	c001330 <up_triangle+0x128>
		line(x1+(height/2)+i-1,y1,x1+(height/2)+i-1,y1-(height/2)+i-1,colour);
 c001298:	e0bffe17 	ldw	r2,-8(fp)
 c00129c:	1006d7fa 	srli	r3,r2,31
 c0012a0:	1885883a 	add	r2,r3,r2
 c0012a4:	1005d07a 	srai	r2,r2,1
 c0012a8:	1007883a 	mov	r3,r2
 c0012ac:	e0bffc17 	ldw	r2,-16(fp)
 c0012b0:	1887883a 	add	r3,r3,r2
 c0012b4:	e0bffb17 	ldw	r2,-20(fp)
 c0012b8:	1885883a 	add	r2,r3,r2
 c0012bc:	113fffc4 	addi	r4,r2,-1
 c0012c0:	e0bffe17 	ldw	r2,-8(fp)
 c0012c4:	1006d7fa 	srli	r3,r2,31
 c0012c8:	1885883a 	add	r2,r3,r2
 c0012cc:	1005d07a 	srai	r2,r2,1
 c0012d0:	1007883a 	mov	r3,r2
 c0012d4:	e0bffc17 	ldw	r2,-16(fp)
 c0012d8:	1887883a 	add	r3,r3,r2
 c0012dc:	e0bffb17 	ldw	r2,-20(fp)
 c0012e0:	1885883a 	add	r2,r3,r2
 c0012e4:	11bfffc4 	addi	r6,r2,-1
 c0012e8:	e0bffe17 	ldw	r2,-8(fp)
 c0012ec:	1006d7fa 	srli	r3,r2,31
 c0012f0:	1885883a 	add	r2,r3,r2
 c0012f4:	1005d07a 	srai	r2,r2,1
 c0012f8:	1007883a 	mov	r3,r2
 c0012fc:	e0bffd17 	ldw	r2,-12(fp)
 c001300:	10c7c83a 	sub	r3,r2,r3
 c001304:	e0bffb17 	ldw	r2,-20(fp)
 c001308:	1885883a 	add	r2,r3,r2
 c00130c:	10ffffc4 	addi	r3,r2,-1
 c001310:	e0bfff17 	ldw	r2,-4(fp)
 c001314:	d8800015 	stw	r2,0(sp)
 c001318:	e17ffd17 	ldw	r5,-12(fp)
 c00131c:	180f883a 	mov	r7,r3
 c001320:	c000cd40 	call	c000cd4 <line>
{
	int i;
	for(i=0;i<(height/2);i++){
		line(x1+i,y1,x1+i,y1-i,colour);
	}
	for(i=0;i<(height/2);i++){
 c001324:	e0bffb17 	ldw	r2,-20(fp)
 c001328:	10800044 	addi	r2,r2,1
 c00132c:	e0bffb15 	stw	r2,-20(fp)
 c001330:	e0bffe17 	ldw	r2,-8(fp)
 c001334:	1006d7fa 	srli	r3,r2,31
 c001338:	1885883a 	add	r2,r3,r2
 c00133c:	1005d07a 	srai	r2,r2,1
 c001340:	1007883a 	mov	r3,r2
 c001344:	e0bffb17 	ldw	r2,-20(fp)
 c001348:	10ffd316 	blt	r2,r3,c001298 <__alt_data_end+0xfc001298>
		line(x1+(height/2)+i-1,y1,x1+(height/2)+i-1,y1-(height/2)+i-1,colour);
	}
}
 c00134c:	e037883a 	mov	sp,fp
 c001350:	dfc00117 	ldw	ra,4(sp)
 c001354:	df000017 	ldw	fp,0(sp)
 c001358:	dec00204 	addi	sp,sp,8
 c00135c:	f800283a 	ret

0c001360 <circle>:
/*
 * Draw circle centered at x0,y0 with radius
 */
void circle(int x0, int y0, int radius, int colour)

{
 c001360:	defff704 	addi	sp,sp,-36
 c001364:	dfc00815 	stw	ra,32(sp)
 c001368:	df000715 	stw	fp,28(sp)
 c00136c:	df000704 	addi	fp,sp,28
 c001370:	e13ffc15 	stw	r4,-16(fp)
 c001374:	e17ffd15 	stw	r5,-12(fp)
 c001378:	e1bffe15 	stw	r6,-8(fp)
 c00137c:	e1ffff15 	stw	r7,-4(fp)
    int x = radius;
 c001380:	e0bffe17 	ldw	r2,-8(fp)
 c001384:	e0bff915 	stw	r2,-28(fp)
    int y = 0;
 c001388:	e03ffa15 	stw	zero,-24(fp)
    int err = 0;
 c00138c:	e03ffb15 	stw	zero,-20(fp)

    while (x >= y)
 c001390:	00005e06 	br	c00150c <circle+0x1ac>
    {
        write_a_pixel(x0 + x, y0 + y, colour);
 c001394:	e0fffc17 	ldw	r3,-16(fp)
 c001398:	e0bff917 	ldw	r2,-28(fp)
 c00139c:	1889883a 	add	r4,r3,r2
 c0013a0:	e0fffd17 	ldw	r3,-12(fp)
 c0013a4:	e0bffa17 	ldw	r2,-24(fp)
 c0013a8:	1885883a 	add	r2,r3,r2
 c0013ac:	100b883a 	mov	r5,r2
 c0013b0:	e1bfff17 	ldw	r6,-4(fp)
 c0013b4:	c0009ec0 	call	c0009ec <write_a_pixel>
        write_a_pixel(x0 + y, y0 + x, colour);
 c0013b8:	e0fffc17 	ldw	r3,-16(fp)
 c0013bc:	e0bffa17 	ldw	r2,-24(fp)
 c0013c0:	1889883a 	add	r4,r3,r2
 c0013c4:	e0fffd17 	ldw	r3,-12(fp)
 c0013c8:	e0bff917 	ldw	r2,-28(fp)
 c0013cc:	1885883a 	add	r2,r3,r2
 c0013d0:	100b883a 	mov	r5,r2
 c0013d4:	e1bfff17 	ldw	r6,-4(fp)
 c0013d8:	c0009ec0 	call	c0009ec <write_a_pixel>
        write_a_pixel(x0 - y, y0 + x, colour);
 c0013dc:	e0fffc17 	ldw	r3,-16(fp)
 c0013e0:	e0bffa17 	ldw	r2,-24(fp)
 c0013e4:	1889c83a 	sub	r4,r3,r2
 c0013e8:	e0fffd17 	ldw	r3,-12(fp)
 c0013ec:	e0bff917 	ldw	r2,-28(fp)
 c0013f0:	1885883a 	add	r2,r3,r2
 c0013f4:	100b883a 	mov	r5,r2
 c0013f8:	e1bfff17 	ldw	r6,-4(fp)
 c0013fc:	c0009ec0 	call	c0009ec <write_a_pixel>
        write_a_pixel(x0 - x, y0 + y, colour);
 c001400:	e0fffc17 	ldw	r3,-16(fp)
 c001404:	e0bff917 	ldw	r2,-28(fp)
 c001408:	1889c83a 	sub	r4,r3,r2
 c00140c:	e0fffd17 	ldw	r3,-12(fp)
 c001410:	e0bffa17 	ldw	r2,-24(fp)
 c001414:	1885883a 	add	r2,r3,r2
 c001418:	100b883a 	mov	r5,r2
 c00141c:	e1bfff17 	ldw	r6,-4(fp)
 c001420:	c0009ec0 	call	c0009ec <write_a_pixel>
        write_a_pixel(x0 - x, y0 - y, colour);
 c001424:	e0fffc17 	ldw	r3,-16(fp)
 c001428:	e0bff917 	ldw	r2,-28(fp)
 c00142c:	1889c83a 	sub	r4,r3,r2
 c001430:	e0fffd17 	ldw	r3,-12(fp)
 c001434:	e0bffa17 	ldw	r2,-24(fp)
 c001438:	1885c83a 	sub	r2,r3,r2
 c00143c:	100b883a 	mov	r5,r2
 c001440:	e1bfff17 	ldw	r6,-4(fp)
 c001444:	c0009ec0 	call	c0009ec <write_a_pixel>
        write_a_pixel(x0 - y, y0 - x, colour);
 c001448:	e0fffc17 	ldw	r3,-16(fp)
 c00144c:	e0bffa17 	ldw	r2,-24(fp)
 c001450:	1889c83a 	sub	r4,r3,r2
 c001454:	e0fffd17 	ldw	r3,-12(fp)
 c001458:	e0bff917 	ldw	r2,-28(fp)
 c00145c:	1885c83a 	sub	r2,r3,r2
 c001460:	100b883a 	mov	r5,r2
 c001464:	e1bfff17 	ldw	r6,-4(fp)
 c001468:	c0009ec0 	call	c0009ec <write_a_pixel>
        write_a_pixel(x0 + y, y0 - x, colour);
 c00146c:	e0fffc17 	ldw	r3,-16(fp)
 c001470:	e0bffa17 	ldw	r2,-24(fp)
 c001474:	1889883a 	add	r4,r3,r2
 c001478:	e0fffd17 	ldw	r3,-12(fp)
 c00147c:	e0bff917 	ldw	r2,-28(fp)
 c001480:	1885c83a 	sub	r2,r3,r2
 c001484:	100b883a 	mov	r5,r2
 c001488:	e1bfff17 	ldw	r6,-4(fp)
 c00148c:	c0009ec0 	call	c0009ec <write_a_pixel>
        write_a_pixel(x0 + x, y0 - y, colour);
 c001490:	e0fffc17 	ldw	r3,-16(fp)
 c001494:	e0bff917 	ldw	r2,-28(fp)
 c001498:	1889883a 	add	r4,r3,r2
 c00149c:	e0fffd17 	ldw	r3,-12(fp)
 c0014a0:	e0bffa17 	ldw	r2,-24(fp)
 c0014a4:	1885c83a 	sub	r2,r3,r2
 c0014a8:	100b883a 	mov	r5,r2
 c0014ac:	e1bfff17 	ldw	r6,-4(fp)
 c0014b0:	c0009ec0 	call	c0009ec <write_a_pixel>

        if (err <= 0)
 c0014b4:	e0bffb17 	ldw	r2,-20(fp)
 c0014b8:	00800916 	blt	zero,r2,c0014e0 <circle+0x180>
        {
            y += 1;
 c0014bc:	e0bffa17 	ldw	r2,-24(fp)
 c0014c0:	10800044 	addi	r2,r2,1
 c0014c4:	e0bffa15 	stw	r2,-24(fp)
            err += 2*y + 1;
 c0014c8:	e0bffa17 	ldw	r2,-24(fp)
 c0014cc:	1085883a 	add	r2,r2,r2
 c0014d0:	10800044 	addi	r2,r2,1
 c0014d4:	e0fffb17 	ldw	r3,-20(fp)
 c0014d8:	1885883a 	add	r2,r3,r2
 c0014dc:	e0bffb15 	stw	r2,-20(fp)
        }
        if (err > 0)
 c0014e0:	e0bffb17 	ldw	r2,-20(fp)
 c0014e4:	0080090e 	bge	zero,r2,c00150c <circle+0x1ac>
        {
            x -= 1;
 c0014e8:	e0bff917 	ldw	r2,-28(fp)
 c0014ec:	10bfffc4 	addi	r2,r2,-1
 c0014f0:	e0bff915 	stw	r2,-28(fp)
            err -= 2*x + 1;
 c0014f4:	e0bff917 	ldw	r2,-28(fp)
 c0014f8:	1085883a 	add	r2,r2,r2
 c0014fc:	0084303a 	nor	r2,zero,r2
 c001500:	e0fffb17 	ldw	r3,-20(fp)
 c001504:	1885883a 	add	r2,r3,r2
 c001508:	e0bffb15 	stw	r2,-20(fp)
{
    int x = radius;
    int y = 0;
    int err = 0;

    while (x >= y)
 c00150c:	e0fff917 	ldw	r3,-28(fp)
 c001510:	e0bffa17 	ldw	r2,-24(fp)
 c001514:	18bf9f0e 	bge	r3,r2,c001394 <__alt_data_end+0xfc001394>
        {
            x -= 1;
            err -= 2*x + 1;
        }
    }
    fill(x0,y0,colour,colour);
 c001518:	e13ffc17 	ldw	r4,-16(fp)
 c00151c:	e17ffd17 	ldw	r5,-12(fp)
 c001520:	e1bfff17 	ldw	r6,-4(fp)
 c001524:	e1ffff17 	ldw	r7,-4(fp)
 c001528:	c001f840 	call	c001f84 <fill>
}
 c00152c:	e037883a 	mov	sp,fp
 c001530:	dfc00117 	ldw	ra,4(sp)
 c001534:	df000017 	ldw	fp,0(sp)
 c001538:	dec00204 	addi	sp,sp,8
 c00153c:	f800283a 	ret

0c001540 <clear_screen>:

/*
 * Clear the screen
 */
void clear_screen(void)
{
 c001540:	defffc04 	addi	sp,sp,-16
 c001544:	dfc00315 	stw	ra,12(sp)
 c001548:	df000215 	stw	fp,8(sp)
 c00154c:	df000204 	addi	fp,sp,8
	int i;
	for(i=0;i<480;i++){
 c001550:	e03fff15 	stw	zero,-4(fp)
 c001554:	00000906 	br	c00157c <clear_screen+0x3c>
		line(0,i,799,i,BLACK);
 c001558:	d8000015 	stw	zero,0(sp)
 c00155c:	0009883a 	mov	r4,zero
 c001560:	e17fff17 	ldw	r5,-4(fp)
 c001564:	0180c7c4 	movi	r6,799
 c001568:	e1ffff17 	ldw	r7,-4(fp)
 c00156c:	c000cd40 	call	c000cd4 <line>
 * Clear the screen
 */
void clear_screen(void)
{
	int i;
	for(i=0;i<480;i++){
 c001570:	e0bfff17 	ldw	r2,-4(fp)
 c001574:	10800044 	addi	r2,r2,1
 c001578:	e0bfff15 	stw	r2,-4(fp)
 c00157c:	e0bfff17 	ldw	r2,-4(fp)
 c001580:	10807810 	cmplti	r2,r2,480
 c001584:	103ff41e 	bne	r2,zero,c001558 <__alt_data_end+0xfc001558>
		line(0,i,799,i,BLACK);
	}
}
 c001588:	e037883a 	mov	sp,fp
 c00158c:	dfc00117 	ldw	ra,4(sp)
 c001590:	df000017 	ldw	fp,0(sp)
 c001594:	dec00204 	addi	sp,sp,8
 c001598:	f800283a 	ret

0c00159c <reticle>:

/*
 * Draw reticle to center of the screen
 */
void reticle(int colour)
{
 c00159c:	defffc04 	addi	sp,sp,-16
 c0015a0:	dfc00315 	stw	ra,12(sp)
 c0015a4:	df000215 	stw	fp,8(sp)
 c0015a8:	df000204 	addi	fp,sp,8
 c0015ac:	e13fff15 	stw	r4,-4(fp)
	rectangle(398,150,402,330,colour);
 c0015b0:	e0bfff17 	ldw	r2,-4(fp)
 c0015b4:	d8800015 	stw	r2,0(sp)
 c0015b8:	01006384 	movi	r4,398
 c0015bc:	01402584 	movi	r5,150
 c0015c0:	01806484 	movi	r6,402
 c0015c4:	01c05284 	movi	r7,330
 c0015c8:	c000d740 	call	c000d74 <rectangle>
	rectangle(310,238,490,242,colour);
 c0015cc:	e0bfff17 	ldw	r2,-4(fp)
 c0015d0:	d8800015 	stw	r2,0(sp)
 c0015d4:	01004d84 	movi	r4,310
 c0015d8:	01403b84 	movi	r5,238
 c0015dc:	01807a84 	movi	r6,490
 c0015e0:	01c03c84 	movi	r7,242
 c0015e4:	c000d740 	call	c000d74 <rectangle>
	rectangle(340,272,460,274,colour);
 c0015e8:	e0bfff17 	ldw	r2,-4(fp)
 c0015ec:	d8800015 	stw	r2,0(sp)
 c0015f0:	01005504 	movi	r4,340
 c0015f4:	01404404 	movi	r5,272
 c0015f8:	01807304 	movi	r6,460
 c0015fc:	01c04484 	movi	r7,274
 c001600:	c000d740 	call	c000d74 <rectangle>
	rectangle(370,304,430,306,colour);
 c001604:	e0bfff17 	ldw	r2,-4(fp)
 c001608:	d8800015 	stw	r2,0(sp)
 c00160c:	01005c84 	movi	r4,370
 c001610:	01404c04 	movi	r5,304
 c001614:	01806b84 	movi	r6,430
 c001618:	01c04c84 	movi	r7,306
 c00161c:	c000d740 	call	c000d74 <rectangle>
}
 c001620:	e037883a 	mov	sp,fp
 c001624:	dfc00117 	ldw	ra,4(sp)
 c001628:	df000017 	ldw	fp,0(sp)
 c00162c:	dec00204 	addi	sp,sp,8
 c001630:	f800283a 	ret

0c001634 <print_display>:
/*
 * Draw set arrow layout with colour
 */
void print_display(int arrow_colour, int menu_colour, int screen_colour,
				  int reticle_colour, int fire_colour)
{
 c001634:	defffa04 	addi	sp,sp,-24
 c001638:	dfc00515 	stw	ra,20(sp)
 c00163c:	df000415 	stw	fp,16(sp)
 c001640:	df000404 	addi	fp,sp,16
 c001644:	e13ffc15 	stw	r4,-16(fp)
 c001648:	e17ffd15 	stw	r5,-12(fp)
 c00164c:	e1bffe15 	stw	r6,-8(fp)
 c001650:	e1ffff15 	stw	r7,-4(fp)
	clear_screen();
 c001654:	c0015400 	call	c001540 <clear_screen>
	//rectangle(60,60,740,420,screen_colour);
	//reticle(reticle_colour);

	//MENU ICONS
	draw_button(fire,fire_colour);
 c001658:	010000c4 	movi	r4,3
 c00165c:	e1400217 	ldw	r5,8(fp)
 c001660:	c0016cc0 	call	c0016cc <draw_button>
	draw_button(security,menu_colour);
 c001664:	01000084 	movi	r4,2
 c001668:	e17ffd17 	ldw	r5,-12(fp)
 c00166c:	c0016cc0 	call	c0016cc <draw_button>
	draw_button(manual,menu_colour);
 c001670:	0009883a 	mov	r4,zero
 c001674:	e17ffd17 	ldw	r5,-12(fp)
 c001678:	c0016cc0 	call	c0016cc <draw_button>
	draw_button(automatic,menu_colour);
 c00167c:	01000044 	movi	r4,1
 c001680:	e17ffd17 	ldw	r5,-12(fp)
 c001684:	c0016cc0 	call	c0016cc <draw_button>
	draw_button(left,arrow_colour);
 c001688:	01000104 	movi	r4,4
 c00168c:	e17ffc17 	ldw	r5,-16(fp)
 c001690:	c0016cc0 	call	c0016cc <draw_button>
	draw_button(right,arrow_colour);
 c001694:	01000144 	movi	r4,5
 c001698:	e17ffc17 	ldw	r5,-16(fp)
 c00169c:	c0016cc0 	call	c0016cc <draw_button>
	draw_button(up,arrow_colour);
 c0016a0:	010001c4 	movi	r4,7
 c0016a4:	e17ffc17 	ldw	r5,-16(fp)
 c0016a8:	c0016cc0 	call	c0016cc <draw_button>
	draw_button(down,arrow_colour);
 c0016ac:	01000184 	movi	r4,6
 c0016b0:	e17ffc17 	ldw	r5,-16(fp)
 c0016b4:	c0016cc0 	call	c0016cc <draw_button>
}
 c0016b8:	e037883a 	mov	sp,fp
 c0016bc:	dfc00117 	ldw	ra,4(sp)
 c0016c0:	df000017 	ldw	fp,0(sp)
 c0016c4:	dec00204 	addi	sp,sp,8
 c0016c8:	f800283a 	ret

0c0016cc <draw_button>:

void draw_button(button_type button, int colour){
 c0016cc:	defffa04 	addi	sp,sp,-24
 c0016d0:	dfc00515 	stw	ra,20(sp)
 c0016d4:	df000415 	stw	fp,16(sp)
 c0016d8:	df000404 	addi	fp,sp,16
 c0016dc:	e13ffe15 	stw	r4,-8(fp)
 c0016e0:	e17fff15 	stw	r5,-4(fp)
	switch(button){
 c0016e4:	e0bffe17 	ldw	r2,-8(fp)
 c0016e8:	10800428 	cmpgeui	r2,r2,16
 c0016ec:	1001e31e 	bne	r2,zero,c001e7c <draw_button+0x7b0>
 c0016f0:	e0bffe17 	ldw	r2,-8(fp)
 c0016f4:	100690ba 	slli	r3,r2,2
 c0016f8:	00830034 	movhi	r2,3072
 c0016fc:	1085c304 	addi	r2,r2,5900
 c001700:	1885883a 	add	r2,r3,r2
 c001704:	10800017 	ldw	r2,0(r2)
 c001708:	1000683a 	jmp	r2
 c00170c:	0c0017e4 	muli	r16,at,95
 c001710:	0c0018c4 	addi	r16,at,99
 c001714:	0c001964 	muli	r16,at,101
 c001718:	0c00174c 	andi	r16,at,93
 c00171c:	0c001a84 	addi	r16,at,106
 c001720:	0c001a9c 	xori	r16,at,106
 c001724:	0c001ab4 	orhi	r16,at,106
 c001728:	0c001acc 	andi	r16,at,107
 c00172c:	0c001b7c 	xorhi	r16,at,109
 c001730:	0c001c5c 	xori	r16,at,113
 c001734:	0c001cfc 	xorhi	r16,at,115
 c001738:	0c001ae4 	muli	r16,at,107
 c00173c:	0c001e4c 	andi	r16,at,121
 c001740:	0c001e64 	muli	r16,at,121
 c001744:	0c001e34 	orhi	r16,at,120
 c001748:	0c001e1c 	xori	r16,at,120

	case(fire):
		circle(600,450,20,colour);
 c00174c:	01009604 	movi	r4,600
 c001750:	01407084 	movi	r5,450
 c001754:	01800504 	movi	r6,20
 c001758:	e1ffff17 	ldw	r7,-4(fp)
 c00175c:	c0013600 	call	c001360 <circle>
		OutGraphicsCharFont1(590,447,BLACK,colour,'F',0);
 c001760:	00801184 	movi	r2,70
 c001764:	d8800015 	stw	r2,0(sp)
 c001768:	d8000115 	stw	zero,4(sp)
 c00176c:	01009384 	movi	r4,590
 c001770:	01406fc4 	movi	r5,447
 c001774:	000d883a 	mov	r6,zero
 c001778:	e1ffff17 	ldw	r7,-4(fp)
 c00177c:	c0023880 	call	c002388 <OutGraphicsCharFont1>
		OutGraphicsCharFont1(596,447,BLACK,colour,'I',0);
 c001780:	00801244 	movi	r2,73
 c001784:	d8800015 	stw	r2,0(sp)
 c001788:	d8000115 	stw	zero,4(sp)
 c00178c:	01009504 	movi	r4,596
 c001790:	01406fc4 	movi	r5,447
 c001794:	000d883a 	mov	r6,zero
 c001798:	e1ffff17 	ldw	r7,-4(fp)
 c00179c:	c0023880 	call	c002388 <OutGraphicsCharFont1>
		OutGraphicsCharFont1(602,447,BLACK,colour,'R',0);
 c0017a0:	00801484 	movi	r2,82
 c0017a4:	d8800015 	stw	r2,0(sp)
 c0017a8:	d8000115 	stw	zero,4(sp)
 c0017ac:	01009684 	movi	r4,602
 c0017b0:	01406fc4 	movi	r5,447
 c0017b4:	000d883a 	mov	r6,zero
 c0017b8:	e1ffff17 	ldw	r7,-4(fp)
 c0017bc:	c0023880 	call	c002388 <OutGraphicsCharFont1>
		OutGraphicsCharFont1(608,447,BLACK,colour,'E',0);
 c0017c0:	00801144 	movi	r2,69
 c0017c4:	d8800015 	stw	r2,0(sp)
 c0017c8:	d8000115 	stw	zero,4(sp)
 c0017cc:	01009804 	movi	r4,608
 c0017d0:	01406fc4 	movi	r5,447
 c0017d4:	000d883a 	mov	r6,zero
 c0017d8:	e1ffff17 	ldw	r7,-4(fp)
 c0017dc:	c0023880 	call	c002388 <OutGraphicsCharFont1>
		break;
 c0017e0:	0001a606 	br	c001e7c <draw_button+0x7b0>

	case(manual):
		rectangle(500,10,580,50,colour);
 c0017e4:	e0bfff17 	ldw	r2,-4(fp)
 c0017e8:	d8800015 	stw	r2,0(sp)
 c0017ec:	01007d04 	movi	r4,500
 c0017f0:	01400284 	movi	r5,10
 c0017f4:	01809104 	movi	r6,580
 c0017f8:	01c00c84 	movi	r7,50
 c0017fc:	c000d740 	call	c000d74 <rectangle>
		OutGraphicsCharFont1(520,27,BLACK,colour,'M',0);
 c001800:	00801344 	movi	r2,77
 c001804:	d8800015 	stw	r2,0(sp)
 c001808:	d8000115 	stw	zero,4(sp)
 c00180c:	01008204 	movi	r4,520
 c001810:	014006c4 	movi	r5,27
 c001814:	000d883a 	mov	r6,zero
 c001818:	e1ffff17 	ldw	r7,-4(fp)
 c00181c:	c0023880 	call	c002388 <OutGraphicsCharFont1>
		OutGraphicsCharFont1(528,27,BLACK,colour,'A',0);
 c001820:	00801044 	movi	r2,65
 c001824:	d8800015 	stw	r2,0(sp)
 c001828:	d8000115 	stw	zero,4(sp)
 c00182c:	01008404 	movi	r4,528
 c001830:	014006c4 	movi	r5,27
 c001834:	000d883a 	mov	r6,zero
 c001838:	e1ffff17 	ldw	r7,-4(fp)
 c00183c:	c0023880 	call	c002388 <OutGraphicsCharFont1>
		OutGraphicsCharFont1(536,27,BLACK,colour,'N',0);
 c001840:	00801384 	movi	r2,78
 c001844:	d8800015 	stw	r2,0(sp)
 c001848:	d8000115 	stw	zero,4(sp)
 c00184c:	01008604 	movi	r4,536
 c001850:	014006c4 	movi	r5,27
 c001854:	000d883a 	mov	r6,zero
 c001858:	e1ffff17 	ldw	r7,-4(fp)
 c00185c:	c0023880 	call	c002388 <OutGraphicsCharFont1>
		OutGraphicsCharFont1(544,27,BLACK,colour,'U',0);
 c001860:	00801544 	movi	r2,85
 c001864:	d8800015 	stw	r2,0(sp)
 c001868:	d8000115 	stw	zero,4(sp)
 c00186c:	01008804 	movi	r4,544
 c001870:	014006c4 	movi	r5,27
 c001874:	000d883a 	mov	r6,zero
 c001878:	e1ffff17 	ldw	r7,-4(fp)
 c00187c:	c0023880 	call	c002388 <OutGraphicsCharFont1>
		OutGraphicsCharFont1(552,27,BLACK,colour,'A',0);
 c001880:	00801044 	movi	r2,65
 c001884:	d8800015 	stw	r2,0(sp)
 c001888:	d8000115 	stw	zero,4(sp)
 c00188c:	01008a04 	movi	r4,552
 c001890:	014006c4 	movi	r5,27
 c001894:	000d883a 	mov	r6,zero
 c001898:	e1ffff17 	ldw	r7,-4(fp)
 c00189c:	c0023880 	call	c002388 <OutGraphicsCharFont1>
		OutGraphicsCharFont1(560,27,BLACK,colour,'L',0);
 c0018a0:	00801304 	movi	r2,76
 c0018a4:	d8800015 	stw	r2,0(sp)
 c0018a8:	d8000115 	stw	zero,4(sp)
 c0018ac:	01008c04 	movi	r4,560
 c0018b0:	014006c4 	movi	r5,27
 c0018b4:	000d883a 	mov	r6,zero
 c0018b8:	e1ffff17 	ldw	r7,-4(fp)
 c0018bc:	c0023880 	call	c002388 <OutGraphicsCharFont1>
		break;
 c0018c0:	00016e06 	br	c001e7c <draw_button+0x7b0>

	case(automatic):
		rectangle(590,10,670,50,colour);
 c0018c4:	e0bfff17 	ldw	r2,-4(fp)
 c0018c8:	d8800015 	stw	r2,0(sp)
 c0018cc:	01009384 	movi	r4,590
 c0018d0:	01400284 	movi	r5,10
 c0018d4:	0180a784 	movi	r6,670
 c0018d8:	01c00c84 	movi	r7,50
 c0018dc:	c000d740 	call	c000d74 <rectangle>
		OutGraphicsCharFont1(618,27,BLACK,colour,'A',0);
 c0018e0:	00801044 	movi	r2,65
 c0018e4:	d8800015 	stw	r2,0(sp)
 c0018e8:	d8000115 	stw	zero,4(sp)
 c0018ec:	01009a84 	movi	r4,618
 c0018f0:	014006c4 	movi	r5,27
 c0018f4:	000d883a 	mov	r6,zero
 c0018f8:	e1ffff17 	ldw	r7,-4(fp)
 c0018fc:	c0023880 	call	c002388 <OutGraphicsCharFont1>
		OutGraphicsCharFont1(624,27,BLACK,colour,'U',0);
 c001900:	00801544 	movi	r2,85
 c001904:	d8800015 	stw	r2,0(sp)
 c001908:	d8000115 	stw	zero,4(sp)
 c00190c:	01009c04 	movi	r4,624
 c001910:	014006c4 	movi	r5,27
 c001914:	000d883a 	mov	r6,zero
 c001918:	e1ffff17 	ldw	r7,-4(fp)
 c00191c:	c0023880 	call	c002388 <OutGraphicsCharFont1>
		OutGraphicsCharFont1(632,27,BLACK,colour,'T',0);
 c001920:	00801504 	movi	r2,84
 c001924:	d8800015 	stw	r2,0(sp)
 c001928:	d8000115 	stw	zero,4(sp)
 c00192c:	01009e04 	movi	r4,632
 c001930:	014006c4 	movi	r5,27
 c001934:	000d883a 	mov	r6,zero
 c001938:	e1ffff17 	ldw	r7,-4(fp)
 c00193c:	c0023880 	call	c002388 <OutGraphicsCharFont1>
		OutGraphicsCharFont1(640,27,BLACK,colour,'O',0);
 c001940:	008013c4 	movi	r2,79
 c001944:	d8800015 	stw	r2,0(sp)
 c001948:	d8000115 	stw	zero,4(sp)
 c00194c:	0100a004 	movi	r4,640
 c001950:	014006c4 	movi	r5,27
 c001954:	000d883a 	mov	r6,zero
 c001958:	e1ffff17 	ldw	r7,-4(fp)
 c00195c:	c0023880 	call	c002388 <OutGraphicsCharFont1>
		break;
 c001960:	00014606 	br	c001e7c <draw_button+0x7b0>

	case(security):
		rectangle(680,10,760,50,colour);
 c001964:	e0bfff17 	ldw	r2,-4(fp)
 c001968:	d8800015 	stw	r2,0(sp)
 c00196c:	0100aa04 	movi	r4,680
 c001970:	01400284 	movi	r5,10
 c001974:	0180be04 	movi	r6,760
 c001978:	01c00c84 	movi	r7,50
 c00197c:	c000d740 	call	c000d74 <rectangle>
		OutGraphicsCharFont1(692,27,BLACK,colour,'S',0);
 c001980:	008014c4 	movi	r2,83
 c001984:	d8800015 	stw	r2,0(sp)
 c001988:	d8000115 	stw	zero,4(sp)
 c00198c:	0100ad04 	movi	r4,692
 c001990:	014006c4 	movi	r5,27
 c001994:	000d883a 	mov	r6,zero
 c001998:	e1ffff17 	ldw	r7,-4(fp)
 c00199c:	c0023880 	call	c002388 <OutGraphicsCharFont1>
		OutGraphicsCharFont1(700,27,BLACK,colour,'E',0);
 c0019a0:	00801144 	movi	r2,69
 c0019a4:	d8800015 	stw	r2,0(sp)
 c0019a8:	d8000115 	stw	zero,4(sp)
 c0019ac:	0100af04 	movi	r4,700
 c0019b0:	014006c4 	movi	r5,27
 c0019b4:	000d883a 	mov	r6,zero
 c0019b8:	e1ffff17 	ldw	r7,-4(fp)
 c0019bc:	c0023880 	call	c002388 <OutGraphicsCharFont1>
		OutGraphicsCharFont1(708,27,BLACK,colour,'C',0);
 c0019c0:	008010c4 	movi	r2,67
 c0019c4:	d8800015 	stw	r2,0(sp)
 c0019c8:	d8000115 	stw	zero,4(sp)
 c0019cc:	0100b104 	movi	r4,708
 c0019d0:	014006c4 	movi	r5,27
 c0019d4:	000d883a 	mov	r6,zero
 c0019d8:	e1ffff17 	ldw	r7,-4(fp)
 c0019dc:	c0023880 	call	c002388 <OutGraphicsCharFont1>
		OutGraphicsCharFont1(716,27,BLACK,colour,'U',0);
 c0019e0:	00801544 	movi	r2,85
 c0019e4:	d8800015 	stw	r2,0(sp)
 c0019e8:	d8000115 	stw	zero,4(sp)
 c0019ec:	0100b304 	movi	r4,716
 c0019f0:	014006c4 	movi	r5,27
 c0019f4:	000d883a 	mov	r6,zero
 c0019f8:	e1ffff17 	ldw	r7,-4(fp)
 c0019fc:	c0023880 	call	c002388 <OutGraphicsCharFont1>
		OutGraphicsCharFont1(724,27,BLACK,colour,'R',0);
 c001a00:	00801484 	movi	r2,82
 c001a04:	d8800015 	stw	r2,0(sp)
 c001a08:	d8000115 	stw	zero,4(sp)
 c001a0c:	0100b504 	movi	r4,724
 c001a10:	014006c4 	movi	r5,27
 c001a14:	000d883a 	mov	r6,zero
 c001a18:	e1ffff17 	ldw	r7,-4(fp)
 c001a1c:	c0023880 	call	c002388 <OutGraphicsCharFont1>
		OutGraphicsCharFont1(732,27,BLACK,colour,'I',0);
 c001a20:	00801244 	movi	r2,73
 c001a24:	d8800015 	stw	r2,0(sp)
 c001a28:	d8000115 	stw	zero,4(sp)
 c001a2c:	0100b704 	movi	r4,732
 c001a30:	014006c4 	movi	r5,27
 c001a34:	000d883a 	mov	r6,zero
 c001a38:	e1ffff17 	ldw	r7,-4(fp)
 c001a3c:	c0023880 	call	c002388 <OutGraphicsCharFont1>
		OutGraphicsCharFont1(740,27,BLACK,colour,'T',0);
 c001a40:	00801504 	movi	r2,84
 c001a44:	d8800015 	stw	r2,0(sp)
 c001a48:	d8000115 	stw	zero,4(sp)
 c001a4c:	0100b904 	movi	r4,740
 c001a50:	014006c4 	movi	r5,27
 c001a54:	000d883a 	mov	r6,zero
 c001a58:	e1ffff17 	ldw	r7,-4(fp)
 c001a5c:	c0023880 	call	c002388 <OutGraphicsCharFont1>
		OutGraphicsCharFont1(748,27,BLACK,colour,'Y',0);
 c001a60:	00801644 	movi	r2,89
 c001a64:	d8800015 	stw	r2,0(sp)
 c001a68:	d8000115 	stw	zero,4(sp)
 c001a6c:	0100bb04 	movi	r4,748
 c001a70:	014006c4 	movi	r5,27
 c001a74:	000d883a 	mov	r6,zero
 c001a78:	e1ffff17 	ldw	r7,-4(fp)
 c001a7c:	c0023880 	call	c002388 <OutGraphicsCharFont1>
		break;
 c001a80:	0000fe06 	br	c001e7c <draw_button+0x7b0>

	case(left):
		left_triangle(LARROW_X1,LARROW_Y1,ARROW_LENGTH,colour);
 c001a84:	01000c84 	movi	r4,50
 c001a88:	01402f84 	movi	r5,190
 c001a8c:	01801904 	movi	r6,100
 c001a90:	e1ffff17 	ldw	r7,-4(fp)
 c001a94:	c000f580 	call	c000f58 <left_triangle>
		break;
 c001a98:	0000f806 	br	c001e7c <draw_button+0x7b0>

	case(right):
		right_triangle(RARROW_X1,RARROW_Y1,ARROW_LENGTH,colour);
 c001a9c:	0100bb84 	movi	r4,750
 c001aa0:	01402f84 	movi	r5,190
 c001aa4:	01801904 	movi	r6,100
 c001aa8:	e1ffff17 	ldw	r7,-4(fp)
 c001aac:	c000e000 	call	c000e00 <right_triangle>
		break;
 c001ab0:	0000f206 	br	c001e7c <draw_button+0x7b0>

	case(down):
		down_triangle(DARROW_X1,DARROW_Y1,ARROW_LENGTH,colour);
 c001ab4:	01005784 	movi	r4,350
 c001ab8:	01406b84 	movi	r5,430
 c001abc:	01801904 	movi	r6,100
 c001ac0:	e1ffff17 	ldw	r7,-4(fp)
 c001ac4:	c0010b00 	call	c0010b0 <down_triangle>
		break;
 c001ac8:	0000ec06 	br	c001e7c <draw_button+0x7b0>

	case(up):
		up_triangle(UARROW_X1,UARROW_Y1,ARROW_LENGTH,colour);
 c001acc:	01005784 	movi	r4,350
 c001ad0:	01400c84 	movi	r5,50
 c001ad4:	01801904 	movi	r6,100
 c001ad8:	e1ffff17 	ldw	r7,-4(fp)
 c001adc:	c0012080 	call	c001208 <up_triangle>
		break;
 c001ae0:	0000e606 	br	c001e7c <draw_button+0x7b0>

	case(fire_pressed):
			circle(600,450,17,colour);
 c001ae4:	01009604 	movi	r4,600
 c001ae8:	01407084 	movi	r5,450
 c001aec:	01800444 	movi	r6,17
 c001af0:	e1ffff17 	ldw	r7,-4(fp)
 c001af4:	c0013600 	call	c001360 <circle>
			OutGraphicsCharFont1(590,447,BLACK,colour,'F',0);
 c001af8:	00801184 	movi	r2,70
 c001afc:	d8800015 	stw	r2,0(sp)
 c001b00:	d8000115 	stw	zero,4(sp)
 c001b04:	01009384 	movi	r4,590
 c001b08:	01406fc4 	movi	r5,447
 c001b0c:	000d883a 	mov	r6,zero
 c001b10:	e1ffff17 	ldw	r7,-4(fp)
 c001b14:	c0023880 	call	c002388 <OutGraphicsCharFont1>
			OutGraphicsCharFont1(596,447,BLACK,colour,'I',0);
 c001b18:	00801244 	movi	r2,73
 c001b1c:	d8800015 	stw	r2,0(sp)
 c001b20:	d8000115 	stw	zero,4(sp)
 c001b24:	01009504 	movi	r4,596
 c001b28:	01406fc4 	movi	r5,447
 c001b2c:	000d883a 	mov	r6,zero
 c001b30:	e1ffff17 	ldw	r7,-4(fp)
 c001b34:	c0023880 	call	c002388 <OutGraphicsCharFont1>
			OutGraphicsCharFont1(602,447,BLACK,colour,'R',0);
 c001b38:	00801484 	movi	r2,82
 c001b3c:	d8800015 	stw	r2,0(sp)
 c001b40:	d8000115 	stw	zero,4(sp)
 c001b44:	01009684 	movi	r4,602
 c001b48:	01406fc4 	movi	r5,447
 c001b4c:	000d883a 	mov	r6,zero
 c001b50:	e1ffff17 	ldw	r7,-4(fp)
 c001b54:	c0023880 	call	c002388 <OutGraphicsCharFont1>
			OutGraphicsCharFont1(608,447,BLACK,colour,'E',0);
 c001b58:	00801144 	movi	r2,69
 c001b5c:	d8800015 	stw	r2,0(sp)
 c001b60:	d8000115 	stw	zero,4(sp)
 c001b64:	01009804 	movi	r4,608
 c001b68:	01406fc4 	movi	r5,447
 c001b6c:	000d883a 	mov	r6,zero
 c001b70:	e1ffff17 	ldw	r7,-4(fp)
 c001b74:	c0023880 	call	c002388 <OutGraphicsCharFont1>
			break;
 c001b78:	0000c006 	br	c001e7c <draw_button+0x7b0>

	case(manual_pressed):
			rectangle(503,13,577,47,colour);
 c001b7c:	e0bfff17 	ldw	r2,-4(fp)
 c001b80:	d8800015 	stw	r2,0(sp)
 c001b84:	01007dc4 	movi	r4,503
 c001b88:	01400344 	movi	r5,13
 c001b8c:	01809044 	movi	r6,577
 c001b90:	01c00bc4 	movi	r7,47
 c001b94:	c000d740 	call	c000d74 <rectangle>
			OutGraphicsCharFont1(520,27,BLACK,colour,'M',0);
 c001b98:	00801344 	movi	r2,77
 c001b9c:	d8800015 	stw	r2,0(sp)
 c001ba0:	d8000115 	stw	zero,4(sp)
 c001ba4:	01008204 	movi	r4,520
 c001ba8:	014006c4 	movi	r5,27
 c001bac:	000d883a 	mov	r6,zero
 c001bb0:	e1ffff17 	ldw	r7,-4(fp)
 c001bb4:	c0023880 	call	c002388 <OutGraphicsCharFont1>
			OutGraphicsCharFont1(528,27,BLACK,colour,'A',0);
 c001bb8:	00801044 	movi	r2,65
 c001bbc:	d8800015 	stw	r2,0(sp)
 c001bc0:	d8000115 	stw	zero,4(sp)
 c001bc4:	01008404 	movi	r4,528
 c001bc8:	014006c4 	movi	r5,27
 c001bcc:	000d883a 	mov	r6,zero
 c001bd0:	e1ffff17 	ldw	r7,-4(fp)
 c001bd4:	c0023880 	call	c002388 <OutGraphicsCharFont1>
			OutGraphicsCharFont1(536,27,BLACK,colour,'N',0);
 c001bd8:	00801384 	movi	r2,78
 c001bdc:	d8800015 	stw	r2,0(sp)
 c001be0:	d8000115 	stw	zero,4(sp)
 c001be4:	01008604 	movi	r4,536
 c001be8:	014006c4 	movi	r5,27
 c001bec:	000d883a 	mov	r6,zero
 c001bf0:	e1ffff17 	ldw	r7,-4(fp)
 c001bf4:	c0023880 	call	c002388 <OutGraphicsCharFont1>
			OutGraphicsCharFont1(544,27,BLACK,colour,'U',0);
 c001bf8:	00801544 	movi	r2,85
 c001bfc:	d8800015 	stw	r2,0(sp)
 c001c00:	d8000115 	stw	zero,4(sp)
 c001c04:	01008804 	movi	r4,544
 c001c08:	014006c4 	movi	r5,27
 c001c0c:	000d883a 	mov	r6,zero
 c001c10:	e1ffff17 	ldw	r7,-4(fp)
 c001c14:	c0023880 	call	c002388 <OutGraphicsCharFont1>
			OutGraphicsCharFont1(552,27,BLACK,colour,'A',0);
 c001c18:	00801044 	movi	r2,65
 c001c1c:	d8800015 	stw	r2,0(sp)
 c001c20:	d8000115 	stw	zero,4(sp)
 c001c24:	01008a04 	movi	r4,552
 c001c28:	014006c4 	movi	r5,27
 c001c2c:	000d883a 	mov	r6,zero
 c001c30:	e1ffff17 	ldw	r7,-4(fp)
 c001c34:	c0023880 	call	c002388 <OutGraphicsCharFont1>
			OutGraphicsCharFont1(560,27,BLACK,colour,'L',0);
 c001c38:	00801304 	movi	r2,76
 c001c3c:	d8800015 	stw	r2,0(sp)
 c001c40:	d8000115 	stw	zero,4(sp)
 c001c44:	01008c04 	movi	r4,560
 c001c48:	014006c4 	movi	r5,27
 c001c4c:	000d883a 	mov	r6,zero
 c001c50:	e1ffff17 	ldw	r7,-4(fp)
 c001c54:	c0023880 	call	c002388 <OutGraphicsCharFont1>
			break;
 c001c58:	00008806 	br	c001e7c <draw_button+0x7b0>

	case(automatic_pressed):
			rectangle(593,13,667,47,colour);
 c001c5c:	e0bfff17 	ldw	r2,-4(fp)
 c001c60:	d8800015 	stw	r2,0(sp)
 c001c64:	01009444 	movi	r4,593
 c001c68:	01400344 	movi	r5,13
 c001c6c:	0180a6c4 	movi	r6,667
 c001c70:	01c00bc4 	movi	r7,47
 c001c74:	c000d740 	call	c000d74 <rectangle>
			OutGraphicsCharFont1(618,27,BLACK,colour,'A',0);
 c001c78:	00801044 	movi	r2,65
 c001c7c:	d8800015 	stw	r2,0(sp)
 c001c80:	d8000115 	stw	zero,4(sp)
 c001c84:	01009a84 	movi	r4,618
 c001c88:	014006c4 	movi	r5,27
 c001c8c:	000d883a 	mov	r6,zero
 c001c90:	e1ffff17 	ldw	r7,-4(fp)
 c001c94:	c0023880 	call	c002388 <OutGraphicsCharFont1>
			OutGraphicsCharFont1(624,27,BLACK,colour,'U',0);
 c001c98:	00801544 	movi	r2,85
 c001c9c:	d8800015 	stw	r2,0(sp)
 c001ca0:	d8000115 	stw	zero,4(sp)
 c001ca4:	01009c04 	movi	r4,624
 c001ca8:	014006c4 	movi	r5,27
 c001cac:	000d883a 	mov	r6,zero
 c001cb0:	e1ffff17 	ldw	r7,-4(fp)
 c001cb4:	c0023880 	call	c002388 <OutGraphicsCharFont1>
			OutGraphicsCharFont1(632,27,BLACK,colour,'T',0);
 c001cb8:	00801504 	movi	r2,84
 c001cbc:	d8800015 	stw	r2,0(sp)
 c001cc0:	d8000115 	stw	zero,4(sp)
 c001cc4:	01009e04 	movi	r4,632
 c001cc8:	014006c4 	movi	r5,27
 c001ccc:	000d883a 	mov	r6,zero
 c001cd0:	e1ffff17 	ldw	r7,-4(fp)
 c001cd4:	c0023880 	call	c002388 <OutGraphicsCharFont1>
			OutGraphicsCharFont1(640,27,BLACK,colour,'O',0);
 c001cd8:	008013c4 	movi	r2,79
 c001cdc:	d8800015 	stw	r2,0(sp)
 c001ce0:	d8000115 	stw	zero,4(sp)
 c001ce4:	0100a004 	movi	r4,640
 c001ce8:	014006c4 	movi	r5,27
 c001cec:	000d883a 	mov	r6,zero
 c001cf0:	e1ffff17 	ldw	r7,-4(fp)
 c001cf4:	c0023880 	call	c002388 <OutGraphicsCharFont1>
			break;
 c001cf8:	00006006 	br	c001e7c <draw_button+0x7b0>

	case(security_pressed):
			rectangle(683,13,757,47,colour);
 c001cfc:	e0bfff17 	ldw	r2,-4(fp)
 c001d00:	d8800015 	stw	r2,0(sp)
 c001d04:	0100aac4 	movi	r4,683
 c001d08:	01400344 	movi	r5,13
 c001d0c:	0180bd44 	movi	r6,757
 c001d10:	01c00bc4 	movi	r7,47
 c001d14:	c000d740 	call	c000d74 <rectangle>
			OutGraphicsCharFont1(692,27,BLACK,colour,'S',0);
 c001d18:	008014c4 	movi	r2,83
 c001d1c:	d8800015 	stw	r2,0(sp)
 c001d20:	d8000115 	stw	zero,4(sp)
 c001d24:	0100ad04 	movi	r4,692
 c001d28:	014006c4 	movi	r5,27
 c001d2c:	000d883a 	mov	r6,zero
 c001d30:	e1ffff17 	ldw	r7,-4(fp)
 c001d34:	c0023880 	call	c002388 <OutGraphicsCharFont1>
			OutGraphicsCharFont1(700,27,BLACK,colour,'E',0);
 c001d38:	00801144 	movi	r2,69
 c001d3c:	d8800015 	stw	r2,0(sp)
 c001d40:	d8000115 	stw	zero,4(sp)
 c001d44:	0100af04 	movi	r4,700
 c001d48:	014006c4 	movi	r5,27
 c001d4c:	000d883a 	mov	r6,zero
 c001d50:	e1ffff17 	ldw	r7,-4(fp)
 c001d54:	c0023880 	call	c002388 <OutGraphicsCharFont1>
			OutGraphicsCharFont1(708,27,BLACK,colour,'C',0);
 c001d58:	008010c4 	movi	r2,67
 c001d5c:	d8800015 	stw	r2,0(sp)
 c001d60:	d8000115 	stw	zero,4(sp)
 c001d64:	0100b104 	movi	r4,708
 c001d68:	014006c4 	movi	r5,27
 c001d6c:	000d883a 	mov	r6,zero
 c001d70:	e1ffff17 	ldw	r7,-4(fp)
 c001d74:	c0023880 	call	c002388 <OutGraphicsCharFont1>
			OutGraphicsCharFont1(716,27,BLACK,colour,'U',0);
 c001d78:	00801544 	movi	r2,85
 c001d7c:	d8800015 	stw	r2,0(sp)
 c001d80:	d8000115 	stw	zero,4(sp)
 c001d84:	0100b304 	movi	r4,716
 c001d88:	014006c4 	movi	r5,27
 c001d8c:	000d883a 	mov	r6,zero
 c001d90:	e1ffff17 	ldw	r7,-4(fp)
 c001d94:	c0023880 	call	c002388 <OutGraphicsCharFont1>
			OutGraphicsCharFont1(724,27,BLACK,colour,'R',0);
 c001d98:	00801484 	movi	r2,82
 c001d9c:	d8800015 	stw	r2,0(sp)
 c001da0:	d8000115 	stw	zero,4(sp)
 c001da4:	0100b504 	movi	r4,724
 c001da8:	014006c4 	movi	r5,27
 c001dac:	000d883a 	mov	r6,zero
 c001db0:	e1ffff17 	ldw	r7,-4(fp)
 c001db4:	c0023880 	call	c002388 <OutGraphicsCharFont1>
			OutGraphicsCharFont1(732,27,BLACK,colour,'I',0);
 c001db8:	00801244 	movi	r2,73
 c001dbc:	d8800015 	stw	r2,0(sp)
 c001dc0:	d8000115 	stw	zero,4(sp)
 c001dc4:	0100b704 	movi	r4,732
 c001dc8:	014006c4 	movi	r5,27
 c001dcc:	000d883a 	mov	r6,zero
 c001dd0:	e1ffff17 	ldw	r7,-4(fp)
 c001dd4:	c0023880 	call	c002388 <OutGraphicsCharFont1>
			OutGraphicsCharFont1(740,27,BLACK,colour,'T',0);
 c001dd8:	00801504 	movi	r2,84
 c001ddc:	d8800015 	stw	r2,0(sp)
 c001de0:	d8000115 	stw	zero,4(sp)
 c001de4:	0100b904 	movi	r4,740
 c001de8:	014006c4 	movi	r5,27
 c001dec:	000d883a 	mov	r6,zero
 c001df0:	e1ffff17 	ldw	r7,-4(fp)
 c001df4:	c0023880 	call	c002388 <OutGraphicsCharFont1>
			OutGraphicsCharFont1(748,27,BLACK,colour,'Y',0);
 c001df8:	00801644 	movi	r2,89
 c001dfc:	d8800015 	stw	r2,0(sp)
 c001e00:	d8000115 	stw	zero,4(sp)
 c001e04:	0100bb04 	movi	r4,748
 c001e08:	014006c4 	movi	r5,27
 c001e0c:	000d883a 	mov	r6,zero
 c001e10:	e1ffff17 	ldw	r7,-4(fp)
 c001e14:	c0023880 	call	c002388 <OutGraphicsCharFont1>
			break;
 c001e18:	00001806 	br	c001e7c <draw_button+0x7b0>

	case(up_pressed):
		up_triangle(UARROW_X1 + 12,UARROW_Y1-6,ARROW_LENGTH - 24,colour);
 c001e1c:	01005a84 	movi	r4,362
 c001e20:	01400b04 	movi	r5,44
 c001e24:	01801304 	movi	r6,76
 c001e28:	e1ffff17 	ldw	r7,-4(fp)
 c001e2c:	c0012080 	call	c001208 <up_triangle>
		break;
 c001e30:	00001206 	br	c001e7c <draw_button+0x7b0>

	case(down_pressed):
		down_triangle(DARROW_X1 + 12,DARROW_Y1+6,ARROW_LENGTH - 24,colour);
 c001e34:	01005a84 	movi	r4,362
 c001e38:	01406d04 	movi	r5,436
 c001e3c:	01801304 	movi	r6,76
 c001e40:	e1ffff17 	ldw	r7,-4(fp)
 c001e44:	c0010b00 	call	c0010b0 <down_triangle>
		break;
 c001e48:	00000c06 	br	c001e7c <draw_button+0x7b0>

	case(left_pressed):
		left_triangle(LARROW_X1 - 6,LARROW_Y1+12,ARROW_LENGTH - 24,colour);
 c001e4c:	01000b04 	movi	r4,44
 c001e50:	01403284 	movi	r5,202
 c001e54:	01801304 	movi	r6,76
 c001e58:	e1ffff17 	ldw	r7,-4(fp)
 c001e5c:	c000f580 	call	c000f58 <left_triangle>
		break;
 c001e60:	00000606 	br	c001e7c <draw_button+0x7b0>

	case(right_pressed):
		right_triangle(RARROW_X1 + 6,RARROW_Y1+12,ARROW_LENGTH - 24,colour);
 c001e64:	0100bd04 	movi	r4,756
 c001e68:	01403284 	movi	r5,202
 c001e6c:	01801304 	movi	r6,76
 c001e70:	e1ffff17 	ldw	r7,-4(fp)
 c001e74:	c000e000 	call	c000e00 <right_triangle>
		break;
 c001e78:	0001883a 	nop
	}
}
 c001e7c:	e037883a 	mov	sp,fp
 c001e80:	dfc00117 	ldw	ra,4(sp)
 c001e84:	df000017 	ldw	fp,0(sp)
 c001e88:	dec00204 	addi	sp,sp,8
 c001e8c:	f800283a 	ret

0c001e90 <push_pixel>:
* simple stack based around an array
* Used for FILL algorithm
******************************************************************************************************************************/

int push_pixel(XYPixel p1)
{
 c001e90:	defffd04 	addi	sp,sp,-12
 c001e94:	df000215 	stw	fp,8(sp)
 c001e98:	df000204 	addi	fp,sp,8
 c001e9c:	e13ffe15 	stw	r4,-8(fp)
 c001ea0:	e17fff15 	stw	r5,-4(fp)
    if(Next <= &XYStack[1000]) {
 c001ea4:	d0e00117 	ldw	r3,-32764(gp)
 c001ea8:	008302f4 	movhi	r2,3083
 c001eac:	10a00a04 	addi	r2,r2,-32728
 c001eb0:	10c00936 	bltu	r2,r3,c001ed8 <push_pixel+0x48>
        *Next++ = p1;
 c001eb4:	d0a00117 	ldw	r2,-32764(gp)
 c001eb8:	10c00204 	addi	r3,r2,8
 c001ebc:	d0e00115 	stw	r3,-32764(gp)
 c001ec0:	e0fffe17 	ldw	r3,-8(fp)
 c001ec4:	10c00015 	stw	r3,0(r2)
 c001ec8:	e0ffff17 	ldw	r3,-4(fp)
 c001ecc:	10c00115 	stw	r3,4(r2)
        return 0 ;
 c001ed0:	0005883a 	mov	r2,zero
 c001ed4:	00000106 	br	c001edc <push_pixel+0x4c>
    }
    else
        return -1 ;
 c001ed8:	00bfffc4 	movi	r2,-1
}
 c001edc:	e037883a 	mov	sp,fp
 c001ee0:	df000017 	ldw	fp,0(sp)
 c001ee4:	dec00104 	addi	sp,sp,4
 c001ee8:	f800283a 	ret

0c001eec <pop_pixel>:

int pop_pixel(XYPixel *theXYPixel)
{
 c001eec:	defffe04 	addi	sp,sp,-8
 c001ef0:	df000115 	stw	fp,4(sp)
 c001ef4:	df000104 	addi	fp,sp,4
 c001ef8:	e13fff15 	stw	r4,-4(fp)
    if(Next >= XYStack) {
 c001efc:	d0e00117 	ldw	r3,-32764(gp)
 c001f00:	008302b4 	movhi	r2,3082
 c001f04:	10983a04 	addi	r2,r2,24808
 c001f08:	18800b36 	bltu	r3,r2,c001f38 <pop_pixel+0x4c>
        *theXYPixel = *(--Next);
 c001f0c:	d0a00117 	ldw	r2,-32764(gp)
 c001f10:	10bffe04 	addi	r2,r2,-8
 c001f14:	d0a00115 	stw	r2,-32764(gp)
 c001f18:	d0e00117 	ldw	r3,-32764(gp)
 c001f1c:	e0bfff17 	ldw	r2,-4(fp)
 c001f20:	19000017 	ldw	r4,0(r3)
 c001f24:	11000015 	stw	r4,0(r2)
 c001f28:	18c00117 	ldw	r3,4(r3)
 c001f2c:	10c00115 	stw	r3,4(r2)
        return 0 ;
 c001f30:	0005883a 	mov	r2,zero
 c001f34:	00000106 	br	c001f3c <pop_pixel+0x50>
    }
    else
        return -1 ;
 c001f38:	00bfffc4 	movi	r2,-1
}
 c001f3c:	e037883a 	mov	sp,fp
 c001f40:	df000017 	ldw	fp,0(sp)
 c001f44:	dec00104 	addi	sp,sp,4
 c001f48:	f800283a 	ret

0c001f4c <is_stack_empty>:

int is_stack_empty(void)
{
 c001f4c:	deffff04 	addi	sp,sp,-4
 c001f50:	df000015 	stw	fp,0(sp)
 c001f54:	d839883a 	mov	fp,sp
    if(Next == XYStack)
 c001f58:	d0e00117 	ldw	r3,-32764(gp)
 c001f5c:	008302b4 	movhi	r2,3082
 c001f60:	10983a04 	addi	r2,r2,24808
 c001f64:	1880021e 	bne	r3,r2,c001f70 <is_stack_empty+0x24>
        return 1 ;
 c001f68:	00800044 	movi	r2,1
 c001f6c:	00000106 	br	c001f74 <is_stack_empty+0x28>
    else
        return 0 ;
 c001f70:	0005883a 	mov	r2,zero
}
 c001f74:	e037883a 	mov	sp,fp
 c001f78:	df000017 	ldw	fp,0(sp)
 c001f7c:	dec00104 	addi	sp,sp,4
 c001f80:	f800283a 	ret

0c001f84 <fill>:
/********************************************************************************************
** fill Algorithm
** Taken from Procedural Elements of Computer Graphics: David Rogers
********************************************************************************************/
void fill(int _x, int _y, int _FillColour, int _BoundaryColour)
{
 c001f84:	deffed04 	addi	sp,sp,-76
 c001f88:	dfc01215 	stw	ra,72(sp)
 c001f8c:	df001115 	stw	fp,68(sp)
 c001f90:	dd001015 	stw	r20,64(sp)
 c001f94:	dcc00f15 	stw	r19,60(sp)
 c001f98:	dc800e15 	stw	r18,56(sp)
 c001f9c:	dc400d15 	stw	r17,52(sp)
 c001fa0:	dc000c15 	stw	r16,48(sp)
 c001fa4:	df001104 	addi	fp,sp,68
 c001fa8:	e13ff715 	stw	r4,-36(fp)
 c001fac:	e17ff815 	stw	r5,-32(fp)
 c001fb0:	e1bff915 	stw	r6,-28(fp)
 c001fb4:	e1fffa15 	stw	r7,-24(fp)
    register int     x, y ;
    register int     BoundaryColour = _BoundaryColour;
 c001fb8:	e4bffa17 	ldw	r18,-24(fp)
    register int 	 PixelColour, FillColour = _FillColour ;
 c001fbc:	e53ff917 	ldw	r20,-28(fp)

    int     XRight, XLeft ;
    int     SaveX, SaveY ;      		// temp variable
    XYPixel aPoint, aPoint1 ;           // temp var

    Next = XYStack ;                    // initialise to start of stack
 c001fc0:	008302b4 	movhi	r2,3082
 c001fc4:	10983a04 	addi	r2,r2,24808
 c001fc8:	d0a00115 	stw	r2,-32764(gp)
    aPoint.x = _x ;
 c001fcc:	e0bff717 	ldw	r2,-36(fp)
 c001fd0:	e0bff315 	stw	r2,-52(fp)
    aPoint.y = _y ;
 c001fd4:	e0bff817 	ldw	r2,-32(fp)
 c001fd8:	e0bff415 	stw	r2,-48(fp)

    push_pixel(aPoint) ;                   // push the seed
 c001fdc:	e13ff317 	ldw	r4,-52(fp)
 c001fe0:	e17ff417 	ldw	r5,-48(fp)
 c001fe4:	c001e900 	call	c001e90 <push_pixel>

    while(!is_stack_empty())                 // keep going until no more items on the stack
 c001fe8:	0000db06 	br	c002358 <fill+0x3d4>
    {
        pop_pixel(&aPoint) ;                 // get a point from the stack
 c001fec:	e0bff304 	addi	r2,fp,-52
 c001ff0:	1009883a 	mov	r4,r2
 c001ff4:	c001eec0 	call	c001eec <pop_pixel>
        x = aPoint.x ;
 c001ff8:	e43ff317 	ldw	r16,-52(fp)
        y = aPoint.y ;
 c001ffc:	e47ff417 	ldw	r17,-48(fp)
        write_a_pixel(x, y, FillColour);     // fill the point in the fill colour
 c002000:	8009883a 	mov	r4,r16
 c002004:	880b883a 	mov	r5,r17
 c002008:	a00d883a 	mov	r6,r20
 c00200c:	c0009ec0 	call	c0009ec <write_a_pixel>

        // fill the span to the right of the seed value
        SaveX = x++ ;                  // save the x coord of the the point we just filled and move one pixel right
 c002010:	8005883a 	mov	r2,r16
 c002014:	14000044 	addi	r16,r2,1
 c002018:	e0bfef15 	stw	r2,-68(fp)

        while((char)(read_a_pixel(x,y)) != (char)(BoundaryColour))							// if new pixel is not the boundary colour
 c00201c:	00000606 	br	c002038 <fill+0xb4>
            write_a_pixel(x++, y, FillColour);     											// fill it and keep moving right along a horizontal line
 c002020:	8005883a 	mov	r2,r16
 c002024:	14000044 	addi	r16,r2,1
 c002028:	1009883a 	mov	r4,r2
 c00202c:	880b883a 	mov	r5,r17
 c002030:	a00d883a 	mov	r6,r20
 c002034:	c0009ec0 	call	c0009ec <write_a_pixel>
        write_a_pixel(x, y, FillColour);     // fill the point in the fill colour

        // fill the span to the right of the seed value
        SaveX = x++ ;                  // save the x coord of the the point we just filled and move one pixel right

        while((char)(read_a_pixel(x,y)) != (char)(BoundaryColour))							// if new pixel is not the boundary colour
 c002038:	8009883a 	mov	r4,r16
 c00203c:	880b883a 	mov	r5,r17
 c002040:	c000a680 	call	c000a68 <read_a_pixel>
 c002044:	1007883a 	mov	r3,r2
 c002048:	9005883a 	mov	r2,r18
 c00204c:	18c03fcc 	andi	r3,r3,255
 c002050:	18c0201c 	xori	r3,r3,128
 c002054:	18ffe004 	addi	r3,r3,-128
 c002058:	10803fcc 	andi	r2,r2,255
 c00205c:	1080201c 	xori	r2,r2,128
 c002060:	10bfe004 	addi	r2,r2,-128
 c002064:	18bfee1e 	bne	r3,r2,c002020 <__alt_data_end+0xfc002020>
            write_a_pixel(x++, y, FillColour);     											// fill it and keep moving right along a horizontal line

        // must have found the boundary colour when moving right
        XRight = x - 1 ;		// save X coord of the last filled pixel on this line when moving right
 c002068:	80bfffc4 	addi	r2,r16,-1
 c00206c:	e0bff015 	stw	r2,-64(fp)
        x = SaveX ;				// get the original starting x back
 c002070:	e43fef17 	ldw	r16,-68(fp)

        // now fill the span to the left of the seed value

        --x ;
 c002074:	843fffc4 	addi	r16,r16,-1

        while((char)(read_a_pixel(x,y)) != (char)(BoundaryColour))						// if new pixel is not the boundary colour
 c002078:	00000606 	br	c002094 <fill+0x110>
            write_a_pixel(x--, y, FillColour);    											// fill it and keep moving left along a horizontal line
 c00207c:	8005883a 	mov	r2,r16
 c002080:	143fffc4 	addi	r16,r2,-1
 c002084:	1009883a 	mov	r4,r2
 c002088:	880b883a 	mov	r5,r17
 c00208c:	a00d883a 	mov	r6,r20
 c002090:	c0009ec0 	call	c0009ec <write_a_pixel>

        // now fill the span to the left of the seed value

        --x ;

        while((char)(read_a_pixel(x,y)) != (char)(BoundaryColour))						// if new pixel is not the boundary colour
 c002094:	8009883a 	mov	r4,r16
 c002098:	880b883a 	mov	r5,r17
 c00209c:	c000a680 	call	c000a68 <read_a_pixel>
 c0020a0:	1007883a 	mov	r3,r2
 c0020a4:	9005883a 	mov	r2,r18
 c0020a8:	18c03fcc 	andi	r3,r3,255
 c0020ac:	18c0201c 	xori	r3,r3,128
 c0020b0:	18ffe004 	addi	r3,r3,-128
 c0020b4:	10803fcc 	andi	r2,r2,255
 c0020b8:	1080201c 	xori	r2,r2,128
 c0020bc:	10bfe004 	addi	r2,r2,-128
 c0020c0:	18bfee1e 	bne	r3,r2,c00207c <__alt_data_end+0xfc00207c>
            write_a_pixel(x--, y, FillColour);    											// fill it and keep moving left along a horizontal line

        XLeft = x + 1 ;			// save X coord of the last filled pixel on this line when moving left
 c0020c4:	80800044 	addi	r2,r16,1
 c0020c8:	e0bff115 	stw	r2,-60(fp)
        x = SaveX ; 			// get original x coord for the seed back
 c0020cc:	e43fef17 	ldw	r16,-68(fp)
		///////////////////////////////////////////////////////////////////////////////////////////////////
        // check that the scan line below is neither a polygon boundary nor
        // has been previously completely filled
        //////////////////////////////////////////////////////////////////////////////////////////////////

        SaveY = y ;			// save the current y coordinate of the line we have just drawn
 c0020d0:	e47ff215 	stw	r17,-56(fp)
        x = XLeft ;			// starting at the left x
 c0020d4:	e43ff117 	ldw	r16,-60(fp)
        ++y ;				// move down one line
 c0020d8:	8c400044 	addi	r17,r17,1

		// starting from the left keep moving right looking at the pixel
        // until we find something that is neither filled nor boundary colour as it represents something on the line that may be a pixel to fill

        do {
        	PixelColour = read_a_pixel(x++,y) ;
 c0020dc:	8005883a 	mov	r2,r16
 c0020e0:	14000044 	addi	r16,r2,1
 c0020e4:	1009883a 	mov	r4,r2
 c0020e8:	880b883a 	mov	r5,r17
 c0020ec:	c000a680 	call	c000a68 <read_a_pixel>
 c0020f0:	1027883a 	mov	r19,r2
        } while(((char)(PixelColour) == (char)(BoundaryColour)) || ((char)(PixelColour) == (char)(FillColour)) );
 c0020f4:	9807883a 	mov	r3,r19
 c0020f8:	9005883a 	mov	r2,r18
 c0020fc:	18c03fcc 	andi	r3,r3,255
 c002100:	18c0201c 	xori	r3,r3,128
 c002104:	18ffe004 	addi	r3,r3,-128
 c002108:	10803fcc 	andi	r2,r2,255
 c00210c:	1080201c 	xori	r2,r2,128
 c002110:	10bfe004 	addi	r2,r2,-128
 c002114:	18bff126 	beq	r3,r2,c0020dc <__alt_data_end+0xfc0020dc>
 c002118:	9807883a 	mov	r3,r19
 c00211c:	a005883a 	mov	r2,r20
 c002120:	18c03fcc 	andi	r3,r3,255
 c002124:	18c0201c 	xori	r3,r3,128
 c002128:	18ffe004 	addi	r3,r3,-128
 c00212c:	10803fcc 	andi	r2,r2,255
 c002130:	1080201c 	xori	r2,r2,128
 c002134:	10bfe004 	addi	r2,r2,-128
 c002138:	18bfe826 	beq	r3,r2,c0020dc <__alt_data_end+0xfc0020dc>

         x-- ;
 c00213c:	843fffc4 	addi	r16,r16,-1

        // to get here we must have found something that needs filling i.e. the above loop found that the line below was not a complete boundary edge or filled
		// if we are still less than the previous right most X coord then it would be a new point that we need to seed
        while(x <= XRight)
 c002140:	00003006 	br	c002204 <fill+0x280>
        {
            // seed the scan line below
        	// if the pixel at x,y is not a boundary colour and less than extreme right

        	// skip over any pixels already filled
            while(((char)(read_a_pixel(x,y)) != (char)(BoundaryColour)) && (x <= XRight))
 c002144:	00000106 	br	c00214c <fill+0x1c8>
               ++x ;
 c002148:	84000044 	addi	r16,r16,1
        {
            // seed the scan line below
        	// if the pixel at x,y is not a boundary colour and less than extreme right

        	// skip over any pixels already filled
            while(((char)(read_a_pixel(x,y)) != (char)(BoundaryColour)) && (x <= XRight))
 c00214c:	8009883a 	mov	r4,r16
 c002150:	880b883a 	mov	r5,r17
 c002154:	c000a680 	call	c000a68 <read_a_pixel>
 c002158:	1007883a 	mov	r3,r2
 c00215c:	9005883a 	mov	r2,r18
 c002160:	18c03fcc 	andi	r3,r3,255
 c002164:	18c0201c 	xori	r3,r3,128
 c002168:	18ffe004 	addi	r3,r3,-128
 c00216c:	10803fcc 	andi	r2,r2,255
 c002170:	1080201c 	xori	r2,r2,128
 c002174:	10bfe004 	addi	r2,r2,-128
 c002178:	18800226 	beq	r3,r2,c002184 <fill+0x200>
 c00217c:	e0bff017 	ldw	r2,-64(fp)
 c002180:	143ff10e 	bge	r2,r16,c002148 <__alt_data_end+0xfc002148>
               ++x ;

            // push the  extreme right pixel onto the stack
            aPoint1.x = x - 1 ;
 c002184:	80bfffc4 	addi	r2,r16,-1
 c002188:	e0bff515 	stw	r2,-44(fp)
            aPoint1.y = y ;
 c00218c:	e47ff615 	stw	r17,-40(fp)
            push_pixel(aPoint1) ;
 c002190:	e13ff517 	ldw	r4,-44(fp)
 c002194:	e17ff617 	ldw	r5,-40(fp)
 c002198:	c001e900 	call	c001e90 <push_pixel>

            // continue checking in case the span is interrupted by another shape inside the one we are trying to fill

            ++x ;
 c00219c:	84000044 	addi	r16,r16,1

            // skip over anything that is filled or boundary (i.e. other shape) inside the one we are trying to fill
            do {
            	PixelColour = read_a_pixel(x++,y) ;
 c0021a0:	8005883a 	mov	r2,r16
 c0021a4:	14000044 	addi	r16,r2,1
 c0021a8:	1009883a 	mov	r4,r2
 c0021ac:	880b883a 	mov	r5,r17
 c0021b0:	c000a680 	call	c000a68 <read_a_pixel>
 c0021b4:	1027883a 	mov	r19,r2
            } while(((char)(PixelColour) == (char)(BoundaryColour)) || ((char)(PixelColour) == (char)(FillColour)) );
 c0021b8:	9807883a 	mov	r3,r19
 c0021bc:	9005883a 	mov	r2,r18
 c0021c0:	18c03fcc 	andi	r3,r3,255
 c0021c4:	18c0201c 	xori	r3,r3,128
 c0021c8:	18ffe004 	addi	r3,r3,-128
 c0021cc:	10803fcc 	andi	r2,r2,255
 c0021d0:	1080201c 	xori	r2,r2,128
 c0021d4:	10bfe004 	addi	r2,r2,-128
 c0021d8:	18bff126 	beq	r3,r2,c0021a0 <__alt_data_end+0xfc0021a0>
 c0021dc:	9807883a 	mov	r3,r19
 c0021e0:	a005883a 	mov	r2,r20
 c0021e4:	18c03fcc 	andi	r3,r3,255
 c0021e8:	18c0201c 	xori	r3,r3,128
 c0021ec:	18ffe004 	addi	r3,r3,-128
 c0021f0:	10803fcc 	andi	r2,r2,255
 c0021f4:	1080201c 	xori	r2,r2,128
 c0021f8:	10bfe004 	addi	r2,r2,-128
 c0021fc:	18bfe826 	beq	r3,r2,c0021a0 <__alt_data_end+0xfc0021a0>

             x-- ;
 c002200:	843fffc4 	addi	r16,r16,-1

         x-- ;

        // to get here we must have found something that needs filling i.e. the above loop found that the line below was not a complete boundary edge or filled
		// if we are still less than the previous right most X coord then it would be a new point that we need to seed
        while(x <= XRight)
 c002204:	e0bff017 	ldw	r2,-64(fp)
 c002208:	143fce0e 	bge	r2,r16,c002144 <__alt_data_end+0xfc002144>
            	PixelColour = read_a_pixel(x++,y) ;
            } while(((char)(PixelColour) == (char)(BoundaryColour)) || ((char)(PixelColour) == (char)(FillColour)) );

             x-- ;
        }
      	x = SaveX ;
 c00220c:	e43fef17 	ldw	r16,-68(fp)
       	y = SaveY ;
 c002210:	e47ff217 	ldw	r17,-56(fp)

	 ///////////////////////////////////////////////////////////////////////////////////////////////////
    // check that the scan line above is neither a polygon boundary nor
    // has been previously completely filled

        y = SaveY;
 c002214:	e47ff217 	ldw	r17,-56(fp)
        x = XLeft ;
 c002218:	e43ff117 	ldw	r16,-60(fp)
        --y ;
 c00221c:	8c7fffc4 	addi	r17,r17,-1

        do {
        	PixelColour = read_a_pixel(x++,y) ;
 c002220:	8005883a 	mov	r2,r16
 c002224:	14000044 	addi	r16,r2,1
 c002228:	1009883a 	mov	r4,r2
 c00222c:	880b883a 	mov	r5,r17
 c002230:	c000a680 	call	c000a68 <read_a_pixel>
 c002234:	1027883a 	mov	r19,r2
        } while(((char)(PixelColour) == (char)(BoundaryColour)) || ((char)(PixelColour) == (char)(FillColour)) );
 c002238:	9807883a 	mov	r3,r19
 c00223c:	9005883a 	mov	r2,r18
 c002240:	18c03fcc 	andi	r3,r3,255
 c002244:	18c0201c 	xori	r3,r3,128
 c002248:	18ffe004 	addi	r3,r3,-128
 c00224c:	10803fcc 	andi	r2,r2,255
 c002250:	1080201c 	xori	r2,r2,128
 c002254:	10bfe004 	addi	r2,r2,-128
 c002258:	18bff126 	beq	r3,r2,c002220 <__alt_data_end+0xfc002220>
 c00225c:	9807883a 	mov	r3,r19
 c002260:	a005883a 	mov	r2,r20
 c002264:	18c03fcc 	andi	r3,r3,255
 c002268:	18c0201c 	xori	r3,r3,128
 c00226c:	18ffe004 	addi	r3,r3,-128
 c002270:	10803fcc 	andi	r2,r2,255
 c002274:	1080201c 	xori	r2,r2,128
 c002278:	10bfe004 	addi	r2,r2,-128
 c00227c:	18bfe826 	beq	r3,r2,c002220 <__alt_data_end+0xfc002220>

         x-- ;
 c002280:	843fffc4 	addi	r16,r16,-1

        while(x <= XRight)		// if we have not reached the boundary
 c002284:	00003006 	br	c002348 <fill+0x3c4>
        {
            // seed the scan line below
            while(((char)(read_a_pixel(x,y)) != (char)(BoundaryColour)) && (x <= XRight))
 c002288:	00000106 	br	c002290 <fill+0x30c>
               ++x ;		// look for right most x inside the boudan
 c00228c:	84000044 	addi	r16,r16,1
         x-- ;

        while(x <= XRight)		// if we have not reached the boundary
        {
            // seed the scan line below
            while(((char)(read_a_pixel(x,y)) != (char)(BoundaryColour)) && (x <= XRight))
 c002290:	8009883a 	mov	r4,r16
 c002294:	880b883a 	mov	r5,r17
 c002298:	c000a680 	call	c000a68 <read_a_pixel>
 c00229c:	1007883a 	mov	r3,r2
 c0022a0:	9005883a 	mov	r2,r18
 c0022a4:	18c03fcc 	andi	r3,r3,255
 c0022a8:	18c0201c 	xori	r3,r3,128
 c0022ac:	18ffe004 	addi	r3,r3,-128
 c0022b0:	10803fcc 	andi	r2,r2,255
 c0022b4:	1080201c 	xori	r2,r2,128
 c0022b8:	10bfe004 	addi	r2,r2,-128
 c0022bc:	18800226 	beq	r3,r2,c0022c8 <fill+0x344>
 c0022c0:	e0bff017 	ldw	r2,-64(fp)
 c0022c4:	143ff10e 	bge	r2,r16,c00228c <__alt_data_end+0xfc00228c>
               ++x ;		// look for right most x inside the boudan

            // push the  extreme right pixel onto the stack
            aPoint1.x = x - 1 ;
 c0022c8:	80bfffc4 	addi	r2,r16,-1
 c0022cc:	e0bff515 	stw	r2,-44(fp)
            aPoint1.y = y ;
 c0022d0:	e47ff615 	stw	r17,-40(fp)
            push_pixel(aPoint1) ;
 c0022d4:	e13ff517 	ldw	r4,-44(fp)
 c0022d8:	e17ff617 	ldw	r5,-40(fp)
 c0022dc:	c001e900 	call	c001e90 <push_pixel>

            // continue checking in case the span is interrupted
            ++x ;
 c0022e0:	84000044 	addi	r16,r16,1

            do {
            	PixelColour = read_a_pixel(x++,y) ;
 c0022e4:	8005883a 	mov	r2,r16
 c0022e8:	14000044 	addi	r16,r2,1
 c0022ec:	1009883a 	mov	r4,r2
 c0022f0:	880b883a 	mov	r5,r17
 c0022f4:	c000a680 	call	c000a68 <read_a_pixel>
 c0022f8:	1027883a 	mov	r19,r2
            } while(((char)(PixelColour) == (char)(BoundaryColour)) || ((char)(PixelColour) == (char)(FillColour)) );
 c0022fc:	9807883a 	mov	r3,r19
 c002300:	9005883a 	mov	r2,r18
 c002304:	18c03fcc 	andi	r3,r3,255
 c002308:	18c0201c 	xori	r3,r3,128
 c00230c:	18ffe004 	addi	r3,r3,-128
 c002310:	10803fcc 	andi	r2,r2,255
 c002314:	1080201c 	xori	r2,r2,128
 c002318:	10bfe004 	addi	r2,r2,-128
 c00231c:	18bff126 	beq	r3,r2,c0022e4 <__alt_data_end+0xfc0022e4>
 c002320:	9807883a 	mov	r3,r19
 c002324:	a005883a 	mov	r2,r20
 c002328:	18c03fcc 	andi	r3,r3,255
 c00232c:	18c0201c 	xori	r3,r3,128
 c002330:	18ffe004 	addi	r3,r3,-128
 c002334:	10803fcc 	andi	r2,r2,255
 c002338:	1080201c 	xori	r2,r2,128
 c00233c:	10bfe004 	addi	r2,r2,-128
 c002340:	18bfe826 	beq	r3,r2,c0022e4 <__alt_data_end+0xfc0022e4>

             x-- ;
 c002344:	843fffc4 	addi	r16,r16,-1
        	PixelColour = read_a_pixel(x++,y) ;
        } while(((char)(PixelColour) == (char)(BoundaryColour)) || ((char)(PixelColour) == (char)(FillColour)) );

         x-- ;

        while(x <= XRight)		// if we have not reached the boundary
 c002348:	e0bff017 	ldw	r2,-64(fp)
 c00234c:	143fce0e 	bge	r2,r16,c002288 <__alt_data_end+0xfc002288>
            	PixelColour = read_a_pixel(x++,y) ;
            } while(((char)(PixelColour) == (char)(BoundaryColour)) || ((char)(PixelColour) == (char)(FillColour)) );

             x-- ;
        }
       	x = SaveX ;
 c002350:	e43fef17 	ldw	r16,-68(fp)
       	y = SaveY ;
 c002354:	e47ff217 	ldw	r17,-56(fp)
    aPoint.x = _x ;
    aPoint.y = _y ;

    push_pixel(aPoint) ;                   // push the seed

    while(!is_stack_empty())                 // keep going until no more items on the stack
 c002358:	c001f4c0 	call	c001f4c <is_stack_empty>
 c00235c:	103f2326 	beq	r2,zero,c001fec <__alt_data_end+0xfc001fec>
             x-- ;
        }
       	x = SaveX ;
       	y = SaveY ;
    }
}
 c002360:	e6fffb04 	addi	sp,fp,-20
 c002364:	dfc00617 	ldw	ra,24(sp)
 c002368:	df000517 	ldw	fp,20(sp)
 c00236c:	dd000417 	ldw	r20,16(sp)
 c002370:	dcc00317 	ldw	r19,12(sp)
 c002374:	dc800217 	ldw	r18,8(sp)
 c002378:	dc400117 	ldw	r17,4(sp)
 c00237c:	dc000017 	ldw	r16,0(sp)
 c002380:	dec00704 	addi	sp,sp,28
 c002384:	f800283a 	ret

0c002388 <OutGraphicsCharFont1>:
** e.g. writing a space character with Erase set to true will set all pixels in the
** character to the background colour
**
*************************************************************************************************/
void OutGraphicsCharFont1(int x, int y, int fontcolour, int backgroundcolour, int c, int Erase)
{
 c002388:	defff204 	addi	sp,sp,-56
 c00238c:	dfc00d15 	stw	ra,52(sp)
 c002390:	df000c15 	stw	fp,48(sp)
 c002394:	ddc00b15 	stw	r23,44(sp)
 c002398:	dd800a15 	stw	r22,40(sp)
 c00239c:	dd400915 	stw	r21,36(sp)
 c0023a0:	dd000815 	stw	r20,32(sp)
 c0023a4:	dcc00715 	stw	r19,28(sp)
 c0023a8:	dc800615 	stw	r18,24(sp)
 c0023ac:	dc400515 	stw	r17,20(sp)
 c0023b0:	dc000415 	stw	r16,16(sp)
 c0023b4:	df000c04 	addi	fp,sp,48
 c0023b8:	e13ff415 	stw	r4,-48(fp)
 c0023bc:	e17ff515 	stw	r5,-44(fp)
 c0023c0:	e1bff615 	stw	r6,-40(fp)
 c0023c4:	e1fff715 	stw	r7,-36(fp)
	// using register variables (as opposed to stack based ones) may make execution faster
	// depends on compiler and CPU
	register int row, column, theX = x, theY = y ;
 c0023c8:	e53ff417 	ldw	r20,-48(fp)
 c0023cc:	e57ff517 	ldw	r21,-44(fp)
	register int pixels ;
	register char theColour = fontcolour ;
 c0023d0:	e0bff617 	ldw	r2,-40(fp)
 c0023d4:	102f883a 	mov	r23,r2
	register int BitMask, theC = c ;
 c0023d8:	e4400217 	ldw	r17,8(fp)
	// if x,y coord off edge of screen don't bother
	// XRES and YRES are #defined to be 800 and 480 respectively
	 if(((short)(x) > (short)(XRES-1)) || ((short)(y) > (short)(YRES-1)))
 c0023dc:	e0bff417 	ldw	r2,-48(fp)
 c0023e0:	10bfffcc 	andi	r2,r2,65535
 c0023e4:	10a0001c 	xori	r2,r2,32768
 c0023e8:	10a00004 	addi	r2,r2,-32768
 c0023ec:	1080c808 	cmpgei	r2,r2,800
 c0023f0:	1000061e 	bne	r2,zero,c00240c <OutGraphicsCharFont1+0x84>
 c0023f4:	e0bff517 	ldw	r2,-44(fp)
 c0023f8:	10bfffcc 	andi	r2,r2,65535
 c0023fc:	10a0001c 	xori	r2,r2,32768
 c002400:	10a00004 	addi	r2,r2,-32768
 c002404:	10807810 	cmplti	r2,r2,480
 c002408:	1000011e 	bne	r2,zero,c002410 <OutGraphicsCharFont1+0x88>
	 return ;
 c00240c:	00003c06 	br	c002500 <OutGraphicsCharFont1+0x178>
	// if printable character subtract hex 20
	if(((short)(theC) >= (short)(' ')) && ((short)(theC) <= (short)('~'))) {
 c002410:	8805883a 	mov	r2,r17
 c002414:	10bfffcc 	andi	r2,r2,65535
 c002418:	10a0001c 	xori	r2,r2,32768
 c00241c:	10a00004 	addi	r2,r2,-32768
 c002420:	10800810 	cmplti	r2,r2,32
 c002424:	1000361e 	bne	r2,zero,c002500 <OutGraphicsCharFont1+0x178>
 c002428:	8805883a 	mov	r2,r17
 c00242c:	10bfffcc 	andi	r2,r2,65535
 c002430:	10a0001c 	xori	r2,r2,32768
 c002434:	10a00004 	addi	r2,r2,-32768
 c002438:	10801fc8 	cmpgei	r2,r2,127
 c00243c:	1000301e 	bne	r2,zero,c002500 <OutGraphicsCharFont1+0x178>
		theC = theC - 0x20 ;
 c002440:	8c7ff804 	addi	r17,r17,-32
		for(row = 0; (char)(row) < (char)(7); row ++) {
 c002444:	0021883a 	mov	r16,zero
 c002448:	00002706 	br	c0024e8 <OutGraphicsCharFont1+0x160>
			// get the bit pattern for row 0 of the character from the software font
			pixels = Font5x7[theC][row] ;
 c00244c:	00830074 	movhi	r2,3073
 c002450:	109ef004 	addi	r2,r2,31680
 c002454:	88c001e4 	muli	r3,r17,7
 c002458:	1c07883a 	add	r3,r3,r16
 c00245c:	10c5883a 	add	r2,r2,r3
 c002460:	10800003 	ldbu	r2,0(r2)
 c002464:	15803fcc 	andi	r22,r2,255
			BitMask = 16 ;
 c002468:	04c00404 	movi	r19,16
			for(column = 0; (char)(column) < (char)(5); column ++) {
 c00246c:	0025883a 	mov	r18,zero
 c002470:	00001606 	br	c0024cc <OutGraphicsCharFont1+0x144>
			// if a pixel in the character display it
			if((pixels & BitMask))
 c002474:	b4c4703a 	and	r2,r22,r19
 c002478:	10000926 	beq	r2,zero,c0024a0 <OutGraphicsCharFont1+0x118>
			write_a_pixel(theX+column, theY+row, theColour) ;
 c00247c:	a489883a 	add	r4,r20,r18
 c002480:	ac07883a 	add	r3,r21,r16
 c002484:	b8803fcc 	andi	r2,r23,255
 c002488:	1080201c 	xori	r2,r2,128
 c00248c:	10bfe004 	addi	r2,r2,-128
 c002490:	180b883a 	mov	r5,r3
 c002494:	100d883a 	mov	r6,r2
 c002498:	c0009ec0 	call	c0009ec <write_a_pixel>
 c00249c:	00000906 	br	c0024c4 <OutGraphicsCharFont1+0x13c>
			else {
				if(Erase == 1)
 c0024a0:	e0800317 	ldw	r2,12(fp)
 c0024a4:	10800058 	cmpnei	r2,r2,1
 c0024a8:	1000061e 	bne	r2,zero,c0024c4 <OutGraphicsCharFont1+0x13c>
				// if pixel is part of background (not part of character)
				// erase the background to value of variable BackGroundColour
				write_a_pixel(theX+column, theY+row, backgroundcolour) ;
 c0024ac:	a487883a 	add	r3,r20,r18
 c0024b0:	ac05883a 	add	r2,r21,r16
 c0024b4:	1809883a 	mov	r4,r3
 c0024b8:	100b883a 	mov	r5,r2
 c0024bc:	e1bff717 	ldw	r6,-36(fp)
 c0024c0:	c0009ec0 	call	c0009ec <write_a_pixel>
			}
			BitMask = BitMask >> 1 ;
 c0024c4:	9827d07a 	srai	r19,r19,1
		theC = theC - 0x20 ;
		for(row = 0; (char)(row) < (char)(7); row ++) {
			// get the bit pattern for row 0 of the character from the software font
			pixels = Font5x7[theC][row] ;
			BitMask = 16 ;
			for(column = 0; (char)(column) < (char)(5); column ++) {
 c0024c8:	94800044 	addi	r18,r18,1
 c0024cc:	9005883a 	mov	r2,r18
 c0024d0:	10803fcc 	andi	r2,r2,255
 c0024d4:	1080201c 	xori	r2,r2,128
 c0024d8:	10bfe004 	addi	r2,r2,-128
 c0024dc:	10800150 	cmplti	r2,r2,5
 c0024e0:	103fe41e 	bne	r2,zero,c002474 <__alt_data_end+0xfc002474>
	 if(((short)(x) > (short)(XRES-1)) || ((short)(y) > (short)(YRES-1)))
	 return ;
	// if printable character subtract hex 20
	if(((short)(theC) >= (short)(' ')) && ((short)(theC) <= (short)('~'))) {
		theC = theC - 0x20 ;
		for(row = 0; (char)(row) < (char)(7); row ++) {
 c0024e4:	84000044 	addi	r16,r16,1
 c0024e8:	8005883a 	mov	r2,r16
 c0024ec:	10803fcc 	andi	r2,r2,255
 c0024f0:	1080201c 	xori	r2,r2,128
 c0024f4:	10bfe004 	addi	r2,r2,-128
 c0024f8:	108001d0 	cmplti	r2,r2,7
 c0024fc:	103fd31e 	bne	r2,zero,c00244c <__alt_data_end+0xfc00244c>
			}
			BitMask = BitMask >> 1 ;
		}
		}
	}
}
 c002500:	e6fff804 	addi	sp,fp,-32
 c002504:	dfc00917 	ldw	ra,36(sp)
 c002508:	df000817 	ldw	fp,32(sp)
 c00250c:	ddc00717 	ldw	r23,28(sp)
 c002510:	dd800617 	ldw	r22,24(sp)
 c002514:	dd400517 	ldw	r21,20(sp)
 c002518:	dd000417 	ldw	r20,16(sp)
 c00251c:	dcc00317 	ldw	r19,12(sp)
 c002520:	dc800217 	ldw	r18,8(sp)
 c002524:	dc400117 	ldw	r17,4(sp)
 c002528:	dc000017 	ldw	r16,0(sp)
 c00252c:	dec00a04 	addi	sp,sp,40
 c002530:	f800283a 	ret

0c002534 <OutGraphicsCharFont2a>:
** OutGraphicsCharFont2(100,100, RED, 'A', TRUE, FALSE, 1, 1) ;	// display upper case 'A' in RED at coords 100,100, erase background
** no scroll, scale x,y= 1,1
**
******************************************************************************************************************************/
void OutGraphicsCharFont2a(int x, int y, int colour, int backgroundcolour, int c, int Erase)
{
 c002534:	defff004 	addi	sp,sp,-64
 c002538:	dfc00f15 	stw	ra,60(sp)
 c00253c:	df000e15 	stw	fp,56(sp)
 c002540:	ddc00d15 	stw	r23,52(sp)
 c002544:	dd800c15 	stw	r22,48(sp)
 c002548:	dd400b15 	stw	r21,44(sp)
 c00254c:	dd000a15 	stw	r20,40(sp)
 c002550:	dcc00915 	stw	r19,36(sp)
 c002554:	dc800815 	stw	r18,32(sp)
 c002558:	dc400715 	stw	r17,28(sp)
 c00255c:	dc000615 	stw	r16,24(sp)
 c002560:	df000e04 	addi	fp,sp,56
 c002564:	e13ff215 	stw	r4,-56(fp)
 c002568:	e17ff315 	stw	r5,-52(fp)
 c00256c:	e1bff415 	stw	r6,-48(fp)
 c002570:	e1fff515 	stw	r7,-44(fp)
	register int 	row,
					column,
					theX = x,
 c002574:	e53ff217 	ldw	r20,-56(fp)
					theY = y ;
 c002578:	e57ff317 	ldw	r21,-52(fp)
	register int 	pixels ;
	register char 	theColour = colour  ;
 c00257c:	e0bff417 	ldw	r2,-48(fp)
 c002580:	e0bff605 	stb	r2,-40(fp)
	register int 	BitMask,
					theCharacter = c,
 c002584:	e4800217 	ldw	r18,8(fp)
					j,
					theRow, theColumn;


    if(((short)(x) > (short)(XRES-1)) || ((short)(y) > (short)(YRES-1)))  // if start off edge of screen don't bother
 c002588:	e0bff217 	ldw	r2,-56(fp)
 c00258c:	10bfffcc 	andi	r2,r2,65535
 c002590:	10a0001c 	xori	r2,r2,32768
 c002594:	10a00004 	addi	r2,r2,-32768
 c002598:	1080c808 	cmpgei	r2,r2,800
 c00259c:	1000061e 	bne	r2,zero,c0025b8 <OutGraphicsCharFont2a+0x84>
 c0025a0:	e0bff317 	ldw	r2,-52(fp)
 c0025a4:	10bfffcc 	andi	r2,r2,65535
 c0025a8:	10a0001c 	xori	r2,r2,32768
 c0025ac:	10a00004 	addi	r2,r2,-32768
 c0025b0:	10807810 	cmplti	r2,r2,480
 c0025b4:	1000011e 	bne	r2,zero,c0025bc <OutGraphicsCharFont2a+0x88>
        return ;
 c0025b8:	00003506 	br	c002690 <OutGraphicsCharFont2a+0x15c>

	if(((short)(theCharacter) >= (short)(' ')) && ((short)(theCharacter) <= (short)('~'))) {			// if printable character
 c0025bc:	9005883a 	mov	r2,r18
 c0025c0:	10bfffcc 	andi	r2,r2,65535
 c0025c4:	10a0001c 	xori	r2,r2,32768
 c0025c8:	10a00004 	addi	r2,r2,-32768
 c0025cc:	10800810 	cmplti	r2,r2,32
 c0025d0:	10002f1e 	bne	r2,zero,c002690 <OutGraphicsCharFont2a+0x15c>
 c0025d4:	9005883a 	mov	r2,r18
 c0025d8:	10bfffcc 	andi	r2,r2,65535
 c0025dc:	10a0001c 	xori	r2,r2,32768
 c0025e0:	10a00004 	addi	r2,r2,-32768
 c0025e4:	10801fc8 	cmpgei	r2,r2,127
 c0025e8:	1000291e 	bne	r2,zero,c002690 <OutGraphicsCharFont2a+0x15c>
		theCharacter -= 0x20 ;																			// subtract hex 20 to get index of first printable character (the space character)
 c0025ec:	94bff804 	addi	r18,r18,-32
		theRow = FONT2_YPIXELS;
 c0025f0:	05800384 	movi	r22,14
		theColumn = FONT2_XPIXELS;
 c0025f4:	05c00284 	movi	r23,10

		for(row = 0; row < theRow ; row ++)	{
 c0025f8:	0021883a 	mov	r16,zero
 c0025fc:	00002306 	br	c00268c <OutGraphicsCharFont2a+0x158>
			pixels = Font10x14[theCharacter][row] ;		     								// get the pixels for row 0 of the character to be displayed
 c002600:	00830074 	movhi	r2,3073
 c002604:	109f9684 	addi	r2,r2,32346
 c002608:	90c003a4 	muli	r3,r18,14
 c00260c:	1c07883a 	add	r3,r3,r16
 c002610:	18c7883a 	add	r3,r3,r3
 c002614:	10c5883a 	add	r2,r2,r3
 c002618:	1080000b 	ldhu	r2,0(r2)
 c00261c:	10bfffcc 	andi	r2,r2,65535
 c002620:	e0bff715 	stw	r2,-36(fp)
			BitMask = 512 ;							   											// set of hex 200 i.e. bit 7-0 = 0010 0000 0000
 c002624:	04c08004 	movi	r19,512
			for(column = 0; column < theColumn;   )  	{
 c002628:	0023883a 	mov	r17,zero
 c00262c:	00001506 	br	c002684 <OutGraphicsCharFont2a+0x150>
				if((pixels & BitMask))														// if valid pixel, then write it
 c002630:	e0fff717 	ldw	r3,-36(fp)
 c002634:	1cc4703a 	and	r2,r3,r19
 c002638:	10000726 	beq	r2,zero,c002658 <OutGraphicsCharFont2a+0x124>
					write_a_pixel(theX+column, theY+row, theColour) ;
 c00263c:	a449883a 	add	r4,r20,r17
 c002640:	ac07883a 	add	r3,r21,r16
 c002644:	e0bff607 	ldb	r2,-40(fp)
 c002648:	180b883a 	mov	r5,r3
 c00264c:	100d883a 	mov	r6,r2
 c002650:	c0009ec0 	call	c0009ec <write_a_pixel>
 c002654:	00000906 	br	c00267c <OutGraphicsCharFont2a+0x148>
				else {																		// if not a valid pixel, do we erase or leave it along (no erase)
					if(Erase == 1)
 c002658:	e0800317 	ldw	r2,12(fp)
 c00265c:	10800058 	cmpnei	r2,r2,1
 c002660:	1000061e 	bne	r2,zero,c00267c <OutGraphicsCharFont2a+0x148>
						write_a_pixel(theX+column, theY+row, backgroundcolour) ;
 c002664:	a447883a 	add	r3,r20,r17
 c002668:	ac05883a 	add	r2,r21,r16
 c00266c:	1809883a 	mov	r4,r3
 c002670:	100b883a 	mov	r5,r2
 c002674:	e1bff517 	ldw	r6,-44(fp)
 c002678:	c0009ec0 	call	c0009ec <write_a_pixel>
					// else leave it alone
				}
					column ++ ;
 c00267c:	8c400044 	addi	r17,r17,1
				BitMask = BitMask >> 1 ;
 c002680:	9827d07a 	srai	r19,r19,1
		theColumn = FONT2_XPIXELS;

		for(row = 0; row < theRow ; row ++)	{
			pixels = Font10x14[theCharacter][row] ;		     								// get the pixels for row 0 of the character to be displayed
			BitMask = 512 ;							   											// set of hex 200 i.e. bit 7-0 = 0010 0000 0000
			for(column = 0; column < theColumn;   )  	{
 c002684:	8dffea16 	blt	r17,r23,c002630 <__alt_data_end+0xfc002630>
	if(((short)(theCharacter) >= (short)(' ')) && ((short)(theCharacter) <= (short)('~'))) {			// if printable character
		theCharacter -= 0x20 ;																			// subtract hex 20 to get index of first printable character (the space character)
		theRow = FONT2_YPIXELS;
		theColumn = FONT2_XPIXELS;

		for(row = 0; row < theRow ; row ++)	{
 c002688:	84000044 	addi	r16,r16,1
 c00268c:	85bfdc16 	blt	r16,r22,c002600 <__alt_data_end+0xfc002600>
					column ++ ;
				BitMask = BitMask >> 1 ;
			}
		}
	}
}
 c002690:	e6fff804 	addi	sp,fp,-32
 c002694:	dfc00917 	ldw	ra,36(sp)
 c002698:	df000817 	ldw	fp,32(sp)
 c00269c:	ddc00717 	ldw	r23,28(sp)
 c0026a0:	dd800617 	ldw	r22,24(sp)
 c0026a4:	dd400517 	ldw	r21,20(sp)
 c0026a8:	dd000417 	ldw	r20,16(sp)
 c0026ac:	dcc00317 	ldw	r19,12(sp)
 c0026b0:	dc800217 	ldw	r18,8(sp)
 c0026b4:	dc400117 	ldw	r17,4(sp)
 c0026b8:	dc000017 	ldw	r16,0(sp)
 c0026bc:	dec00a04 	addi	sp,sp,40
 c0026c0:	f800283a 	ret

0c0026c4 <init_palette>:

void init_palette()
{
 c0026c4:	defff904 	addi	sp,sp,-28
 c0026c8:	dfc00615 	stw	ra,24(sp)
 c0026cc:	df000515 	stw	fp,20(sp)
 c0026d0:	df000504 	addi	fp,sp,20
	int i,j,k;
	int index;
	uint32_t value;

	for (i = 0; i < 4; i++)
 c0026d4:	e03ffb15 	stw	zero,-20(fp)
 c0026d8:	00002c06 	br	c00278c <init_palette+0xc8>
		for (j = 0; j < 4; j++)
 c0026dc:	e03ffc15 	stw	zero,-16(fp)
 c0026e0:	00002406 	br	c002774 <init_palette+0xb0>
			for (k = 0; k < 4; k++){
 c0026e4:	e03ffd15 	stw	zero,-12(fp)
 c0026e8:	00001c06 	br	c00275c <init_palette+0x98>
				index = 16*i + 4*j + k;
 c0026ec:	e0bffb17 	ldw	r2,-20(fp)
 c0026f0:	1085883a 	add	r2,r2,r2
 c0026f4:	1085883a 	add	r2,r2,r2
 c0026f8:	1007883a 	mov	r3,r2
 c0026fc:	e0bffc17 	ldw	r2,-16(fp)
 c002700:	1885883a 	add	r2,r3,r2
 c002704:	1085883a 	add	r2,r2,r2
 c002708:	1085883a 	add	r2,r2,r2
 c00270c:	1007883a 	mov	r3,r2
 c002710:	e0bffd17 	ldw	r2,-12(fp)
 c002714:	1885883a 	add	r2,r3,r2
 c002718:	e0bffe15 	stw	r2,-8(fp)
				value = 5570560*i + 21760*j + 85*k;
 c00271c:	e0fffb17 	ldw	r3,-20(fp)
 c002720:	00801574 	movhi	r2,85
 c002724:	1887383a 	mul	r3,r3,r2
 c002728:	e0bffc17 	ldw	r2,-16(fp)
 c00272c:	10954024 	muli	r2,r2,21760
 c002730:	1887883a 	add	r3,r3,r2
 c002734:	e0bffd17 	ldw	r2,-12(fp)
 c002738:	10801564 	muli	r2,r2,85
 c00273c:	1885883a 	add	r2,r3,r2
 c002740:	e0bfff15 	stw	r2,-4(fp)
				program_palette(index, value);
 c002744:	e13ffe17 	ldw	r4,-8(fp)
 c002748:	e17fff17 	ldw	r5,-4(fp)
 c00274c:	c000af80 	call	c000af8 <program_palette>
	int index;
	uint32_t value;

	for (i = 0; i < 4; i++)
		for (j = 0; j < 4; j++)
			for (k = 0; k < 4; k++){
 c002750:	e0bffd17 	ldw	r2,-12(fp)
 c002754:	10800044 	addi	r2,r2,1
 c002758:	e0bffd15 	stw	r2,-12(fp)
 c00275c:	e0bffd17 	ldw	r2,-12(fp)
 c002760:	10800110 	cmplti	r2,r2,4
 c002764:	103fe11e 	bne	r2,zero,c0026ec <__alt_data_end+0xfc0026ec>
	int i,j,k;
	int index;
	uint32_t value;

	for (i = 0; i < 4; i++)
		for (j = 0; j < 4; j++)
 c002768:	e0bffc17 	ldw	r2,-16(fp)
 c00276c:	10800044 	addi	r2,r2,1
 c002770:	e0bffc15 	stw	r2,-16(fp)
 c002774:	e0bffc17 	ldw	r2,-16(fp)
 c002778:	10800110 	cmplti	r2,r2,4
 c00277c:	103fd91e 	bne	r2,zero,c0026e4 <__alt_data_end+0xfc0026e4>
{
	int i,j,k;
	int index;
	uint32_t value;

	for (i = 0; i < 4; i++)
 c002780:	e0bffb17 	ldw	r2,-20(fp)
 c002784:	10800044 	addi	r2,r2,1
 c002788:	e0bffb15 	stw	r2,-20(fp)
 c00278c:	e0bffb17 	ldw	r2,-20(fp)
 c002790:	10800110 	cmplti	r2,r2,4
 c002794:	103fd11e 	bne	r2,zero,c0026dc <__alt_data_end+0xfc0026dc>
			for (k = 0; k < 4; k++){
				index = 16*i + 4*j + k;
				value = 5570560*i + 21760*j + 85*k;
				program_palette(index, value);
			}
}
 c002798:	e037883a 	mov	sp,fp
 c00279c:	dfc00117 	ldw	ra,4(sp)
 c0027a0:	df000017 	ldw	fp,0(sp)
 c0027a4:	dec00204 	addi	sp,sp,8
 c0027a8:	f800283a 	ret

0c0027ac <print_image>:

void print_image(unsigned char arr[320][240], int x_size, int y_size)
{
 c0027ac:	defff904 	addi	sp,sp,-28
 c0027b0:	dfc00615 	stw	ra,24(sp)
 c0027b4:	df000515 	stw	fp,20(sp)
 c0027b8:	df000504 	addi	fp,sp,20
 c0027bc:	e13ffd15 	stw	r4,-12(fp)
 c0027c0:	e17ffe15 	stw	r5,-8(fp)
 c0027c4:	e1bfff15 	stw	r6,-4(fp)
    int i,j;

    for (j = 0; j < y_size; j++)
 c0027c8:	e03ffc15 	stw	zero,-16(fp)
 c0027cc:	00001906 	br	c002834 <print_image+0x88>
    {
        for (i = 0; i < x_size; i++)
 c0027d0:	e03ffb15 	stw	zero,-20(fp)
 c0027d4:	00001106 	br	c00281c <print_image+0x70>
        {
        write_a_pixel(PICTURE_X_OFFSET + i, PICTURE_Y_OFFSET + j, arr[i][j]);
 c0027d8:	e0bffb17 	ldw	r2,-20(fp)
 c0027dc:	11003c04 	addi	r4,r2,240
 c0027e0:	e0bffc17 	ldw	r2,-16(fp)
 c0027e4:	11401e04 	addi	r5,r2,120
 c0027e8:	e0bffb17 	ldw	r2,-20(fp)
 c0027ec:	10803c24 	muli	r2,r2,240
 c0027f0:	e0fffd17 	ldw	r3,-12(fp)
 c0027f4:	1887883a 	add	r3,r3,r2
 c0027f8:	e0bffc17 	ldw	r2,-16(fp)
 c0027fc:	1885883a 	add	r2,r3,r2
 c002800:	10800003 	ldbu	r2,0(r2)
 c002804:	10803fcc 	andi	r2,r2,255
 c002808:	100d883a 	mov	r6,r2
 c00280c:	c0009ec0 	call	c0009ec <write_a_pixel>
{
    int i,j;

    for (j = 0; j < y_size; j++)
    {
        for (i = 0; i < x_size; i++)
 c002810:	e0bffb17 	ldw	r2,-20(fp)
 c002814:	10800044 	addi	r2,r2,1
 c002818:	e0bffb15 	stw	r2,-20(fp)
 c00281c:	e0fffb17 	ldw	r3,-20(fp)
 c002820:	e0bffe17 	ldw	r2,-8(fp)
 c002824:	18bfec16 	blt	r3,r2,c0027d8 <__alt_data_end+0xfc0027d8>

void print_image(unsigned char arr[320][240], int x_size, int y_size)
{
    int i,j;

    for (j = 0; j < y_size; j++)
 c002828:	e0bffc17 	ldw	r2,-16(fp)
 c00282c:	10800044 	addi	r2,r2,1
 c002830:	e0bffc15 	stw	r2,-16(fp)
 c002834:	e0fffc17 	ldw	r3,-16(fp)
 c002838:	e0bfff17 	ldw	r2,-4(fp)
 c00283c:	18bfe416 	blt	r3,r2,c0027d0 <__alt_data_end+0xfc0027d0>
        for (i = 0; i < x_size; i++)
        {
        write_a_pixel(PICTURE_X_OFFSET + i, PICTURE_Y_OFFSET + j, arr[i][j]);
        }
    }
}
 c002840:	e037883a 	mov	sp,fp
 c002844:	dfc00117 	ldw	ra,4(sp)
 c002848:	df000017 	ldw	fp,0(sp)
 c00284c:	dec00204 	addi	sp,sp,8
 c002850:	f800283a 	ret

0c002854 <check_if_pressed>:
//===================================================================
// Private Function Definitions
//===================================================================

int check_if_pressed(Button button_under_test, Point press_point)
{
 c002854:	defffb04 	addi	sp,sp,-20
 c002858:	df000015 	stw	fp,0(sp)
 c00285c:	d839883a 	mov	fp,sp
 c002860:	e1000115 	stw	r4,4(fp)
 c002864:	e1400215 	stw	r5,8(fp)
 c002868:	e1800315 	stw	r6,12(fp)
 c00286c:	e1c00415 	stw	r7,16(fp)
    if ((press_point.x >= button_under_test.x0) &&
 c002870:	e0c00917 	ldw	r3,36(fp)
 c002874:	e0800117 	ldw	r2,4(fp)
 c002878:	18800b16 	blt	r3,r2,c0028a8 <check_if_pressed+0x54>
        (press_point.x <= button_under_test.x1) &&
 c00287c:	e0800917 	ldw	r2,36(fp)
 c002880:	e0c00217 	ldw	r3,8(fp)
// Private Function Definitions
//===================================================================

int check_if_pressed(Button button_under_test, Point press_point)
{
    if ((press_point.x >= button_under_test.x0) &&
 c002884:	18800816 	blt	r3,r2,c0028a8 <check_if_pressed+0x54>
        (press_point.x <= button_under_test.x1) &&
        (press_point.y >= button_under_test.y0) &&
 c002888:	e0c00a17 	ldw	r3,40(fp)
 c00288c:	e0800317 	ldw	r2,12(fp)
//===================================================================

int check_if_pressed(Button button_under_test, Point press_point)
{
    if ((press_point.x >= button_under_test.x0) &&
        (press_point.x <= button_under_test.x1) &&
 c002890:	18800516 	blt	r3,r2,c0028a8 <check_if_pressed+0x54>
        (press_point.y >= button_under_test.y0) &&
        (press_point.y <= button_under_test.y1))
 c002894:	e0800a17 	ldw	r2,40(fp)
 c002898:	e0c00417 	ldw	r3,16(fp)

int check_if_pressed(Button button_under_test, Point press_point)
{
    if ((press_point.x >= button_under_test.x0) &&
        (press_point.x <= button_under_test.x1) &&
        (press_point.y >= button_under_test.y0) &&
 c00289c:	18800216 	blt	r3,r2,c0028a8 <check_if_pressed+0x54>
        (press_point.y <= button_under_test.y1))
            return 1;
 c0028a0:	00800044 	movi	r2,1
 c0028a4:	00000106 	br	c0028ac <check_if_pressed+0x58>

    return 0;
 c0028a8:	0005883a 	mov	r2,zero
}
 c0028ac:	e037883a 	mov	sp,fp
 c0028b0:	df000017 	ldw	fp,0(sp)
 c0028b4:	dec00504 	addi	sp,sp,20
 c0028b8:	f800283a 	ret

0c0028bc <poll_touch>:

int poll_touch(int timeout_usec)
{
 c0028bc:	defff404 	addi	sp,sp,-48
 c0028c0:	dfc00b15 	stw	ra,44(sp)
 c0028c4:	df000a15 	stw	fp,40(sp)
 c0028c8:	df000a04 	addi	fp,sp,40
 c0028cc:	e13fff15 	stw	r4,-4(fp)
    Point touch_point = get_press_timeout(timeout_usec);
 c0028d0:	e0bfff17 	ldw	r2,-4(fp)
 c0028d4:	1009883a 	mov	r4,r2
 c0028d8:	c007c740 	call	c007c74 <get_press_timeout>
 c0028dc:	1009883a 	mov	r4,r2
 c0028e0:	180b883a 	mov	r5,r3
 c0028e4:	e13ffd15 	stw	r4,-12(fp)
 c0028e8:	e17ffe15 	stw	r5,-8(fp)
    if (touch_point.x == INVALID_POINT_DATA){
 c0028ec:	e0bffd17 	ldw	r2,-12(fp)
 c0028f0:	10bfffd8 	cmpnei	r2,r2,-1
 c0028f4:	1000021e 	bne	r2,zero,c002900 <poll_touch+0x44>

        return -1;
 c0028f8:	00bfffc4 	movi	r2,-1
 c0028fc:	00002206 	br	c002988 <poll_touch+0xcc>
    }
    //touch_point = get_release();


    int button_index;
    for (button_index = 0; button_index < button_array_size; button_index++)
 c002900:	e03ffc15 	stw	zero,-16(fp)
 c002904:	00001c06 	br	c002978 <poll_touch+0xbc>
    {
        if(check_if_pressed(button_array[button_index], touch_point))
 c002908:	008302f4 	movhi	r2,3083
 c00290c:	10a00a04 	addi	r2,r2,-32728
 c002910:	e0fffc17 	ldw	r3,-16(fp)
 c002914:	1806917a 	slli	r3,r3,5
 c002918:	10c5883a 	add	r2,r2,r3
 c00291c:	e0fffd17 	ldw	r3,-12(fp)
 c002920:	d8c00415 	stw	r3,16(sp)
 c002924:	e0fffe17 	ldw	r3,-8(fp)
 c002928:	d8c00515 	stw	r3,20(sp)
 c00292c:	10c00417 	ldw	r3,16(r2)
 c002930:	d8c00015 	stw	r3,0(sp)
 c002934:	10c00517 	ldw	r3,20(r2)
 c002938:	d8c00115 	stw	r3,4(sp)
 c00293c:	10c00617 	ldw	r3,24(r2)
 c002940:	d8c00215 	stw	r3,8(sp)
 c002944:	10c00717 	ldw	r3,28(r2)
 c002948:	d8c00315 	stw	r3,12(sp)
 c00294c:	11000017 	ldw	r4,0(r2)
 c002950:	11400117 	ldw	r5,4(r2)
 c002954:	11800217 	ldw	r6,8(r2)
 c002958:	11c00317 	ldw	r7,12(r2)
 c00295c:	c0028540 	call	c002854 <check_if_pressed>
 c002960:	10000226 	beq	r2,zero,c00296c <poll_touch+0xb0>
            return button_index;
 c002964:	e0bffc17 	ldw	r2,-16(fp)
 c002968:	00000706 	br	c002988 <poll_touch+0xcc>
    }
    //touch_point = get_release();


    int button_index;
    for (button_index = 0; button_index < button_array_size; button_index++)
 c00296c:	e0bffc17 	ldw	r2,-16(fp)
 c002970:	10800044 	addi	r2,r2,1
 c002974:	e0bffc15 	stw	r2,-16(fp)
 c002978:	e0fffc17 	ldw	r3,-16(fp)
 c00297c:	d0a00217 	ldw	r2,-32760(gp)
 c002980:	18bfe136 	bltu	r3,r2,c002908 <__alt_data_end+0xfc002908>
    {
        if(check_if_pressed(button_array[button_index], touch_point))
            return button_index;
    }
    return -1;
 c002984:	00bfffc4 	movi	r2,-1
}
 c002988:	e037883a 	mov	sp,fp
 c00298c:	dfc00117 	ldw	ra,4(sp)
 c002990:	df000017 	ldw	fp,0(sp)
 c002994:	dec00204 	addi	sp,sp,8
 c002998:	f800283a 	ret

0c00299c <retrieve_and_process_image>:


void retrieve_and_process_image(void)
{
 c00299c:	defffe04 	addi	sp,sp,-8
 c0029a0:	dfc00115 	stw	ra,4(sp)
 c0029a4:	df000015 	stw	fp,0(sp)
 c0029a8:	d839883a 	mov	fp,sp
 c0029ac:	023ffff4 	movhi	r8,65535
 c0029b0:	4234f904 	addi	r8,r8,-11292
 c0029b4:	da37883a 	add	sp,sp,r8
    take_picture();
 c0029b8:	c0005dc0 	call	c0005dc <take_picture>
    uint32_t size = frame_length();
 c0029bc:	c00063c0 	call	c00063c <frame_length>
 c0029c0:	00fffff4 	movhi	r3,65535
 c0029c4:	18f4f904 	addi	r3,r3,-11292
 c0029c8:	1f07883a 	add	r3,r3,fp
 c0029cc:	18800015 	stw	r2,0(r3)
    uint32_t len = size;
 c0029d0:	013ffff4 	movhi	r4,65535
 c0029d4:	2134f904 	addi	r4,r4,-11292
 c0029d8:	2709883a 	add	r4,r4,fp
 c0029dc:	20800017 	ldw	r2,0(r4)
 c0029e0:	017ffff4 	movhi	r5,65535
 c0029e4:	2974fb04 	addi	r5,r5,-11284
 c0029e8:	2f0b883a 	add	r5,r5,fp
 c0029ec:	28800015 	stw	r2,0(r5)
    printf("Frame size: %ld\n", size);
 c0029f0:	010300b4 	movhi	r4,3074
 c0029f4:	21083904 	addi	r4,r4,8420
 c0029f8:	00bffff4 	movhi	r2,65535
 c0029fc:	10b4f904 	addi	r2,r2,-11292
 c002a00:	1705883a 	add	r2,r2,fp
 c002a04:	11400017 	ldw	r5,0(r2)
 c002a08:	c0098040 	call	c009804 <printf>

    int current_index = 0;
 c002a0c:	00fffff4 	movhi	r3,65535
 c002a10:	18f4fc04 	addi	r3,r3,-11280
 c002a14:	1f07883a 	add	r3,r3,fp
 c002a18:	18000015 	stw	zero,0(r3)
    int i;
    uint8_t *jpeg_buffer = malloc((sizeof(uint8_t)*size) + 10);
 c002a1c:	013ffff4 	movhi	r4,65535
 c002a20:	2134f904 	addi	r4,r4,-11292
 c002a24:	2709883a 	add	r4,r4,fp
 c002a28:	20800017 	ldw	r2,0(r4)
 c002a2c:	10800284 	addi	r2,r2,10
 c002a30:	1009883a 	mov	r4,r2
 c002a34:	c008dac0 	call	c008dac <malloc>
 c002a38:	017ffff4 	movhi	r5,65535
 c002a3c:	2974fd04 	addi	r5,r5,-11276
 c002a40:	2f0b883a 	add	r5,r5,fp
 c002a44:	28800015 	stw	r2,0(r5)

    buffer = read_picture(size);
    for(i=0;i<size;i++)
        jpeg_buffer[current_index+i] = *(buffer+i);*/

    while (size > 64) {
 c002a48:	00000f06 	br	c002a88 <retrieve_and_process_image+0xec>
            // read 32 bytes at a time;
            read_picture_to_ptr(jpeg_buffer, 64);
 c002a4c:	00bffff4 	movhi	r2,65535
 c002a50:	10b4fd04 	addi	r2,r2,-11276
 c002a54:	1705883a 	add	r2,r2,fp
 c002a58:	11000017 	ldw	r4,0(r2)
 c002a5c:	01401004 	movi	r5,64
 c002a60:	c00086c0 	call	c00086c <read_picture_to_ptr>
            size -= 64;
 c002a64:	00fffff4 	movhi	r3,65535
 c002a68:	18f4f904 	addi	r3,r3,-11292
 c002a6c:	1f07883a 	add	r3,r3,fp
 c002a70:	18800017 	ldw	r2,0(r3)
 c002a74:	10bff004 	addi	r2,r2,-64
 c002a78:	013ffff4 	movhi	r4,65535
 c002a7c:	2134f904 	addi	r4,r4,-11292
 c002a80:	2709883a 	add	r4,r4,fp
 c002a84:	20800015 	stw	r2,0(r4)

    buffer = read_picture(size);
    for(i=0;i<size;i++)
        jpeg_buffer[current_index+i] = *(buffer+i);*/

    while (size > 64) {
 c002a88:	017ffff4 	movhi	r5,65535
 c002a8c:	2974f904 	addi	r5,r5,-11292
 c002a90:	2f0b883a 	add	r5,r5,fp
 c002a94:	28800017 	ldw	r2,0(r5)
 c002a98:	10801068 	cmpgeui	r2,r2,65
 c002a9c:	103feb1e 	bne	r2,zero,c002a4c <__alt_data_end+0xfc002a4c>
            // read 32 bytes at a time;
            read_picture_to_ptr(jpeg_buffer, 64);
            size -= 64;
        }

    read_picture_to_ptr(jpeg_buffer, size);
 c002aa0:	00fffff4 	movhi	r3,65535
 c002aa4:	18f4f904 	addi	r3,r3,-11292
 c002aa8:	1f07883a 	add	r3,r3,fp
 c002aac:	18800017 	ldw	r2,0(r3)
 c002ab0:	10803fcc 	andi	r2,r2,255
 c002ab4:	017ffff4 	movhi	r5,65535
 c002ab8:	2974fd04 	addi	r5,r5,-11276
 c002abc:	2f0b883a 	add	r5,r5,fp
 c002ac0:	29000017 	ldw	r4,0(r5)
 c002ac4:	100b883a 	mov	r5,r2
 c002ac8:	c00086c0 	call	c00086c <read_picture_to_ptr>


    resume_picture();
 c002acc:	c00060c0 	call	c00060c <resume_picture>
    printf("DECODING\n");
 c002ad0:	010300b4 	movhi	r4,3074
 c002ad4:	21083e04 	addi	r4,r4,8440
 c002ad8:	c0099180 	call	c009918 <puts>

    //print_byte_array(jpeg_buffer, len);
    printf("The value of decode is: %d\n", njDecode(jpeg_buffer,len));
 c002adc:	00bffff4 	movhi	r2,65535
 c002ae0:	10b4fd04 	addi	r2,r2,-11276
 c002ae4:	1705883a 	add	r2,r2,fp
 c002ae8:	11000017 	ldw	r4,0(r2)
 c002aec:	00fffff4 	movhi	r3,65535
 c002af0:	18f4fb04 	addi	r3,r3,-11284
 c002af4:	1f07883a 	add	r3,r3,fp
 c002af8:	19400017 	ldw	r5,0(r3)
 c002afc:	c0068cc0 	call	c0068cc <njDecode>
 c002b00:	010300b4 	movhi	r4,3074
 c002b04:	21084104 	addi	r4,r4,8452
 c002b08:	100b883a 	mov	r5,r2
 c002b0c:	c0098040 	call	c009804 <printf>


    unsigned char *bitmap = njGetImage();
 c002b10:	c006b640 	call	c006b64 <njGetImage>
 c002b14:	013ffff4 	movhi	r4,65535
 c002b18:	2134fe04 	addi	r4,r4,-11272
 c002b1c:	2709883a 	add	r4,r4,fp
 c002b20:	20800015 	stw	r2,0(r4)
    unsigned char PMF[320][240];
    unsigned char value;
    int curr;
    for(curr = 0; curr < njGetImageSize()/3; curr++)
 c002b24:	017ffff4 	movhi	r5,65535
 c002b28:	2974fa04 	addi	r5,r5,-11288
 c002b2c:	2f0b883a 	add	r5,r5,fp
 c002b30:	28000015 	stw	zero,0(r5)
 c002b34:	00005f06 	br	c002cb4 <retrieve_and_process_image+0x318>
    {
        value = (bitmap[3*curr] & 0xC0) | (bitmap[3*curr+1] & 0xC0)>>2 |  (bitmap[3*curr+2] & 0xC0)>>4;
 c002b38:	00bffff4 	movhi	r2,65535
 c002b3c:	10b4fa04 	addi	r2,r2,-11288
 c002b40:	1705883a 	add	r2,r2,fp
 c002b44:	10c00017 	ldw	r3,0(r2)
 c002b48:	1805883a 	mov	r2,r3
 c002b4c:	1085883a 	add	r2,r2,r2
 c002b50:	10c5883a 	add	r2,r2,r3
 c002b54:	1007883a 	mov	r3,r2
 c002b58:	013ffff4 	movhi	r4,65535
 c002b5c:	2134fe04 	addi	r4,r4,-11272
 c002b60:	2709883a 	add	r4,r4,fp
 c002b64:	20800017 	ldw	r2,0(r4)
 c002b68:	10c5883a 	add	r2,r2,r3
 c002b6c:	10800003 	ldbu	r2,0(r2)
 c002b70:	1007883a 	mov	r3,r2
 c002b74:	00bff004 	movi	r2,-64
 c002b78:	1884703a 	and	r2,r3,r2
 c002b7c:	1009883a 	mov	r4,r2
 c002b80:	017ffff4 	movhi	r5,65535
 c002b84:	2974fa04 	addi	r5,r5,-11288
 c002b88:	2f0b883a 	add	r5,r5,fp
 c002b8c:	28c00017 	ldw	r3,0(r5)
 c002b90:	1805883a 	mov	r2,r3
 c002b94:	1085883a 	add	r2,r2,r2
 c002b98:	10c5883a 	add	r2,r2,r3
 c002b9c:	10800044 	addi	r2,r2,1
 c002ba0:	017ffff4 	movhi	r5,65535
 c002ba4:	2974fe04 	addi	r5,r5,-11272
 c002ba8:	2f0b883a 	add	r5,r5,fp
 c002bac:	28c00017 	ldw	r3,0(r5)
 c002bb0:	1885883a 	add	r2,r3,r2
 c002bb4:	10800003 	ldbu	r2,0(r2)
 c002bb8:	10803fcc 	andi	r2,r2,255
 c002bbc:	1080300c 	andi	r2,r2,192
 c002bc0:	1005d0ba 	srai	r2,r2,2
 c002bc4:	2084b03a 	or	r2,r4,r2
 c002bc8:	1009883a 	mov	r4,r2
 c002bcc:	00bffff4 	movhi	r2,65535
 c002bd0:	10b4fa04 	addi	r2,r2,-11288
 c002bd4:	1705883a 	add	r2,r2,fp
 c002bd8:	10c00017 	ldw	r3,0(r2)
 c002bdc:	1805883a 	mov	r2,r3
 c002be0:	1085883a 	add	r2,r2,r2
 c002be4:	10c5883a 	add	r2,r2,r3
 c002be8:	10800084 	addi	r2,r2,2
 c002bec:	017ffff4 	movhi	r5,65535
 c002bf0:	2974fe04 	addi	r5,r5,-11272
 c002bf4:	2f0b883a 	add	r5,r5,fp
 c002bf8:	28c00017 	ldw	r3,0(r5)
 c002bfc:	1885883a 	add	r2,r3,r2
 c002c00:	10800003 	ldbu	r2,0(r2)
 c002c04:	10803fcc 	andi	r2,r2,255
 c002c08:	1080300c 	andi	r2,r2,192
 c002c0c:	1005d13a 	srai	r2,r2,4
 c002c10:	2084b03a 	or	r2,r4,r2
 c002c14:	00fffff4 	movhi	r3,65535
 c002c18:	18f4ff04 	addi	r3,r3,-11268
 c002c1c:	1f07883a 	add	r3,r3,fp
 c002c20:	18800005 	stb	r2,0(r3)
        PMF[curr%320][(int)(curr/320)] = (value)>>2;
 c002c24:	013ffff4 	movhi	r4,65535
 c002c28:	2134fa04 	addi	r4,r4,-11288
 c002c2c:	2709883a 	add	r4,r4,fp
 c002c30:	20800017 	ldw	r2,0(r4)
 c002c34:	00c05004 	movi	r3,320
 c002c38:	10c7283a 	div	r3,r2,r3
 c002c3c:	18c05024 	muli	r3,r3,320
 c002c40:	10c7c83a 	sub	r3,r2,r3
 c002c44:	017ffff4 	movhi	r5,65535
 c002c48:	2974fa04 	addi	r5,r5,-11288
 c002c4c:	2f0b883a 	add	r5,r5,fp
 c002c50:	29000017 	ldw	r4,0(r5)
 c002c54:	00805004 	movi	r2,320
 c002c58:	2085283a 	div	r2,r4,r2
 c002c5c:	017ffff4 	movhi	r5,65535
 c002c60:	2974ff04 	addi	r5,r5,-11268
 c002c64:	2f0b883a 	add	r5,r5,fp
 c002c68:	29000003 	ldbu	r4,0(r5)
 c002c6c:	2008d0ba 	srli	r4,r4,2
 c002c70:	18c03c24 	muli	r3,r3,240
 c002c74:	017ffff4 	movhi	r5,65535
 c002c78:	2974f904 	addi	r5,r5,-11292
 c002c7c:	2f0b883a 	add	r5,r5,fp
 c002c80:	28c7883a 	add	r3,r5,r3
 c002c84:	1885883a 	add	r2,r3,r2
 c002c88:	10800644 	addi	r2,r2,25
 c002c8c:	11000005 	stb	r4,0(r2)

    unsigned char *bitmap = njGetImage();
    unsigned char PMF[320][240];
    unsigned char value;
    int curr;
    for(curr = 0; curr < njGetImageSize()/3; curr++)
 c002c90:	00fffff4 	movhi	r3,65535
 c002c94:	18f4fa04 	addi	r3,r3,-11288
 c002c98:	1f07883a 	add	r3,r3,fp
 c002c9c:	18800017 	ldw	r2,0(r3)
 c002ca0:	10800044 	addi	r2,r2,1
 c002ca4:	013ffff4 	movhi	r4,65535
 c002ca8:	2134fa04 	addi	r4,r4,-11288
 c002cac:	2709883a 	add	r4,r4,fp
 c002cb0:	20800015 	stw	r2,0(r4)
 c002cb4:	c006bbc0 	call	c006bbc <njGetImageSize>
 c002cb8:	1007883a 	mov	r3,r2
 c002cbc:	008000c4 	movi	r2,3
 c002cc0:	1885283a 	div	r2,r3,r2
 c002cc4:	017ffff4 	movhi	r5,65535
 c002cc8:	2974fa04 	addi	r5,r5,-11288
 c002ccc:	2f0b883a 	add	r5,r5,fp
 c002cd0:	28c00017 	ldw	r3,0(r5)
 c002cd4:	18bf9816 	blt	r3,r2,c002b38 <__alt_data_end+0xfc002b38>
    {
        value = (bitmap[3*curr] & 0xC0) | (bitmap[3*curr+1] & 0xC0)>>2 |  (bitmap[3*curr+2] & 0xC0)>>4;
        PMF[curr%320][(int)(curr/320)] = (value)>>2;
    }

    print_image(PMF, 320, 240);
 c002cd8:	00fffff4 	movhi	r3,65535
 c002cdc:	18f4ff44 	addi	r3,r3,-11267
 c002ce0:	e0c5883a 	add	r2,fp,r3
 c002ce4:	1009883a 	mov	r4,r2
 c002ce8:	01405004 	movi	r5,320
 c002cec:	01803c04 	movi	r6,240
 c002cf0:	c0027ac0 	call	c0027ac <print_image>
    free(jpeg_buffer);
 c002cf4:	017ffff4 	movhi	r5,65535
 c002cf8:	2974fd04 	addi	r5,r5,-11276
 c002cfc:	2f0b883a 	add	r5,r5,fp
 c002d00:	29000017 	ldw	r4,0(r5)
 c002d04:	c008dc00 	call	c008dc0 <free>
}
 c002d08:	e037883a 	mov	sp,fp
 c002d0c:	dfc00117 	ldw	ra,4(sp)
 c002d10:	df000017 	ldw	fp,0(sp)
 c002d14:	dec00204 	addi	sp,sp,8
 c002d18:	f800283a 	ret

0c002d1c <init_gui>:

//===================================================================
// Public Function Definitions
//===================================================================
 void init_gui(){
 c002d1c:	deffbc04 	addi	sp,sp,-272
 c002d20:	dfc04315 	stw	ra,268(sp)
 c002d24:	df004215 	stw	fp,264(sp)
 c002d28:	df004204 	addi	fp,sp,264

    // Initialize all modules that are controlled by the GUI
     init_palette();
 c002d2c:	c0026c40 	call	c0026c4 <init_palette>
     init_touch();
 c002d30:	c007b940 	call	c007b94 <init_touch>
     init_motors();
 c002d34:	c0073700 	call	c007370 <init_motors>
     int speed = 3;
 c002d38:	008000c4 	movi	r2,3
 c002d3c:	e0bfbf15 	stw	r2,-260(fp)
     set_motor_speed(&speed);
 c002d40:	e13fbf04 	addi	r4,fp,-260
 c002d44:	c0076700 	call	c007670 <set_motor_speed>

    // Button initialization code
    Button manual_button;
    manual_button.x0 = 500;
 c002d48:	00807d04 	movi	r2,500
 c002d4c:	e0bfc015 	stw	r2,-256(fp)
    manual_button.x1 = 580;
 c002d50:	00809104 	movi	r2,580
 c002d54:	e0bfc115 	stw	r2,-252(fp)
    manual_button.y0 = 10;
 c002d58:	00800284 	movi	r2,10
 c002d5c:	e0bfc215 	stw	r2,-248(fp)
    manual_button.y1 = 50;
 c002d60:	00800c84 	movi	r2,50
 c002d64:	e0bfc315 	stw	r2,-244(fp)
    manual_button.this_button_type = manual;
 c002d68:	e03fc415 	stw	zero,-240(fp)
    manual_button.pressed_button_type = manual_pressed;
 c002d6c:	00800204 	movi	r2,8
 c002d70:	e0bfc515 	stw	r2,-236(fp)
    manual_button.toggled = 0;
 c002d74:	e03fc715 	stw	zero,-228(fp)
    manual_button.func = manual_callback;
 c002d78:	00830034 	movhi	r2,3072
 c002d7c:	108c8a04 	addi	r2,r2,12840
 c002d80:	e0bfc615 	stw	r2,-232(fp)

    Button automatic_button;
    automatic_button.x0 = 590;
 c002d84:	00809384 	movi	r2,590
 c002d88:	e0bfc815 	stw	r2,-224(fp)
    automatic_button.x1 = 670;
 c002d8c:	0080a784 	movi	r2,670
 c002d90:	e0bfc915 	stw	r2,-220(fp)
    automatic_button.y0 = 10;
 c002d94:	00800284 	movi	r2,10
 c002d98:	e0bfca15 	stw	r2,-216(fp)
    automatic_button.y1 = 50;
 c002d9c:	00800c84 	movi	r2,50
 c002da0:	e0bfcb15 	stw	r2,-212(fp)
    automatic_button.this_button_type = automatic;
 c002da4:	00800044 	movi	r2,1
 c002da8:	e0bfcc15 	stw	r2,-208(fp)
    automatic_button.pressed_button_type = automatic_pressed;
 c002dac:	00800244 	movi	r2,9
 c002db0:	e0bfcd15 	stw	r2,-204(fp)
    automatic_button.toggled = 0;
 c002db4:	e03fcf15 	stw	zero,-196(fp)
    automatic_button.func = automatic_callback;
 c002db8:	00830034 	movhi	r2,3072
 c002dbc:	108cad04 	addi	r2,r2,12980
 c002dc0:	e0bfce15 	stw	r2,-200(fp)

    Button security_button;
    security_button.x0 = 680;
 c002dc4:	0080aa04 	movi	r2,680
 c002dc8:	e0bfd015 	stw	r2,-192(fp)
    security_button.x1 = 760;
 c002dcc:	0080be04 	movi	r2,760
 c002dd0:	e0bfd115 	stw	r2,-188(fp)
    security_button.y0 = 10;
 c002dd4:	00800284 	movi	r2,10
 c002dd8:	e0bfd215 	stw	r2,-184(fp)
    security_button.y1 = 50;
 c002ddc:	00800c84 	movi	r2,50
 c002de0:	e0bfd315 	stw	r2,-180(fp)
    security_button.this_button_type = security;
 c002de4:	00800084 	movi	r2,2
 c002de8:	e0bfd415 	stw	r2,-176(fp)
    security_button.pressed_button_type = security_pressed;
 c002dec:	00800284 	movi	r2,10
 c002df0:	e0bfd515 	stw	r2,-172(fp)
    security_button.toggled = 0;
 c002df4:	e03fd715 	stw	zero,-164(fp)
    security_button.func = security_callback;
 c002df8:	00830034 	movhi	r2,3072
 c002dfc:	108cd004 	addi	r2,r2,13120
 c002e00:	e0bfd615 	stw	r2,-168(fp)

	Button fire_button;
	fire_button.x0 = 580;
 c002e04:	00809104 	movi	r2,580
 c002e08:	e0bfd815 	stw	r2,-160(fp)
	fire_button.x1 = 620;
 c002e0c:	00809b04 	movi	r2,620
 c002e10:	e0bfd915 	stw	r2,-156(fp)
	fire_button.y0 = 430;
 c002e14:	00806b84 	movi	r2,430
 c002e18:	e0bfda15 	stw	r2,-152(fp)
	fire_button.y1 = 470;
 c002e1c:	00807584 	movi	r2,470
 c002e20:	e0bfdb15 	stw	r2,-148(fp)
	fire_button.this_button_type = fire;
 c002e24:	008000c4 	movi	r2,3
 c002e28:	e0bfdc15 	stw	r2,-144(fp)
	fire_button.pressed_button_type = fire_pressed;
 c002e2c:	008002c4 	movi	r2,11
 c002e30:	e0bfdd15 	stw	r2,-140(fp)
	fire_button.toggled = 0;
 c002e34:	e03fdf15 	stw	zero,-132(fp)
	fire_button.func = fire_callback;
 c002e38:	00830034 	movhi	r2,3072
 c002e3c:	108cf304 	addi	r2,r2,13260
 c002e40:	e0bfde15 	stw	r2,-136(fp)

	Button left_button;
	left_button.x0 = 0;
 c002e44:	e03fe015 	stw	zero,-128(fp)
	left_button.x1 = 50;
 c002e48:	00800c84 	movi	r2,50
 c002e4c:	e0bfe115 	stw	r2,-124(fp)
	left_button.y0 = 190;
 c002e50:	00802f84 	movi	r2,190
 c002e54:	e0bfe215 	stw	r2,-120(fp)
	left_button.y1 = 290;
 c002e58:	00804884 	movi	r2,290
 c002e5c:	e0bfe315 	stw	r2,-116(fp)
	left_button.this_button_type = left;
 c002e60:	00800104 	movi	r2,4
 c002e64:	e0bfe415 	stw	r2,-112(fp)
	left_button.pressed_button_type = left_pressed;
 c002e68:	00800304 	movi	r2,12
 c002e6c:	e0bfe515 	stw	r2,-108(fp)
	left_button.toggled = 0;
 c002e70:	e03fe715 	stw	zero,-100(fp)
	left_button.func = left_callback;
 c002e74:	00830034 	movhi	r2,3072
 c002e78:	108d0b04 	addi	r2,r2,13356
 c002e7c:	e0bfe615 	stw	r2,-104(fp)

	Button right_button;
	right_button.x0 = 750;
 c002e80:	0080bb84 	movi	r2,750
 c002e84:	e0bfe815 	stw	r2,-96(fp)
	right_button.x1 = 800;
 c002e88:	0080c804 	movi	r2,800
 c002e8c:	e0bfe915 	stw	r2,-92(fp)
	right_button.y0 = 190;
 c002e90:	00802f84 	movi	r2,190
 c002e94:	e0bfea15 	stw	r2,-88(fp)
	right_button.y1 = 290;
 c002e98:	00804884 	movi	r2,290
 c002e9c:	e0bfeb15 	stw	r2,-84(fp)
	right_button.this_button_type = right;
 c002ea0:	00800144 	movi	r2,5
 c002ea4:	e0bfec15 	stw	r2,-80(fp)
	right_button.pressed_button_type = right_pressed;
 c002ea8:	00800344 	movi	r2,13
 c002eac:	e0bfed15 	stw	r2,-76(fp)
	right_button.toggled = 0;
 c002eb0:	e03fef15 	stw	zero,-68(fp)
	right_button.func = right_callback;
 c002eb4:	00830034 	movhi	r2,3072
 c002eb8:	108d3504 	addi	r2,r2,13524
 c002ebc:	e0bfee15 	stw	r2,-72(fp)

	Button up_button;
	up_button.x0 = 350;
 c002ec0:	00805784 	movi	r2,350
 c002ec4:	e0bff015 	stw	r2,-64(fp)
	up_button.x1 = 450;
 c002ec8:	00807084 	movi	r2,450
 c002ecc:	e0bff115 	stw	r2,-60(fp)
	up_button.y0 = 0;
 c002ed0:	e03ff215 	stw	zero,-56(fp)
	up_button.y1 = 50;
 c002ed4:	00800c84 	movi	r2,50
 c002ed8:	e0bff315 	stw	r2,-52(fp)
	up_button.this_button_type = up;
 c002edc:	008001c4 	movi	r2,7
 c002ee0:	e0bff415 	stw	r2,-48(fp)
	up_button.pressed_button_type = up_pressed;
 c002ee4:	008003c4 	movi	r2,15
 c002ee8:	e0bff515 	stw	r2,-44(fp)
	up_button.toggled = 0;
 c002eec:	e03ff715 	stw	zero,-36(fp)
	up_button.func = up_callback;
 c002ef0:	00830034 	movhi	r2,3072
 c002ef4:	108d5f04 	addi	r2,r2,13692
 c002ef8:	e0bff615 	stw	r2,-40(fp)

	Button down_button;
	down_button.x0 = 350;
 c002efc:	00805784 	movi	r2,350
 c002f00:	e0bff815 	stw	r2,-32(fp)
	down_button.x1 = 450;
 c002f04:	00807084 	movi	r2,450
 c002f08:	e0bff915 	stw	r2,-28(fp)
	down_button.y0 = 430;
 c002f0c:	00806b84 	movi	r2,430
 c002f10:	e0bffa15 	stw	r2,-24(fp)
	down_button.y1 = 480;
 c002f14:	00807804 	movi	r2,480
 c002f18:	e0bffb15 	stw	r2,-20(fp)
	down_button.this_button_type = down;
 c002f1c:	00800184 	movi	r2,6
 c002f20:	e0bffc15 	stw	r2,-16(fp)
	down_button.pressed_button_type = down_pressed;
 c002f24:	00800384 	movi	r2,14
 c002f28:	e0bffd15 	stw	r2,-12(fp)
	down_button.toggled = 0;
 c002f2c:	e03fff15 	stw	zero,-4(fp)
	down_button.func = down_callback;
 c002f30:	00830034 	movhi	r2,3072
 c002f34:	108d8904 	addi	r2,r2,13860
 c002f38:	e0bffe15 	stw	r2,-8(fp)

	button_array[MANUAL_BUTTON] = manual_button;
 c002f3c:	008302f4 	movhi	r2,3083
 c002f40:	10a00a04 	addi	r2,r2,-32728
 c002f44:	e0ffc017 	ldw	r3,-256(fp)
 c002f48:	10c00015 	stw	r3,0(r2)
 c002f4c:	e0ffc117 	ldw	r3,-252(fp)
 c002f50:	10c00115 	stw	r3,4(r2)
 c002f54:	e0ffc217 	ldw	r3,-248(fp)
 c002f58:	10c00215 	stw	r3,8(r2)
 c002f5c:	e0ffc317 	ldw	r3,-244(fp)
 c002f60:	10c00315 	stw	r3,12(r2)
 c002f64:	e0ffc417 	ldw	r3,-240(fp)
 c002f68:	10c00415 	stw	r3,16(r2)
 c002f6c:	e0ffc517 	ldw	r3,-236(fp)
 c002f70:	10c00515 	stw	r3,20(r2)
 c002f74:	e0ffc617 	ldw	r3,-232(fp)
 c002f78:	10c00615 	stw	r3,24(r2)
 c002f7c:	e0ffc717 	ldw	r3,-228(fp)
 c002f80:	10c00715 	stw	r3,28(r2)
	button_array[AUTOMATIC_BUTTON] = automatic_button;
 c002f84:	008302f4 	movhi	r2,3083
 c002f88:	10a00a04 	addi	r2,r2,-32728
 c002f8c:	e0ffc817 	ldw	r3,-224(fp)
 c002f90:	10c00815 	stw	r3,32(r2)
 c002f94:	e0ffc917 	ldw	r3,-220(fp)
 c002f98:	10c00915 	stw	r3,36(r2)
 c002f9c:	e0ffca17 	ldw	r3,-216(fp)
 c002fa0:	10c00a15 	stw	r3,40(r2)
 c002fa4:	e0ffcb17 	ldw	r3,-212(fp)
 c002fa8:	10c00b15 	stw	r3,44(r2)
 c002fac:	e0ffcc17 	ldw	r3,-208(fp)
 c002fb0:	10c00c15 	stw	r3,48(r2)
 c002fb4:	e0ffcd17 	ldw	r3,-204(fp)
 c002fb8:	10c00d15 	stw	r3,52(r2)
 c002fbc:	e0ffce17 	ldw	r3,-200(fp)
 c002fc0:	10c00e15 	stw	r3,56(r2)
 c002fc4:	e0ffcf17 	ldw	r3,-196(fp)
 c002fc8:	10c00f15 	stw	r3,60(r2)
	button_array[SECURITY_BUTTON] = security_button;
 c002fcc:	008302f4 	movhi	r2,3083
 c002fd0:	10a00a04 	addi	r2,r2,-32728
 c002fd4:	e0ffd017 	ldw	r3,-192(fp)
 c002fd8:	10c01015 	stw	r3,64(r2)
 c002fdc:	e0ffd117 	ldw	r3,-188(fp)
 c002fe0:	10c01115 	stw	r3,68(r2)
 c002fe4:	e0ffd217 	ldw	r3,-184(fp)
 c002fe8:	10c01215 	stw	r3,72(r2)
 c002fec:	e0ffd317 	ldw	r3,-180(fp)
 c002ff0:	10c01315 	stw	r3,76(r2)
 c002ff4:	e0ffd417 	ldw	r3,-176(fp)
 c002ff8:	10c01415 	stw	r3,80(r2)
 c002ffc:	e0ffd517 	ldw	r3,-172(fp)
 c003000:	10c01515 	stw	r3,84(r2)
 c003004:	e0ffd617 	ldw	r3,-168(fp)
 c003008:	10c01615 	stw	r3,88(r2)
 c00300c:	e0ffd717 	ldw	r3,-164(fp)
 c003010:	10c01715 	stw	r3,92(r2)
	button_array[FIRE_BUTTON] = fire_button;
 c003014:	008302f4 	movhi	r2,3083
 c003018:	10a00a04 	addi	r2,r2,-32728
 c00301c:	e0ffd817 	ldw	r3,-160(fp)
 c003020:	10c01815 	stw	r3,96(r2)
 c003024:	e0ffd917 	ldw	r3,-156(fp)
 c003028:	10c01915 	stw	r3,100(r2)
 c00302c:	e0ffda17 	ldw	r3,-152(fp)
 c003030:	10c01a15 	stw	r3,104(r2)
 c003034:	e0ffdb17 	ldw	r3,-148(fp)
 c003038:	10c01b15 	stw	r3,108(r2)
 c00303c:	e0ffdc17 	ldw	r3,-144(fp)
 c003040:	10c01c15 	stw	r3,112(r2)
 c003044:	e0ffdd17 	ldw	r3,-140(fp)
 c003048:	10c01d15 	stw	r3,116(r2)
 c00304c:	e0ffde17 	ldw	r3,-136(fp)
 c003050:	10c01e15 	stw	r3,120(r2)
 c003054:	e0ffdf17 	ldw	r3,-132(fp)
 c003058:	10c01f15 	stw	r3,124(r2)
	button_array[LEFT_BUTTON] = left_button;
 c00305c:	008302f4 	movhi	r2,3083
 c003060:	10a00a04 	addi	r2,r2,-32728
 c003064:	e0ffe017 	ldw	r3,-128(fp)
 c003068:	10c02015 	stw	r3,128(r2)
 c00306c:	e0ffe117 	ldw	r3,-124(fp)
 c003070:	10c02115 	stw	r3,132(r2)
 c003074:	e0ffe217 	ldw	r3,-120(fp)
 c003078:	10c02215 	stw	r3,136(r2)
 c00307c:	e0ffe317 	ldw	r3,-116(fp)
 c003080:	10c02315 	stw	r3,140(r2)
 c003084:	e0ffe417 	ldw	r3,-112(fp)
 c003088:	10c02415 	stw	r3,144(r2)
 c00308c:	e0ffe517 	ldw	r3,-108(fp)
 c003090:	10c02515 	stw	r3,148(r2)
 c003094:	e0ffe617 	ldw	r3,-104(fp)
 c003098:	10c02615 	stw	r3,152(r2)
 c00309c:	e0ffe717 	ldw	r3,-100(fp)
 c0030a0:	10c02715 	stw	r3,156(r2)
	button_array[RIGHT_BUTTON] = right_button;
 c0030a4:	008302f4 	movhi	r2,3083
 c0030a8:	10a00a04 	addi	r2,r2,-32728
 c0030ac:	e0ffe817 	ldw	r3,-96(fp)
 c0030b0:	10c02815 	stw	r3,160(r2)
 c0030b4:	e0ffe917 	ldw	r3,-92(fp)
 c0030b8:	10c02915 	stw	r3,164(r2)
 c0030bc:	e0ffea17 	ldw	r3,-88(fp)
 c0030c0:	10c02a15 	stw	r3,168(r2)
 c0030c4:	e0ffeb17 	ldw	r3,-84(fp)
 c0030c8:	10c02b15 	stw	r3,172(r2)
 c0030cc:	e0ffec17 	ldw	r3,-80(fp)
 c0030d0:	10c02c15 	stw	r3,176(r2)
 c0030d4:	e0ffed17 	ldw	r3,-76(fp)
 c0030d8:	10c02d15 	stw	r3,180(r2)
 c0030dc:	e0ffee17 	ldw	r3,-72(fp)
 c0030e0:	10c02e15 	stw	r3,184(r2)
 c0030e4:	e0ffef17 	ldw	r3,-68(fp)
 c0030e8:	10c02f15 	stw	r3,188(r2)
	button_array[UP_BUTTON] = up_button;
 c0030ec:	008302f4 	movhi	r2,3083
 c0030f0:	10a00a04 	addi	r2,r2,-32728
 c0030f4:	e0fff017 	ldw	r3,-64(fp)
 c0030f8:	10c03015 	stw	r3,192(r2)
 c0030fc:	e0fff117 	ldw	r3,-60(fp)
 c003100:	10c03115 	stw	r3,196(r2)
 c003104:	e0fff217 	ldw	r3,-56(fp)
 c003108:	10c03215 	stw	r3,200(r2)
 c00310c:	e0fff317 	ldw	r3,-52(fp)
 c003110:	10c03315 	stw	r3,204(r2)
 c003114:	e0fff417 	ldw	r3,-48(fp)
 c003118:	10c03415 	stw	r3,208(r2)
 c00311c:	e0fff517 	ldw	r3,-44(fp)
 c003120:	10c03515 	stw	r3,212(r2)
 c003124:	e0fff617 	ldw	r3,-40(fp)
 c003128:	10c03615 	stw	r3,216(r2)
 c00312c:	e0fff717 	ldw	r3,-36(fp)
 c003130:	10c03715 	stw	r3,220(r2)
	button_array[DOWN_BUTTON] = down_button;
 c003134:	008302f4 	movhi	r2,3083
 c003138:	10a00a04 	addi	r2,r2,-32728
 c00313c:	e0fff817 	ldw	r3,-32(fp)
 c003140:	10c03815 	stw	r3,224(r2)
 c003144:	e0fff917 	ldw	r3,-28(fp)
 c003148:	10c03915 	stw	r3,228(r2)
 c00314c:	e0fffa17 	ldw	r3,-24(fp)
 c003150:	10c03a15 	stw	r3,232(r2)
 c003154:	e0fffb17 	ldw	r3,-20(fp)
 c003158:	10c03b15 	stw	r3,236(r2)
 c00315c:	e0fffc17 	ldw	r3,-16(fp)
 c003160:	10c03c15 	stw	r3,240(r2)
 c003164:	e0fffd17 	ldw	r3,-12(fp)
 c003168:	10c03d15 	stw	r3,244(r2)
 c00316c:	e0fffe17 	ldw	r3,-8(fp)
 c003170:	10c03e15 	stw	r3,248(r2)
 c003174:	e0ffff17 	ldw	r3,-4(fp)
 c003178:	10c03f15 	stw	r3,252(r2)

    print_display(LIME,CYAN,WHITE,RED,RED);
 c00317c:	00800c04 	movi	r2,48
 c003180:	d8800015 	stw	r2,0(sp)
 c003184:	01000304 	movi	r4,12
 c003188:	014003c4 	movi	r5,15
 c00318c:	01800fc4 	movi	r6,63
 c003190:	01c00c04 	movi	r7,48
 c003194:	c0016340 	call	c001634 <print_display>

}
 c003198:	e037883a 	mov	sp,fp
 c00319c:	dfc00117 	ldw	ra,4(sp)
 c0031a0:	df000017 	ldw	fp,0(sp)
 c0031a4:	dec00204 	addi	sp,sp,8
 c0031a8:	f800283a 	ret

0c0031ac <proccess_buttons>:

int proccess_buttons(int timeout_usec){
 c0031ac:	defffc04 	addi	sp,sp,-16
 c0031b0:	dfc00315 	stw	ra,12(sp)
 c0031b4:	df000215 	stw	fp,8(sp)
 c0031b8:	df000204 	addi	fp,sp,8
 c0031bc:	e13fff15 	stw	r4,-4(fp)
    int pressed_button = poll_touch(timeout_usec);
 c0031c0:	e13fff17 	ldw	r4,-4(fp)
 c0031c4:	c0028bc0 	call	c0028bc <poll_touch>
 c0031c8:	e0bffe15 	stw	r2,-8(fp)

    if (pressed_button < 4)
 c0031cc:	e0bffe17 	ldw	r2,-8(fp)
 c0031d0:	10800108 	cmpgei	r2,r2,4
 c0031d4:	1000011e 	bne	r2,zero,c0031dc <proccess_buttons+0x30>
    {
    	buttons_not_pressed();
 c0031d8:	c0036cc0 	call	c0036cc <buttons_not_pressed>
    }
    if (pressed_button == -1)
 c0031dc:	e0bffe17 	ldw	r2,-8(fp)
 c0031e0:	10bfffd8 	cmpnei	r2,r2,-1
 c0031e4:	1000021e 	bne	r2,zero,c0031f0 <proccess_buttons+0x44>
    {
        return 0;
 c0031e8:	0005883a 	mov	r2,zero
 c0031ec:	00000906 	br	c003214 <proccess_buttons+0x68>
    }
    else
    {
        button_array[pressed_button].func();
 c0031f0:	008302f4 	movhi	r2,3083
 c0031f4:	10a00a04 	addi	r2,r2,-32728
 c0031f8:	e0fffe17 	ldw	r3,-8(fp)
 c0031fc:	1806917a 	slli	r3,r3,5
 c003200:	10c5883a 	add	r2,r2,r3
 c003204:	10800604 	addi	r2,r2,24
 c003208:	10800017 	ldw	r2,0(r2)
 c00320c:	103ee83a 	callr	r2
        return 1;
 c003210:	00800044 	movi	r2,1
    }
}
 c003214:	e037883a 	mov	sp,fp
 c003218:	dfc00117 	ldw	ra,4(sp)
 c00321c:	df000017 	ldw	fp,0(sp)
 c003220:	dec00204 	addi	sp,sp,8
 c003224:	f800283a 	ret

0c003228 <manual_callback>:

void manual_callback()
{
 c003228:	defffe04 	addi	sp,sp,-8
 c00322c:	dfc00115 	stw	ra,4(sp)
 c003230:	df000015 	stw	fp,0(sp)
 c003234:	d839883a 	mov	fp,sp
	if(button_array[MANUAL_BUTTON].toggled == 0)
 c003238:	008302f4 	movhi	r2,3083
 c00323c:	10a00a04 	addi	r2,r2,-32728
 c003240:	10800717 	ldw	r2,28(r2)
 c003244:	1000161e 	bne	r2,zero,c0032a0 <manual_callback+0x78>
	{
		draw_button(manual_pressed,WHITE);
 c003248:	01000204 	movi	r4,8
 c00324c:	01400fc4 	movi	r5,63
 c003250:	c0016cc0 	call	c0016cc <draw_button>
		draw_button(automatic,CYAN);
 c003254:	01000044 	movi	r4,1
 c003258:	014003c4 	movi	r5,15
 c00325c:	c0016cc0 	call	c0016cc <draw_button>
		draw_button(security,CYAN);
 c003260:	01000084 	movi	r4,2
 c003264:	014003c4 	movi	r5,15
 c003268:	c0016cc0 	call	c0016cc <draw_button>
		button_array[MANUAL_BUTTON].toggled = 1;
 c00326c:	008302f4 	movhi	r2,3083
 c003270:	10a00a04 	addi	r2,r2,-32728
 c003274:	00c00044 	movi	r3,1
 c003278:	10c00715 	stw	r3,28(r2)
		button_array[AUTOMATIC_BUTTON].toggled = 0;
 c00327c:	008302f4 	movhi	r2,3083
 c003280:	10a00a04 	addi	r2,r2,-32728
 c003284:	10000f15 	stw	zero,60(r2)
		button_array[SECURITY_BUTTON].toggled = 0;
 c003288:	008302f4 	movhi	r2,3083
 c00328c:	10a00a04 	addi	r2,r2,-32728
 c003290:	10001715 	stw	zero,92(r2)
		printf("GOING TO MANUAL MODE\n");
 c003294:	010300b4 	movhi	r4,3074
 c003298:	21084804 	addi	r4,r4,8480
 c00329c:	c0099180 	call	c009918 <puts>
		//go_to_security_mode();
	}

}
 c0032a0:	e037883a 	mov	sp,fp
 c0032a4:	dfc00117 	ldw	ra,4(sp)
 c0032a8:	df000017 	ldw	fp,0(sp)
 c0032ac:	dec00204 	addi	sp,sp,8
 c0032b0:	f800283a 	ret

0c0032b4 <automatic_callback>:

void automatic_callback()
{
 c0032b4:	defffe04 	addi	sp,sp,-8
 c0032b8:	dfc00115 	stw	ra,4(sp)
 c0032bc:	df000015 	stw	fp,0(sp)
 c0032c0:	d839883a 	mov	fp,sp
	if(button_array[AUTOMATIC_BUTTON].toggled == 0)
 c0032c4:	008302f4 	movhi	r2,3083
 c0032c8:	10a00a04 	addi	r2,r2,-32728
 c0032cc:	10800f17 	ldw	r2,60(r2)
 c0032d0:	1000161e 	bne	r2,zero,c00332c <automatic_callback+0x78>
	{
		draw_button(manual,CYAN);
 c0032d4:	0009883a 	mov	r4,zero
 c0032d8:	014003c4 	movi	r5,15
 c0032dc:	c0016cc0 	call	c0016cc <draw_button>
		draw_button(automatic_pressed,WHITE);
 c0032e0:	01000244 	movi	r4,9
 c0032e4:	01400fc4 	movi	r5,63
 c0032e8:	c0016cc0 	call	c0016cc <draw_button>
		draw_button(security,CYAN);
 c0032ec:	01000084 	movi	r4,2
 c0032f0:	014003c4 	movi	r5,15
 c0032f4:	c0016cc0 	call	c0016cc <draw_button>
		button_array[MANUAL_BUTTON].toggled = 0;
 c0032f8:	008302f4 	movhi	r2,3083
 c0032fc:	10a00a04 	addi	r2,r2,-32728
 c003300:	10000715 	stw	zero,28(r2)
		button_array[AUTOMATIC_BUTTON].toggled = 1;
 c003304:	008302f4 	movhi	r2,3083
 c003308:	10a00a04 	addi	r2,r2,-32728
 c00330c:	00c00044 	movi	r3,1
 c003310:	10c00f15 	stw	r3,60(r2)
		button_array[SECURITY_BUTTON].toggled = 0;
 c003314:	008302f4 	movhi	r2,3083
 c003318:	10a00a04 	addi	r2,r2,-32728
 c00331c:	10001715 	stw	zero,92(r2)
		printf("GOING TO AUTOMATIC MODE\n");
 c003320:	010300b4 	movhi	r4,3074
 c003324:	21084e04 	addi	r4,r4,8504
 c003328:	c0099180 	call	c009918 <puts>
		//go_to_automatic_mode();
	}
}
 c00332c:	e037883a 	mov	sp,fp
 c003330:	dfc00117 	ldw	ra,4(sp)
 c003334:	df000017 	ldw	fp,0(sp)
 c003338:	dec00204 	addi	sp,sp,8
 c00333c:	f800283a 	ret

0c003340 <security_callback>:

void security_callback()
{
 c003340:	defffe04 	addi	sp,sp,-8
 c003344:	dfc00115 	stw	ra,4(sp)
 c003348:	df000015 	stw	fp,0(sp)
 c00334c:	d839883a 	mov	fp,sp
	if(button_array[SECURITY_BUTTON].toggled == 0)
 c003350:	008302f4 	movhi	r2,3083
 c003354:	10a00a04 	addi	r2,r2,-32728
 c003358:	10801717 	ldw	r2,92(r2)
 c00335c:	1000161e 	bne	r2,zero,c0033b8 <security_callback+0x78>
	{
		draw_button(manual,CYAN);
 c003360:	0009883a 	mov	r4,zero
 c003364:	014003c4 	movi	r5,15
 c003368:	c0016cc0 	call	c0016cc <draw_button>
		draw_button(automatic,CYAN);
 c00336c:	01000044 	movi	r4,1
 c003370:	014003c4 	movi	r5,15
 c003374:	c0016cc0 	call	c0016cc <draw_button>
		draw_button(security_pressed,WHITE);
 c003378:	01000284 	movi	r4,10
 c00337c:	01400fc4 	movi	r5,63
 c003380:	c0016cc0 	call	c0016cc <draw_button>
		button_array[MANUAL_BUTTON].toggled = 0;
 c003384:	008302f4 	movhi	r2,3083
 c003388:	10a00a04 	addi	r2,r2,-32728
 c00338c:	10000715 	stw	zero,28(r2)
		button_array[AUTOMATIC_BUTTON].toggled = 0;
 c003390:	008302f4 	movhi	r2,3083
 c003394:	10a00a04 	addi	r2,r2,-32728
 c003398:	10000f15 	stw	zero,60(r2)
		button_array[SECURITY_BUTTON].toggled = 1;
 c00339c:	008302f4 	movhi	r2,3083
 c0033a0:	10a00a04 	addi	r2,r2,-32728
 c0033a4:	00c00044 	movi	r3,1
 c0033a8:	10c01715 	stw	r3,92(r2)
		//go_to_security_mode();
		printf("GOING TO SECURITY MODE\n");
 c0033ac:	010300b4 	movhi	r4,3074
 c0033b0:	21085404 	addi	r4,r4,8528
 c0033b4:	c0099180 	call	c009918 <puts>
	}
}
 c0033b8:	e037883a 	mov	sp,fp
 c0033bc:	dfc00117 	ldw	ra,4(sp)
 c0033c0:	df000017 	ldw	fp,0(sp)
 c0033c4:	dec00204 	addi	sp,sp,8
 c0033c8:	f800283a 	ret

0c0033cc <fire_callback>:

void fire_callback()
{
 c0033cc:	defffe04 	addi	sp,sp,-8
 c0033d0:	dfc00115 	stw	ra,4(sp)
 c0033d4:	df000015 	stw	fp,0(sp)
 c0033d8:	d839883a 	mov	fp,sp
	if (button_array[FIRE_BUTTON].toggled == 0)
 c0033dc:	008302f4 	movhi	r2,3083
 c0033e0:	10a00a04 	addi	r2,r2,-32728
 c0033e4:	10801f17 	ldw	r2,124(r2)
 c0033e8:	10000a1e 	bne	r2,zero,c003414 <fire_callback+0x48>
	{
		draw_button(fire_pressed,MAROON);
 c0033ec:	010002c4 	movi	r4,11
 c0033f0:	01400804 	movi	r5,32
 c0033f4:	c0016cc0 	call	c0016cc <draw_button>
		printf("FIRE\n");
 c0033f8:	010300b4 	movhi	r4,3074
 c0033fc:	21085a04 	addi	r4,r4,8552
 c003400:	c0099180 	call	c009918 <puts>
		button_array[FIRE_BUTTON].toggled = 1;
 c003404:	008302f4 	movhi	r2,3083
 c003408:	10a00a04 	addi	r2,r2,-32728
 c00340c:	00c00044 	movi	r3,1
 c003410:	10c01f15 	stw	r3,124(r2)
	}
	retrieve_and_process_image();
 c003414:	c00299c0 	call	c00299c <retrieve_and_process_image>
}
 c003418:	e037883a 	mov	sp,fp
 c00341c:	dfc00117 	ldw	ra,4(sp)
 c003420:	df000017 	ldw	fp,0(sp)
 c003424:	dec00204 	addi	sp,sp,8
 c003428:	f800283a 	ret

0c00342c <left_callback>:

void left_callback()
{
 c00342c:	defffe04 	addi	sp,sp,-8
 c003430:	dfc00115 	stw	ra,4(sp)
 c003434:	df000015 	stw	fp,0(sp)
 c003438:	d839883a 	mov	fp,sp
    if (button_array[LEFT_BUTTON].toggled == 0)
 c00343c:	008302f4 	movhi	r2,3083
 c003440:	10a00a04 	addi	r2,r2,-32728
 c003444:	10802717 	ldw	r2,156(r2)
 c003448:	10001d1e 	bne	r2,zero,c0034c0 <left_callback+0x94>
	{
		draw_button(left_pressed,FORESTGREEN);
 c00344c:	01000304 	movi	r4,12
 c003450:	01400204 	movi	r5,8
 c003454:	c0016cc0 	call	c0016cc <draw_button>
		draw_button(right,LIME);
 c003458:	01000144 	movi	r4,5
 c00345c:	01400304 	movi	r5,12
 c003460:	c0016cc0 	call	c0016cc <draw_button>
		draw_button(up,LIME);
 c003464:	010001c4 	movi	r4,7
 c003468:	01400304 	movi	r5,12
 c00346c:	c0016cc0 	call	c0016cc <draw_button>
		draw_button(down,LIME);
 c003470:	01000184 	movi	r4,6
 c003474:	01400304 	movi	r5,12
 c003478:	c0016cc0 	call	c0016cc <draw_button>
		move_left();
 c00347c:	c0075240 	call	c007524 <move_left>
		printf("ROTATING LEFT\n");
 c003480:	010300b4 	movhi	r4,3074
 c003484:	21085c04 	addi	r4,r4,8560
 c003488:	c0099180 	call	c009918 <puts>

		button_array[LEFT_BUTTON].toggled = 1;
 c00348c:	008302f4 	movhi	r2,3083
 c003490:	10a00a04 	addi	r2,r2,-32728
 c003494:	00c00044 	movi	r3,1
 c003498:	10c02715 	stw	r3,156(r2)
		button_array[RIGHT_BUTTON].toggled = 0;
 c00349c:	008302f4 	movhi	r2,3083
 c0034a0:	10a00a04 	addi	r2,r2,-32728
 c0034a4:	10002f15 	stw	zero,188(r2)
		button_array[UP_BUTTON].toggled = 0;
 c0034a8:	008302f4 	movhi	r2,3083
 c0034ac:	10a00a04 	addi	r2,r2,-32728
 c0034b0:	10003715 	stw	zero,220(r2)
		button_array[DOWN_BUTTON].toggled = 0;
 c0034b4:	008302f4 	movhi	r2,3083
 c0034b8:	10a00a04 	addi	r2,r2,-32728
 c0034bc:	10003f15 	stw	zero,252(r2)
	}
}
 c0034c0:	e037883a 	mov	sp,fp
 c0034c4:	dfc00117 	ldw	ra,4(sp)
 c0034c8:	df000017 	ldw	fp,0(sp)
 c0034cc:	dec00204 	addi	sp,sp,8
 c0034d0:	f800283a 	ret

0c0034d4 <right_callback>:
void right_callback()
{
 c0034d4:	defffe04 	addi	sp,sp,-8
 c0034d8:	dfc00115 	stw	ra,4(sp)
 c0034dc:	df000015 	stw	fp,0(sp)
 c0034e0:	d839883a 	mov	fp,sp
    if(button_array[RIGHT_BUTTON].toggled == 0)
 c0034e4:	008302f4 	movhi	r2,3083
 c0034e8:	10a00a04 	addi	r2,r2,-32728
 c0034ec:	10802f17 	ldw	r2,188(r2)
 c0034f0:	10001d1e 	bne	r2,zero,c003568 <right_callback+0x94>
	{
		draw_button(left,LIME);
 c0034f4:	01000104 	movi	r4,4
 c0034f8:	01400304 	movi	r5,12
 c0034fc:	c0016cc0 	call	c0016cc <draw_button>
		draw_button(right_pressed,FORESTGREEN);
 c003500:	01000344 	movi	r4,13
 c003504:	01400204 	movi	r5,8
 c003508:	c0016cc0 	call	c0016cc <draw_button>
		draw_button(up,LIME);
 c00350c:	010001c4 	movi	r4,7
 c003510:	01400304 	movi	r5,12
 c003514:	c0016cc0 	call	c0016cc <draw_button>
		draw_button(down,LIME);
 c003518:	01000184 	movi	r4,6
 c00351c:	01400304 	movi	r5,12
 c003520:	c0016cc0 	call	c0016cc <draw_button>
		move_right();
 c003524:	c0075c80 	call	c0075c8 <move_right>
		printf("ROTATING RIGHT\n");
 c003528:	010300b4 	movhi	r4,3074
 c00352c:	21086004 	addi	r4,r4,8576
 c003530:	c0099180 	call	c009918 <puts>

		button_array[LEFT_BUTTON].toggled = 0;
 c003534:	008302f4 	movhi	r2,3083
 c003538:	10a00a04 	addi	r2,r2,-32728
 c00353c:	10002715 	stw	zero,156(r2)
		button_array[RIGHT_BUTTON].toggled = 1;
 c003540:	008302f4 	movhi	r2,3083
 c003544:	10a00a04 	addi	r2,r2,-32728
 c003548:	00c00044 	movi	r3,1
 c00354c:	10c02f15 	stw	r3,188(r2)
		button_array[UP_BUTTON].toggled = 0;
 c003550:	008302f4 	movhi	r2,3083
 c003554:	10a00a04 	addi	r2,r2,-32728
 c003558:	10003715 	stw	zero,220(r2)
		button_array[DOWN_BUTTON].toggled = 0;
 c00355c:	008302f4 	movhi	r2,3083
 c003560:	10a00a04 	addi	r2,r2,-32728
 c003564:	10003f15 	stw	zero,252(r2)
	}
}
 c003568:	e037883a 	mov	sp,fp
 c00356c:	dfc00117 	ldw	ra,4(sp)
 c003570:	df000017 	ldw	fp,0(sp)
 c003574:	dec00204 	addi	sp,sp,8
 c003578:	f800283a 	ret

0c00357c <up_callback>:
void up_callback()
{
 c00357c:	defffe04 	addi	sp,sp,-8
 c003580:	dfc00115 	stw	ra,4(sp)
 c003584:	df000015 	stw	fp,0(sp)
 c003588:	d839883a 	mov	fp,sp
	if(button_array[UP_BUTTON].toggled == 0)
 c00358c:	008302f4 	movhi	r2,3083
 c003590:	10a00a04 	addi	r2,r2,-32728
 c003594:	10803717 	ldw	r2,220(r2)
 c003598:	10001d1e 	bne	r2,zero,c003610 <up_callback+0x94>
	{
		draw_button(left,LIME);
 c00359c:	01000104 	movi	r4,4
 c0035a0:	01400304 	movi	r5,12
 c0035a4:	c0016cc0 	call	c0016cc <draw_button>
		draw_button(right,LIME);
 c0035a8:	01000144 	movi	r4,5
 c0035ac:	01400304 	movi	r5,12
 c0035b0:	c0016cc0 	call	c0016cc <draw_button>
		draw_button(up_pressed,FORESTGREEN);
 c0035b4:	010003c4 	movi	r4,15
 c0035b8:	01400204 	movi	r5,8
 c0035bc:	c0016cc0 	call	c0016cc <draw_button>
		draw_button(down,LIME);
 c0035c0:	01000184 	movi	r4,6
 c0035c4:	01400304 	movi	r5,12
 c0035c8:	c0016cc0 	call	c0016cc <draw_button>
		move_up();
 c0035cc:	c0073b00 	call	c0073b0 <move_up>
		printf("ROTATING UP\n");
 c0035d0:	010300b4 	movhi	r4,3074
 c0035d4:	21086404 	addi	r4,r4,8592
 c0035d8:	c0099180 	call	c009918 <puts>

		button_array[LEFT_BUTTON].toggled = 0;
 c0035dc:	008302f4 	movhi	r2,3083
 c0035e0:	10a00a04 	addi	r2,r2,-32728
 c0035e4:	10002715 	stw	zero,156(r2)
		button_array[RIGHT_BUTTON].toggled = 0;
 c0035e8:	008302f4 	movhi	r2,3083
 c0035ec:	10a00a04 	addi	r2,r2,-32728
 c0035f0:	10002f15 	stw	zero,188(r2)
		button_array[UP_BUTTON].toggled = 1;
 c0035f4:	008302f4 	movhi	r2,3083
 c0035f8:	10a00a04 	addi	r2,r2,-32728
 c0035fc:	00c00044 	movi	r3,1
 c003600:	10c03715 	stw	r3,220(r2)
		button_array[DOWN_BUTTON].toggled = 0;
 c003604:	008302f4 	movhi	r2,3083
 c003608:	10a00a04 	addi	r2,r2,-32728
 c00360c:	10003f15 	stw	zero,252(r2)
	}
}
 c003610:	e037883a 	mov	sp,fp
 c003614:	dfc00117 	ldw	ra,4(sp)
 c003618:	df000017 	ldw	fp,0(sp)
 c00361c:	dec00204 	addi	sp,sp,8
 c003620:	f800283a 	ret

0c003624 <down_callback>:
void down_callback()
{
 c003624:	defffe04 	addi	sp,sp,-8
 c003628:	dfc00115 	stw	ra,4(sp)
 c00362c:	df000015 	stw	fp,0(sp)
 c003630:	d839883a 	mov	fp,sp
	if(button_array[DOWN_BUTTON].toggled == 0)
 c003634:	008302f4 	movhi	r2,3083
 c003638:	10a00a04 	addi	r2,r2,-32728
 c00363c:	10803f17 	ldw	r2,252(r2)
 c003640:	10001d1e 	bne	r2,zero,c0036b8 <down_callback+0x94>
	{
		draw_button(left,LIME);
 c003644:	01000104 	movi	r4,4
 c003648:	01400304 	movi	r5,12
 c00364c:	c0016cc0 	call	c0016cc <draw_button>
		draw_button(right,LIME);
 c003650:	01000144 	movi	r4,5
 c003654:	01400304 	movi	r5,12
 c003658:	c0016cc0 	call	c0016cc <draw_button>
		draw_button(up,LIME);
 c00365c:	010001c4 	movi	r4,7
 c003660:	01400304 	movi	r5,12
 c003664:	c0016cc0 	call	c0016cc <draw_button>
		draw_button(down_pressed,FORESTGREEN);
 c003668:	01000384 	movi	r4,14
 c00366c:	01400204 	movi	r5,8
 c003670:	c0016cc0 	call	c0016cc <draw_button>
		move_down();
 c003674:	c0074680 	call	c007468 <move_down>
		printf("ROTATING DOWN\n");
 c003678:	010300b4 	movhi	r4,3074
 c00367c:	21086704 	addi	r4,r4,8604
 c003680:	c0099180 	call	c009918 <puts>

		button_array[LEFT_BUTTON].toggled = 0;
 c003684:	008302f4 	movhi	r2,3083
 c003688:	10a00a04 	addi	r2,r2,-32728
 c00368c:	10002715 	stw	zero,156(r2)
		button_array[RIGHT_BUTTON].toggled = 0;
 c003690:	008302f4 	movhi	r2,3083
 c003694:	10a00a04 	addi	r2,r2,-32728
 c003698:	10002f15 	stw	zero,188(r2)
		button_array[UP_BUTTON].toggled = 0;
 c00369c:	008302f4 	movhi	r2,3083
 c0036a0:	10a00a04 	addi	r2,r2,-32728
 c0036a4:	10003715 	stw	zero,220(r2)
		button_array[DOWN_BUTTON].toggled = 1;
 c0036a8:	008302f4 	movhi	r2,3083
 c0036ac:	10a00a04 	addi	r2,r2,-32728
 c0036b0:	00c00044 	movi	r3,1
 c0036b4:	10c03f15 	stw	r3,252(r2)
	}
}
 c0036b8:	e037883a 	mov	sp,fp
 c0036bc:	dfc00117 	ldw	ra,4(sp)
 c0036c0:	df000017 	ldw	fp,0(sp)
 c0036c4:	dec00204 	addi	sp,sp,8
 c0036c8:	f800283a 	ret

0c0036cc <buttons_not_pressed>:


void buttons_not_pressed()
{
 c0036cc:	defffe04 	addi	sp,sp,-8
 c0036d0:	dfc00115 	stw	ra,4(sp)
 c0036d4:	df000015 	stw	fp,0(sp)
 c0036d8:	d839883a 	mov	fp,sp
	draw_button(fire,RED);
 c0036dc:	010000c4 	movi	r4,3
 c0036e0:	01400c04 	movi	r5,48
 c0036e4:	c0016cc0 	call	c0016cc <draw_button>
	draw_button(left,LIME);
 c0036e8:	01000104 	movi	r4,4
 c0036ec:	01400304 	movi	r5,12
 c0036f0:	c0016cc0 	call	c0016cc <draw_button>
	draw_button(right,LIME);
 c0036f4:	01000144 	movi	r4,5
 c0036f8:	01400304 	movi	r5,12
 c0036fc:	c0016cc0 	call	c0016cc <draw_button>
	draw_button(up,LIME);
 c003700:	010001c4 	movi	r4,7
 c003704:	01400304 	movi	r5,12
 c003708:	c0016cc0 	call	c0016cc <draw_button>
	draw_button(down,LIME);
 c00370c:	01000184 	movi	r4,6
 c003710:	01400304 	movi	r5,12
 c003714:	c0016cc0 	call	c0016cc <draw_button>

	button_array[FIRE_BUTTON].toggled = 0;
 c003718:	008302f4 	movhi	r2,3083
 c00371c:	10a00a04 	addi	r2,r2,-32728
 c003720:	10001f15 	stw	zero,124(r2)
	button_array[LEFT_BUTTON].toggled = 0;
 c003724:	008302f4 	movhi	r2,3083
 c003728:	10a00a04 	addi	r2,r2,-32728
 c00372c:	10002715 	stw	zero,156(r2)
	button_array[RIGHT_BUTTON].toggled = 0;
 c003730:	008302f4 	movhi	r2,3083
 c003734:	10a00a04 	addi	r2,r2,-32728
 c003738:	10002f15 	stw	zero,188(r2)
	button_array[UP_BUTTON].toggled = 0;
 c00373c:	008302f4 	movhi	r2,3083
 c003740:	10a00a04 	addi	r2,r2,-32728
 c003744:	10003715 	stw	zero,220(r2)
	button_array[DOWN_BUTTON].toggled = 0;
 c003748:	008302f4 	movhi	r2,3083
 c00374c:	10a00a04 	addi	r2,r2,-32728
 c003750:	10003f15 	stw	zero,252(r2)
}
 c003754:	e037883a 	mov	sp,fp
 c003758:	dfc00117 	ldw	ra,4(sp)
 c00375c:	df000017 	ldw	fp,0(sp)
 c003760:	dec00204 	addi	sp,sp,8
 c003764:	f800283a 	ret

0c003768 <njClip>:
static const char njZZ[64] = { 0, 1, 8, 16, 9, 2, 3, 10, 17, 24, 32, 25, 18,
11, 4, 5, 12, 19, 26, 33, 40, 48, 41, 34, 27, 20, 13, 6, 7, 14, 21, 28, 35,
42, 49, 56, 57, 50, 43, 36, 29, 22, 15, 23, 30, 37, 44, 51, 58, 59, 52, 45,
38, 31, 39, 46, 53, 60, 61, 54, 47, 55, 62, 63 };

NJ_FORCE_INLINE unsigned char njClip(const int x) {
 c003768:	defffe04 	addi	sp,sp,-8
 c00376c:	df000115 	stw	fp,4(sp)
 c003770:	df000104 	addi	fp,sp,4
 c003774:	e13fff15 	stw	r4,-4(fp)
    return (x < 0) ? 0 : ((x > 0xFF) ? 0xFF : (unsigned char) x);
 c003778:	e0bfff17 	ldw	r2,-4(fp)
 c00377c:	10000716 	blt	r2,zero,c00379c <njClip+0x34>
 c003780:	e0bfff17 	ldw	r2,-4(fp)
 c003784:	10804008 	cmpgei	r2,r2,256
 c003788:	1000021e 	bne	r2,zero,c003794 <njClip+0x2c>
 c00378c:	e0bfff17 	ldw	r2,-4(fp)
 c003790:	00000306 	br	c0037a0 <njClip+0x38>
 c003794:	00bfffc4 	movi	r2,-1
 c003798:	00000106 	br	c0037a0 <njClip+0x38>
 c00379c:	0005883a 	mov	r2,zero
}
 c0037a0:	e037883a 	mov	sp,fp
 c0037a4:	df000017 	ldw	fp,0(sp)
 c0037a8:	dec00104 	addi	sp,sp,4
 c0037ac:	f800283a 	ret

0c0037b0 <njRowIDCT>:
#define W3 2408
#define W5 1609
#define W6 1108
#define W7 565

NJ_INLINE void njRowIDCT(int* blk) {
 c0037b0:	defff504 	addi	sp,sp,-44
 c0037b4:	df000a15 	stw	fp,40(sp)
 c0037b8:	df000a04 	addi	fp,sp,40
 c0037bc:	e13fff15 	stw	r4,-4(fp)
    int x0, x1, x2, x3, x4, x5, x6, x7, x8;
    if (!((x1 = blk[4] << 11)
 c0037c0:	e0bfff17 	ldw	r2,-4(fp)
 c0037c4:	10800404 	addi	r2,r2,16
 c0037c8:	10800017 	ldw	r2,0(r2)
 c0037cc:	100492fa 	slli	r2,r2,11
 c0037d0:	e0bff615 	stw	r2,-40(fp)
        | (x2 = blk[6])
 c0037d4:	e0bfff17 	ldw	r2,-4(fp)
 c0037d8:	10800617 	ldw	r2,24(r2)
 c0037dc:	e0bff715 	stw	r2,-36(fp)
 c0037e0:	e0fff617 	ldw	r3,-40(fp)
 c0037e4:	e0bff717 	ldw	r2,-36(fp)
 c0037e8:	1886b03a 	or	r3,r3,r2
        | (x3 = blk[2])
 c0037ec:	e0bfff17 	ldw	r2,-4(fp)
 c0037f0:	10800217 	ldw	r2,8(r2)
 c0037f4:	e0bff815 	stw	r2,-32(fp)
 c0037f8:	e0bff817 	ldw	r2,-32(fp)
 c0037fc:	1886b03a 	or	r3,r3,r2
        | (x4 = blk[1])
 c003800:	e0bfff17 	ldw	r2,-4(fp)
 c003804:	10800117 	ldw	r2,4(r2)
 c003808:	e0bff915 	stw	r2,-28(fp)
 c00380c:	e0bff917 	ldw	r2,-28(fp)
 c003810:	1886b03a 	or	r3,r3,r2
        | (x5 = blk[7])
 c003814:	e0bfff17 	ldw	r2,-4(fp)
 c003818:	10800717 	ldw	r2,28(r2)
 c00381c:	e0bffa15 	stw	r2,-24(fp)
 c003820:	e0bffa17 	ldw	r2,-24(fp)
 c003824:	1886b03a 	or	r3,r3,r2
        | (x6 = blk[5])
 c003828:	e0bfff17 	ldw	r2,-4(fp)
 c00382c:	10800517 	ldw	r2,20(r2)
 c003830:	e0bffb15 	stw	r2,-20(fp)
 c003834:	e0bffb17 	ldw	r2,-20(fp)
 c003838:	1886b03a 	or	r3,r3,r2
        | (x7 = blk[3])))
 c00383c:	e0bfff17 	ldw	r2,-4(fp)
 c003840:	10800317 	ldw	r2,12(r2)
 c003844:	e0bffc15 	stw	r2,-16(fp)
 c003848:	e0bffc17 	ldw	r2,-16(fp)
 c00384c:	1884b03a 	or	r2,r3,r2
#define W6 1108
#define W7 565

NJ_INLINE void njRowIDCT(int* blk) {
    int x0, x1, x2, x3, x4, x5, x6, x7, x8;
    if (!((x1 = blk[4] << 11)
 c003850:	1000221e 	bne	r2,zero,c0038dc <njRowIDCT+0x12c>
        | (x4 = blk[1])
        | (x5 = blk[7])
        | (x6 = blk[5])
        | (x7 = blk[3])))
    {
        blk[0] = blk[1] = blk[2] = blk[3] = blk[4] = blk[5] = blk[6] = blk[7] = blk[0] << 3;
 c003854:	e0bfff17 	ldw	r2,-4(fp)
 c003858:	10800104 	addi	r2,r2,4
 c00385c:	e0ffff17 	ldw	r3,-4(fp)
 c003860:	18c00204 	addi	r3,r3,8
 c003864:	e13fff17 	ldw	r4,-4(fp)
 c003868:	21000304 	addi	r4,r4,12
 c00386c:	e17fff17 	ldw	r5,-4(fp)
 c003870:	29400404 	addi	r5,r5,16
 c003874:	e1bfff17 	ldw	r6,-4(fp)
 c003878:	31800504 	addi	r6,r6,20
 c00387c:	e1ffff17 	ldw	r7,-4(fp)
 c003880:	39c00604 	addi	r7,r7,24
 c003884:	e23fff17 	ldw	r8,-4(fp)
 c003888:	42000704 	addi	r8,r8,28
 c00388c:	e27fff17 	ldw	r9,-4(fp)
 c003890:	4a400017 	ldw	r9,0(r9)
 c003894:	481290fa 	slli	r9,r9,3
 c003898:	42400015 	stw	r9,0(r8)
 c00389c:	42000017 	ldw	r8,0(r8)
 c0038a0:	3a000015 	stw	r8,0(r7)
 c0038a4:	39c00017 	ldw	r7,0(r7)
 c0038a8:	31c00015 	stw	r7,0(r6)
 c0038ac:	31800017 	ldw	r6,0(r6)
 c0038b0:	29800015 	stw	r6,0(r5)
 c0038b4:	29400017 	ldw	r5,0(r5)
 c0038b8:	21400015 	stw	r5,0(r4)
 c0038bc:	21000017 	ldw	r4,0(r4)
 c0038c0:	19000015 	stw	r4,0(r3)
 c0038c4:	18c00017 	ldw	r3,0(r3)
 c0038c8:	10c00015 	stw	r3,0(r2)
 c0038cc:	10c00017 	ldw	r3,0(r2)
 c0038d0:	e0bfff17 	ldw	r2,-4(fp)
 c0038d4:	10c00015 	stw	r3,0(r2)
        return;
 c0038d8:	00009f06 	br	c003b58 <njRowIDCT+0x3a8>
    }
    x0 = (blk[0] << 11) + 128;
 c0038dc:	e0bfff17 	ldw	r2,-4(fp)
 c0038e0:	10800017 	ldw	r2,0(r2)
 c0038e4:	100492fa 	slli	r2,r2,11
 c0038e8:	10802004 	addi	r2,r2,128
 c0038ec:	e0bffd15 	stw	r2,-12(fp)
    x8 = W7 * (x4 + x5);
 c0038f0:	e0fff917 	ldw	r3,-28(fp)
 c0038f4:	e0bffa17 	ldw	r2,-24(fp)
 c0038f8:	1885883a 	add	r2,r3,r2
 c0038fc:	10808d64 	muli	r2,r2,565
 c003900:	e0bffe15 	stw	r2,-8(fp)
    x4 = x8 + (W1 - W7) * x4;
 c003904:	e0bff917 	ldw	r2,-28(fp)
 c003908:	10c23924 	muli	r3,r2,2276
 c00390c:	e0bffe17 	ldw	r2,-8(fp)
 c003910:	1885883a 	add	r2,r3,r2
 c003914:	e0bff915 	stw	r2,-28(fp)
    x5 = x8 - (W1 + W7) * x5;
 c003918:	e0bffa17 	ldw	r2,-24(fp)
 c00391c:	10fcaca4 	muli	r3,r2,-3406
 c003920:	e0bffe17 	ldw	r2,-8(fp)
 c003924:	1885883a 	add	r2,r3,r2
 c003928:	e0bffa15 	stw	r2,-24(fp)
    x8 = W3 * (x6 + x7);
 c00392c:	e0fffb17 	ldw	r3,-20(fp)
 c003930:	e0bffc17 	ldw	r2,-16(fp)
 c003934:	1885883a 	add	r2,r3,r2
 c003938:	10825a24 	muli	r2,r2,2408
 c00393c:	e0bffe15 	stw	r2,-8(fp)
    x6 = x8 - (W3 - W5) * x6;
 c003940:	e0bffb17 	ldw	r2,-20(fp)
 c003944:	10ff3864 	muli	r3,r2,-799
 c003948:	e0bffe17 	ldw	r2,-8(fp)
 c00394c:	1885883a 	add	r2,r3,r2
 c003950:	e0bffb15 	stw	r2,-20(fp)
    x7 = x8 - (W3 + W5) * x7;
 c003954:	e0bffc17 	ldw	r2,-16(fp)
 c003958:	10fc13e4 	muli	r3,r2,-4017
 c00395c:	e0bffe17 	ldw	r2,-8(fp)
 c003960:	1885883a 	add	r2,r3,r2
 c003964:	e0bffc15 	stw	r2,-16(fp)
    x8 = x0 + x1;
 c003968:	e0fffd17 	ldw	r3,-12(fp)
 c00396c:	e0bff617 	ldw	r2,-40(fp)
 c003970:	1885883a 	add	r2,r3,r2
 c003974:	e0bffe15 	stw	r2,-8(fp)
    x0 -= x1;
 c003978:	e0fffd17 	ldw	r3,-12(fp)
 c00397c:	e0bff617 	ldw	r2,-40(fp)
 c003980:	1885c83a 	sub	r2,r3,r2
 c003984:	e0bffd15 	stw	r2,-12(fp)
    x1 = W6 * (x3 + x2);
 c003988:	e0fff817 	ldw	r3,-32(fp)
 c00398c:	e0bff717 	ldw	r2,-36(fp)
 c003990:	1885883a 	add	r2,r3,r2
 c003994:	10811524 	muli	r2,r2,1108
 c003998:	e0bff615 	stw	r2,-40(fp)
    x2 = x1 - (W2 + W6) * x2;
 c00399c:	e0bff717 	ldw	r2,-36(fp)
 c0039a0:	10fc4e24 	muli	r3,r2,-3784
 c0039a4:	e0bff617 	ldw	r2,-40(fp)
 c0039a8:	1885883a 	add	r2,r3,r2
 c0039ac:	e0bff715 	stw	r2,-36(fp)
    x3 = x1 + (W2 - W6) * x3;
 c0039b0:	e0bff817 	ldw	r2,-32(fp)
 c0039b4:	10c18824 	muli	r3,r2,1568
 c0039b8:	e0bff617 	ldw	r2,-40(fp)
 c0039bc:	1885883a 	add	r2,r3,r2
 c0039c0:	e0bff815 	stw	r2,-32(fp)
    x1 = x4 + x6;
 c0039c4:	e0fff917 	ldw	r3,-28(fp)
 c0039c8:	e0bffb17 	ldw	r2,-20(fp)
 c0039cc:	1885883a 	add	r2,r3,r2
 c0039d0:	e0bff615 	stw	r2,-40(fp)
    x4 -= x6;
 c0039d4:	e0fff917 	ldw	r3,-28(fp)
 c0039d8:	e0bffb17 	ldw	r2,-20(fp)
 c0039dc:	1885c83a 	sub	r2,r3,r2
 c0039e0:	e0bff915 	stw	r2,-28(fp)
    x6 = x5 + x7;
 c0039e4:	e0fffa17 	ldw	r3,-24(fp)
 c0039e8:	e0bffc17 	ldw	r2,-16(fp)
 c0039ec:	1885883a 	add	r2,r3,r2
 c0039f0:	e0bffb15 	stw	r2,-20(fp)
    x5 -= x7;
 c0039f4:	e0fffa17 	ldw	r3,-24(fp)
 c0039f8:	e0bffc17 	ldw	r2,-16(fp)
 c0039fc:	1885c83a 	sub	r2,r3,r2
 c003a00:	e0bffa15 	stw	r2,-24(fp)
    x7 = x8 + x3;
 c003a04:	e0fffe17 	ldw	r3,-8(fp)
 c003a08:	e0bff817 	ldw	r2,-32(fp)
 c003a0c:	1885883a 	add	r2,r3,r2
 c003a10:	e0bffc15 	stw	r2,-16(fp)
    x8 -= x3;
 c003a14:	e0fffe17 	ldw	r3,-8(fp)
 c003a18:	e0bff817 	ldw	r2,-32(fp)
 c003a1c:	1885c83a 	sub	r2,r3,r2
 c003a20:	e0bffe15 	stw	r2,-8(fp)
    x3 = x0 + x2;
 c003a24:	e0fffd17 	ldw	r3,-12(fp)
 c003a28:	e0bff717 	ldw	r2,-36(fp)
 c003a2c:	1885883a 	add	r2,r3,r2
 c003a30:	e0bff815 	stw	r2,-32(fp)
    x0 -= x2;
 c003a34:	e0fffd17 	ldw	r3,-12(fp)
 c003a38:	e0bff717 	ldw	r2,-36(fp)
 c003a3c:	1885c83a 	sub	r2,r3,r2
 c003a40:	e0bffd15 	stw	r2,-12(fp)
    x2 = (181 * (x4 + x5) + 128) >> 8;
 c003a44:	e0fff917 	ldw	r3,-28(fp)
 c003a48:	e0bffa17 	ldw	r2,-24(fp)
 c003a4c:	1885883a 	add	r2,r3,r2
 c003a50:	10802d64 	muli	r2,r2,181
 c003a54:	10802004 	addi	r2,r2,128
 c003a58:	1005d23a 	srai	r2,r2,8
 c003a5c:	e0bff715 	stw	r2,-36(fp)
    x4 = (181 * (x4 - x5) + 128) >> 8;
 c003a60:	e0fff917 	ldw	r3,-28(fp)
 c003a64:	e0bffa17 	ldw	r2,-24(fp)
 c003a68:	1885c83a 	sub	r2,r3,r2
 c003a6c:	10802d64 	muli	r2,r2,181
 c003a70:	10802004 	addi	r2,r2,128
 c003a74:	1005d23a 	srai	r2,r2,8
 c003a78:	e0bff915 	stw	r2,-28(fp)
    blk[0] = (x7 + x1) >> 8;
 c003a7c:	e0fffc17 	ldw	r3,-16(fp)
 c003a80:	e0bff617 	ldw	r2,-40(fp)
 c003a84:	1885883a 	add	r2,r3,r2
 c003a88:	1007d23a 	srai	r3,r2,8
 c003a8c:	e0bfff17 	ldw	r2,-4(fp)
 c003a90:	10c00015 	stw	r3,0(r2)
    blk[1] = (x3 + x2) >> 8;
 c003a94:	e0bfff17 	ldw	r2,-4(fp)
 c003a98:	10800104 	addi	r2,r2,4
 c003a9c:	e13ff817 	ldw	r4,-32(fp)
 c003aa0:	e0fff717 	ldw	r3,-36(fp)
 c003aa4:	20c7883a 	add	r3,r4,r3
 c003aa8:	1807d23a 	srai	r3,r3,8
 c003aac:	10c00015 	stw	r3,0(r2)
    blk[2] = (x0 + x4) >> 8;
 c003ab0:	e0bfff17 	ldw	r2,-4(fp)
 c003ab4:	10800204 	addi	r2,r2,8
 c003ab8:	e13ffd17 	ldw	r4,-12(fp)
 c003abc:	e0fff917 	ldw	r3,-28(fp)
 c003ac0:	20c7883a 	add	r3,r4,r3
 c003ac4:	1807d23a 	srai	r3,r3,8
 c003ac8:	10c00015 	stw	r3,0(r2)
    blk[3] = (x8 + x6) >> 8;
 c003acc:	e0bfff17 	ldw	r2,-4(fp)
 c003ad0:	10800304 	addi	r2,r2,12
 c003ad4:	e13ffe17 	ldw	r4,-8(fp)
 c003ad8:	e0fffb17 	ldw	r3,-20(fp)
 c003adc:	20c7883a 	add	r3,r4,r3
 c003ae0:	1807d23a 	srai	r3,r3,8
 c003ae4:	10c00015 	stw	r3,0(r2)
    blk[4] = (x8 - x6) >> 8;
 c003ae8:	e0bfff17 	ldw	r2,-4(fp)
 c003aec:	10800404 	addi	r2,r2,16
 c003af0:	e13ffe17 	ldw	r4,-8(fp)
 c003af4:	e0fffb17 	ldw	r3,-20(fp)
 c003af8:	20c7c83a 	sub	r3,r4,r3
 c003afc:	1807d23a 	srai	r3,r3,8
 c003b00:	10c00015 	stw	r3,0(r2)
    blk[5] = (x0 - x4) >> 8;
 c003b04:	e0bfff17 	ldw	r2,-4(fp)
 c003b08:	10800504 	addi	r2,r2,20
 c003b0c:	e13ffd17 	ldw	r4,-12(fp)
 c003b10:	e0fff917 	ldw	r3,-28(fp)
 c003b14:	20c7c83a 	sub	r3,r4,r3
 c003b18:	1807d23a 	srai	r3,r3,8
 c003b1c:	10c00015 	stw	r3,0(r2)
    blk[6] = (x3 - x2) >> 8;
 c003b20:	e0bfff17 	ldw	r2,-4(fp)
 c003b24:	10800604 	addi	r2,r2,24
 c003b28:	e13ff817 	ldw	r4,-32(fp)
 c003b2c:	e0fff717 	ldw	r3,-36(fp)
 c003b30:	20c7c83a 	sub	r3,r4,r3
 c003b34:	1807d23a 	srai	r3,r3,8
 c003b38:	10c00015 	stw	r3,0(r2)
    blk[7] = (x7 - x1) >> 8;
 c003b3c:	e0bfff17 	ldw	r2,-4(fp)
 c003b40:	10800704 	addi	r2,r2,28
 c003b44:	e13ffc17 	ldw	r4,-16(fp)
 c003b48:	e0fff617 	ldw	r3,-40(fp)
 c003b4c:	20c7c83a 	sub	r3,r4,r3
 c003b50:	1807d23a 	srai	r3,r3,8
 c003b54:	10c00015 	stw	r3,0(r2)
}
 c003b58:	e037883a 	mov	sp,fp
 c003b5c:	df000017 	ldw	fp,0(sp)
 c003b60:	dec00104 	addi	sp,sp,4
 c003b64:	f800283a 	ret

0c003b68 <njColIDCT>:

NJ_INLINE void njColIDCT(const int* blk, unsigned char *out, int stride) {
 c003b68:	defff204 	addi	sp,sp,-56
 c003b6c:	dfc00d15 	stw	ra,52(sp)
 c003b70:	df000c15 	stw	fp,48(sp)
 c003b74:	df000c04 	addi	fp,sp,48
 c003b78:	e13ffd15 	stw	r4,-12(fp)
 c003b7c:	e17ffe15 	stw	r5,-8(fp)
 c003b80:	e1bfff15 	stw	r6,-4(fp)
    int x0, x1, x2, x3, x4, x5, x6, x7, x8;
    if (!((x1 = blk[8*4] << 8)
 c003b84:	e0bffd17 	ldw	r2,-12(fp)
 c003b88:	10802004 	addi	r2,r2,128
 c003b8c:	10800017 	ldw	r2,0(r2)
 c003b90:	1004923a 	slli	r2,r2,8
 c003b94:	e0bff515 	stw	r2,-44(fp)
        | (x2 = blk[8*6])
 c003b98:	e0bffd17 	ldw	r2,-12(fp)
 c003b9c:	10803017 	ldw	r2,192(r2)
 c003ba0:	e0bff615 	stw	r2,-40(fp)
 c003ba4:	e0fff517 	ldw	r3,-44(fp)
 c003ba8:	e0bff617 	ldw	r2,-40(fp)
 c003bac:	1886b03a 	or	r3,r3,r2
        | (x3 = blk[8*2])
 c003bb0:	e0bffd17 	ldw	r2,-12(fp)
 c003bb4:	10801017 	ldw	r2,64(r2)
 c003bb8:	e0bff715 	stw	r2,-36(fp)
 c003bbc:	e0bff717 	ldw	r2,-36(fp)
 c003bc0:	1886b03a 	or	r3,r3,r2
        | (x4 = blk[8*1])
 c003bc4:	e0bffd17 	ldw	r2,-12(fp)
 c003bc8:	10800817 	ldw	r2,32(r2)
 c003bcc:	e0bff815 	stw	r2,-32(fp)
 c003bd0:	e0bff817 	ldw	r2,-32(fp)
 c003bd4:	1886b03a 	or	r3,r3,r2
        | (x5 = blk[8*7])
 c003bd8:	e0bffd17 	ldw	r2,-12(fp)
 c003bdc:	10803817 	ldw	r2,224(r2)
 c003be0:	e0bff915 	stw	r2,-28(fp)
 c003be4:	e0bff917 	ldw	r2,-28(fp)
 c003be8:	1886b03a 	or	r3,r3,r2
        | (x6 = blk[8*5])
 c003bec:	e0bffd17 	ldw	r2,-12(fp)
 c003bf0:	10802817 	ldw	r2,160(r2)
 c003bf4:	e0bffa15 	stw	r2,-24(fp)
 c003bf8:	e0bffa17 	ldw	r2,-24(fp)
 c003bfc:	1886b03a 	or	r3,r3,r2
        | (x7 = blk[8*3])))
 c003c00:	e0bffd17 	ldw	r2,-12(fp)
 c003c04:	10801817 	ldw	r2,96(r2)
 c003c08:	e0bffb15 	stw	r2,-20(fp)
 c003c0c:	e0bffb17 	ldw	r2,-20(fp)
 c003c10:	1884b03a 	or	r2,r3,r2
    blk[7] = (x7 - x1) >> 8;
}

NJ_INLINE void njColIDCT(const int* blk, unsigned char *out, int stride) {
    int x0, x1, x2, x3, x4, x5, x6, x7, x8;
    if (!((x1 = blk[8*4] << 8)
 c003c14:	10001a1e 	bne	r2,zero,c003c80 <njColIDCT+0x118>
        | (x4 = blk[8*1])
        | (x5 = blk[8*7])
        | (x6 = blk[8*5])
        | (x7 = blk[8*3])))
    {
        x1 = njClip(((blk[0] + 32) >> 6) + 128);
 c003c18:	e0bffd17 	ldw	r2,-12(fp)
 c003c1c:	10800017 	ldw	r2,0(r2)
 c003c20:	10800804 	addi	r2,r2,32
 c003c24:	1005d1ba 	srai	r2,r2,6
 c003c28:	10802004 	addi	r2,r2,128
 c003c2c:	1009883a 	mov	r4,r2
 c003c30:	c0037680 	call	c003768 <njClip>
 c003c34:	10803fcc 	andi	r2,r2,255
 c003c38:	e0bff515 	stw	r2,-44(fp)
        for (x0 = 8;  x0;  --x0) {
 c003c3c:	00800204 	movi	r2,8
 c003c40:	e0bff415 	stw	r2,-48(fp)
 c003c44:	00000b06 	br	c003c74 <njColIDCT+0x10c>
            *out = (unsigned char) x1;
 c003c48:	e0bff517 	ldw	r2,-44(fp)
 c003c4c:	1007883a 	mov	r3,r2
 c003c50:	e0bffe17 	ldw	r2,-8(fp)
 c003c54:	10c00005 	stb	r3,0(r2)
            out += stride;
 c003c58:	e0bfff17 	ldw	r2,-4(fp)
 c003c5c:	e0fffe17 	ldw	r3,-8(fp)
 c003c60:	1885883a 	add	r2,r3,r2
 c003c64:	e0bffe15 	stw	r2,-8(fp)
        | (x5 = blk[8*7])
        | (x6 = blk[8*5])
        | (x7 = blk[8*3])))
    {
        x1 = njClip(((blk[0] + 32) >> 6) + 128);
        for (x0 = 8;  x0;  --x0) {
 c003c68:	e0bff417 	ldw	r2,-48(fp)
 c003c6c:	10bfffc4 	addi	r2,r2,-1
 c003c70:	e0bff415 	stw	r2,-48(fp)
 c003c74:	e0bff417 	ldw	r2,-48(fp)
 c003c78:	103ff31e 	bne	r2,zero,c003c48 <__alt_data_end+0xfc003c48>
            *out = (unsigned char) x1;
            out += stride;
        }
        return;
 c003c7c:	0000dd06 	br	c003ff4 <njColIDCT+0x48c>
    }
    x0 = (blk[0] << 8) + 8192;
 c003c80:	e0bffd17 	ldw	r2,-12(fp)
 c003c84:	10800017 	ldw	r2,0(r2)
 c003c88:	1004923a 	slli	r2,r2,8
 c003c8c:	10880004 	addi	r2,r2,8192
 c003c90:	e0bff415 	stw	r2,-48(fp)
    x8 = W7 * (x4 + x5) + 4;
 c003c94:	e0fff817 	ldw	r3,-32(fp)
 c003c98:	e0bff917 	ldw	r2,-28(fp)
 c003c9c:	1885883a 	add	r2,r3,r2
 c003ca0:	10808d64 	muli	r2,r2,565
 c003ca4:	10800104 	addi	r2,r2,4
 c003ca8:	e0bffc15 	stw	r2,-16(fp)
    x4 = (x8 + (W1 - W7) * x4) >> 3;
 c003cac:	e0bff817 	ldw	r2,-32(fp)
 c003cb0:	10c23924 	muli	r3,r2,2276
 c003cb4:	e0bffc17 	ldw	r2,-16(fp)
 c003cb8:	1885883a 	add	r2,r3,r2
 c003cbc:	1005d0fa 	srai	r2,r2,3
 c003cc0:	e0bff815 	stw	r2,-32(fp)
    x5 = (x8 - (W1 + W7) * x5) >> 3;
 c003cc4:	e0bff917 	ldw	r2,-28(fp)
 c003cc8:	10fcaca4 	muli	r3,r2,-3406
 c003ccc:	e0bffc17 	ldw	r2,-16(fp)
 c003cd0:	1885883a 	add	r2,r3,r2
 c003cd4:	1005d0fa 	srai	r2,r2,3
 c003cd8:	e0bff915 	stw	r2,-28(fp)
    x8 = W3 * (x6 + x7) + 4;
 c003cdc:	e0fffa17 	ldw	r3,-24(fp)
 c003ce0:	e0bffb17 	ldw	r2,-20(fp)
 c003ce4:	1885883a 	add	r2,r3,r2
 c003ce8:	10825a24 	muli	r2,r2,2408
 c003cec:	10800104 	addi	r2,r2,4
 c003cf0:	e0bffc15 	stw	r2,-16(fp)
    x6 = (x8 - (W3 - W5) * x6) >> 3;
 c003cf4:	e0bffa17 	ldw	r2,-24(fp)
 c003cf8:	10ff3864 	muli	r3,r2,-799
 c003cfc:	e0bffc17 	ldw	r2,-16(fp)
 c003d00:	1885883a 	add	r2,r3,r2
 c003d04:	1005d0fa 	srai	r2,r2,3
 c003d08:	e0bffa15 	stw	r2,-24(fp)
    x7 = (x8 - (W3 + W5) * x7) >> 3;
 c003d0c:	e0bffb17 	ldw	r2,-20(fp)
 c003d10:	10fc13e4 	muli	r3,r2,-4017
 c003d14:	e0bffc17 	ldw	r2,-16(fp)
 c003d18:	1885883a 	add	r2,r3,r2
 c003d1c:	1005d0fa 	srai	r2,r2,3
 c003d20:	e0bffb15 	stw	r2,-20(fp)
    x8 = x0 + x1;
 c003d24:	e0fff417 	ldw	r3,-48(fp)
 c003d28:	e0bff517 	ldw	r2,-44(fp)
 c003d2c:	1885883a 	add	r2,r3,r2
 c003d30:	e0bffc15 	stw	r2,-16(fp)
    x0 -= x1;
 c003d34:	e0fff417 	ldw	r3,-48(fp)
 c003d38:	e0bff517 	ldw	r2,-44(fp)
 c003d3c:	1885c83a 	sub	r2,r3,r2
 c003d40:	e0bff415 	stw	r2,-48(fp)
    x1 = W6 * (x3 + x2) + 4;
 c003d44:	e0fff717 	ldw	r3,-36(fp)
 c003d48:	e0bff617 	ldw	r2,-40(fp)
 c003d4c:	1885883a 	add	r2,r3,r2
 c003d50:	10811524 	muli	r2,r2,1108
 c003d54:	10800104 	addi	r2,r2,4
 c003d58:	e0bff515 	stw	r2,-44(fp)
    x2 = (x1 - (W2 + W6) * x2) >> 3;
 c003d5c:	e0bff617 	ldw	r2,-40(fp)
 c003d60:	10fc4e24 	muli	r3,r2,-3784
 c003d64:	e0bff517 	ldw	r2,-44(fp)
 c003d68:	1885883a 	add	r2,r3,r2
 c003d6c:	1005d0fa 	srai	r2,r2,3
 c003d70:	e0bff615 	stw	r2,-40(fp)
    x3 = (x1 + (W2 - W6) * x3) >> 3;
 c003d74:	e0bff717 	ldw	r2,-36(fp)
 c003d78:	10c18824 	muli	r3,r2,1568
 c003d7c:	e0bff517 	ldw	r2,-44(fp)
 c003d80:	1885883a 	add	r2,r3,r2
 c003d84:	1005d0fa 	srai	r2,r2,3
 c003d88:	e0bff715 	stw	r2,-36(fp)
    x1 = x4 + x6;
 c003d8c:	e0fff817 	ldw	r3,-32(fp)
 c003d90:	e0bffa17 	ldw	r2,-24(fp)
 c003d94:	1885883a 	add	r2,r3,r2
 c003d98:	e0bff515 	stw	r2,-44(fp)
    x4 -= x6;
 c003d9c:	e0fff817 	ldw	r3,-32(fp)
 c003da0:	e0bffa17 	ldw	r2,-24(fp)
 c003da4:	1885c83a 	sub	r2,r3,r2
 c003da8:	e0bff815 	stw	r2,-32(fp)
    x6 = x5 + x7;
 c003dac:	e0fff917 	ldw	r3,-28(fp)
 c003db0:	e0bffb17 	ldw	r2,-20(fp)
 c003db4:	1885883a 	add	r2,r3,r2
 c003db8:	e0bffa15 	stw	r2,-24(fp)
    x5 -= x7;
 c003dbc:	e0fff917 	ldw	r3,-28(fp)
 c003dc0:	e0bffb17 	ldw	r2,-20(fp)
 c003dc4:	1885c83a 	sub	r2,r3,r2
 c003dc8:	e0bff915 	stw	r2,-28(fp)
    x7 = x8 + x3;
 c003dcc:	e0fffc17 	ldw	r3,-16(fp)
 c003dd0:	e0bff717 	ldw	r2,-36(fp)
 c003dd4:	1885883a 	add	r2,r3,r2
 c003dd8:	e0bffb15 	stw	r2,-20(fp)
    x8 -= x3;
 c003ddc:	e0fffc17 	ldw	r3,-16(fp)
 c003de0:	e0bff717 	ldw	r2,-36(fp)
 c003de4:	1885c83a 	sub	r2,r3,r2
 c003de8:	e0bffc15 	stw	r2,-16(fp)
    x3 = x0 + x2;
 c003dec:	e0fff417 	ldw	r3,-48(fp)
 c003df0:	e0bff617 	ldw	r2,-40(fp)
 c003df4:	1885883a 	add	r2,r3,r2
 c003df8:	e0bff715 	stw	r2,-36(fp)
    x0 -= x2;
 c003dfc:	e0fff417 	ldw	r3,-48(fp)
 c003e00:	e0bff617 	ldw	r2,-40(fp)
 c003e04:	1885c83a 	sub	r2,r3,r2
 c003e08:	e0bff415 	stw	r2,-48(fp)
    x2 = (181 * (x4 + x5) + 128) >> 8;
 c003e0c:	e0fff817 	ldw	r3,-32(fp)
 c003e10:	e0bff917 	ldw	r2,-28(fp)
 c003e14:	1885883a 	add	r2,r3,r2
 c003e18:	10802d64 	muli	r2,r2,181
 c003e1c:	10802004 	addi	r2,r2,128
 c003e20:	1005d23a 	srai	r2,r2,8
 c003e24:	e0bff615 	stw	r2,-40(fp)
    x4 = (181 * (x4 - x5) + 128) >> 8;
 c003e28:	e0fff817 	ldw	r3,-32(fp)
 c003e2c:	e0bff917 	ldw	r2,-28(fp)
 c003e30:	1885c83a 	sub	r2,r3,r2
 c003e34:	10802d64 	muli	r2,r2,181
 c003e38:	10802004 	addi	r2,r2,128
 c003e3c:	1005d23a 	srai	r2,r2,8
 c003e40:	e0bff815 	stw	r2,-32(fp)
    *out = njClip(((x7 + x1) >> 14) + 128);  out += stride;
 c003e44:	e0fffb17 	ldw	r3,-20(fp)
 c003e48:	e0bff517 	ldw	r2,-44(fp)
 c003e4c:	1885883a 	add	r2,r3,r2
 c003e50:	1005d3ba 	srai	r2,r2,14
 c003e54:	10802004 	addi	r2,r2,128
 c003e58:	1009883a 	mov	r4,r2
 c003e5c:	c0037680 	call	c003768 <njClip>
 c003e60:	1007883a 	mov	r3,r2
 c003e64:	e0bffe17 	ldw	r2,-8(fp)
 c003e68:	10c00005 	stb	r3,0(r2)
 c003e6c:	e0bfff17 	ldw	r2,-4(fp)
 c003e70:	e0fffe17 	ldw	r3,-8(fp)
 c003e74:	1885883a 	add	r2,r3,r2
 c003e78:	e0bffe15 	stw	r2,-8(fp)
    *out = njClip(((x3 + x2) >> 14) + 128);  out += stride;
 c003e7c:	e0fff717 	ldw	r3,-36(fp)
 c003e80:	e0bff617 	ldw	r2,-40(fp)
 c003e84:	1885883a 	add	r2,r3,r2
 c003e88:	1005d3ba 	srai	r2,r2,14
 c003e8c:	10802004 	addi	r2,r2,128
 c003e90:	1009883a 	mov	r4,r2
 c003e94:	c0037680 	call	c003768 <njClip>
 c003e98:	1007883a 	mov	r3,r2
 c003e9c:	e0bffe17 	ldw	r2,-8(fp)
 c003ea0:	10c00005 	stb	r3,0(r2)
 c003ea4:	e0bfff17 	ldw	r2,-4(fp)
 c003ea8:	e0fffe17 	ldw	r3,-8(fp)
 c003eac:	1885883a 	add	r2,r3,r2
 c003eb0:	e0bffe15 	stw	r2,-8(fp)
    *out = njClip(((x0 + x4) >> 14) + 128);  out += stride;
 c003eb4:	e0fff417 	ldw	r3,-48(fp)
 c003eb8:	e0bff817 	ldw	r2,-32(fp)
 c003ebc:	1885883a 	add	r2,r3,r2
 c003ec0:	1005d3ba 	srai	r2,r2,14
 c003ec4:	10802004 	addi	r2,r2,128
 c003ec8:	1009883a 	mov	r4,r2
 c003ecc:	c0037680 	call	c003768 <njClip>
 c003ed0:	1007883a 	mov	r3,r2
 c003ed4:	e0bffe17 	ldw	r2,-8(fp)
 c003ed8:	10c00005 	stb	r3,0(r2)
 c003edc:	e0bfff17 	ldw	r2,-4(fp)
 c003ee0:	e0fffe17 	ldw	r3,-8(fp)
 c003ee4:	1885883a 	add	r2,r3,r2
 c003ee8:	e0bffe15 	stw	r2,-8(fp)
    *out = njClip(((x8 + x6) >> 14) + 128);  out += stride;
 c003eec:	e0fffc17 	ldw	r3,-16(fp)
 c003ef0:	e0bffa17 	ldw	r2,-24(fp)
 c003ef4:	1885883a 	add	r2,r3,r2
 c003ef8:	1005d3ba 	srai	r2,r2,14
 c003efc:	10802004 	addi	r2,r2,128
 c003f00:	1009883a 	mov	r4,r2
 c003f04:	c0037680 	call	c003768 <njClip>
 c003f08:	1007883a 	mov	r3,r2
 c003f0c:	e0bffe17 	ldw	r2,-8(fp)
 c003f10:	10c00005 	stb	r3,0(r2)
 c003f14:	e0bfff17 	ldw	r2,-4(fp)
 c003f18:	e0fffe17 	ldw	r3,-8(fp)
 c003f1c:	1885883a 	add	r2,r3,r2
 c003f20:	e0bffe15 	stw	r2,-8(fp)
    *out = njClip(((x8 - x6) >> 14) + 128);  out += stride;
 c003f24:	e0fffc17 	ldw	r3,-16(fp)
 c003f28:	e0bffa17 	ldw	r2,-24(fp)
 c003f2c:	1885c83a 	sub	r2,r3,r2
 c003f30:	1005d3ba 	srai	r2,r2,14
 c003f34:	10802004 	addi	r2,r2,128
 c003f38:	1009883a 	mov	r4,r2
 c003f3c:	c0037680 	call	c003768 <njClip>
 c003f40:	1007883a 	mov	r3,r2
 c003f44:	e0bffe17 	ldw	r2,-8(fp)
 c003f48:	10c00005 	stb	r3,0(r2)
 c003f4c:	e0bfff17 	ldw	r2,-4(fp)
 c003f50:	e0fffe17 	ldw	r3,-8(fp)
 c003f54:	1885883a 	add	r2,r3,r2
 c003f58:	e0bffe15 	stw	r2,-8(fp)
    *out = njClip(((x0 - x4) >> 14) + 128);  out += stride;
 c003f5c:	e0fff417 	ldw	r3,-48(fp)
 c003f60:	e0bff817 	ldw	r2,-32(fp)
 c003f64:	1885c83a 	sub	r2,r3,r2
 c003f68:	1005d3ba 	srai	r2,r2,14
 c003f6c:	10802004 	addi	r2,r2,128
 c003f70:	1009883a 	mov	r4,r2
 c003f74:	c0037680 	call	c003768 <njClip>
 c003f78:	1007883a 	mov	r3,r2
 c003f7c:	e0bffe17 	ldw	r2,-8(fp)
 c003f80:	10c00005 	stb	r3,0(r2)
 c003f84:	e0bfff17 	ldw	r2,-4(fp)
 c003f88:	e0fffe17 	ldw	r3,-8(fp)
 c003f8c:	1885883a 	add	r2,r3,r2
 c003f90:	e0bffe15 	stw	r2,-8(fp)
    *out = njClip(((x3 - x2) >> 14) + 128);  out += stride;
 c003f94:	e0fff717 	ldw	r3,-36(fp)
 c003f98:	e0bff617 	ldw	r2,-40(fp)
 c003f9c:	1885c83a 	sub	r2,r3,r2
 c003fa0:	1005d3ba 	srai	r2,r2,14
 c003fa4:	10802004 	addi	r2,r2,128
 c003fa8:	1009883a 	mov	r4,r2
 c003fac:	c0037680 	call	c003768 <njClip>
 c003fb0:	1007883a 	mov	r3,r2
 c003fb4:	e0bffe17 	ldw	r2,-8(fp)
 c003fb8:	10c00005 	stb	r3,0(r2)
 c003fbc:	e0bfff17 	ldw	r2,-4(fp)
 c003fc0:	e0fffe17 	ldw	r3,-8(fp)
 c003fc4:	1885883a 	add	r2,r3,r2
 c003fc8:	e0bffe15 	stw	r2,-8(fp)
    *out = njClip(((x7 - x1) >> 14) + 128);
 c003fcc:	e0fffb17 	ldw	r3,-20(fp)
 c003fd0:	e0bff517 	ldw	r2,-44(fp)
 c003fd4:	1885c83a 	sub	r2,r3,r2
 c003fd8:	1005d3ba 	srai	r2,r2,14
 c003fdc:	10802004 	addi	r2,r2,128
 c003fe0:	1009883a 	mov	r4,r2
 c003fe4:	c0037680 	call	c003768 <njClip>
 c003fe8:	1007883a 	mov	r3,r2
 c003fec:	e0bffe17 	ldw	r2,-8(fp)
 c003ff0:	10c00005 	stb	r3,0(r2)
}
 c003ff4:	e037883a 	mov	sp,fp
 c003ff8:	dfc00117 	ldw	ra,4(sp)
 c003ffc:	df000017 	ldw	fp,0(sp)
 c004000:	dec00204 	addi	sp,sp,8
 c004004:	f800283a 	ret

0c004008 <njShowBits>:

#define njThrow(e) do { nj.error = e; return; } while (0)
#define njCheckError() do { if (nj.error) return; } while (0)

static int njShowBits(int bits) {
 c004008:	defffd04 	addi	sp,sp,-12
 c00400c:	df000215 	stw	fp,8(sp)
 c004010:	df000204 	addi	fp,sp,8
 c004014:	e13fff15 	stw	r4,-4(fp)
    unsigned char newbyte;
    if (!bits) return 0;
 c004018:	e0bfff17 	ldw	r2,-4(fp)
 c00401c:	1000021e 	bne	r2,zero,c004028 <njShowBits+0x20>
 c004020:	0005883a 	mov	r2,zero
 c004024:	0000b706 	br	c004304 <njShowBits+0x2fc>
    while (nj.bufbits < bits) {
 c004028:	00009a06 	br	c004294 <njShowBits+0x28c>
        if (nj.size <= 0) {
 c00402c:	008300b4 	movhi	r2,3074
 c004030:	10976004 	addi	r2,r2,23936
 c004034:	10800217 	ldw	r2,8(r2)
 c004038:	00801c16 	blt	zero,r2,c0040ac <njShowBits+0xa4>
            nj.buf = (nj.buf << 8) | 0xFF;
 c00403c:	00c300b4 	movhi	r3,3074
 c004040:	18d76004 	addi	r3,r3,23936
 c004044:	00800234 	movhi	r2,8
 c004048:	10806e04 	addi	r2,r2,440
 c00404c:	1885883a 	add	r2,r3,r2
 c004050:	10800017 	ldw	r2,0(r2)
 c004054:	1004923a 	slli	r2,r2,8
 c004058:	11003fd4 	ori	r4,r2,255
 c00405c:	00c300b4 	movhi	r3,3074
 c004060:	18d76004 	addi	r3,r3,23936
 c004064:	00800234 	movhi	r2,8
 c004068:	10806e04 	addi	r2,r2,440
 c00406c:	1885883a 	add	r2,r3,r2
 c004070:	11000015 	stw	r4,0(r2)
            nj.bufbits += 8;
 c004074:	00c300b4 	movhi	r3,3074
 c004078:	18d76004 	addi	r3,r3,23936
 c00407c:	00800234 	movhi	r2,8
 c004080:	10806f04 	addi	r2,r2,444
 c004084:	1885883a 	add	r2,r3,r2
 c004088:	10800017 	ldw	r2,0(r2)
 c00408c:	11000204 	addi	r4,r2,8
 c004090:	00c300b4 	movhi	r3,3074
 c004094:	18d76004 	addi	r3,r3,23936
 c004098:	00800234 	movhi	r2,8
 c00409c:	10806f04 	addi	r2,r2,444
 c0040a0:	1885883a 	add	r2,r3,r2
 c0040a4:	11000015 	stw	r4,0(r2)
            continue;
 c0040a8:	00007a06 	br	c004294 <njShowBits+0x28c>
        }
        newbyte = *nj.pos++;
 c0040ac:	008300b4 	movhi	r2,3074
 c0040b0:	10976004 	addi	r2,r2,23936
 c0040b4:	10c00117 	ldw	r3,4(r2)
 c0040b8:	19000044 	addi	r4,r3,1
 c0040bc:	008300b4 	movhi	r2,3074
 c0040c0:	10976004 	addi	r2,r2,23936
 c0040c4:	11000115 	stw	r4,4(r2)
 c0040c8:	18800003 	ldbu	r2,0(r3)
 c0040cc:	e0bffe05 	stb	r2,-8(fp)
        nj.size--;
 c0040d0:	008300b4 	movhi	r2,3074
 c0040d4:	10976004 	addi	r2,r2,23936
 c0040d8:	10800217 	ldw	r2,8(r2)
 c0040dc:	10ffffc4 	addi	r3,r2,-1
 c0040e0:	008300b4 	movhi	r2,3074
 c0040e4:	10976004 	addi	r2,r2,23936
 c0040e8:	10c00215 	stw	r3,8(r2)
        nj.bufbits += 8;
 c0040ec:	00c300b4 	movhi	r3,3074
 c0040f0:	18d76004 	addi	r3,r3,23936
 c0040f4:	00800234 	movhi	r2,8
 c0040f8:	10806f04 	addi	r2,r2,444
 c0040fc:	1885883a 	add	r2,r3,r2
 c004100:	10800017 	ldw	r2,0(r2)
 c004104:	11000204 	addi	r4,r2,8
 c004108:	00c300b4 	movhi	r3,3074
 c00410c:	18d76004 	addi	r3,r3,23936
 c004110:	00800234 	movhi	r2,8
 c004114:	10806f04 	addi	r2,r2,444
 c004118:	1885883a 	add	r2,r3,r2
 c00411c:	11000015 	stw	r4,0(r2)
        nj.buf = (nj.buf << 8) | newbyte;
 c004120:	00c300b4 	movhi	r3,3074
 c004124:	18d76004 	addi	r3,r3,23936
 c004128:	00800234 	movhi	r2,8
 c00412c:	10806e04 	addi	r2,r2,440
 c004130:	1885883a 	add	r2,r3,r2
 c004134:	10800017 	ldw	r2,0(r2)
 c004138:	1006923a 	slli	r3,r2,8
 c00413c:	e0bffe03 	ldbu	r2,-8(fp)
 c004140:	1888b03a 	or	r4,r3,r2
 c004144:	00c300b4 	movhi	r3,3074
 c004148:	18d76004 	addi	r3,r3,23936
 c00414c:	00800234 	movhi	r2,8
 c004150:	10806e04 	addi	r2,r2,440
 c004154:	1885883a 	add	r2,r3,r2
 c004158:	11000015 	stw	r4,0(r2)
        if (newbyte == 0xFF) {
 c00415c:	e0bffe03 	ldbu	r2,-8(fp)
 c004160:	10803fd8 	cmpnei	r2,r2,255
 c004164:	10004b1e 	bne	r2,zero,c004294 <njShowBits+0x28c>
            if (nj.size) {
 c004168:	008300b4 	movhi	r2,3074
 c00416c:	10976004 	addi	r2,r2,23936
 c004170:	10800217 	ldw	r2,8(r2)
 c004174:	10004326 	beq	r2,zero,c004284 <njShowBits+0x27c>
                unsigned char marker = *nj.pos++;
 c004178:	008300b4 	movhi	r2,3074
 c00417c:	10976004 	addi	r2,r2,23936
 c004180:	10c00117 	ldw	r3,4(r2)
 c004184:	19000044 	addi	r4,r3,1
 c004188:	008300b4 	movhi	r2,3074
 c00418c:	10976004 	addi	r2,r2,23936
 c004190:	11000115 	stw	r4,4(r2)
 c004194:	18800003 	ldbu	r2,0(r3)
 c004198:	e0bffe45 	stb	r2,-7(fp)
                nj.size--;
 c00419c:	008300b4 	movhi	r2,3074
 c0041a0:	10976004 	addi	r2,r2,23936
 c0041a4:	10800217 	ldw	r2,8(r2)
 c0041a8:	10ffffc4 	addi	r3,r2,-1
 c0041ac:	008300b4 	movhi	r2,3074
 c0041b0:	10976004 	addi	r2,r2,23936
 c0041b4:	10c00215 	stw	r3,8(r2)
                switch (marker) {
 c0041b8:	e0bffe43 	ldbu	r2,-7(fp)
 c0041bc:	10c03660 	cmpeqi	r3,r2,217
 c0041c0:	1800041e 	bne	r3,zero,c0041d4 <njShowBits+0x1cc>
 c0041c4:	10c03fe0 	cmpeqi	r3,r2,255
 c0041c8:	18002c1e 	bne	r3,zero,c00427c <njShowBits+0x274>
 c0041cc:	10002b26 	beq	r2,zero,c00427c <njShowBits+0x274>
 c0041d0:	00000406 	br	c0041e4 <njShowBits+0x1dc>
                    case 0x00:
                    case 0xFF:
                        break;
                    case 0xD9: nj.size = 0; break;
 c0041d4:	008300b4 	movhi	r2,3074
 c0041d8:	10976004 	addi	r2,r2,23936
 c0041dc:	10000215 	stw	zero,8(r2)
 c0041e0:	00002706 	br	c004280 <njShowBits+0x278>
                    default:
                        if ((marker & 0xF8) != 0xD0)
 c0041e4:	e0bffe43 	ldbu	r2,-7(fp)
 c0041e8:	10803e0c 	andi	r2,r2,248
 c0041ec:	10803420 	cmpeqi	r2,r2,208
 c0041f0:	1000051e 	bne	r2,zero,c004208 <njShowBits+0x200>
                            nj.error = NJ_SYNTAX_ERROR;
 c0041f4:	008300b4 	movhi	r2,3074
 c0041f8:	10976004 	addi	r2,r2,23936
 c0041fc:	00c00144 	movi	r3,5
 c004200:	10c00015 	stw	r3,0(r2)
 c004204:	00001e06 	br	c004280 <njShowBits+0x278>
                        else {
                            nj.buf = (nj.buf << 8) | marker;
 c004208:	00c300b4 	movhi	r3,3074
 c00420c:	18d76004 	addi	r3,r3,23936
 c004210:	00800234 	movhi	r2,8
 c004214:	10806e04 	addi	r2,r2,440
 c004218:	1885883a 	add	r2,r3,r2
 c00421c:	10800017 	ldw	r2,0(r2)
 c004220:	1006923a 	slli	r3,r2,8
 c004224:	e0bffe43 	ldbu	r2,-7(fp)
 c004228:	1888b03a 	or	r4,r3,r2
 c00422c:	00c300b4 	movhi	r3,3074
 c004230:	18d76004 	addi	r3,r3,23936
 c004234:	00800234 	movhi	r2,8
 c004238:	10806e04 	addi	r2,r2,440
 c00423c:	1885883a 	add	r2,r3,r2
 c004240:	11000015 	stw	r4,0(r2)
                            nj.bufbits += 8;
 c004244:	00c300b4 	movhi	r3,3074
 c004248:	18d76004 	addi	r3,r3,23936
 c00424c:	00800234 	movhi	r2,8
 c004250:	10806f04 	addi	r2,r2,444
 c004254:	1885883a 	add	r2,r3,r2
 c004258:	10800017 	ldw	r2,0(r2)
 c00425c:	11000204 	addi	r4,r2,8
 c004260:	00c300b4 	movhi	r3,3074
 c004264:	18d76004 	addi	r3,r3,23936
 c004268:	00800234 	movhi	r2,8
 c00426c:	10806f04 	addi	r2,r2,444
 c004270:	1885883a 	add	r2,r3,r2
 c004274:	11000015 	stw	r4,0(r2)
 c004278:	00000606 	br	c004294 <njShowBits+0x28c>
                unsigned char marker = *nj.pos++;
                nj.size--;
                switch (marker) {
                    case 0x00:
                    case 0xFF:
                        break;
 c00427c:	0001883a 	nop
 c004280:	00000406 	br	c004294 <njShowBits+0x28c>
                            nj.buf = (nj.buf << 8) | marker;
                            nj.bufbits += 8;
                        }
                }
            } else
                nj.error = NJ_SYNTAX_ERROR;
 c004284:	008300b4 	movhi	r2,3074
 c004288:	10976004 	addi	r2,r2,23936
 c00428c:	00c00144 	movi	r3,5
 c004290:	10c00015 	stw	r3,0(r2)
#define njCheckError() do { if (nj.error) return; } while (0)

static int njShowBits(int bits) {
    unsigned char newbyte;
    if (!bits) return 0;
    while (nj.bufbits < bits) {
 c004294:	00c300b4 	movhi	r3,3074
 c004298:	18d76004 	addi	r3,r3,23936
 c00429c:	00800234 	movhi	r2,8
 c0042a0:	10806f04 	addi	r2,r2,444
 c0042a4:	1885883a 	add	r2,r3,r2
 c0042a8:	10c00017 	ldw	r3,0(r2)
 c0042ac:	e0bfff17 	ldw	r2,-4(fp)
 c0042b0:	18bf5e16 	blt	r3,r2,c00402c <__alt_data_end+0xfc00402c>
                }
            } else
                nj.error = NJ_SYNTAX_ERROR;
        }
    }
    return (nj.buf >> (nj.bufbits - bits)) & ((1 << bits) - 1);
 c0042b4:	00c300b4 	movhi	r3,3074
 c0042b8:	18d76004 	addi	r3,r3,23936
 c0042bc:	00800234 	movhi	r2,8
 c0042c0:	10806e04 	addi	r2,r2,440
 c0042c4:	1885883a 	add	r2,r3,r2
 c0042c8:	11000017 	ldw	r4,0(r2)
 c0042cc:	00c300b4 	movhi	r3,3074
 c0042d0:	18d76004 	addi	r3,r3,23936
 c0042d4:	00800234 	movhi	r2,8
 c0042d8:	10806f04 	addi	r2,r2,444
 c0042dc:	1885883a 	add	r2,r3,r2
 c0042e0:	10c00017 	ldw	r3,0(r2)
 c0042e4:	e0bfff17 	ldw	r2,-4(fp)
 c0042e8:	1885c83a 	sub	r2,r3,r2
 c0042ec:	2087d83a 	sra	r3,r4,r2
 c0042f0:	01000044 	movi	r4,1
 c0042f4:	e0bfff17 	ldw	r2,-4(fp)
 c0042f8:	2084983a 	sll	r2,r4,r2
 c0042fc:	10bfffc4 	addi	r2,r2,-1
 c004300:	1884703a 	and	r2,r3,r2
}
 c004304:	e037883a 	mov	sp,fp
 c004308:	df000017 	ldw	fp,0(sp)
 c00430c:	dec00104 	addi	sp,sp,4
 c004310:	f800283a 	ret

0c004314 <njSkipBits>:

NJ_INLINE void njSkipBits(int bits) {
 c004314:	defffd04 	addi	sp,sp,-12
 c004318:	dfc00215 	stw	ra,8(sp)
 c00431c:	df000115 	stw	fp,4(sp)
 c004320:	df000104 	addi	fp,sp,4
 c004324:	e13fff15 	stw	r4,-4(fp)
    if (nj.bufbits < bits)
 c004328:	00c300b4 	movhi	r3,3074
 c00432c:	18d76004 	addi	r3,r3,23936
 c004330:	00800234 	movhi	r2,8
 c004334:	10806f04 	addi	r2,r2,444
 c004338:	1885883a 	add	r2,r3,r2
 c00433c:	10c00017 	ldw	r3,0(r2)
 c004340:	e0bfff17 	ldw	r2,-4(fp)
 c004344:	1880020e 	bge	r3,r2,c004350 <njSkipBits+0x3c>
        (void) njShowBits(bits);
 c004348:	e13fff17 	ldw	r4,-4(fp)
 c00434c:	c0040080 	call	c004008 <njShowBits>
    nj.bufbits -= bits;
 c004350:	00c300b4 	movhi	r3,3074
 c004354:	18d76004 	addi	r3,r3,23936
 c004358:	00800234 	movhi	r2,8
 c00435c:	10806f04 	addi	r2,r2,444
 c004360:	1885883a 	add	r2,r3,r2
 c004364:	10c00017 	ldw	r3,0(r2)
 c004368:	e0bfff17 	ldw	r2,-4(fp)
 c00436c:	1889c83a 	sub	r4,r3,r2
 c004370:	00c300b4 	movhi	r3,3074
 c004374:	18d76004 	addi	r3,r3,23936
 c004378:	00800234 	movhi	r2,8
 c00437c:	10806f04 	addi	r2,r2,444
 c004380:	1885883a 	add	r2,r3,r2
 c004384:	11000015 	stw	r4,0(r2)
}
 c004388:	e037883a 	mov	sp,fp
 c00438c:	dfc00117 	ldw	ra,4(sp)
 c004390:	df000017 	ldw	fp,0(sp)
 c004394:	dec00204 	addi	sp,sp,8
 c004398:	f800283a 	ret

0c00439c <njGetBits>:

NJ_INLINE int njGetBits(int bits) {
 c00439c:	defffc04 	addi	sp,sp,-16
 c0043a0:	dfc00315 	stw	ra,12(sp)
 c0043a4:	df000215 	stw	fp,8(sp)
 c0043a8:	df000204 	addi	fp,sp,8
 c0043ac:	e13fff15 	stw	r4,-4(fp)
    int res = njShowBits(bits);
 c0043b0:	e13fff17 	ldw	r4,-4(fp)
 c0043b4:	c0040080 	call	c004008 <njShowBits>
 c0043b8:	e0bffe15 	stw	r2,-8(fp)
    njSkipBits(bits);
 c0043bc:	e13fff17 	ldw	r4,-4(fp)
 c0043c0:	c0043140 	call	c004314 <njSkipBits>
    return res;
 c0043c4:	e0bffe17 	ldw	r2,-8(fp)
}
 c0043c8:	e037883a 	mov	sp,fp
 c0043cc:	dfc00117 	ldw	ra,4(sp)
 c0043d0:	df000017 	ldw	fp,0(sp)
 c0043d4:	dec00204 	addi	sp,sp,8
 c0043d8:	f800283a 	ret

0c0043dc <njByteAlign>:

NJ_INLINE void njByteAlign(void) {
 c0043dc:	deffff04 	addi	sp,sp,-4
 c0043e0:	df000015 	stw	fp,0(sp)
 c0043e4:	d839883a 	mov	fp,sp
    nj.bufbits &= 0xF8;
 c0043e8:	00c300b4 	movhi	r3,3074
 c0043ec:	18d76004 	addi	r3,r3,23936
 c0043f0:	00800234 	movhi	r2,8
 c0043f4:	10806f04 	addi	r2,r2,444
 c0043f8:	1885883a 	add	r2,r3,r2
 c0043fc:	10800017 	ldw	r2,0(r2)
 c004400:	11003e0c 	andi	r4,r2,248
 c004404:	00c300b4 	movhi	r3,3074
 c004408:	18d76004 	addi	r3,r3,23936
 c00440c:	00800234 	movhi	r2,8
 c004410:	10806f04 	addi	r2,r2,444
 c004414:	1885883a 	add	r2,r3,r2
 c004418:	11000015 	stw	r4,0(r2)
}
 c00441c:	e037883a 	mov	sp,fp
 c004420:	df000017 	ldw	fp,0(sp)
 c004424:	dec00104 	addi	sp,sp,4
 c004428:	f800283a 	ret

0c00442c <njSkip>:

static void njSkip(int count) {
 c00442c:	defffe04 	addi	sp,sp,-8
 c004430:	df000115 	stw	fp,4(sp)
 c004434:	df000104 	addi	fp,sp,4
 c004438:	e13fff15 	stw	r4,-4(fp)
    nj.pos += count;
 c00443c:	008300b4 	movhi	r2,3074
 c004440:	10976004 	addi	r2,r2,23936
 c004444:	10c00117 	ldw	r3,4(r2)
 c004448:	e0bfff17 	ldw	r2,-4(fp)
 c00444c:	1887883a 	add	r3,r3,r2
 c004450:	008300b4 	movhi	r2,3074
 c004454:	10976004 	addi	r2,r2,23936
 c004458:	10c00115 	stw	r3,4(r2)
    nj.size -= count;
 c00445c:	008300b4 	movhi	r2,3074
 c004460:	10976004 	addi	r2,r2,23936
 c004464:	10c00217 	ldw	r3,8(r2)
 c004468:	e0bfff17 	ldw	r2,-4(fp)
 c00446c:	1887c83a 	sub	r3,r3,r2
 c004470:	008300b4 	movhi	r2,3074
 c004474:	10976004 	addi	r2,r2,23936
 c004478:	10c00215 	stw	r3,8(r2)
    nj.length -= count;
 c00447c:	008300b4 	movhi	r2,3074
 c004480:	10976004 	addi	r2,r2,23936
 c004484:	10c00317 	ldw	r3,12(r2)
 c004488:	e0bfff17 	ldw	r2,-4(fp)
 c00448c:	1887c83a 	sub	r3,r3,r2
 c004490:	008300b4 	movhi	r2,3074
 c004494:	10976004 	addi	r2,r2,23936
 c004498:	10c00315 	stw	r3,12(r2)
    if (nj.size < 0) nj.error = NJ_SYNTAX_ERROR;
 c00449c:	008300b4 	movhi	r2,3074
 c0044a0:	10976004 	addi	r2,r2,23936
 c0044a4:	10800217 	ldw	r2,8(r2)
 c0044a8:	1000040e 	bge	r2,zero,c0044bc <njSkip+0x90>
 c0044ac:	008300b4 	movhi	r2,3074
 c0044b0:	10976004 	addi	r2,r2,23936
 c0044b4:	00c00144 	movi	r3,5
 c0044b8:	10c00015 	stw	r3,0(r2)
}
 c0044bc:	e037883a 	mov	sp,fp
 c0044c0:	df000017 	ldw	fp,0(sp)
 c0044c4:	dec00104 	addi	sp,sp,4
 c0044c8:	f800283a 	ret

0c0044cc <njDecode16>:

NJ_INLINE unsigned short njDecode16(const unsigned char *pos) {
 c0044cc:	defffe04 	addi	sp,sp,-8
 c0044d0:	df000115 	stw	fp,4(sp)
 c0044d4:	df000104 	addi	fp,sp,4
 c0044d8:	e13fff15 	stw	r4,-4(fp)
    return (pos[0] << 8) | pos[1];
 c0044dc:	e0bfff17 	ldw	r2,-4(fp)
 c0044e0:	10800003 	ldbu	r2,0(r2)
 c0044e4:	10803fcc 	andi	r2,r2,255
 c0044e8:	1004923a 	slli	r2,r2,8
 c0044ec:	1007883a 	mov	r3,r2
 c0044f0:	e0bfff17 	ldw	r2,-4(fp)
 c0044f4:	10800044 	addi	r2,r2,1
 c0044f8:	10800003 	ldbu	r2,0(r2)
 c0044fc:	10803fcc 	andi	r2,r2,255
 c004500:	1884b03a 	or	r2,r3,r2
}
 c004504:	e037883a 	mov	sp,fp
 c004508:	df000017 	ldw	fp,0(sp)
 c00450c:	dec00104 	addi	sp,sp,4
 c004510:	f800283a 	ret

0c004514 <njDecodeLength>:

static void njDecodeLength(void) {
 c004514:	defffe04 	addi	sp,sp,-8
 c004518:	dfc00115 	stw	ra,4(sp)
 c00451c:	df000015 	stw	fp,0(sp)
 c004520:	d839883a 	mov	fp,sp
    if (nj.size < 2) njThrow(NJ_SYNTAX_ERROR);
 c004524:	008300b4 	movhi	r2,3074
 c004528:	10976004 	addi	r2,r2,23936
 c00452c:	10800217 	ldw	r2,8(r2)
 c004530:	10800088 	cmpgei	r2,r2,2
 c004534:	1000051e 	bne	r2,zero,c00454c <njDecodeLength+0x38>
 c004538:	008300b4 	movhi	r2,3074
 c00453c:	10976004 	addi	r2,r2,23936
 c004540:	00c00144 	movi	r3,5
 c004544:	10c00015 	stw	r3,0(r2)
 c004548:	00001706 	br	c0045a8 <njDecodeLength+0x94>
    nj.length = njDecode16(nj.pos);
 c00454c:	008300b4 	movhi	r2,3074
 c004550:	10976004 	addi	r2,r2,23936
 c004554:	10800117 	ldw	r2,4(r2)
 c004558:	1009883a 	mov	r4,r2
 c00455c:	c0044cc0 	call	c0044cc <njDecode16>
 c004560:	10ffffcc 	andi	r3,r2,65535
 c004564:	008300b4 	movhi	r2,3074
 c004568:	10976004 	addi	r2,r2,23936
 c00456c:	10c00315 	stw	r3,12(r2)
    if (nj.length > nj.size) njThrow(NJ_SYNTAX_ERROR);
 c004570:	008300b4 	movhi	r2,3074
 c004574:	10976004 	addi	r2,r2,23936
 c004578:	10c00317 	ldw	r3,12(r2)
 c00457c:	008300b4 	movhi	r2,3074
 c004580:	10976004 	addi	r2,r2,23936
 c004584:	10800217 	ldw	r2,8(r2)
 c004588:	10c0050e 	bge	r2,r3,c0045a0 <njDecodeLength+0x8c>
 c00458c:	008300b4 	movhi	r2,3074
 c004590:	10976004 	addi	r2,r2,23936
 c004594:	00c00144 	movi	r3,5
 c004598:	10c00015 	stw	r3,0(r2)
 c00459c:	00000206 	br	c0045a8 <njDecodeLength+0x94>
    njSkip(2);
 c0045a0:	01000084 	movi	r4,2
 c0045a4:	c00442c0 	call	c00442c <njSkip>
}
 c0045a8:	e037883a 	mov	sp,fp
 c0045ac:	dfc00117 	ldw	ra,4(sp)
 c0045b0:	df000017 	ldw	fp,0(sp)
 c0045b4:	dec00204 	addi	sp,sp,8
 c0045b8:	f800283a 	ret

0c0045bc <njSkipMarker>:

NJ_INLINE void njSkipMarker(void) {
 c0045bc:	defffe04 	addi	sp,sp,-8
 c0045c0:	dfc00115 	stw	ra,4(sp)
 c0045c4:	df000015 	stw	fp,0(sp)
 c0045c8:	d839883a 	mov	fp,sp
    njDecodeLength();
 c0045cc:	c0045140 	call	c004514 <njDecodeLength>
    njSkip(nj.length);
 c0045d0:	008300b4 	movhi	r2,3074
 c0045d4:	10976004 	addi	r2,r2,23936
 c0045d8:	10800317 	ldw	r2,12(r2)
 c0045dc:	1009883a 	mov	r4,r2
 c0045e0:	c00442c0 	call	c00442c <njSkip>
}
 c0045e4:	e037883a 	mov	sp,fp
 c0045e8:	dfc00117 	ldw	ra,4(sp)
 c0045ec:	df000017 	ldw	fp,0(sp)
 c0045f0:	dec00204 	addi	sp,sp,8
 c0045f4:	f800283a 	ret

0c0045f8 <njDecodeSOF>:

NJ_INLINE void njDecodeSOF(void) {
 c0045f8:	defffa04 	addi	sp,sp,-24
 c0045fc:	dfc00515 	stw	ra,20(sp)
 c004600:	df000415 	stw	fp,16(sp)
 c004604:	df000404 	addi	fp,sp,16
    int i, ssxmax = 0, ssymax = 0;
 c004608:	e03ffd15 	stw	zero,-12(fp)
 c00460c:	e03ffe15 	stw	zero,-8(fp)
    nj_component_t* c;
    njDecodeLength();
 c004610:	c0045140 	call	c004514 <njDecodeLength>
    njCheckError();
 c004614:	008300b4 	movhi	r2,3074
 c004618:	10976004 	addi	r2,r2,23936
 c00461c:	10800017 	ldw	r2,0(r2)
 c004620:	10000126 	beq	r2,zero,c004628 <njDecodeSOF+0x30>
 c004624:	0001a006 	br	c004ca8 <njDecodeSOF+0x6b0>
    if (nj.length < 9) njThrow(NJ_SYNTAX_ERROR);
 c004628:	008300b4 	movhi	r2,3074
 c00462c:	10976004 	addi	r2,r2,23936
 c004630:	10800317 	ldw	r2,12(r2)
 c004634:	10800248 	cmpgei	r2,r2,9
 c004638:	1000051e 	bne	r2,zero,c004650 <njDecodeSOF+0x58>
 c00463c:	008300b4 	movhi	r2,3074
 c004640:	10976004 	addi	r2,r2,23936
 c004644:	00c00144 	movi	r3,5
 c004648:	10c00015 	stw	r3,0(r2)
 c00464c:	00019606 	br	c004ca8 <njDecodeSOF+0x6b0>
    if (nj.pos[0] != 8) njThrow(NJ_UNSUPPORTED);
 c004650:	008300b4 	movhi	r2,3074
 c004654:	10976004 	addi	r2,r2,23936
 c004658:	10800117 	ldw	r2,4(r2)
 c00465c:	10800003 	ldbu	r2,0(r2)
 c004660:	10803fcc 	andi	r2,r2,255
 c004664:	10800220 	cmpeqi	r2,r2,8
 c004668:	1000051e 	bne	r2,zero,c004680 <njDecodeSOF+0x88>
 c00466c:	008300b4 	movhi	r2,3074
 c004670:	10976004 	addi	r2,r2,23936
 c004674:	00c00084 	movi	r3,2
 c004678:	10c00015 	stw	r3,0(r2)
 c00467c:	00018a06 	br	c004ca8 <njDecodeSOF+0x6b0>
    nj.height = njDecode16(nj.pos+1);
 c004680:	008300b4 	movhi	r2,3074
 c004684:	10976004 	addi	r2,r2,23936
 c004688:	10800117 	ldw	r2,4(r2)
 c00468c:	10800044 	addi	r2,r2,1
 c004690:	1009883a 	mov	r4,r2
 c004694:	c0044cc0 	call	c0044cc <njDecode16>
 c004698:	10ffffcc 	andi	r3,r2,65535
 c00469c:	008300b4 	movhi	r2,3074
 c0046a0:	10976004 	addi	r2,r2,23936
 c0046a4:	10c00515 	stw	r3,20(r2)
    nj.width = njDecode16(nj.pos+3);
 c0046a8:	008300b4 	movhi	r2,3074
 c0046ac:	10976004 	addi	r2,r2,23936
 c0046b0:	10800117 	ldw	r2,4(r2)
 c0046b4:	108000c4 	addi	r2,r2,3
 c0046b8:	1009883a 	mov	r4,r2
 c0046bc:	c0044cc0 	call	c0044cc <njDecode16>
 c0046c0:	10ffffcc 	andi	r3,r2,65535
 c0046c4:	008300b4 	movhi	r2,3074
 c0046c8:	10976004 	addi	r2,r2,23936
 c0046cc:	10c00415 	stw	r3,16(r2)
    if (!nj.width || !nj.height) njThrow(NJ_SYNTAX_ERROR);
 c0046d0:	008300b4 	movhi	r2,3074
 c0046d4:	10976004 	addi	r2,r2,23936
 c0046d8:	10800417 	ldw	r2,16(r2)
 c0046dc:	10000426 	beq	r2,zero,c0046f0 <njDecodeSOF+0xf8>
 c0046e0:	008300b4 	movhi	r2,3074
 c0046e4:	10976004 	addi	r2,r2,23936
 c0046e8:	10800517 	ldw	r2,20(r2)
 c0046ec:	1000051e 	bne	r2,zero,c004704 <njDecodeSOF+0x10c>
 c0046f0:	008300b4 	movhi	r2,3074
 c0046f4:	10976004 	addi	r2,r2,23936
 c0046f8:	00c00144 	movi	r3,5
 c0046fc:	10c00015 	stw	r3,0(r2)
 c004700:	00016906 	br	c004ca8 <njDecodeSOF+0x6b0>
    nj.ncomp = nj.pos[5];
 c004704:	008300b4 	movhi	r2,3074
 c004708:	10976004 	addi	r2,r2,23936
 c00470c:	10800117 	ldw	r2,4(r2)
 c004710:	10800144 	addi	r2,r2,5
 c004714:	10800003 	ldbu	r2,0(r2)
 c004718:	10c03fcc 	andi	r3,r2,255
 c00471c:	008300b4 	movhi	r2,3074
 c004720:	10976004 	addi	r2,r2,23936
 c004724:	10c00a15 	stw	r3,40(r2)
    njSkip(6);
 c004728:	01000184 	movi	r4,6
 c00472c:	c00442c0 	call	c00442c <njSkip>
    switch (nj.ncomp) {
 c004730:	008300b4 	movhi	r2,3074
 c004734:	10976004 	addi	r2,r2,23936
 c004738:	10800a17 	ldw	r2,40(r2)
 c00473c:	10c00060 	cmpeqi	r3,r2,1
 c004740:	1800071e 	bne	r3,zero,c004760 <njDecodeSOF+0x168>
 c004744:	108000e0 	cmpeqi	r2,r2,3
 c004748:	1000051e 	bne	r2,zero,c004760 <njDecodeSOF+0x168>
        case 1:
        case 3:
            break;
        default:
            njThrow(NJ_UNSUPPORTED);
 c00474c:	008300b4 	movhi	r2,3074
 c004750:	10976004 	addi	r2,r2,23936
 c004754:	00c00084 	movi	r3,2
 c004758:	10c00015 	stw	r3,0(r2)
 c00475c:	00015206 	br	c004ca8 <njDecodeSOF+0x6b0>
    nj.ncomp = nj.pos[5];
    njSkip(6);
    switch (nj.ncomp) {
        case 1:
        case 3:
            break;
 c004760:	0001883a 	nop
        default:
            njThrow(NJ_UNSUPPORTED);
    }
    if (nj.length < (nj.ncomp * 3)) njThrow(NJ_SYNTAX_ERROR);
 c004764:	008300b4 	movhi	r2,3074
 c004768:	10976004 	addi	r2,r2,23936
 c00476c:	11000317 	ldw	r4,12(r2)
 c004770:	008300b4 	movhi	r2,3074
 c004774:	10976004 	addi	r2,r2,23936
 c004778:	10c00a17 	ldw	r3,40(r2)
 c00477c:	1805883a 	mov	r2,r3
 c004780:	1085883a 	add	r2,r2,r2
 c004784:	10c5883a 	add	r2,r2,r3
 c004788:	2080050e 	bge	r4,r2,c0047a0 <njDecodeSOF+0x1a8>
 c00478c:	008300b4 	movhi	r2,3074
 c004790:	10976004 	addi	r2,r2,23936
 c004794:	00c00144 	movi	r3,5
 c004798:	10c00015 	stw	r3,0(r2)
 c00479c:	00014206 	br	c004ca8 <njDecodeSOF+0x6b0>
    for (i = 0, c = nj.comp;  i < nj.ncomp;  ++i, ++c) {
 c0047a0:	e03ffc15 	stw	zero,-16(fp)
 c0047a4:	008300b4 	movhi	r2,3074
 c0047a8:	10976b04 	addi	r2,r2,23980
 c0047ac:	e0bfff15 	stw	r2,-4(fp)
 c0047b0:	00007406 	br	c004984 <njDecodeSOF+0x38c>
        c->cid = nj.pos[0];
 c0047b4:	008300b4 	movhi	r2,3074
 c0047b8:	10976004 	addi	r2,r2,23936
 c0047bc:	10800117 	ldw	r2,4(r2)
 c0047c0:	10800003 	ldbu	r2,0(r2)
 c0047c4:	10c03fcc 	andi	r3,r2,255
 c0047c8:	e0bfff17 	ldw	r2,-4(fp)
 c0047cc:	10c00015 	stw	r3,0(r2)
        if (!(c->ssx = nj.pos[1] >> 4)) njThrow(NJ_SYNTAX_ERROR);
 c0047d0:	008300b4 	movhi	r2,3074
 c0047d4:	10976004 	addi	r2,r2,23936
 c0047d8:	10800117 	ldw	r2,4(r2)
 c0047dc:	10800044 	addi	r2,r2,1
 c0047e0:	10800003 	ldbu	r2,0(r2)
 c0047e4:	10803fcc 	andi	r2,r2,255
 c0047e8:	1004d13a 	srli	r2,r2,4
 c0047ec:	10c03fcc 	andi	r3,r2,255
 c0047f0:	e0bfff17 	ldw	r2,-4(fp)
 c0047f4:	10c00115 	stw	r3,4(r2)
 c0047f8:	e0bfff17 	ldw	r2,-4(fp)
 c0047fc:	10800117 	ldw	r2,4(r2)
 c004800:	1000051e 	bne	r2,zero,c004818 <njDecodeSOF+0x220>
 c004804:	008300b4 	movhi	r2,3074
 c004808:	10976004 	addi	r2,r2,23936
 c00480c:	00c00144 	movi	r3,5
 c004810:	10c00015 	stw	r3,0(r2)
 c004814:	00012406 	br	c004ca8 <njDecodeSOF+0x6b0>
        if (c->ssx & (c->ssx - 1)) njThrow(NJ_UNSUPPORTED);  // non-power of two
 c004818:	e0bfff17 	ldw	r2,-4(fp)
 c00481c:	10c00117 	ldw	r3,4(r2)
 c004820:	e0bfff17 	ldw	r2,-4(fp)
 c004824:	10800117 	ldw	r2,4(r2)
 c004828:	10bfffc4 	addi	r2,r2,-1
 c00482c:	1884703a 	and	r2,r3,r2
 c004830:	10000526 	beq	r2,zero,c004848 <njDecodeSOF+0x250>
 c004834:	008300b4 	movhi	r2,3074
 c004838:	10976004 	addi	r2,r2,23936
 c00483c:	00c00084 	movi	r3,2
 c004840:	10c00015 	stw	r3,0(r2)
 c004844:	00011806 	br	c004ca8 <njDecodeSOF+0x6b0>
        if (!(c->ssy = nj.pos[1] & 15)) njThrow(NJ_SYNTAX_ERROR);
 c004848:	008300b4 	movhi	r2,3074
 c00484c:	10976004 	addi	r2,r2,23936
 c004850:	10800117 	ldw	r2,4(r2)
 c004854:	10800044 	addi	r2,r2,1
 c004858:	10800003 	ldbu	r2,0(r2)
 c00485c:	10803fcc 	andi	r2,r2,255
 c004860:	10c003cc 	andi	r3,r2,15
 c004864:	e0bfff17 	ldw	r2,-4(fp)
 c004868:	10c00215 	stw	r3,8(r2)
 c00486c:	e0bfff17 	ldw	r2,-4(fp)
 c004870:	10800217 	ldw	r2,8(r2)
 c004874:	1000051e 	bne	r2,zero,c00488c <njDecodeSOF+0x294>
 c004878:	008300b4 	movhi	r2,3074
 c00487c:	10976004 	addi	r2,r2,23936
 c004880:	00c00144 	movi	r3,5
 c004884:	10c00015 	stw	r3,0(r2)
 c004888:	00010706 	br	c004ca8 <njDecodeSOF+0x6b0>
        if (c->ssy & (c->ssy - 1)) njThrow(NJ_UNSUPPORTED);  // non-power of two
 c00488c:	e0bfff17 	ldw	r2,-4(fp)
 c004890:	10c00217 	ldw	r3,8(r2)
 c004894:	e0bfff17 	ldw	r2,-4(fp)
 c004898:	10800217 	ldw	r2,8(r2)
 c00489c:	10bfffc4 	addi	r2,r2,-1
 c0048a0:	1884703a 	and	r2,r3,r2
 c0048a4:	10000526 	beq	r2,zero,c0048bc <njDecodeSOF+0x2c4>
 c0048a8:	008300b4 	movhi	r2,3074
 c0048ac:	10976004 	addi	r2,r2,23936
 c0048b0:	00c00084 	movi	r3,2
 c0048b4:	10c00015 	stw	r3,0(r2)
 c0048b8:	0000fb06 	br	c004ca8 <njDecodeSOF+0x6b0>
        if ((c->qtsel = nj.pos[2]) & 0xFC) njThrow(NJ_SYNTAX_ERROR);
 c0048bc:	008300b4 	movhi	r2,3074
 c0048c0:	10976004 	addi	r2,r2,23936
 c0048c4:	10800117 	ldw	r2,4(r2)
 c0048c8:	10800084 	addi	r2,r2,2
 c0048cc:	10800003 	ldbu	r2,0(r2)
 c0048d0:	10c03fcc 	andi	r3,r2,255
 c0048d4:	e0bfff17 	ldw	r2,-4(fp)
 c0048d8:	10c00615 	stw	r3,24(r2)
 c0048dc:	e0bfff17 	ldw	r2,-4(fp)
 c0048e0:	10800617 	ldw	r2,24(r2)
 c0048e4:	10803f0c 	andi	r2,r2,252
 c0048e8:	10000526 	beq	r2,zero,c004900 <njDecodeSOF+0x308>
 c0048ec:	008300b4 	movhi	r2,3074
 c0048f0:	10976004 	addi	r2,r2,23936
 c0048f4:	00c00144 	movi	r3,5
 c0048f8:	10c00015 	stw	r3,0(r2)
 c0048fc:	0000ea06 	br	c004ca8 <njDecodeSOF+0x6b0>
        njSkip(3);
 c004900:	010000c4 	movi	r4,3
 c004904:	c00442c0 	call	c00442c <njSkip>
        nj.qtused |= 1 << c->qtsel;
 c004908:	008300b4 	movhi	r2,3074
 c00490c:	10976004 	addi	r2,r2,23936
 c004910:	10c02c17 	ldw	r3,176(r2)
 c004914:	e0bfff17 	ldw	r2,-4(fp)
 c004918:	10800617 	ldw	r2,24(r2)
 c00491c:	01000044 	movi	r4,1
 c004920:	2084983a 	sll	r2,r4,r2
 c004924:	1886b03a 	or	r3,r3,r2
 c004928:	008300b4 	movhi	r2,3074
 c00492c:	10976004 	addi	r2,r2,23936
 c004930:	10c02c15 	stw	r3,176(r2)
        if (c->ssx > ssxmax) ssxmax = c->ssx;
 c004934:	e0bfff17 	ldw	r2,-4(fp)
 c004938:	10800117 	ldw	r2,4(r2)
 c00493c:	e0fffd17 	ldw	r3,-12(fp)
 c004940:	1880030e 	bge	r3,r2,c004950 <njDecodeSOF+0x358>
 c004944:	e0bfff17 	ldw	r2,-4(fp)
 c004948:	10800117 	ldw	r2,4(r2)
 c00494c:	e0bffd15 	stw	r2,-12(fp)
        if (c->ssy > ssymax) ssymax = c->ssy;
 c004950:	e0bfff17 	ldw	r2,-4(fp)
 c004954:	10800217 	ldw	r2,8(r2)
 c004958:	e0fffe17 	ldw	r3,-8(fp)
 c00495c:	1880030e 	bge	r3,r2,c00496c <njDecodeSOF+0x374>
 c004960:	e0bfff17 	ldw	r2,-4(fp)
 c004964:	10800217 	ldw	r2,8(r2)
 c004968:	e0bffe15 	stw	r2,-8(fp)
            break;
        default:
            njThrow(NJ_UNSUPPORTED);
    }
    if (nj.length < (nj.ncomp * 3)) njThrow(NJ_SYNTAX_ERROR);
    for (i = 0, c = nj.comp;  i < nj.ncomp;  ++i, ++c) {
 c00496c:	e0bffc17 	ldw	r2,-16(fp)
 c004970:	10800044 	addi	r2,r2,1
 c004974:	e0bffc15 	stw	r2,-16(fp)
 c004978:	e0bfff17 	ldw	r2,-4(fp)
 c00497c:	10800b04 	addi	r2,r2,44
 c004980:	e0bfff15 	stw	r2,-4(fp)
 c004984:	008300b4 	movhi	r2,3074
 c004988:	10976004 	addi	r2,r2,23936
 c00498c:	10800a17 	ldw	r2,40(r2)
 c004990:	e0fffc17 	ldw	r3,-16(fp)
 c004994:	18bf8716 	blt	r3,r2,c0047b4 <__alt_data_end+0xfc0047b4>
        njSkip(3);
        nj.qtused |= 1 << c->qtsel;
        if (c->ssx > ssxmax) ssxmax = c->ssx;
        if (c->ssy > ssymax) ssymax = c->ssy;
    }
    if (nj.ncomp == 1) {
 c004998:	008300b4 	movhi	r2,3074
 c00499c:	10976004 	addi	r2,r2,23936
 c0049a0:	10800a17 	ldw	r2,40(r2)
 c0049a4:	10800058 	cmpnei	r2,r2,1
 c0049a8:	10000e1e 	bne	r2,zero,c0049e4 <njDecodeSOF+0x3ec>
        c = nj.comp;
 c0049ac:	008300b4 	movhi	r2,3074
 c0049b0:	10976b04 	addi	r2,r2,23980
 c0049b4:	e0bfff15 	stw	r2,-4(fp)
        c->ssx = c->ssy = ssxmax = ssymax = 1;
 c0049b8:	00800044 	movi	r2,1
 c0049bc:	e0bffe15 	stw	r2,-8(fp)
 c0049c0:	e0bffe17 	ldw	r2,-8(fp)
 c0049c4:	e0bffd15 	stw	r2,-12(fp)
 c0049c8:	e0bfff17 	ldw	r2,-4(fp)
 c0049cc:	e0fffd17 	ldw	r3,-12(fp)
 c0049d0:	10c00215 	stw	r3,8(r2)
 c0049d4:	e0bfff17 	ldw	r2,-4(fp)
 c0049d8:	10c00217 	ldw	r3,8(r2)
 c0049dc:	e0bfff17 	ldw	r2,-4(fp)
 c0049e0:	10c00115 	stw	r3,4(r2)
    }
    nj.mbsizex = ssxmax << 3;
 c0049e4:	e0bffd17 	ldw	r2,-12(fp)
 c0049e8:	100690fa 	slli	r3,r2,3
 c0049ec:	008300b4 	movhi	r2,3074
 c0049f0:	10976004 	addi	r2,r2,23936
 c0049f4:	10c00815 	stw	r3,32(r2)
    nj.mbsizey = ssymax << 3;
 c0049f8:	e0bffe17 	ldw	r2,-8(fp)
 c0049fc:	100690fa 	slli	r3,r2,3
 c004a00:	008300b4 	movhi	r2,3074
 c004a04:	10976004 	addi	r2,r2,23936
 c004a08:	10c00915 	stw	r3,36(r2)
    nj.mbwidth = (nj.width + nj.mbsizex - 1) / nj.mbsizex;
 c004a0c:	008300b4 	movhi	r2,3074
 c004a10:	10976004 	addi	r2,r2,23936
 c004a14:	10c00417 	ldw	r3,16(r2)
 c004a18:	008300b4 	movhi	r2,3074
 c004a1c:	10976004 	addi	r2,r2,23936
 c004a20:	10800817 	ldw	r2,32(r2)
 c004a24:	1885883a 	add	r2,r3,r2
 c004a28:	10ffffc4 	addi	r3,r2,-1
 c004a2c:	008300b4 	movhi	r2,3074
 c004a30:	10976004 	addi	r2,r2,23936
 c004a34:	10800817 	ldw	r2,32(r2)
 c004a38:	1887283a 	div	r3,r3,r2
 c004a3c:	008300b4 	movhi	r2,3074
 c004a40:	10976004 	addi	r2,r2,23936
 c004a44:	10c00615 	stw	r3,24(r2)
    nj.mbheight = (nj.height + nj.mbsizey - 1) / nj.mbsizey;
 c004a48:	008300b4 	movhi	r2,3074
 c004a4c:	10976004 	addi	r2,r2,23936
 c004a50:	10c00517 	ldw	r3,20(r2)
 c004a54:	008300b4 	movhi	r2,3074
 c004a58:	10976004 	addi	r2,r2,23936
 c004a5c:	10800917 	ldw	r2,36(r2)
 c004a60:	1885883a 	add	r2,r3,r2
 c004a64:	10ffffc4 	addi	r3,r2,-1
 c004a68:	008300b4 	movhi	r2,3074
 c004a6c:	10976004 	addi	r2,r2,23936
 c004a70:	10800917 	ldw	r2,36(r2)
 c004a74:	1887283a 	div	r3,r3,r2
 c004a78:	008300b4 	movhi	r2,3074
 c004a7c:	10976004 	addi	r2,r2,23936
 c004a80:	10c00715 	stw	r3,28(r2)
    for (i = 0, c = nj.comp;  i < nj.ncomp;  ++i, ++c) {
 c004a84:	e03ffc15 	stw	zero,-16(fp)
 c004a88:	008300b4 	movhi	r2,3074
 c004a8c:	10976b04 	addi	r2,r2,23980
 c004a90:	e0bfff15 	stw	r2,-4(fp)
 c004a94:	00005506 	br	c004bec <njDecodeSOF+0x5f4>
        c->width = (nj.width * c->ssx + ssxmax - 1) / ssxmax;
 c004a98:	008300b4 	movhi	r2,3074
 c004a9c:	10976004 	addi	r2,r2,23936
 c004aa0:	10c00417 	ldw	r3,16(r2)
 c004aa4:	e0bfff17 	ldw	r2,-4(fp)
 c004aa8:	10800117 	ldw	r2,4(r2)
 c004aac:	1887383a 	mul	r3,r3,r2
 c004ab0:	e0bffd17 	ldw	r2,-12(fp)
 c004ab4:	1885883a 	add	r2,r3,r2
 c004ab8:	10ffffc4 	addi	r3,r2,-1
 c004abc:	e0bffd17 	ldw	r2,-12(fp)
 c004ac0:	1887283a 	div	r3,r3,r2
 c004ac4:	e0bfff17 	ldw	r2,-4(fp)
 c004ac8:	10c00315 	stw	r3,12(r2)
        c->height = (nj.height * c->ssy + ssymax - 1) / ssymax;
 c004acc:	008300b4 	movhi	r2,3074
 c004ad0:	10976004 	addi	r2,r2,23936
 c004ad4:	10c00517 	ldw	r3,20(r2)
 c004ad8:	e0bfff17 	ldw	r2,-4(fp)
 c004adc:	10800217 	ldw	r2,8(r2)
 c004ae0:	1887383a 	mul	r3,r3,r2
 c004ae4:	e0bffe17 	ldw	r2,-8(fp)
 c004ae8:	1885883a 	add	r2,r3,r2
 c004aec:	10ffffc4 	addi	r3,r2,-1
 c004af0:	e0bffe17 	ldw	r2,-8(fp)
 c004af4:	1887283a 	div	r3,r3,r2
 c004af8:	e0bfff17 	ldw	r2,-4(fp)
 c004afc:	10c00415 	stw	r3,16(r2)
        c->stride = nj.mbwidth * c->ssx << 3;
 c004b00:	008300b4 	movhi	r2,3074
 c004b04:	10976004 	addi	r2,r2,23936
 c004b08:	10c00617 	ldw	r3,24(r2)
 c004b0c:	e0bfff17 	ldw	r2,-4(fp)
 c004b10:	10800117 	ldw	r2,4(r2)
 c004b14:	1885383a 	mul	r2,r3,r2
 c004b18:	100690fa 	slli	r3,r2,3
 c004b1c:	e0bfff17 	ldw	r2,-4(fp)
 c004b20:	10c00515 	stw	r3,20(r2)
        if (((c->width < 3) && (c->ssx != ssxmax)) || ((c->height < 3) && (c->ssy != ssymax))) njThrow(NJ_UNSUPPORTED);
 c004b24:	e0bfff17 	ldw	r2,-4(fp)
 c004b28:	10800317 	ldw	r2,12(r2)
 c004b2c:	108000c8 	cmpgei	r2,r2,3
 c004b30:	1000041e 	bne	r2,zero,c004b44 <njDecodeSOF+0x54c>
 c004b34:	e0bfff17 	ldw	r2,-4(fp)
 c004b38:	10c00117 	ldw	r3,4(r2)
 c004b3c:	e0bffd17 	ldw	r2,-12(fp)
 c004b40:	1880081e 	bne	r3,r2,c004b64 <njDecodeSOF+0x56c>
 c004b44:	e0bfff17 	ldw	r2,-4(fp)
 c004b48:	10800417 	ldw	r2,16(r2)
 c004b4c:	108000c8 	cmpgei	r2,r2,3
 c004b50:	1000091e 	bne	r2,zero,c004b78 <njDecodeSOF+0x580>
 c004b54:	e0bfff17 	ldw	r2,-4(fp)
 c004b58:	10c00217 	ldw	r3,8(r2)
 c004b5c:	e0bffe17 	ldw	r2,-8(fp)
 c004b60:	18800526 	beq	r3,r2,c004b78 <njDecodeSOF+0x580>
 c004b64:	008300b4 	movhi	r2,3074
 c004b68:	10976004 	addi	r2,r2,23936
 c004b6c:	00c00084 	movi	r3,2
 c004b70:	10c00015 	stw	r3,0(r2)
 c004b74:	00004c06 	br	c004ca8 <njDecodeSOF+0x6b0>
        if (!(c->pixels = (unsigned char*) njAllocMem(c->stride * nj.mbheight * c->ssy << 3))) njThrow(NJ_OUT_OF_MEM);
 c004b78:	e0bfff17 	ldw	r2,-4(fp)
 c004b7c:	10c00517 	ldw	r3,20(r2)
 c004b80:	008300b4 	movhi	r2,3074
 c004b84:	10976004 	addi	r2,r2,23936
 c004b88:	10800717 	ldw	r2,28(r2)
 c004b8c:	1887383a 	mul	r3,r3,r2
 c004b90:	e0bfff17 	ldw	r2,-4(fp)
 c004b94:	10800217 	ldw	r2,8(r2)
 c004b98:	1885383a 	mul	r2,r3,r2
 c004b9c:	100490fa 	slli	r2,r2,3
 c004ba0:	1009883a 	mov	r4,r2
 c004ba4:	c008dac0 	call	c008dac <malloc>
 c004ba8:	1007883a 	mov	r3,r2
 c004bac:	e0bfff17 	ldw	r2,-4(fp)
 c004bb0:	10c00a15 	stw	r3,40(r2)
 c004bb4:	e0bfff17 	ldw	r2,-4(fp)
 c004bb8:	10800a17 	ldw	r2,40(r2)
 c004bbc:	1000051e 	bne	r2,zero,c004bd4 <njDecodeSOF+0x5dc>
 c004bc0:	008300b4 	movhi	r2,3074
 c004bc4:	10976004 	addi	r2,r2,23936
 c004bc8:	00c000c4 	movi	r3,3
 c004bcc:	10c00015 	stw	r3,0(r2)
 c004bd0:	00003506 	br	c004ca8 <njDecodeSOF+0x6b0>
    }
    nj.mbsizex = ssxmax << 3;
    nj.mbsizey = ssymax << 3;
    nj.mbwidth = (nj.width + nj.mbsizex - 1) / nj.mbsizex;
    nj.mbheight = (nj.height + nj.mbsizey - 1) / nj.mbsizey;
    for (i = 0, c = nj.comp;  i < nj.ncomp;  ++i, ++c) {
 c004bd4:	e0bffc17 	ldw	r2,-16(fp)
 c004bd8:	10800044 	addi	r2,r2,1
 c004bdc:	e0bffc15 	stw	r2,-16(fp)
 c004be0:	e0bfff17 	ldw	r2,-4(fp)
 c004be4:	10800b04 	addi	r2,r2,44
 c004be8:	e0bfff15 	stw	r2,-4(fp)
 c004bec:	008300b4 	movhi	r2,3074
 c004bf0:	10976004 	addi	r2,r2,23936
 c004bf4:	10800a17 	ldw	r2,40(r2)
 c004bf8:	e0fffc17 	ldw	r3,-16(fp)
 c004bfc:	18bfa616 	blt	r3,r2,c004a98 <__alt_data_end+0xfc004a98>
        c->height = (nj.height * c->ssy + ssymax - 1) / ssymax;
        c->stride = nj.mbwidth * c->ssx << 3;
        if (((c->width < 3) && (c->ssx != ssxmax)) || ((c->height < 3) && (c->ssy != ssymax))) njThrow(NJ_UNSUPPORTED);
        if (!(c->pixels = (unsigned char*) njAllocMem(c->stride * nj.mbheight * c->ssy << 3))) njThrow(NJ_OUT_OF_MEM);
    }
    if (nj.ncomp == 3) {
 c004c00:	008300b4 	movhi	r2,3074
 c004c04:	10976004 	addi	r2,r2,23936
 c004c08:	10800a17 	ldw	r2,40(r2)
 c004c0c:	108000d8 	cmpnei	r2,r2,3
 c004c10:	1000201e 	bne	r2,zero,c004c94 <njDecodeSOF+0x69c>
        nj.rgb = (unsigned char*) njAllocMem(nj.width * nj.height * nj.ncomp);
 c004c14:	008300b4 	movhi	r2,3074
 c004c18:	10976004 	addi	r2,r2,23936
 c004c1c:	10c00417 	ldw	r3,16(r2)
 c004c20:	008300b4 	movhi	r2,3074
 c004c24:	10976004 	addi	r2,r2,23936
 c004c28:	10800517 	ldw	r2,20(r2)
 c004c2c:	1887383a 	mul	r3,r3,r2
 c004c30:	008300b4 	movhi	r2,3074
 c004c34:	10976004 	addi	r2,r2,23936
 c004c38:	10800a17 	ldw	r2,40(r2)
 c004c3c:	1885383a 	mul	r2,r3,r2
 c004c40:	1009883a 	mov	r4,r2
 c004c44:	c008dac0 	call	c008dac <malloc>
 c004c48:	1009883a 	mov	r4,r2
 c004c4c:	00c300b4 	movhi	r3,3074
 c004c50:	18d76004 	addi	r3,r3,23936
 c004c54:	00800234 	movhi	r2,8
 c004c58:	1080b104 	addi	r2,r2,708
 c004c5c:	1885883a 	add	r2,r3,r2
 c004c60:	11000015 	stw	r4,0(r2)
        if (!nj.rgb) njThrow(NJ_OUT_OF_MEM);
 c004c64:	00c300b4 	movhi	r3,3074
 c004c68:	18d76004 	addi	r3,r3,23936
 c004c6c:	00800234 	movhi	r2,8
 c004c70:	1080b104 	addi	r2,r2,708
 c004c74:	1885883a 	add	r2,r3,r2
 c004c78:	10800017 	ldw	r2,0(r2)
 c004c7c:	1000051e 	bne	r2,zero,c004c94 <njDecodeSOF+0x69c>
 c004c80:	008300b4 	movhi	r2,3074
 c004c84:	10976004 	addi	r2,r2,23936
 c004c88:	00c000c4 	movi	r3,3
 c004c8c:	10c00015 	stw	r3,0(r2)
 c004c90:	00000506 	br	c004ca8 <njDecodeSOF+0x6b0>
    }
    njSkip(nj.length);
 c004c94:	008300b4 	movhi	r2,3074
 c004c98:	10976004 	addi	r2,r2,23936
 c004c9c:	10800317 	ldw	r2,12(r2)
 c004ca0:	1009883a 	mov	r4,r2
 c004ca4:	c00442c0 	call	c00442c <njSkip>
}
 c004ca8:	e037883a 	mov	sp,fp
 c004cac:	dfc00117 	ldw	ra,4(sp)
 c004cb0:	df000017 	ldw	fp,0(sp)
 c004cb4:	dec00204 	addi	sp,sp,8
 c004cb8:	f800283a 	ret

0c004cbc <njDecodeDHT>:

NJ_INLINE void njDecodeDHT(void) {
 c004cbc:	defff604 	addi	sp,sp,-40
 c004cc0:	dfc00915 	stw	ra,36(sp)
 c004cc4:	df000815 	stw	fp,32(sp)
 c004cc8:	dc000715 	stw	r16,28(sp)
 c004ccc:	df000804 	addi	fp,sp,32
    int codelen, currcnt, remain, spread, i, j;
    nj_vlc_code_t *vlc;
    static unsigned char counts[16];
    njDecodeLength();
 c004cd0:	c0045140 	call	c004514 <njDecodeLength>
    njCheckError();
 c004cd4:	008300b4 	movhi	r2,3074
 c004cd8:	10976004 	addi	r2,r2,23936
 c004cdc:	10800017 	ldw	r2,0(r2)
 c004ce0:	10000126 	beq	r2,zero,c004ce8 <njDecodeDHT+0x2c>
 c004ce4:	0000a806 	br	c004f88 <njDecodeDHT+0x2cc>
    while (nj.length >= 17) {
 c004ce8:	00009906 	br	c004f50 <njDecodeDHT+0x294>
        i = nj.pos[0];
 c004cec:	008300b4 	movhi	r2,3074
 c004cf0:	10976004 	addi	r2,r2,23936
 c004cf4:	10800117 	ldw	r2,4(r2)
 c004cf8:	10800003 	ldbu	r2,0(r2)
 c004cfc:	10803fcc 	andi	r2,r2,255
 c004d00:	e0bffb15 	stw	r2,-20(fp)
        if (i & 0xEC) njThrow(NJ_SYNTAX_ERROR);
 c004d04:	e0bffb17 	ldw	r2,-20(fp)
 c004d08:	10803b0c 	andi	r2,r2,236
 c004d0c:	10000526 	beq	r2,zero,c004d24 <njDecodeDHT+0x68>
 c004d10:	008300b4 	movhi	r2,3074
 c004d14:	10976004 	addi	r2,r2,23936
 c004d18:	00c00144 	movi	r3,5
 c004d1c:	10c00015 	stw	r3,0(r2)
 c004d20:	00009906 	br	c004f88 <njDecodeDHT+0x2cc>
        if (i & 0x02) njThrow(NJ_UNSUPPORTED);
 c004d24:	e0bffb17 	ldw	r2,-20(fp)
 c004d28:	1080008c 	andi	r2,r2,2
 c004d2c:	10000526 	beq	r2,zero,c004d44 <njDecodeDHT+0x88>
 c004d30:	008300b4 	movhi	r2,3074
 c004d34:	10976004 	addi	r2,r2,23936
 c004d38:	00c00084 	movi	r3,2
 c004d3c:	10c00015 	stw	r3,0(r2)
 c004d40:	00009106 	br	c004f88 <njDecodeDHT+0x2cc>
        i = (i | (i >> 3)) & 3;  // combined DC/AC + tableid value
 c004d44:	e0bffb17 	ldw	r2,-20(fp)
 c004d48:	1007d0fa 	srai	r3,r2,3
 c004d4c:	e0bffb17 	ldw	r2,-20(fp)
 c004d50:	1884b03a 	or	r2,r3,r2
 c004d54:	108000cc 	andi	r2,r2,3
 c004d58:	e0bffb15 	stw	r2,-20(fp)
        for (codelen = 1;  codelen <= 16;  ++codelen)
 c004d5c:	00800044 	movi	r2,1
 c004d60:	e0bff815 	stw	r2,-32(fp)
 c004d64:	00000f06 	br	c004da4 <njDecodeDHT+0xe8>
            counts[codelen - 1] = nj.pos[codelen];
 c004d68:	e0bff817 	ldw	r2,-32(fp)
 c004d6c:	113fffc4 	addi	r4,r2,-1
 c004d70:	008300b4 	movhi	r2,3074
 c004d74:	10976004 	addi	r2,r2,23936
 c004d78:	10c00117 	ldw	r3,4(r2)
 c004d7c:	e0bff817 	ldw	r2,-32(fp)
 c004d80:	1885883a 	add	r2,r3,r2
 c004d84:	10c00003 	ldbu	r3,0(r2)
 c004d88:	008302b4 	movhi	r2,3082
 c004d8c:	10981204 	addi	r2,r2,24648
 c004d90:	1105883a 	add	r2,r2,r4
 c004d94:	10c00005 	stb	r3,0(r2)
    while (nj.length >= 17) {
        i = nj.pos[0];
        if (i & 0xEC) njThrow(NJ_SYNTAX_ERROR);
        if (i & 0x02) njThrow(NJ_UNSUPPORTED);
        i = (i | (i >> 3)) & 3;  // combined DC/AC + tableid value
        for (codelen = 1;  codelen <= 16;  ++codelen)
 c004d98:	e0bff817 	ldw	r2,-32(fp)
 c004d9c:	10800044 	addi	r2,r2,1
 c004da0:	e0bff815 	stw	r2,-32(fp)
 c004da4:	e0bff817 	ldw	r2,-32(fp)
 c004da8:	10800450 	cmplti	r2,r2,17
 c004dac:	103fee1e 	bne	r2,zero,c004d68 <__alt_data_end+0xfc004d68>
            counts[codelen - 1] = nj.pos[codelen];
        njSkip(17);
 c004db0:	01000444 	movi	r4,17
 c004db4:	c00442c0 	call	c00442c <njSkip>
        vlc = &nj.vlctab[i][0];
 c004db8:	e0bffb17 	ldw	r2,-20(fp)
 c004dbc:	1004947a 	slli	r2,r2,17
 c004dc0:	10c06e04 	addi	r3,r2,440
 c004dc4:	008300b4 	movhi	r2,3074
 c004dc8:	10976004 	addi	r2,r2,23936
 c004dcc:	1885883a 	add	r2,r3,r2
 c004dd0:	e0bffd15 	stw	r2,-12(fp)
        remain = spread = 65536;
 c004dd4:	00800074 	movhi	r2,1
 c004dd8:	e0bffa15 	stw	r2,-24(fp)
 c004ddc:	e0bffa17 	ldw	r2,-24(fp)
 c004de0:	e0bff915 	stw	r2,-28(fp)
        for (codelen = 1;  codelen <= 16;  ++codelen) {
 c004de4:	00800044 	movi	r2,1
 c004de8:	e0bff815 	stw	r2,-32(fp)
 c004dec:	00004b06 	br	c004f1c <njDecodeDHT+0x260>
            spread >>= 1;
 c004df0:	e0bffa17 	ldw	r2,-24(fp)
 c004df4:	1005d07a 	srai	r2,r2,1
 c004df8:	e0bffa15 	stw	r2,-24(fp)
            currcnt = counts[codelen - 1];
 c004dfc:	e0bff817 	ldw	r2,-32(fp)
 c004e00:	10ffffc4 	addi	r3,r2,-1
 c004e04:	008302b4 	movhi	r2,3082
 c004e08:	10981204 	addi	r2,r2,24648
 c004e0c:	10c5883a 	add	r2,r2,r3
 c004e10:	10800003 	ldbu	r2,0(r2)
 c004e14:	10803fcc 	andi	r2,r2,255
 c004e18:	e0bffe15 	stw	r2,-8(fp)
            if (!currcnt) continue;
 c004e1c:	e0bffe17 	ldw	r2,-8(fp)
 c004e20:	1000011e 	bne	r2,zero,c004e28 <njDecodeDHT+0x16c>
 c004e24:	00003a06 	br	c004f10 <njDecodeDHT+0x254>
            if (nj.length < currcnt) njThrow(NJ_SYNTAX_ERROR);
 c004e28:	008300b4 	movhi	r2,3074
 c004e2c:	10976004 	addi	r2,r2,23936
 c004e30:	10c00317 	ldw	r3,12(r2)
 c004e34:	e0bffe17 	ldw	r2,-8(fp)
 c004e38:	1880050e 	bge	r3,r2,c004e50 <njDecodeDHT+0x194>
 c004e3c:	008300b4 	movhi	r2,3074
 c004e40:	10976004 	addi	r2,r2,23936
 c004e44:	00c00144 	movi	r3,5
 c004e48:	10c00015 	stw	r3,0(r2)
 c004e4c:	00004e06 	br	c004f88 <njDecodeDHT+0x2cc>
            remain -= currcnt << (16 - codelen);
 c004e50:	00c00404 	movi	r3,16
 c004e54:	e0bff817 	ldw	r2,-32(fp)
 c004e58:	1885c83a 	sub	r2,r3,r2
 c004e5c:	e0fffe17 	ldw	r3,-8(fp)
 c004e60:	1884983a 	sll	r2,r3,r2
 c004e64:	e0fff917 	ldw	r3,-28(fp)
 c004e68:	1885c83a 	sub	r2,r3,r2
 c004e6c:	e0bff915 	stw	r2,-28(fp)
            if (remain < 0) njThrow(NJ_SYNTAX_ERROR);
 c004e70:	e0bff917 	ldw	r2,-28(fp)
 c004e74:	1000050e 	bge	r2,zero,c004e8c <njDecodeDHT+0x1d0>
 c004e78:	008300b4 	movhi	r2,3074
 c004e7c:	10976004 	addi	r2,r2,23936
 c004e80:	00c00144 	movi	r3,5
 c004e84:	10c00015 	stw	r3,0(r2)
 c004e88:	00003f06 	br	c004f88 <njDecodeDHT+0x2cc>
            for (i = 0;  i < currcnt;  ++i) {
 c004e8c:	e03ffb15 	stw	zero,-20(fp)
 c004e90:	00001a06 	br	c004efc <njDecodeDHT+0x240>
                register unsigned char code = nj.pos[i];
 c004e94:	008300b4 	movhi	r2,3074
 c004e98:	10976004 	addi	r2,r2,23936
 c004e9c:	10c00117 	ldw	r3,4(r2)
 c004ea0:	e0bffb17 	ldw	r2,-20(fp)
 c004ea4:	1885883a 	add	r2,r3,r2
 c004ea8:	14000003 	ldbu	r16,0(r2)
                for (j = spread;  j;  --j) {
 c004eac:	e0bffa17 	ldw	r2,-24(fp)
 c004eb0:	e0bffc15 	stw	r2,-16(fp)
 c004eb4:	00000c06 	br	c004ee8 <njDecodeDHT+0x22c>
                    vlc->bits = (unsigned char) codelen;
 c004eb8:	e0bff817 	ldw	r2,-32(fp)
 c004ebc:	1007883a 	mov	r3,r2
 c004ec0:	e0bffd17 	ldw	r2,-12(fp)
 c004ec4:	10c00005 	stb	r3,0(r2)
                    vlc->code = code;
 c004ec8:	e0bffd17 	ldw	r2,-12(fp)
 c004ecc:	14000045 	stb	r16,1(r2)
                    ++vlc;
 c004ed0:	e0bffd17 	ldw	r2,-12(fp)
 c004ed4:	10800084 	addi	r2,r2,2
 c004ed8:	e0bffd15 	stw	r2,-12(fp)
            if (nj.length < currcnt) njThrow(NJ_SYNTAX_ERROR);
            remain -= currcnt << (16 - codelen);
            if (remain < 0) njThrow(NJ_SYNTAX_ERROR);
            for (i = 0;  i < currcnt;  ++i) {
                register unsigned char code = nj.pos[i];
                for (j = spread;  j;  --j) {
 c004edc:	e0bffc17 	ldw	r2,-16(fp)
 c004ee0:	10bfffc4 	addi	r2,r2,-1
 c004ee4:	e0bffc15 	stw	r2,-16(fp)
 c004ee8:	e0bffc17 	ldw	r2,-16(fp)
 c004eec:	103ff21e 	bne	r2,zero,c004eb8 <__alt_data_end+0xfc004eb8>
            currcnt = counts[codelen - 1];
            if (!currcnt) continue;
            if (nj.length < currcnt) njThrow(NJ_SYNTAX_ERROR);
            remain -= currcnt << (16 - codelen);
            if (remain < 0) njThrow(NJ_SYNTAX_ERROR);
            for (i = 0;  i < currcnt;  ++i) {
 c004ef0:	e0bffb17 	ldw	r2,-20(fp)
 c004ef4:	10800044 	addi	r2,r2,1
 c004ef8:	e0bffb15 	stw	r2,-20(fp)
 c004efc:	e0fffb17 	ldw	r3,-20(fp)
 c004f00:	e0bffe17 	ldw	r2,-8(fp)
 c004f04:	18bfe316 	blt	r3,r2,c004e94 <__alt_data_end+0xfc004e94>
                    vlc->bits = (unsigned char) codelen;
                    vlc->code = code;
                    ++vlc;
                }
            }
            njSkip(currcnt);
 c004f08:	e13ffe17 	ldw	r4,-8(fp)
 c004f0c:	c00442c0 	call	c00442c <njSkip>
        for (codelen = 1;  codelen <= 16;  ++codelen)
            counts[codelen - 1] = nj.pos[codelen];
        njSkip(17);
        vlc = &nj.vlctab[i][0];
        remain = spread = 65536;
        for (codelen = 1;  codelen <= 16;  ++codelen) {
 c004f10:	e0bff817 	ldw	r2,-32(fp)
 c004f14:	10800044 	addi	r2,r2,1
 c004f18:	e0bff815 	stw	r2,-32(fp)
 c004f1c:	e0bff817 	ldw	r2,-32(fp)
 c004f20:	10800450 	cmplti	r2,r2,17
 c004f24:	103fb21e 	bne	r2,zero,c004df0 <__alt_data_end+0xfc004df0>
                    ++vlc;
                }
            }
            njSkip(currcnt);
        }
        while (remain--) {
 c004f28:	00000506 	br	c004f40 <njDecodeDHT+0x284>
            vlc->bits = 0;
 c004f2c:	e0bffd17 	ldw	r2,-12(fp)
 c004f30:	10000005 	stb	zero,0(r2)
            ++vlc;
 c004f34:	e0bffd17 	ldw	r2,-12(fp)
 c004f38:	10800084 	addi	r2,r2,2
 c004f3c:	e0bffd15 	stw	r2,-12(fp)
                    ++vlc;
                }
            }
            njSkip(currcnt);
        }
        while (remain--) {
 c004f40:	e0bff917 	ldw	r2,-28(fp)
 c004f44:	10ffffc4 	addi	r3,r2,-1
 c004f48:	e0fff915 	stw	r3,-28(fp)
 c004f4c:	103ff71e 	bne	r2,zero,c004f2c <__alt_data_end+0xfc004f2c>
    int codelen, currcnt, remain, spread, i, j;
    nj_vlc_code_t *vlc;
    static unsigned char counts[16];
    njDecodeLength();
    njCheckError();
    while (nj.length >= 17) {
 c004f50:	008300b4 	movhi	r2,3074
 c004f54:	10976004 	addi	r2,r2,23936
 c004f58:	10800317 	ldw	r2,12(r2)
 c004f5c:	10800448 	cmpgei	r2,r2,17
 c004f60:	103f621e 	bne	r2,zero,c004cec <__alt_data_end+0xfc004cec>
        while (remain--) {
            vlc->bits = 0;
            ++vlc;
        }
    }
    if (nj.length) njThrow(NJ_SYNTAX_ERROR);
 c004f64:	008300b4 	movhi	r2,3074
 c004f68:	10976004 	addi	r2,r2,23936
 c004f6c:	10800317 	ldw	r2,12(r2)
 c004f70:	10000526 	beq	r2,zero,c004f88 <njDecodeDHT+0x2cc>
 c004f74:	008300b4 	movhi	r2,3074
 c004f78:	10976004 	addi	r2,r2,23936
 c004f7c:	00c00144 	movi	r3,5
 c004f80:	10c00015 	stw	r3,0(r2)
 c004f84:	0001883a 	nop
}
 c004f88:	e6ffff04 	addi	sp,fp,-4
 c004f8c:	dfc00217 	ldw	ra,8(sp)
 c004f90:	df000117 	ldw	fp,4(sp)
 c004f94:	dc000017 	ldw	r16,0(sp)
 c004f98:	dec00304 	addi	sp,sp,12
 c004f9c:	f800283a 	ret

0c004fa0 <njDecodeDQT>:

NJ_INLINE void njDecodeDQT(void) {
 c004fa0:	defffc04 	addi	sp,sp,-16
 c004fa4:	dfc00315 	stw	ra,12(sp)
 c004fa8:	df000215 	stw	fp,8(sp)
 c004fac:	df000204 	addi	fp,sp,8
    int i;
    unsigned char *t;
    njDecodeLength();
 c004fb0:	c0045140 	call	c004514 <njDecodeLength>
    njCheckError();
 c004fb4:	008300b4 	movhi	r2,3074
 c004fb8:	10976004 	addi	r2,r2,23936
 c004fbc:	10800017 	ldw	r2,0(r2)
 c004fc0:	10000126 	beq	r2,zero,c004fc8 <njDecodeDQT+0x28>
 c004fc4:	00004306 	br	c0050d4 <njDecodeDQT+0x134>
    while (nj.length >= 65) {
 c004fc8:	00003406 	br	c00509c <njDecodeDQT+0xfc>
        i = nj.pos[0];
 c004fcc:	008300b4 	movhi	r2,3074
 c004fd0:	10976004 	addi	r2,r2,23936
 c004fd4:	10800117 	ldw	r2,4(r2)
 c004fd8:	10800003 	ldbu	r2,0(r2)
 c004fdc:	10803fcc 	andi	r2,r2,255
 c004fe0:	e0bffe15 	stw	r2,-8(fp)
        if (i & 0xFC) njThrow(NJ_SYNTAX_ERROR);
 c004fe4:	e0bffe17 	ldw	r2,-8(fp)
 c004fe8:	10803f0c 	andi	r2,r2,252
 c004fec:	10000526 	beq	r2,zero,c005004 <njDecodeDQT+0x64>
 c004ff0:	008300b4 	movhi	r2,3074
 c004ff4:	10976004 	addi	r2,r2,23936
 c004ff8:	00c00144 	movi	r3,5
 c004ffc:	10c00015 	stw	r3,0(r2)
 c005000:	00003406 	br	c0050d4 <njDecodeDQT+0x134>
        nj.qtavail |= 1 << i;
 c005004:	008300b4 	movhi	r2,3074
 c005008:	10976004 	addi	r2,r2,23936
 c00500c:	10c02d17 	ldw	r3,180(r2)
 c005010:	01000044 	movi	r4,1
 c005014:	e0bffe17 	ldw	r2,-8(fp)
 c005018:	2084983a 	sll	r2,r4,r2
 c00501c:	1886b03a 	or	r3,r3,r2
 c005020:	008300b4 	movhi	r2,3074
 c005024:	10976004 	addi	r2,r2,23936
 c005028:	10c02d15 	stw	r3,180(r2)
        t = &nj.qtab[i][0];
 c00502c:	e0bffe17 	ldw	r2,-8(fp)
 c005030:	100491ba 	slli	r2,r2,6
 c005034:	10c02e04 	addi	r3,r2,184
 c005038:	008300b4 	movhi	r2,3074
 c00503c:	10976004 	addi	r2,r2,23936
 c005040:	1885883a 	add	r2,r3,r2
 c005044:	e0bfff15 	stw	r2,-4(fp)
        for (i = 0;  i < 64;  ++i)
 c005048:	e03ffe15 	stw	zero,-8(fp)
 c00504c:	00000e06 	br	c005088 <njDecodeDQT+0xe8>
            t[i] = nj.pos[i + 1];
 c005050:	e0bffe17 	ldw	r2,-8(fp)
 c005054:	e0ffff17 	ldw	r3,-4(fp)
 c005058:	1887883a 	add	r3,r3,r2
 c00505c:	008300b4 	movhi	r2,3074
 c005060:	10976004 	addi	r2,r2,23936
 c005064:	11000117 	ldw	r4,4(r2)
 c005068:	e0bffe17 	ldw	r2,-8(fp)
 c00506c:	10800044 	addi	r2,r2,1
 c005070:	2085883a 	add	r2,r4,r2
 c005074:	10800003 	ldbu	r2,0(r2)
 c005078:	18800005 	stb	r2,0(r3)
    while (nj.length >= 65) {
        i = nj.pos[0];
        if (i & 0xFC) njThrow(NJ_SYNTAX_ERROR);
        nj.qtavail |= 1 << i;
        t = &nj.qtab[i][0];
        for (i = 0;  i < 64;  ++i)
 c00507c:	e0bffe17 	ldw	r2,-8(fp)
 c005080:	10800044 	addi	r2,r2,1
 c005084:	e0bffe15 	stw	r2,-8(fp)
 c005088:	e0bffe17 	ldw	r2,-8(fp)
 c00508c:	10801010 	cmplti	r2,r2,64
 c005090:	103fef1e 	bne	r2,zero,c005050 <__alt_data_end+0xfc005050>
            t[i] = nj.pos[i + 1];
        njSkip(65);
 c005094:	01001044 	movi	r4,65
 c005098:	c00442c0 	call	c00442c <njSkip>
NJ_INLINE void njDecodeDQT(void) {
    int i;
    unsigned char *t;
    njDecodeLength();
    njCheckError();
    while (nj.length >= 65) {
 c00509c:	008300b4 	movhi	r2,3074
 c0050a0:	10976004 	addi	r2,r2,23936
 c0050a4:	10800317 	ldw	r2,12(r2)
 c0050a8:	10801048 	cmpgei	r2,r2,65
 c0050ac:	103fc71e 	bne	r2,zero,c004fcc <__alt_data_end+0xfc004fcc>
        t = &nj.qtab[i][0];
        for (i = 0;  i < 64;  ++i)
            t[i] = nj.pos[i + 1];
        njSkip(65);
    }
    if (nj.length) njThrow(NJ_SYNTAX_ERROR);
 c0050b0:	008300b4 	movhi	r2,3074
 c0050b4:	10976004 	addi	r2,r2,23936
 c0050b8:	10800317 	ldw	r2,12(r2)
 c0050bc:	10000526 	beq	r2,zero,c0050d4 <njDecodeDQT+0x134>
 c0050c0:	008300b4 	movhi	r2,3074
 c0050c4:	10976004 	addi	r2,r2,23936
 c0050c8:	00c00144 	movi	r3,5
 c0050cc:	10c00015 	stw	r3,0(r2)
 c0050d0:	0001883a 	nop
}
 c0050d4:	e037883a 	mov	sp,fp
 c0050d8:	dfc00117 	ldw	ra,4(sp)
 c0050dc:	df000017 	ldw	fp,0(sp)
 c0050e0:	dec00204 	addi	sp,sp,8
 c0050e4:	f800283a 	ret

0c0050e8 <njDecodeDRI>:

NJ_INLINE void njDecodeDRI(void) {
 c0050e8:	defffe04 	addi	sp,sp,-8
 c0050ec:	dfc00115 	stw	ra,4(sp)
 c0050f0:	df000015 	stw	fp,0(sp)
 c0050f4:	d839883a 	mov	fp,sp
    njDecodeLength();
 c0050f8:	c0045140 	call	c004514 <njDecodeLength>
    njCheckError();
 c0050fc:	008300b4 	movhi	r2,3074
 c005100:	10976004 	addi	r2,r2,23936
 c005104:	10800017 	ldw	r2,0(r2)
 c005108:	10000126 	beq	r2,zero,c005110 <njDecodeDRI+0x28>
 c00510c:	00001b06 	br	c00517c <njDecodeDRI+0x94>
    if (nj.length < 2) njThrow(NJ_SYNTAX_ERROR);
 c005110:	008300b4 	movhi	r2,3074
 c005114:	10976004 	addi	r2,r2,23936
 c005118:	10800317 	ldw	r2,12(r2)
 c00511c:	10800088 	cmpgei	r2,r2,2
 c005120:	1000051e 	bne	r2,zero,c005138 <njDecodeDRI+0x50>
 c005124:	008300b4 	movhi	r2,3074
 c005128:	10976004 	addi	r2,r2,23936
 c00512c:	00c00144 	movi	r3,5
 c005130:	10c00015 	stw	r3,0(r2)
 c005134:	00001106 	br	c00517c <njDecodeDRI+0x94>
    nj.rstinterval = njDecode16(nj.pos);
 c005138:	008300b4 	movhi	r2,3074
 c00513c:	10976004 	addi	r2,r2,23936
 c005140:	10800117 	ldw	r2,4(r2)
 c005144:	1009883a 	mov	r4,r2
 c005148:	c0044cc0 	call	c0044cc <njDecode16>
 c00514c:	113fffcc 	andi	r4,r2,65535
 c005150:	00c300b4 	movhi	r3,3074
 c005154:	18d76004 	addi	r3,r3,23936
 c005158:	00800234 	movhi	r2,8
 c00515c:	1080b004 	addi	r2,r2,704
 c005160:	1885883a 	add	r2,r3,r2
 c005164:	11000015 	stw	r4,0(r2)
    njSkip(nj.length);
 c005168:	008300b4 	movhi	r2,3074
 c00516c:	10976004 	addi	r2,r2,23936
 c005170:	10800317 	ldw	r2,12(r2)
 c005174:	1009883a 	mov	r4,r2
 c005178:	c00442c0 	call	c00442c <njSkip>
}
 c00517c:	e037883a 	mov	sp,fp
 c005180:	dfc00117 	ldw	ra,4(sp)
 c005184:	df000017 	ldw	fp,0(sp)
 c005188:	dec00204 	addi	sp,sp,8
 c00518c:	f800283a 	ret

0c005190 <njGetVLC>:

static int njGetVLC(nj_vlc_code_t* vlc, unsigned char* code) {
 c005190:	defffa04 	addi	sp,sp,-24
 c005194:	dfc00515 	stw	ra,20(sp)
 c005198:	df000415 	stw	fp,16(sp)
 c00519c:	df000404 	addi	fp,sp,16
 c0051a0:	e13ffe15 	stw	r4,-8(fp)
 c0051a4:	e17fff15 	stw	r5,-4(fp)
    int value = njShowBits(16);
 c0051a8:	01000404 	movi	r4,16
 c0051ac:	c0040080 	call	c004008 <njShowBits>
 c0051b0:	e0bffc15 	stw	r2,-16(fp)
    int bits = vlc[value].bits;
 c0051b4:	e0bffc17 	ldw	r2,-16(fp)
 c0051b8:	1085883a 	add	r2,r2,r2
 c0051bc:	1007883a 	mov	r3,r2
 c0051c0:	e0bffe17 	ldw	r2,-8(fp)
 c0051c4:	10c5883a 	add	r2,r2,r3
 c0051c8:	10800003 	ldbu	r2,0(r2)
 c0051cc:	10803fcc 	andi	r2,r2,255
 c0051d0:	e0bffd15 	stw	r2,-12(fp)
    if (!bits) { nj.error = NJ_SYNTAX_ERROR; return 0; }
 c0051d4:	e0bffd17 	ldw	r2,-12(fp)
 c0051d8:	1000061e 	bne	r2,zero,c0051f4 <njGetVLC+0x64>
 c0051dc:	008300b4 	movhi	r2,3074
 c0051e0:	10976004 	addi	r2,r2,23936
 c0051e4:	00c00144 	movi	r3,5
 c0051e8:	10c00015 	stw	r3,0(r2)
 c0051ec:	0005883a 	mov	r2,zero
 c0051f0:	00002806 	br	c005294 <njGetVLC+0x104>
    njSkipBits(bits);
 c0051f4:	e13ffd17 	ldw	r4,-12(fp)
 c0051f8:	c0043140 	call	c004314 <njSkipBits>
    value = vlc[value].code;
 c0051fc:	e0bffc17 	ldw	r2,-16(fp)
 c005200:	1085883a 	add	r2,r2,r2
 c005204:	1007883a 	mov	r3,r2
 c005208:	e0bffe17 	ldw	r2,-8(fp)
 c00520c:	10c5883a 	add	r2,r2,r3
 c005210:	10800043 	ldbu	r2,1(r2)
 c005214:	10803fcc 	andi	r2,r2,255
 c005218:	e0bffc15 	stw	r2,-16(fp)
    if (code) *code = (unsigned char) value;
 c00521c:	e0bfff17 	ldw	r2,-4(fp)
 c005220:	10000426 	beq	r2,zero,c005234 <njGetVLC+0xa4>
 c005224:	e0bffc17 	ldw	r2,-16(fp)
 c005228:	1007883a 	mov	r3,r2
 c00522c:	e0bfff17 	ldw	r2,-4(fp)
 c005230:	10c00005 	stb	r3,0(r2)
    bits = value & 15;
 c005234:	e0bffc17 	ldw	r2,-16(fp)
 c005238:	108003cc 	andi	r2,r2,15
 c00523c:	e0bffd15 	stw	r2,-12(fp)
    if (!bits) return 0;
 c005240:	e0bffd17 	ldw	r2,-12(fp)
 c005244:	1000021e 	bne	r2,zero,c005250 <njGetVLC+0xc0>
 c005248:	0005883a 	mov	r2,zero
 c00524c:	00001106 	br	c005294 <njGetVLC+0x104>
    value = njGetBits(bits);
 c005250:	e13ffd17 	ldw	r4,-12(fp)
 c005254:	c00439c0 	call	c00439c <njGetBits>
 c005258:	e0bffc15 	stw	r2,-16(fp)
    if (value < (1 << (bits - 1)))
 c00525c:	e0bffd17 	ldw	r2,-12(fp)
 c005260:	10bfffc4 	addi	r2,r2,-1
 c005264:	00c00044 	movi	r3,1
 c005268:	1884983a 	sll	r2,r3,r2
 c00526c:	e0fffc17 	ldw	r3,-16(fp)
 c005270:	1880070e 	bge	r3,r2,c005290 <njGetVLC+0x100>
        value += ((-1) << bits) + 1;
 c005274:	00ffffc4 	movi	r3,-1
 c005278:	e0bffd17 	ldw	r2,-12(fp)
 c00527c:	1884983a 	sll	r2,r3,r2
 c005280:	10800044 	addi	r2,r2,1
 c005284:	e0fffc17 	ldw	r3,-16(fp)
 c005288:	1885883a 	add	r2,r3,r2
 c00528c:	e0bffc15 	stw	r2,-16(fp)
    return value;
 c005290:	e0bffc17 	ldw	r2,-16(fp)
}
 c005294:	e037883a 	mov	sp,fp
 c005298:	dfc00117 	ldw	ra,4(sp)
 c00529c:	df000017 	ldw	fp,0(sp)
 c0052a0:	dec00204 	addi	sp,sp,8
 c0052a4:	f800283a 	ret

0c0052a8 <njDecodeBlock>:

NJ_INLINE void njDecodeBlock(nj_component_t* c, unsigned char* out) {
 c0052a8:	defff904 	addi	sp,sp,-28
 c0052ac:	dfc00615 	stw	ra,24(sp)
 c0052b0:	df000515 	stw	fp,20(sp)
 c0052b4:	df000504 	addi	fp,sp,20
 c0052b8:	e13ffe15 	stw	r4,-8(fp)
 c0052bc:	e17fff15 	stw	r5,-4(fp)
    unsigned char code = 0;
 c0052c0:	e03ffd05 	stb	zero,-12(fp)
    int value, coef = 0;
 c0052c4:	e03ffb15 	stw	zero,-20(fp)
    njFillMem(nj.block, 0, sizeof(nj.block));
 c0052c8:	010302b4 	movhi	r4,3082
 c0052cc:	2117d004 	addi	r4,r4,24384
 c0052d0:	000b883a 	mov	r5,zero
 c0052d4:	01804004 	movi	r6,256
 c0052d8:	c0096b40 	call	c0096b4 <memset>
    c->dcpred += njGetVLC(&nj.vlctab[c->dctabsel][0], NULL);
 c0052dc:	e0bffe17 	ldw	r2,-8(fp)
 c0052e0:	10800817 	ldw	r2,32(r2)
 c0052e4:	1004947a 	slli	r2,r2,17
 c0052e8:	10c06e04 	addi	r3,r2,440
 c0052ec:	008300b4 	movhi	r2,3074
 c0052f0:	10976004 	addi	r2,r2,23936
 c0052f4:	1885883a 	add	r2,r3,r2
 c0052f8:	1009883a 	mov	r4,r2
 c0052fc:	000b883a 	mov	r5,zero
 c005300:	c0051900 	call	c005190 <njGetVLC>
 c005304:	1007883a 	mov	r3,r2
 c005308:	e0bffe17 	ldw	r2,-8(fp)
 c00530c:	10800917 	ldw	r2,36(r2)
 c005310:	10c7883a 	add	r3,r2,r3
 c005314:	e0bffe17 	ldw	r2,-8(fp)
 c005318:	10c00915 	stw	r3,36(r2)
    nj.block[0] = (c->dcpred) * nj.qtab[c->qtsel][0];
 c00531c:	e0bffe17 	ldw	r2,-8(fp)
 c005320:	10c00917 	ldw	r3,36(r2)
 c005324:	e0bffe17 	ldw	r2,-8(fp)
 c005328:	11000617 	ldw	r4,24(r2)
 c00532c:	008300b4 	movhi	r2,3074
 c005330:	10976004 	addi	r2,r2,23936
 c005334:	200891ba 	slli	r4,r4,6
 c005338:	1105883a 	add	r2,r2,r4
 c00533c:	10802e04 	addi	r2,r2,184
 c005340:	10800003 	ldbu	r2,0(r2)
 c005344:	10803fcc 	andi	r2,r2,255
 c005348:	1889383a 	mul	r4,r3,r2
 c00534c:	00c300b4 	movhi	r3,3074
 c005350:	18d76004 	addi	r3,r3,23936
 c005354:	00800234 	movhi	r2,8
 c005358:	10807004 	addi	r2,r2,448
 c00535c:	1885883a 	add	r2,r3,r2
 c005360:	11000015 	stw	r4,0(r2)
    do {
        value = njGetVLC(&nj.vlctab[c->actabsel][0], &code);
 c005364:	e0bffe17 	ldw	r2,-8(fp)
 c005368:	10800717 	ldw	r2,28(r2)
 c00536c:	1004947a 	slli	r2,r2,17
 c005370:	10c06e04 	addi	r3,r2,440
 c005374:	008300b4 	movhi	r2,3074
 c005378:	10976004 	addi	r2,r2,23936
 c00537c:	1887883a 	add	r3,r3,r2
 c005380:	e0bffd04 	addi	r2,fp,-12
 c005384:	1809883a 	mov	r4,r3
 c005388:	100b883a 	mov	r5,r2
 c00538c:	c0051900 	call	c005190 <njGetVLC>
 c005390:	e0bffc15 	stw	r2,-16(fp)
        if (!code) break;  // EOB
 c005394:	e0bffd03 	ldbu	r2,-12(fp)
 c005398:	10803fcc 	andi	r2,r2,255
 c00539c:	1000011e 	bne	r2,zero,c0053a4 <njDecodeBlock+0xfc>
 c0053a0:	00003e06 	br	c00549c <njDecodeBlock+0x1f4>
        if (!(code & 0x0F) && (code != 0xF0)) njThrow(NJ_SYNTAX_ERROR);
 c0053a4:	e0bffd03 	ldbu	r2,-12(fp)
 c0053a8:	10803fcc 	andi	r2,r2,255
 c0053ac:	108003cc 	andi	r2,r2,15
 c0053b0:	1000091e 	bne	r2,zero,c0053d8 <njDecodeBlock+0x130>
 c0053b4:	e0bffd03 	ldbu	r2,-12(fp)
 c0053b8:	10803fcc 	andi	r2,r2,255
 c0053bc:	10803c20 	cmpeqi	r2,r2,240
 c0053c0:	1000051e 	bne	r2,zero,c0053d8 <njDecodeBlock+0x130>
 c0053c4:	008300b4 	movhi	r2,3074
 c0053c8:	10976004 	addi	r2,r2,23936
 c0053cc:	00c00144 	movi	r3,5
 c0053d0:	10c00015 	stw	r3,0(r2)
 c0053d4:	00005d06 	br	c00554c <njDecodeBlock+0x2a4>
        coef += (code >> 4) + 1;
 c0053d8:	e0bffd03 	ldbu	r2,-12(fp)
 c0053dc:	10803fcc 	andi	r2,r2,255
 c0053e0:	1004d13a 	srli	r2,r2,4
 c0053e4:	10803fcc 	andi	r2,r2,255
 c0053e8:	10800044 	addi	r2,r2,1
 c0053ec:	e0fffb17 	ldw	r3,-20(fp)
 c0053f0:	1885883a 	add	r2,r3,r2
 c0053f4:	e0bffb15 	stw	r2,-20(fp)
        if (coef > 63) njThrow(NJ_SYNTAX_ERROR);
 c0053f8:	e0bffb17 	ldw	r2,-20(fp)
 c0053fc:	10801010 	cmplti	r2,r2,64
 c005400:	1000051e 	bne	r2,zero,c005418 <njDecodeBlock+0x170>
 c005404:	008300b4 	movhi	r2,3074
 c005408:	10976004 	addi	r2,r2,23936
 c00540c:	00c00144 	movi	r3,5
 c005410:	10c00015 	stw	r3,0(r2)
 c005414:	00004d06 	br	c00554c <njDecodeBlock+0x2a4>
        nj.block[(int) njZZ[coef]] = value * nj.qtab[c->qtsel][coef];
 c005418:	008300b4 	movhi	r2,3074
 c00541c:	10886b04 	addi	r2,r2,8620
 c005420:	e0fffb17 	ldw	r3,-20(fp)
 c005424:	10c5883a 	add	r2,r2,r3
 c005428:	10800003 	ldbu	r2,0(r2)
 c00542c:	11403fcc 	andi	r5,r2,255
 c005430:	2940201c 	xori	r5,r5,128
 c005434:	297fe004 	addi	r5,r5,-128
 c005438:	e0bffe17 	ldw	r2,-8(fp)
 c00543c:	10c00617 	ldw	r3,24(r2)
 c005440:	008300b4 	movhi	r2,3074
 c005444:	10976004 	addi	r2,r2,23936
 c005448:	180691ba 	slli	r3,r3,6
 c00544c:	10c7883a 	add	r3,r2,r3
 c005450:	e0bffb17 	ldw	r2,-20(fp)
 c005454:	1885883a 	add	r2,r3,r2
 c005458:	10802e04 	addi	r2,r2,184
 c00545c:	10800003 	ldbu	r2,0(r2)
 c005460:	10c03fcc 	andi	r3,r2,255
 c005464:	e0bffc17 	ldw	r2,-16(fp)
 c005468:	1889383a 	mul	r4,r3,r2
 c00546c:	008300b4 	movhi	r2,3074
 c005470:	10976004 	addi	r2,r2,23936
 c005474:	00c000b4 	movhi	r3,2
 c005478:	18c01c04 	addi	r3,r3,112
 c00547c:	28c7883a 	add	r3,r5,r3
 c005480:	18c7883a 	add	r3,r3,r3
 c005484:	18c7883a 	add	r3,r3,r3
 c005488:	10c5883a 	add	r2,r2,r3
 c00548c:	11000015 	stw	r4,0(r2)
    } while (coef < 63);
 c005490:	e0bffb17 	ldw	r2,-20(fp)
 c005494:	10800fd0 	cmplti	r2,r2,63
 c005498:	103fb21e 	bne	r2,zero,c005364 <__alt_data_end+0xfc005364>
    for (coef = 0;  coef < 64;  coef += 8)
 c00549c:	e03ffb15 	stw	zero,-20(fp)
 c0054a0:	00000e06 	br	c0054dc <njDecodeBlock+0x234>
        njRowIDCT(&nj.block[coef]);
 c0054a4:	e0fffb17 	ldw	r3,-20(fp)
 c0054a8:	008000b4 	movhi	r2,2
 c0054ac:	10801c04 	addi	r2,r2,112
 c0054b0:	1885883a 	add	r2,r3,r2
 c0054b4:	1085883a 	add	r2,r2,r2
 c0054b8:	1087883a 	add	r3,r2,r2
 c0054bc:	008300b4 	movhi	r2,3074
 c0054c0:	10976004 	addi	r2,r2,23936
 c0054c4:	1885883a 	add	r2,r3,r2
 c0054c8:	1009883a 	mov	r4,r2
 c0054cc:	c0037b00 	call	c0037b0 <njRowIDCT>
        if (!(code & 0x0F) && (code != 0xF0)) njThrow(NJ_SYNTAX_ERROR);
        coef += (code >> 4) + 1;
        if (coef > 63) njThrow(NJ_SYNTAX_ERROR);
        nj.block[(int) njZZ[coef]] = value * nj.qtab[c->qtsel][coef];
    } while (coef < 63);
    for (coef = 0;  coef < 64;  coef += 8)
 c0054d0:	e0bffb17 	ldw	r2,-20(fp)
 c0054d4:	10800204 	addi	r2,r2,8
 c0054d8:	e0bffb15 	stw	r2,-20(fp)
 c0054dc:	e0bffb17 	ldw	r2,-20(fp)
 c0054e0:	10801010 	cmplti	r2,r2,64
 c0054e4:	103fef1e 	bne	r2,zero,c0054a4 <__alt_data_end+0xfc0054a4>
        njRowIDCT(&nj.block[coef]);
    for (coef = 0;  coef < 8;  ++coef)
 c0054e8:	e03ffb15 	stw	zero,-20(fp)
 c0054ec:	00001406 	br	c005540 <njDecodeBlock+0x298>
        njColIDCT(&nj.block[coef], &out[coef], c->stride);
 c0054f0:	e0fffb17 	ldw	r3,-20(fp)
 c0054f4:	008000b4 	movhi	r2,2
 c0054f8:	10801c04 	addi	r2,r2,112
 c0054fc:	1885883a 	add	r2,r3,r2
 c005500:	1085883a 	add	r2,r2,r2
 c005504:	1087883a 	add	r3,r2,r2
 c005508:	008300b4 	movhi	r2,3074
 c00550c:	10976004 	addi	r2,r2,23936
 c005510:	1889883a 	add	r4,r3,r2
 c005514:	e0bffb17 	ldw	r2,-20(fp)
 c005518:	e0ffff17 	ldw	r3,-4(fp)
 c00551c:	1887883a 	add	r3,r3,r2
 c005520:	e0bffe17 	ldw	r2,-8(fp)
 c005524:	10800517 	ldw	r2,20(r2)
 c005528:	180b883a 	mov	r5,r3
 c00552c:	100d883a 	mov	r6,r2
 c005530:	c003b680 	call	c003b68 <njColIDCT>
        if (coef > 63) njThrow(NJ_SYNTAX_ERROR);
        nj.block[(int) njZZ[coef]] = value * nj.qtab[c->qtsel][coef];
    } while (coef < 63);
    for (coef = 0;  coef < 64;  coef += 8)
        njRowIDCT(&nj.block[coef]);
    for (coef = 0;  coef < 8;  ++coef)
 c005534:	e0bffb17 	ldw	r2,-20(fp)
 c005538:	10800044 	addi	r2,r2,1
 c00553c:	e0bffb15 	stw	r2,-20(fp)
 c005540:	e0bffb17 	ldw	r2,-20(fp)
 c005544:	10800210 	cmplti	r2,r2,8
 c005548:	103fe91e 	bne	r2,zero,c0054f0 <__alt_data_end+0xfc0054f0>
        njColIDCT(&nj.block[coef], &out[coef], c->stride);
}
 c00554c:	e037883a 	mov	sp,fp
 c005550:	dfc00117 	ldw	ra,4(sp)
 c005554:	df000017 	ldw	fp,0(sp)
 c005558:	dec00204 	addi	sp,sp,8
 c00555c:	f800283a 	ret

0c005560 <njDecodeScan>:

NJ_INLINE void njDecodeScan(void) {
 c005560:	defff604 	addi	sp,sp,-40
 c005564:	dfc00915 	stw	ra,36(sp)
 c005568:	df000815 	stw	fp,32(sp)
 c00556c:	df000804 	addi	fp,sp,32
    int i, mbx, mby, sbx, sby;
    int rstcount = nj.rstinterval, nextrst = 0;
 c005570:	00c300b4 	movhi	r3,3074
 c005574:	18d76004 	addi	r3,r3,23936
 c005578:	00800234 	movhi	r2,8
 c00557c:	1080b004 	addi	r2,r2,704
 c005580:	1885883a 	add	r2,r3,r2
 c005584:	10800017 	ldw	r2,0(r2)
 c005588:	e0bffd15 	stw	r2,-12(fp)
 c00558c:	e03ffe15 	stw	zero,-8(fp)
    nj_component_t* c;
    njDecodeLength();
 c005590:	c0045140 	call	c004514 <njDecodeLength>
    njCheckError();
 c005594:	008300b4 	movhi	r2,3074
 c005598:	10976004 	addi	r2,r2,23936
 c00559c:	10800017 	ldw	r2,0(r2)
 c0055a0:	10000126 	beq	r2,zero,c0055a8 <njDecodeScan+0x48>
 c0055a4:	00010d06 	br	c0059dc <njDecodeScan+0x47c>
    if (nj.length < (4 + 2 * nj.ncomp)) njThrow(NJ_SYNTAX_ERROR);
 c0055a8:	008300b4 	movhi	r2,3074
 c0055ac:	10976004 	addi	r2,r2,23936
 c0055b0:	10c00317 	ldw	r3,12(r2)
 c0055b4:	008300b4 	movhi	r2,3074
 c0055b8:	10976004 	addi	r2,r2,23936
 c0055bc:	10800a17 	ldw	r2,40(r2)
 c0055c0:	10800084 	addi	r2,r2,2
 c0055c4:	1085883a 	add	r2,r2,r2
 c0055c8:	1880050e 	bge	r3,r2,c0055e0 <njDecodeScan+0x80>
 c0055cc:	008300b4 	movhi	r2,3074
 c0055d0:	10976004 	addi	r2,r2,23936
 c0055d4:	00c00144 	movi	r3,5
 c0055d8:	10c00015 	stw	r3,0(r2)
 c0055dc:	0000ff06 	br	c0059dc <njDecodeScan+0x47c>
    if (nj.pos[0] != nj.ncomp) njThrow(NJ_UNSUPPORTED);
 c0055e0:	008300b4 	movhi	r2,3074
 c0055e4:	10976004 	addi	r2,r2,23936
 c0055e8:	10800117 	ldw	r2,4(r2)
 c0055ec:	10800003 	ldbu	r2,0(r2)
 c0055f0:	10c03fcc 	andi	r3,r2,255
 c0055f4:	008300b4 	movhi	r2,3074
 c0055f8:	10976004 	addi	r2,r2,23936
 c0055fc:	10800a17 	ldw	r2,40(r2)
 c005600:	18800526 	beq	r3,r2,c005618 <njDecodeScan+0xb8>
 c005604:	008300b4 	movhi	r2,3074
 c005608:	10976004 	addi	r2,r2,23936
 c00560c:	00c00084 	movi	r3,2
 c005610:	10c00015 	stw	r3,0(r2)
 c005614:	0000f106 	br	c0059dc <njDecodeScan+0x47c>
    njSkip(1);
 c005618:	01000044 	movi	r4,1
 c00561c:	c00442c0 	call	c00442c <njSkip>
    for (i = 0, c = nj.comp;  i < nj.ncomp;  ++i, ++c) {
 c005620:	e03ff815 	stw	zero,-32(fp)
 c005624:	008300b4 	movhi	r2,3074
 c005628:	10976b04 	addi	r2,r2,23980
 c00562c:	e0bfff15 	stw	r2,-4(fp)
 c005630:	00003606 	br	c00570c <njDecodeScan+0x1ac>
        if (nj.pos[0] != c->cid) njThrow(NJ_SYNTAX_ERROR);
 c005634:	008300b4 	movhi	r2,3074
 c005638:	10976004 	addi	r2,r2,23936
 c00563c:	10800117 	ldw	r2,4(r2)
 c005640:	10800003 	ldbu	r2,0(r2)
 c005644:	10c03fcc 	andi	r3,r2,255
 c005648:	e0bfff17 	ldw	r2,-4(fp)
 c00564c:	10800017 	ldw	r2,0(r2)
 c005650:	18800526 	beq	r3,r2,c005668 <njDecodeScan+0x108>
 c005654:	008300b4 	movhi	r2,3074
 c005658:	10976004 	addi	r2,r2,23936
 c00565c:	00c00144 	movi	r3,5
 c005660:	10c00015 	stw	r3,0(r2)
 c005664:	0000dd06 	br	c0059dc <njDecodeScan+0x47c>
        if (nj.pos[1] & 0xEE) njThrow(NJ_SYNTAX_ERROR);
 c005668:	008300b4 	movhi	r2,3074
 c00566c:	10976004 	addi	r2,r2,23936
 c005670:	10800117 	ldw	r2,4(r2)
 c005674:	10800044 	addi	r2,r2,1
 c005678:	10800003 	ldbu	r2,0(r2)
 c00567c:	10803fcc 	andi	r2,r2,255
 c005680:	10803b8c 	andi	r2,r2,238
 c005684:	10000526 	beq	r2,zero,c00569c <njDecodeScan+0x13c>
 c005688:	008300b4 	movhi	r2,3074
 c00568c:	10976004 	addi	r2,r2,23936
 c005690:	00c00144 	movi	r3,5
 c005694:	10c00015 	stw	r3,0(r2)
 c005698:	0000d006 	br	c0059dc <njDecodeScan+0x47c>
        c->dctabsel = nj.pos[1] >> 4;
 c00569c:	008300b4 	movhi	r2,3074
 c0056a0:	10976004 	addi	r2,r2,23936
 c0056a4:	10800117 	ldw	r2,4(r2)
 c0056a8:	10800044 	addi	r2,r2,1
 c0056ac:	10800003 	ldbu	r2,0(r2)
 c0056b0:	10803fcc 	andi	r2,r2,255
 c0056b4:	1004d13a 	srli	r2,r2,4
 c0056b8:	10c03fcc 	andi	r3,r2,255
 c0056bc:	e0bfff17 	ldw	r2,-4(fp)
 c0056c0:	10c00815 	stw	r3,32(r2)
        c->actabsel = (nj.pos[1] & 1) | 2;
 c0056c4:	008300b4 	movhi	r2,3074
 c0056c8:	10976004 	addi	r2,r2,23936
 c0056cc:	10800117 	ldw	r2,4(r2)
 c0056d0:	10800044 	addi	r2,r2,1
 c0056d4:	10800003 	ldbu	r2,0(r2)
 c0056d8:	10803fcc 	andi	r2,r2,255
 c0056dc:	1080004c 	andi	r2,r2,1
 c0056e0:	10c00094 	ori	r3,r2,2
 c0056e4:	e0bfff17 	ldw	r2,-4(fp)
 c0056e8:	10c00715 	stw	r3,28(r2)
        njSkip(2);
 c0056ec:	01000084 	movi	r4,2
 c0056f0:	c00442c0 	call	c00442c <njSkip>
    njDecodeLength();
    njCheckError();
    if (nj.length < (4 + 2 * nj.ncomp)) njThrow(NJ_SYNTAX_ERROR);
    if (nj.pos[0] != nj.ncomp) njThrow(NJ_UNSUPPORTED);
    njSkip(1);
    for (i = 0, c = nj.comp;  i < nj.ncomp;  ++i, ++c) {
 c0056f4:	e0bff817 	ldw	r2,-32(fp)
 c0056f8:	10800044 	addi	r2,r2,1
 c0056fc:	e0bff815 	stw	r2,-32(fp)
 c005700:	e0bfff17 	ldw	r2,-4(fp)
 c005704:	10800b04 	addi	r2,r2,44
 c005708:	e0bfff15 	stw	r2,-4(fp)
 c00570c:	008300b4 	movhi	r2,3074
 c005710:	10976004 	addi	r2,r2,23936
 c005714:	10800a17 	ldw	r2,40(r2)
 c005718:	e0fff817 	ldw	r3,-32(fp)
 c00571c:	18bfc516 	blt	r3,r2,c005634 <__alt_data_end+0xfc005634>
        if (nj.pos[1] & 0xEE) njThrow(NJ_SYNTAX_ERROR);
        c->dctabsel = nj.pos[1] >> 4;
        c->actabsel = (nj.pos[1] & 1) | 2;
        njSkip(2);
    }
    if (nj.pos[0] || (nj.pos[1] != 63) || nj.pos[2]) njThrow(NJ_UNSUPPORTED);
 c005720:	008300b4 	movhi	r2,3074
 c005724:	10976004 	addi	r2,r2,23936
 c005728:	10800117 	ldw	r2,4(r2)
 c00572c:	10800003 	ldbu	r2,0(r2)
 c005730:	10803fcc 	andi	r2,r2,255
 c005734:	10000f1e 	bne	r2,zero,c005774 <njDecodeScan+0x214>
 c005738:	008300b4 	movhi	r2,3074
 c00573c:	10976004 	addi	r2,r2,23936
 c005740:	10800117 	ldw	r2,4(r2)
 c005744:	10800044 	addi	r2,r2,1
 c005748:	10800003 	ldbu	r2,0(r2)
 c00574c:	10803fcc 	andi	r2,r2,255
 c005750:	10800fd8 	cmpnei	r2,r2,63
 c005754:	1000071e 	bne	r2,zero,c005774 <njDecodeScan+0x214>
 c005758:	008300b4 	movhi	r2,3074
 c00575c:	10976004 	addi	r2,r2,23936
 c005760:	10800117 	ldw	r2,4(r2)
 c005764:	10800084 	addi	r2,r2,2
 c005768:	10800003 	ldbu	r2,0(r2)
 c00576c:	10803fcc 	andi	r2,r2,255
 c005770:	10000526 	beq	r2,zero,c005788 <njDecodeScan+0x228>
 c005774:	008300b4 	movhi	r2,3074
 c005778:	10976004 	addi	r2,r2,23936
 c00577c:	00c00084 	movi	r3,2
 c005780:	10c00015 	stw	r3,0(r2)
 c005784:	00009506 	br	c0059dc <njDecodeScan+0x47c>
    njSkip(nj.length);
 c005788:	008300b4 	movhi	r2,3074
 c00578c:	10976004 	addi	r2,r2,23936
 c005790:	10800317 	ldw	r2,12(r2)
 c005794:	1009883a 	mov	r4,r2
 c005798:	c00442c0 	call	c00442c <njSkip>
    for (mbx = mby = 0;;) {
 c00579c:	e03ffa15 	stw	zero,-24(fp)
 c0057a0:	e0bffa17 	ldw	r2,-24(fp)
 c0057a4:	e0bff915 	stw	r2,-28(fp)
        for (i = 0, c = nj.comp;  i < nj.ncomp;  ++i, ++c)
 c0057a8:	e03ff815 	stw	zero,-32(fp)
 c0057ac:	008300b4 	movhi	r2,3074
 c0057b0:	10976b04 	addi	r2,r2,23980
 c0057b4:	e0bfff15 	stw	r2,-4(fp)
 c0057b8:	00003406 	br	c00588c <njDecodeScan+0x32c>
            for (sby = 0;  sby < c->ssy;  ++sby)
 c0057bc:	e03ffc15 	stw	zero,-16(fp)
 c0057c0:	00002806 	br	c005864 <njDecodeScan+0x304>
                for (sbx = 0;  sbx < c->ssx;  ++sbx) {
 c0057c4:	e03ffb15 	stw	zero,-20(fp)
 c0057c8:	00001f06 	br	c005848 <njDecodeScan+0x2e8>
                    njDecodeBlock(c, &c->pixels[((mby * c->ssy + sby) * c->stride + mbx * c->ssx + sbx) << 3]);
 c0057cc:	e0bfff17 	ldw	r2,-4(fp)
 c0057d0:	10800a17 	ldw	r2,40(r2)
 c0057d4:	e0ffff17 	ldw	r3,-4(fp)
 c0057d8:	19000217 	ldw	r4,8(r3)
 c0057dc:	e0fffa17 	ldw	r3,-24(fp)
 c0057e0:	20c9383a 	mul	r4,r4,r3
 c0057e4:	e0fffc17 	ldw	r3,-16(fp)
 c0057e8:	20c9883a 	add	r4,r4,r3
 c0057ec:	e0ffff17 	ldw	r3,-4(fp)
 c0057f0:	18c00517 	ldw	r3,20(r3)
 c0057f4:	20c9383a 	mul	r4,r4,r3
 c0057f8:	e0ffff17 	ldw	r3,-4(fp)
 c0057fc:	19400117 	ldw	r5,4(r3)
 c005800:	e0fff917 	ldw	r3,-28(fp)
 c005804:	28c7383a 	mul	r3,r5,r3
 c005808:	20c9883a 	add	r4,r4,r3
 c00580c:	e0fffb17 	ldw	r3,-20(fp)
 c005810:	20c7883a 	add	r3,r4,r3
 c005814:	180690fa 	slli	r3,r3,3
 c005818:	10c5883a 	add	r2,r2,r3
 c00581c:	e13fff17 	ldw	r4,-4(fp)
 c005820:	100b883a 	mov	r5,r2
 c005824:	c0052a80 	call	c0052a8 <njDecodeBlock>
                    njCheckError();
 c005828:	008300b4 	movhi	r2,3074
 c00582c:	10976004 	addi	r2,r2,23936
 c005830:	10800017 	ldw	r2,0(r2)
 c005834:	10000126 	beq	r2,zero,c00583c <njDecodeScan+0x2dc>
 c005838:	00006806 	br	c0059dc <njDecodeScan+0x47c>
    if (nj.pos[0] || (nj.pos[1] != 63) || nj.pos[2]) njThrow(NJ_UNSUPPORTED);
    njSkip(nj.length);
    for (mbx = mby = 0;;) {
        for (i = 0, c = nj.comp;  i < nj.ncomp;  ++i, ++c)
            for (sby = 0;  sby < c->ssy;  ++sby)
                for (sbx = 0;  sbx < c->ssx;  ++sbx) {
 c00583c:	e0bffb17 	ldw	r2,-20(fp)
 c005840:	10800044 	addi	r2,r2,1
 c005844:	e0bffb15 	stw	r2,-20(fp)
 c005848:	e0bfff17 	ldw	r2,-4(fp)
 c00584c:	10800117 	ldw	r2,4(r2)
 c005850:	e0fffb17 	ldw	r3,-20(fp)
 c005854:	18bfdd16 	blt	r3,r2,c0057cc <__alt_data_end+0xfc0057cc>
    }
    if (nj.pos[0] || (nj.pos[1] != 63) || nj.pos[2]) njThrow(NJ_UNSUPPORTED);
    njSkip(nj.length);
    for (mbx = mby = 0;;) {
        for (i = 0, c = nj.comp;  i < nj.ncomp;  ++i, ++c)
            for (sby = 0;  sby < c->ssy;  ++sby)
 c005858:	e0bffc17 	ldw	r2,-16(fp)
 c00585c:	10800044 	addi	r2,r2,1
 c005860:	e0bffc15 	stw	r2,-16(fp)
 c005864:	e0bfff17 	ldw	r2,-4(fp)
 c005868:	10800217 	ldw	r2,8(r2)
 c00586c:	e0fffc17 	ldw	r3,-16(fp)
 c005870:	18bfd416 	blt	r3,r2,c0057c4 <__alt_data_end+0xfc0057c4>
        njSkip(2);
    }
    if (nj.pos[0] || (nj.pos[1] != 63) || nj.pos[2]) njThrow(NJ_UNSUPPORTED);
    njSkip(nj.length);
    for (mbx = mby = 0;;) {
        for (i = 0, c = nj.comp;  i < nj.ncomp;  ++i, ++c)
 c005874:	e0bff817 	ldw	r2,-32(fp)
 c005878:	10800044 	addi	r2,r2,1
 c00587c:	e0bff815 	stw	r2,-32(fp)
 c005880:	e0bfff17 	ldw	r2,-4(fp)
 c005884:	10800b04 	addi	r2,r2,44
 c005888:	e0bfff15 	stw	r2,-4(fp)
 c00588c:	008300b4 	movhi	r2,3074
 c005890:	10976004 	addi	r2,r2,23936
 c005894:	10800a17 	ldw	r2,40(r2)
 c005898:	e0fff817 	ldw	r3,-32(fp)
 c00589c:	18bfc716 	blt	r3,r2,c0057bc <__alt_data_end+0xfc0057bc>
            for (sby = 0;  sby < c->ssy;  ++sby)
                for (sbx = 0;  sbx < c->ssx;  ++sbx) {
                    njDecodeBlock(c, &c->pixels[((mby * c->ssy + sby) * c->stride + mbx * c->ssx + sbx) << 3]);
                    njCheckError();
                }
        if (++mbx >= nj.mbwidth) {
 c0058a0:	e0bff917 	ldw	r2,-28(fp)
 c0058a4:	10800044 	addi	r2,r2,1
 c0058a8:	e0bff915 	stw	r2,-28(fp)
 c0058ac:	008300b4 	movhi	r2,3074
 c0058b0:	10976004 	addi	r2,r2,23936
 c0058b4:	10800617 	ldw	r2,24(r2)
 c0058b8:	e0fff917 	ldw	r3,-28(fp)
 c0058bc:	18800f16 	blt	r3,r2,c0058fc <njDecodeScan+0x39c>
            mbx = 0;
 c0058c0:	e03ff915 	stw	zero,-28(fp)
            if (++mby >= nj.mbheight) break;
 c0058c4:	e0bffa17 	ldw	r2,-24(fp)
 c0058c8:	10800044 	addi	r2,r2,1
 c0058cc:	e0bffa15 	stw	r2,-24(fp)
 c0058d0:	008300b4 	movhi	r2,3074
 c0058d4:	10976004 	addi	r2,r2,23936
 c0058d8:	10800717 	ldw	r2,28(r2)
 c0058dc:	e0fffa17 	ldw	r3,-24(fp)
 c0058e0:	18800616 	blt	r3,r2,c0058fc <njDecodeScan+0x39c>
 c0058e4:	0001883a 	nop
            rstcount = nj.rstinterval;
            for (i = 0;  i < 3;  ++i)
                nj.comp[i].dcpred = 0;
        }
    }
    nj.error = __NJ_FINISHED;
 c0058e8:	008300b4 	movhi	r2,3074
 c0058ec:	10976004 	addi	r2,r2,23936
 c0058f0:	00c00184 	movi	r3,6
 c0058f4:	10c00015 	stw	r3,0(r2)
 c0058f8:	00003806 	br	c0059dc <njDecodeScan+0x47c>
                }
        if (++mbx >= nj.mbwidth) {
            mbx = 0;
            if (++mby >= nj.mbheight) break;
        }
        if (nj.rstinterval && !(--rstcount)) {
 c0058fc:	00c300b4 	movhi	r3,3074
 c005900:	18d76004 	addi	r3,r3,23936
 c005904:	00800234 	movhi	r2,8
 c005908:	1080b004 	addi	r2,r2,704
 c00590c:	1885883a 	add	r2,r3,r2
 c005910:	10800017 	ldw	r2,0(r2)
 c005914:	10003026 	beq	r2,zero,c0059d8 <njDecodeScan+0x478>
 c005918:	e0bffd17 	ldw	r2,-12(fp)
 c00591c:	10bfffc4 	addi	r2,r2,-1
 c005920:	e0bffd15 	stw	r2,-12(fp)
 c005924:	e0bffd17 	ldw	r2,-12(fp)
 c005928:	10002b1e 	bne	r2,zero,c0059d8 <njDecodeScan+0x478>
            njByteAlign();
 c00592c:	c0043dc0 	call	c0043dc <njByteAlign>
            i = njGetBits(16);
 c005930:	01000404 	movi	r4,16
 c005934:	c00439c0 	call	c00439c <njGetBits>
 c005938:	e0bff815 	stw	r2,-32(fp)
            if (((i & 0xFFF8) != 0xFFD0) || ((i & 7) != nextrst)) njThrow(NJ_SYNTAX_ERROR);
 c00593c:	e0bff817 	ldw	r2,-32(fp)
 c005940:	10fffe0c 	andi	r3,r2,65528
 c005944:	00bff414 	movui	r2,65488
 c005948:	1880041e 	bne	r3,r2,c00595c <njDecodeScan+0x3fc>
 c00594c:	e0bff817 	ldw	r2,-32(fp)
 c005950:	10c001cc 	andi	r3,r2,7
 c005954:	e0bffe17 	ldw	r2,-8(fp)
 c005958:	18800526 	beq	r3,r2,c005970 <njDecodeScan+0x410>
 c00595c:	008300b4 	movhi	r2,3074
 c005960:	10976004 	addi	r2,r2,23936
 c005964:	00c00144 	movi	r3,5
 c005968:	10c00015 	stw	r3,0(r2)
 c00596c:	00001b06 	br	c0059dc <njDecodeScan+0x47c>
            nextrst = (nextrst + 1) & 7;
 c005970:	e0bffe17 	ldw	r2,-8(fp)
 c005974:	10800044 	addi	r2,r2,1
 c005978:	108001cc 	andi	r2,r2,7
 c00597c:	e0bffe15 	stw	r2,-8(fp)
            rstcount = nj.rstinterval;
 c005980:	00c300b4 	movhi	r3,3074
 c005984:	18d76004 	addi	r3,r3,23936
 c005988:	00800234 	movhi	r2,8
 c00598c:	1080b004 	addi	r2,r2,704
 c005990:	1885883a 	add	r2,r3,r2
 c005994:	10800017 	ldw	r2,0(r2)
 c005998:	e0bffd15 	stw	r2,-12(fp)
            for (i = 0;  i < 3;  ++i)
 c00599c:	e03ff815 	stw	zero,-32(fp)
 c0059a0:	00000a06 	br	c0059cc <njDecodeScan+0x46c>
                nj.comp[i].dcpred = 0;
 c0059a4:	008300b4 	movhi	r2,3074
 c0059a8:	10976004 	addi	r2,r2,23936
 c0059ac:	e0fff817 	ldw	r3,-32(fp)
 c0059b0:	18c00b24 	muli	r3,r3,44
 c0059b4:	10c5883a 	add	r2,r2,r3
 c0059b8:	10801404 	addi	r2,r2,80
 c0059bc:	10000015 	stw	zero,0(r2)
            njByteAlign();
            i = njGetBits(16);
            if (((i & 0xFFF8) != 0xFFD0) || ((i & 7) != nextrst)) njThrow(NJ_SYNTAX_ERROR);
            nextrst = (nextrst + 1) & 7;
            rstcount = nj.rstinterval;
            for (i = 0;  i < 3;  ++i)
 c0059c0:	e0bff817 	ldw	r2,-32(fp)
 c0059c4:	10800044 	addi	r2,r2,1
 c0059c8:	e0bff815 	stw	r2,-32(fp)
 c0059cc:	e0bff817 	ldw	r2,-32(fp)
 c0059d0:	108000d0 	cmplti	r2,r2,3
 c0059d4:	103ff31e 	bne	r2,zero,c0059a4 <__alt_data_end+0xfc0059a4>
                nj.comp[i].dcpred = 0;
        }
    }
 c0059d8:	003f7306 	br	c0057a8 <__alt_data_end+0xfc0057a8>
    nj.error = __NJ_FINISHED;
}
 c0059dc:	e037883a 	mov	sp,fp
 c0059e0:	dfc00117 	ldw	ra,4(sp)
 c0059e4:	df000017 	ldw	fp,0(sp)
 c0059e8:	dec00204 	addi	sp,sp,8
 c0059ec:	f800283a 	ret

0c0059f0 <njUpsampleH>:
#define CF3Z (-3)
#define CF2A (139)
#define CF2B (-11)
#define CF(x) njClip(((x) + 64) >> 7)

NJ_INLINE void njUpsampleH(nj_component_t* c) {
 c0059f0:	defff604 	addi	sp,sp,-40
 c0059f4:	dfc00915 	stw	ra,36(sp)
 c0059f8:	df000815 	stw	fp,32(sp)
 c0059fc:	dc000715 	stw	r16,28(sp)
 c005a00:	df000804 	addi	fp,sp,32
 c005a04:	e13ffe15 	stw	r4,-8(fp)
    const int xmax = c->width - 3;
 c005a08:	e0bffe17 	ldw	r2,-8(fp)
 c005a0c:	10800317 	ldw	r2,12(r2)
 c005a10:	10bfff44 	addi	r2,r2,-3
 c005a14:	e0bffc15 	stw	r2,-16(fp)
    unsigned char *out, *lin, *lout;
    int x, y;
    out = (unsigned char*) njAllocMem((c->width * c->height) << 1);
 c005a18:	e0bffe17 	ldw	r2,-8(fp)
 c005a1c:	10c00317 	ldw	r3,12(r2)
 c005a20:	e0bffe17 	ldw	r2,-8(fp)
 c005a24:	10800417 	ldw	r2,16(r2)
 c005a28:	1885383a 	mul	r2,r3,r2
 c005a2c:	1085883a 	add	r2,r2,r2
 c005a30:	1009883a 	mov	r4,r2
 c005a34:	c008dac0 	call	c008dac <malloc>
 c005a38:	e0bffd15 	stw	r2,-12(fp)
    if (!out) njThrow(NJ_OUT_OF_MEM);
 c005a3c:	e0bffd17 	ldw	r2,-12(fp)
 c005a40:	1000051e 	bne	r2,zero,c005a58 <njUpsampleH+0x68>
 c005a44:	008300b4 	movhi	r2,3074
 c005a48:	10976004 	addi	r2,r2,23936
 c005a4c:	00c000c4 	movi	r3,3
 c005a50:	10c00015 	stw	r3,0(r2)
 c005a54:	00010506 	br	c005e6c <njUpsampleH+0x47c>
    lin = c->pixels;
 c005a58:	e0bffe17 	ldw	r2,-8(fp)
 c005a5c:	10800a17 	ldw	r2,40(r2)
 c005a60:	e0bff815 	stw	r2,-32(fp)
    lout = out;
 c005a64:	e0bffd17 	ldw	r2,-12(fp)
 c005a68:	e0bff915 	stw	r2,-28(fp)
    for (y = c->height;  y;  --y) {
 c005a6c:	e0bffe17 	ldw	r2,-8(fp)
 c005a70:	10800417 	ldw	r2,16(r2)
 c005a74:	e0bffb15 	stw	r2,-20(fp)
 c005a78:	0000e906 	br	c005e20 <njUpsampleH+0x430>
        lout[0] = CF(CF2A * lin[0] + CF2B * lin[1]);
 c005a7c:	e0bff817 	ldw	r2,-32(fp)
 c005a80:	10800003 	ldbu	r2,0(r2)
 c005a84:	10803fcc 	andi	r2,r2,255
 c005a88:	10c022e4 	muli	r3,r2,139
 c005a8c:	e0bff817 	ldw	r2,-32(fp)
 c005a90:	10800044 	addi	r2,r2,1
 c005a94:	10800003 	ldbu	r2,0(r2)
 c005a98:	10803fcc 	andi	r2,r2,255
 c005a9c:	10bffd64 	muli	r2,r2,-11
 c005aa0:	1885883a 	add	r2,r3,r2
 c005aa4:	10801004 	addi	r2,r2,64
 c005aa8:	1005d1fa 	srai	r2,r2,7
 c005aac:	1009883a 	mov	r4,r2
 c005ab0:	c0037680 	call	c003768 <njClip>
 c005ab4:	1007883a 	mov	r3,r2
 c005ab8:	e0bff917 	ldw	r2,-28(fp)
 c005abc:	10c00005 	stb	r3,0(r2)
        lout[1] = CF(CF3X * lin[0] + CF3Y * lin[1] + CF3Z * lin[2]);
 c005ac0:	e0bff917 	ldw	r2,-28(fp)
 c005ac4:	14000044 	addi	r16,r2,1
 c005ac8:	e0bff817 	ldw	r2,-32(fp)
 c005acc:	10800003 	ldbu	r2,0(r2)
 c005ad0:	10803fcc 	andi	r2,r2,255
 c005ad4:	10c01a24 	muli	r3,r2,104
 c005ad8:	e0bff817 	ldw	r2,-32(fp)
 c005adc:	10800044 	addi	r2,r2,1
 c005ae0:	10800003 	ldbu	r2,0(r2)
 c005ae4:	10803fcc 	andi	r2,r2,255
 c005ae8:	108006e4 	muli	r2,r2,27
 c005aec:	1887883a 	add	r3,r3,r2
 c005af0:	e0bff817 	ldw	r2,-32(fp)
 c005af4:	10800084 	addi	r2,r2,2
 c005af8:	10800003 	ldbu	r2,0(r2)
 c005afc:	10803fcc 	andi	r2,r2,255
 c005b00:	10bfff64 	muli	r2,r2,-3
 c005b04:	1885883a 	add	r2,r3,r2
 c005b08:	10801004 	addi	r2,r2,64
 c005b0c:	1005d1fa 	srai	r2,r2,7
 c005b10:	1009883a 	mov	r4,r2
 c005b14:	c0037680 	call	c003768 <njClip>
 c005b18:	80800005 	stb	r2,0(r16)
        lout[2] = CF(CF3A * lin[0] + CF3B * lin[1] + CF3C * lin[2]);
 c005b1c:	e0bff917 	ldw	r2,-28(fp)
 c005b20:	14000084 	addi	r16,r2,2
 c005b24:	e0bff817 	ldw	r2,-32(fp)
 c005b28:	10800003 	ldbu	r2,0(r2)
 c005b2c:	10803fcc 	andi	r2,r2,255
 c005b30:	10c00724 	muli	r3,r2,28
 c005b34:	e0bff817 	ldw	r2,-32(fp)
 c005b38:	10800044 	addi	r2,r2,1
 c005b3c:	10800003 	ldbu	r2,0(r2)
 c005b40:	10803fcc 	andi	r2,r2,255
 c005b44:	10801b64 	muli	r2,r2,109
 c005b48:	1887883a 	add	r3,r3,r2
 c005b4c:	e0bff817 	ldw	r2,-32(fp)
 c005b50:	10800084 	addi	r2,r2,2
 c005b54:	10800003 	ldbu	r2,0(r2)
 c005b58:	10803fcc 	andi	r2,r2,255
 c005b5c:	10bffde4 	muli	r2,r2,-9
 c005b60:	1885883a 	add	r2,r3,r2
 c005b64:	10801004 	addi	r2,r2,64
 c005b68:	1005d1fa 	srai	r2,r2,7
 c005b6c:	1009883a 	mov	r4,r2
 c005b70:	c0037680 	call	c003768 <njClip>
 c005b74:	80800005 	stb	r2,0(r16)
        for (x = 0;  x < xmax;  ++x) {
 c005b78:	e03ffa15 	stw	zero,-24(fp)
 c005b7c:	00005306 	br	c005ccc <njUpsampleH+0x2dc>
            lout[(x << 1) + 3] = CF(CF4A * lin[x] + CF4B * lin[x + 1] + CF4C * lin[x + 2] + CF4D * lin[x + 3]);
 c005b80:	e0bffa17 	ldw	r2,-24(fp)
 c005b84:	1085883a 	add	r2,r2,r2
 c005b88:	108000c4 	addi	r2,r2,3
 c005b8c:	e0fff917 	ldw	r3,-28(fp)
 c005b90:	18a1883a 	add	r16,r3,r2
 c005b94:	e0bffa17 	ldw	r2,-24(fp)
 c005b98:	e0fff817 	ldw	r3,-32(fp)
 c005b9c:	1885883a 	add	r2,r3,r2
 c005ba0:	10800003 	ldbu	r2,0(r2)
 c005ba4:	10803fcc 	andi	r2,r2,255
 c005ba8:	10fffde4 	muli	r3,r2,-9
 c005bac:	e0bffa17 	ldw	r2,-24(fp)
 c005bb0:	10800044 	addi	r2,r2,1
 c005bb4:	e13ff817 	ldw	r4,-32(fp)
 c005bb8:	2085883a 	add	r2,r4,r2
 c005bbc:	10800003 	ldbu	r2,0(r2)
 c005bc0:	10803fcc 	andi	r2,r2,255
 c005bc4:	10801be4 	muli	r2,r2,111
 c005bc8:	1887883a 	add	r3,r3,r2
 c005bcc:	e0bffa17 	ldw	r2,-24(fp)
 c005bd0:	10800084 	addi	r2,r2,2
 c005bd4:	e13ff817 	ldw	r4,-32(fp)
 c005bd8:	2085883a 	add	r2,r4,r2
 c005bdc:	10800003 	ldbu	r2,0(r2)
 c005be0:	10803fcc 	andi	r2,r2,255
 c005be4:	10800764 	muli	r2,r2,29
 c005be8:	1887883a 	add	r3,r3,r2
 c005bec:	e0bffa17 	ldw	r2,-24(fp)
 c005bf0:	108000c4 	addi	r2,r2,3
 c005bf4:	e13ff817 	ldw	r4,-32(fp)
 c005bf8:	2085883a 	add	r2,r4,r2
 c005bfc:	10800003 	ldbu	r2,0(r2)
 c005c00:	10803fcc 	andi	r2,r2,255
 c005c04:	10bfff64 	muli	r2,r2,-3
 c005c08:	1885883a 	add	r2,r3,r2
 c005c0c:	10801004 	addi	r2,r2,64
 c005c10:	1005d1fa 	srai	r2,r2,7
 c005c14:	1009883a 	mov	r4,r2
 c005c18:	c0037680 	call	c003768 <njClip>
 c005c1c:	80800005 	stb	r2,0(r16)
            lout[(x << 1) + 4] = CF(CF4D * lin[x] + CF4C * lin[x + 1] + CF4B * lin[x + 2] + CF4A * lin[x + 3]);
 c005c20:	e0bffa17 	ldw	r2,-24(fp)
 c005c24:	1085883a 	add	r2,r2,r2
 c005c28:	10800104 	addi	r2,r2,4
 c005c2c:	e0fff917 	ldw	r3,-28(fp)
 c005c30:	18a1883a 	add	r16,r3,r2
 c005c34:	e0bffa17 	ldw	r2,-24(fp)
 c005c38:	e0fff817 	ldw	r3,-32(fp)
 c005c3c:	1885883a 	add	r2,r3,r2
 c005c40:	10800003 	ldbu	r2,0(r2)
 c005c44:	10803fcc 	andi	r2,r2,255
 c005c48:	10ffff64 	muli	r3,r2,-3
 c005c4c:	e0bffa17 	ldw	r2,-24(fp)
 c005c50:	10800044 	addi	r2,r2,1
 c005c54:	e13ff817 	ldw	r4,-32(fp)
 c005c58:	2085883a 	add	r2,r4,r2
 c005c5c:	10800003 	ldbu	r2,0(r2)
 c005c60:	10803fcc 	andi	r2,r2,255
 c005c64:	10800764 	muli	r2,r2,29
 c005c68:	1887883a 	add	r3,r3,r2
 c005c6c:	e0bffa17 	ldw	r2,-24(fp)
 c005c70:	10800084 	addi	r2,r2,2
 c005c74:	e13ff817 	ldw	r4,-32(fp)
 c005c78:	2085883a 	add	r2,r4,r2
 c005c7c:	10800003 	ldbu	r2,0(r2)
 c005c80:	10803fcc 	andi	r2,r2,255
 c005c84:	10801be4 	muli	r2,r2,111
 c005c88:	1887883a 	add	r3,r3,r2
 c005c8c:	e0bffa17 	ldw	r2,-24(fp)
 c005c90:	108000c4 	addi	r2,r2,3
 c005c94:	e13ff817 	ldw	r4,-32(fp)
 c005c98:	2085883a 	add	r2,r4,r2
 c005c9c:	10800003 	ldbu	r2,0(r2)
 c005ca0:	10803fcc 	andi	r2,r2,255
 c005ca4:	10bffde4 	muli	r2,r2,-9
 c005ca8:	1885883a 	add	r2,r3,r2
 c005cac:	10801004 	addi	r2,r2,64
 c005cb0:	1005d1fa 	srai	r2,r2,7
 c005cb4:	1009883a 	mov	r4,r2
 c005cb8:	c0037680 	call	c003768 <njClip>
 c005cbc:	80800005 	stb	r2,0(r16)
    lout = out;
    for (y = c->height;  y;  --y) {
        lout[0] = CF(CF2A * lin[0] + CF2B * lin[1]);
        lout[1] = CF(CF3X * lin[0] + CF3Y * lin[1] + CF3Z * lin[2]);
        lout[2] = CF(CF3A * lin[0] + CF3B * lin[1] + CF3C * lin[2]);
        for (x = 0;  x < xmax;  ++x) {
 c005cc0:	e0bffa17 	ldw	r2,-24(fp)
 c005cc4:	10800044 	addi	r2,r2,1
 c005cc8:	e0bffa15 	stw	r2,-24(fp)
 c005ccc:	e0fffa17 	ldw	r3,-24(fp)
 c005cd0:	e0bffc17 	ldw	r2,-16(fp)
 c005cd4:	18bfaa16 	blt	r3,r2,c005b80 <__alt_data_end+0xfc005b80>
            lout[(x << 1) + 3] = CF(CF4A * lin[x] + CF4B * lin[x + 1] + CF4C * lin[x + 2] + CF4D * lin[x + 3]);
            lout[(x << 1) + 4] = CF(CF4D * lin[x] + CF4C * lin[x + 1] + CF4B * lin[x + 2] + CF4A * lin[x + 3]);
        }
        lin += c->stride;
 c005cd8:	e0bffe17 	ldw	r2,-8(fp)
 c005cdc:	10800517 	ldw	r2,20(r2)
 c005ce0:	1007883a 	mov	r3,r2
 c005ce4:	e0bff817 	ldw	r2,-32(fp)
 c005ce8:	10c5883a 	add	r2,r2,r3
 c005cec:	e0bff815 	stw	r2,-32(fp)
        lout += c->width << 1;
 c005cf0:	e0bffe17 	ldw	r2,-8(fp)
 c005cf4:	10800317 	ldw	r2,12(r2)
 c005cf8:	1085883a 	add	r2,r2,r2
 c005cfc:	1007883a 	mov	r3,r2
 c005d00:	e0bff917 	ldw	r2,-28(fp)
 c005d04:	10c5883a 	add	r2,r2,r3
 c005d08:	e0bff915 	stw	r2,-28(fp)
        lout[-3] = CF(CF3A * lin[-1] + CF3B * lin[-2] + CF3C * lin[-3]);
 c005d0c:	e0bff917 	ldw	r2,-28(fp)
 c005d10:	143fff44 	addi	r16,r2,-3
 c005d14:	e0bff817 	ldw	r2,-32(fp)
 c005d18:	10bfffc4 	addi	r2,r2,-1
 c005d1c:	10800003 	ldbu	r2,0(r2)
 c005d20:	10803fcc 	andi	r2,r2,255
 c005d24:	10c00724 	muli	r3,r2,28
 c005d28:	e0bff817 	ldw	r2,-32(fp)
 c005d2c:	10bfff84 	addi	r2,r2,-2
 c005d30:	10800003 	ldbu	r2,0(r2)
 c005d34:	10803fcc 	andi	r2,r2,255
 c005d38:	10801b64 	muli	r2,r2,109
 c005d3c:	1887883a 	add	r3,r3,r2
 c005d40:	e0bff817 	ldw	r2,-32(fp)
 c005d44:	10bfff44 	addi	r2,r2,-3
 c005d48:	10800003 	ldbu	r2,0(r2)
 c005d4c:	10803fcc 	andi	r2,r2,255
 c005d50:	10bffde4 	muli	r2,r2,-9
 c005d54:	1885883a 	add	r2,r3,r2
 c005d58:	10801004 	addi	r2,r2,64
 c005d5c:	1005d1fa 	srai	r2,r2,7
 c005d60:	1009883a 	mov	r4,r2
 c005d64:	c0037680 	call	c003768 <njClip>
 c005d68:	80800005 	stb	r2,0(r16)
        lout[-2] = CF(CF3X * lin[-1] + CF3Y * lin[-2] + CF3Z * lin[-3]);
 c005d6c:	e0bff917 	ldw	r2,-28(fp)
 c005d70:	143fff84 	addi	r16,r2,-2
 c005d74:	e0bff817 	ldw	r2,-32(fp)
 c005d78:	10bfffc4 	addi	r2,r2,-1
 c005d7c:	10800003 	ldbu	r2,0(r2)
 c005d80:	10803fcc 	andi	r2,r2,255
 c005d84:	10c01a24 	muli	r3,r2,104
 c005d88:	e0bff817 	ldw	r2,-32(fp)
 c005d8c:	10bfff84 	addi	r2,r2,-2
 c005d90:	10800003 	ldbu	r2,0(r2)
 c005d94:	10803fcc 	andi	r2,r2,255
 c005d98:	108006e4 	muli	r2,r2,27
 c005d9c:	1887883a 	add	r3,r3,r2
 c005da0:	e0bff817 	ldw	r2,-32(fp)
 c005da4:	10bfff44 	addi	r2,r2,-3
 c005da8:	10800003 	ldbu	r2,0(r2)
 c005dac:	10803fcc 	andi	r2,r2,255
 c005db0:	10bfff64 	muli	r2,r2,-3
 c005db4:	1885883a 	add	r2,r3,r2
 c005db8:	10801004 	addi	r2,r2,64
 c005dbc:	1005d1fa 	srai	r2,r2,7
 c005dc0:	1009883a 	mov	r4,r2
 c005dc4:	c0037680 	call	c003768 <njClip>
 c005dc8:	80800005 	stb	r2,0(r16)
        lout[-1] = CF(CF2A * lin[-1] + CF2B * lin[-2]);
 c005dcc:	e0bff917 	ldw	r2,-28(fp)
 c005dd0:	143fffc4 	addi	r16,r2,-1
 c005dd4:	e0bff817 	ldw	r2,-32(fp)
 c005dd8:	10bfffc4 	addi	r2,r2,-1
 c005ddc:	10800003 	ldbu	r2,0(r2)
 c005de0:	10803fcc 	andi	r2,r2,255
 c005de4:	10c022e4 	muli	r3,r2,139
 c005de8:	e0bff817 	ldw	r2,-32(fp)
 c005dec:	10bfff84 	addi	r2,r2,-2
 c005df0:	10800003 	ldbu	r2,0(r2)
 c005df4:	10803fcc 	andi	r2,r2,255
 c005df8:	10bffd64 	muli	r2,r2,-11
 c005dfc:	1885883a 	add	r2,r3,r2
 c005e00:	10801004 	addi	r2,r2,64
 c005e04:	1005d1fa 	srai	r2,r2,7
 c005e08:	1009883a 	mov	r4,r2
 c005e0c:	c0037680 	call	c003768 <njClip>
 c005e10:	80800005 	stb	r2,0(r16)
    int x, y;
    out = (unsigned char*) njAllocMem((c->width * c->height) << 1);
    if (!out) njThrow(NJ_OUT_OF_MEM);
    lin = c->pixels;
    lout = out;
    for (y = c->height;  y;  --y) {
 c005e14:	e0bffb17 	ldw	r2,-20(fp)
 c005e18:	10bfffc4 	addi	r2,r2,-1
 c005e1c:	e0bffb15 	stw	r2,-20(fp)
 c005e20:	e0bffb17 	ldw	r2,-20(fp)
 c005e24:	103f151e 	bne	r2,zero,c005a7c <__alt_data_end+0xfc005a7c>
        lout += c->width << 1;
        lout[-3] = CF(CF3A * lin[-1] + CF3B * lin[-2] + CF3C * lin[-3]);
        lout[-2] = CF(CF3X * lin[-1] + CF3Y * lin[-2] + CF3Z * lin[-3]);
        lout[-1] = CF(CF2A * lin[-1] + CF2B * lin[-2]);
    }
    c->width <<= 1;
 c005e28:	e0bffe17 	ldw	r2,-8(fp)
 c005e2c:	10800317 	ldw	r2,12(r2)
 c005e30:	1085883a 	add	r2,r2,r2
 c005e34:	1007883a 	mov	r3,r2
 c005e38:	e0bffe17 	ldw	r2,-8(fp)
 c005e3c:	10c00315 	stw	r3,12(r2)
    c->stride = c->width;
 c005e40:	e0bffe17 	ldw	r2,-8(fp)
 c005e44:	10c00317 	ldw	r3,12(r2)
 c005e48:	e0bffe17 	ldw	r2,-8(fp)
 c005e4c:	10c00515 	stw	r3,20(r2)
    njFreeMem((void*)c->pixels);
 c005e50:	e0bffe17 	ldw	r2,-8(fp)
 c005e54:	10800a17 	ldw	r2,40(r2)
 c005e58:	1009883a 	mov	r4,r2
 c005e5c:	c008dc00 	call	c008dc0 <free>
    c->pixels = out;
 c005e60:	e0bffe17 	ldw	r2,-8(fp)
 c005e64:	e0fffd17 	ldw	r3,-12(fp)
 c005e68:	10c00a15 	stw	r3,40(r2)
}
 c005e6c:	e6ffff04 	addi	sp,fp,-4
 c005e70:	dfc00217 	ldw	ra,8(sp)
 c005e74:	df000117 	ldw	fp,4(sp)
 c005e78:	dc000017 	ldw	r16,0(sp)
 c005e7c:	dec00304 	addi	sp,sp,12
 c005e80:	f800283a 	ret

0c005e84 <njUpsampleV>:

NJ_INLINE void njUpsampleV(nj_component_t* c) {
 c005e84:	defff504 	addi	sp,sp,-44
 c005e88:	dfc00a15 	stw	ra,40(sp)
 c005e8c:	df000915 	stw	fp,36(sp)
 c005e90:	df000904 	addi	fp,sp,36
 c005e94:	e13fff15 	stw	r4,-4(fp)
    const int w = c->width, s1 = c->stride, s2 = s1 + s1;
 c005e98:	e0bfff17 	ldw	r2,-4(fp)
 c005e9c:	10800317 	ldw	r2,12(r2)
 c005ea0:	e0bffb15 	stw	r2,-20(fp)
 c005ea4:	e0bfff17 	ldw	r2,-4(fp)
 c005ea8:	10800517 	ldw	r2,20(r2)
 c005eac:	e0bffc15 	stw	r2,-16(fp)
 c005eb0:	e0fffc17 	ldw	r3,-16(fp)
 c005eb4:	e0bffc17 	ldw	r2,-16(fp)
 c005eb8:	1885883a 	add	r2,r3,r2
 c005ebc:	e0bffd15 	stw	r2,-12(fp)
    unsigned char *out, *cin, *cout;
    int x, y;
    out = (unsigned char*) njAllocMem((c->width * c->height) << 1);
 c005ec0:	e0bfff17 	ldw	r2,-4(fp)
 c005ec4:	10c00317 	ldw	r3,12(r2)
 c005ec8:	e0bfff17 	ldw	r2,-4(fp)
 c005ecc:	10800417 	ldw	r2,16(r2)
 c005ed0:	1885383a 	mul	r2,r3,r2
 c005ed4:	1085883a 	add	r2,r2,r2
 c005ed8:	1009883a 	mov	r4,r2
 c005edc:	c008dac0 	call	c008dac <malloc>
 c005ee0:	e0bffe15 	stw	r2,-8(fp)
    if (!out) njThrow(NJ_OUT_OF_MEM);
 c005ee4:	e0bffe17 	ldw	r2,-8(fp)
 c005ee8:	1000051e 	bne	r2,zero,c005f00 <njUpsampleV+0x7c>
 c005eec:	008300b4 	movhi	r2,3074
 c005ef0:	10976004 	addi	r2,r2,23936
 c005ef4:	00c000c4 	movi	r3,3
 c005ef8:	10c00015 	stw	r3,0(r2)
 c005efc:	00012306 	br	c00638c <njUpsampleV+0x508>
    for (x = 0;  x < w;  ++x) {
 c005f00:	e03ff915 	stw	zero,-28(fp)
 c005f04:	00010d06 	br	c00633c <njUpsampleV+0x4b8>
        cin = &c->pixels[x];
 c005f08:	e0bfff17 	ldw	r2,-4(fp)
 c005f0c:	10c00a17 	ldw	r3,40(r2)
 c005f10:	e0bff917 	ldw	r2,-28(fp)
 c005f14:	1885883a 	add	r2,r3,r2
 c005f18:	e0bff715 	stw	r2,-36(fp)
        cout = &out[x];
 c005f1c:	e0bff917 	ldw	r2,-28(fp)
 c005f20:	e0fffe17 	ldw	r3,-8(fp)
 c005f24:	1885883a 	add	r2,r3,r2
 c005f28:	e0bff815 	stw	r2,-32(fp)
        *cout = CF(CF2A * cin[0] + CF2B * cin[s1]);  cout += w;
 c005f2c:	e0bff717 	ldw	r2,-36(fp)
 c005f30:	10800003 	ldbu	r2,0(r2)
 c005f34:	10803fcc 	andi	r2,r2,255
 c005f38:	10c022e4 	muli	r3,r2,139
 c005f3c:	e0bffc17 	ldw	r2,-16(fp)
 c005f40:	e13ff717 	ldw	r4,-36(fp)
 c005f44:	2085883a 	add	r2,r4,r2
 c005f48:	10800003 	ldbu	r2,0(r2)
 c005f4c:	10803fcc 	andi	r2,r2,255
 c005f50:	10bffd64 	muli	r2,r2,-11
 c005f54:	1885883a 	add	r2,r3,r2
 c005f58:	10801004 	addi	r2,r2,64
 c005f5c:	1005d1fa 	srai	r2,r2,7
 c005f60:	1009883a 	mov	r4,r2
 c005f64:	c0037680 	call	c003768 <njClip>
 c005f68:	1007883a 	mov	r3,r2
 c005f6c:	e0bff817 	ldw	r2,-32(fp)
 c005f70:	10c00005 	stb	r3,0(r2)
 c005f74:	e0bffb17 	ldw	r2,-20(fp)
 c005f78:	e0fff817 	ldw	r3,-32(fp)
 c005f7c:	1885883a 	add	r2,r3,r2
 c005f80:	e0bff815 	stw	r2,-32(fp)
        *cout = CF(CF3X * cin[0] + CF3Y * cin[s1] + CF3Z * cin[s2]);  cout += w;
 c005f84:	e0bff717 	ldw	r2,-36(fp)
 c005f88:	10800003 	ldbu	r2,0(r2)
 c005f8c:	10803fcc 	andi	r2,r2,255
 c005f90:	10c01a24 	muli	r3,r2,104
 c005f94:	e0bffc17 	ldw	r2,-16(fp)
 c005f98:	e13ff717 	ldw	r4,-36(fp)
 c005f9c:	2085883a 	add	r2,r4,r2
 c005fa0:	10800003 	ldbu	r2,0(r2)
 c005fa4:	10803fcc 	andi	r2,r2,255
 c005fa8:	108006e4 	muli	r2,r2,27
 c005fac:	1887883a 	add	r3,r3,r2
 c005fb0:	e0bffd17 	ldw	r2,-12(fp)
 c005fb4:	e13ff717 	ldw	r4,-36(fp)
 c005fb8:	2085883a 	add	r2,r4,r2
 c005fbc:	10800003 	ldbu	r2,0(r2)
 c005fc0:	10803fcc 	andi	r2,r2,255
 c005fc4:	10bfff64 	muli	r2,r2,-3
 c005fc8:	1885883a 	add	r2,r3,r2
 c005fcc:	10801004 	addi	r2,r2,64
 c005fd0:	1005d1fa 	srai	r2,r2,7
 c005fd4:	1009883a 	mov	r4,r2
 c005fd8:	c0037680 	call	c003768 <njClip>
 c005fdc:	1007883a 	mov	r3,r2
 c005fe0:	e0bff817 	ldw	r2,-32(fp)
 c005fe4:	10c00005 	stb	r3,0(r2)
 c005fe8:	e0bffb17 	ldw	r2,-20(fp)
 c005fec:	e0fff817 	ldw	r3,-32(fp)
 c005ff0:	1885883a 	add	r2,r3,r2
 c005ff4:	e0bff815 	stw	r2,-32(fp)
        *cout = CF(CF3A * cin[0] + CF3B * cin[s1] + CF3C * cin[s2]);  cout += w;
 c005ff8:	e0bff717 	ldw	r2,-36(fp)
 c005ffc:	10800003 	ldbu	r2,0(r2)
 c006000:	10803fcc 	andi	r2,r2,255
 c006004:	10c00724 	muli	r3,r2,28
 c006008:	e0bffc17 	ldw	r2,-16(fp)
 c00600c:	e13ff717 	ldw	r4,-36(fp)
 c006010:	2085883a 	add	r2,r4,r2
 c006014:	10800003 	ldbu	r2,0(r2)
 c006018:	10803fcc 	andi	r2,r2,255
 c00601c:	10801b64 	muli	r2,r2,109
 c006020:	1887883a 	add	r3,r3,r2
 c006024:	e0bffd17 	ldw	r2,-12(fp)
 c006028:	e13ff717 	ldw	r4,-36(fp)
 c00602c:	2085883a 	add	r2,r4,r2
 c006030:	10800003 	ldbu	r2,0(r2)
 c006034:	10803fcc 	andi	r2,r2,255
 c006038:	10bffde4 	muli	r2,r2,-9
 c00603c:	1885883a 	add	r2,r3,r2
 c006040:	10801004 	addi	r2,r2,64
 c006044:	1005d1fa 	srai	r2,r2,7
 c006048:	1009883a 	mov	r4,r2
 c00604c:	c0037680 	call	c003768 <njClip>
 c006050:	1007883a 	mov	r3,r2
 c006054:	e0bff817 	ldw	r2,-32(fp)
 c006058:	10c00005 	stb	r3,0(r2)
 c00605c:	e0bffb17 	ldw	r2,-20(fp)
 c006060:	e0fff817 	ldw	r3,-32(fp)
 c006064:	1885883a 	add	r2,r3,r2
 c006068:	e0bff815 	stw	r2,-32(fp)
        cin += s1;
 c00606c:	e0bffc17 	ldw	r2,-16(fp)
 c006070:	e0fff717 	ldw	r3,-36(fp)
 c006074:	1885883a 	add	r2,r3,r2
 c006078:	e0bff715 	stw	r2,-36(fp)
        for (y = c->height - 3;  y;  --y) {
 c00607c:	e0bfff17 	ldw	r2,-4(fp)
 c006080:	10800417 	ldw	r2,16(r2)
 c006084:	10bfff44 	addi	r2,r2,-3
 c006088:	e0bffa15 	stw	r2,-24(fp)
 c00608c:	00005106 	br	c0061d4 <njUpsampleV+0x350>
            *cout = CF(CF4A * cin[-s1] + CF4B * cin[0] + CF4C * cin[s1] + CF4D * cin[s2]);  cout += w;
 c006090:	e0bffc17 	ldw	r2,-16(fp)
 c006094:	0085c83a 	sub	r2,zero,r2
 c006098:	e0fff717 	ldw	r3,-36(fp)
 c00609c:	1885883a 	add	r2,r3,r2
 c0060a0:	10800003 	ldbu	r2,0(r2)
 c0060a4:	10803fcc 	andi	r2,r2,255
 c0060a8:	10fffde4 	muli	r3,r2,-9
 c0060ac:	e0bff717 	ldw	r2,-36(fp)
 c0060b0:	10800003 	ldbu	r2,0(r2)
 c0060b4:	10803fcc 	andi	r2,r2,255
 c0060b8:	10801be4 	muli	r2,r2,111
 c0060bc:	1887883a 	add	r3,r3,r2
 c0060c0:	e0bffc17 	ldw	r2,-16(fp)
 c0060c4:	e13ff717 	ldw	r4,-36(fp)
 c0060c8:	2085883a 	add	r2,r4,r2
 c0060cc:	10800003 	ldbu	r2,0(r2)
 c0060d0:	10803fcc 	andi	r2,r2,255
 c0060d4:	10800764 	muli	r2,r2,29
 c0060d8:	1887883a 	add	r3,r3,r2
 c0060dc:	e0bffd17 	ldw	r2,-12(fp)
 c0060e0:	e13ff717 	ldw	r4,-36(fp)
 c0060e4:	2085883a 	add	r2,r4,r2
 c0060e8:	10800003 	ldbu	r2,0(r2)
 c0060ec:	10803fcc 	andi	r2,r2,255
 c0060f0:	10bfff64 	muli	r2,r2,-3
 c0060f4:	1885883a 	add	r2,r3,r2
 c0060f8:	10801004 	addi	r2,r2,64
 c0060fc:	1005d1fa 	srai	r2,r2,7
 c006100:	1009883a 	mov	r4,r2
 c006104:	c0037680 	call	c003768 <njClip>
 c006108:	1007883a 	mov	r3,r2
 c00610c:	e0bff817 	ldw	r2,-32(fp)
 c006110:	10c00005 	stb	r3,0(r2)
 c006114:	e0bffb17 	ldw	r2,-20(fp)
 c006118:	e0fff817 	ldw	r3,-32(fp)
 c00611c:	1885883a 	add	r2,r3,r2
 c006120:	e0bff815 	stw	r2,-32(fp)
            *cout = CF(CF4D * cin[-s1] + CF4C * cin[0] + CF4B * cin[s1] + CF4A * cin[s2]);  cout += w;
 c006124:	e0bffc17 	ldw	r2,-16(fp)
 c006128:	0085c83a 	sub	r2,zero,r2
 c00612c:	e0fff717 	ldw	r3,-36(fp)
 c006130:	1885883a 	add	r2,r3,r2
 c006134:	10800003 	ldbu	r2,0(r2)
 c006138:	10803fcc 	andi	r2,r2,255
 c00613c:	10ffff64 	muli	r3,r2,-3
 c006140:	e0bff717 	ldw	r2,-36(fp)
 c006144:	10800003 	ldbu	r2,0(r2)
 c006148:	10803fcc 	andi	r2,r2,255
 c00614c:	10800764 	muli	r2,r2,29
 c006150:	1887883a 	add	r3,r3,r2
 c006154:	e0bffc17 	ldw	r2,-16(fp)
 c006158:	e13ff717 	ldw	r4,-36(fp)
 c00615c:	2085883a 	add	r2,r4,r2
 c006160:	10800003 	ldbu	r2,0(r2)
 c006164:	10803fcc 	andi	r2,r2,255
 c006168:	10801be4 	muli	r2,r2,111
 c00616c:	1887883a 	add	r3,r3,r2
 c006170:	e0bffd17 	ldw	r2,-12(fp)
 c006174:	e13ff717 	ldw	r4,-36(fp)
 c006178:	2085883a 	add	r2,r4,r2
 c00617c:	10800003 	ldbu	r2,0(r2)
 c006180:	10803fcc 	andi	r2,r2,255
 c006184:	10bffde4 	muli	r2,r2,-9
 c006188:	1885883a 	add	r2,r3,r2
 c00618c:	10801004 	addi	r2,r2,64
 c006190:	1005d1fa 	srai	r2,r2,7
 c006194:	1009883a 	mov	r4,r2
 c006198:	c0037680 	call	c003768 <njClip>
 c00619c:	1007883a 	mov	r3,r2
 c0061a0:	e0bff817 	ldw	r2,-32(fp)
 c0061a4:	10c00005 	stb	r3,0(r2)
 c0061a8:	e0bffb17 	ldw	r2,-20(fp)
 c0061ac:	e0fff817 	ldw	r3,-32(fp)
 c0061b0:	1885883a 	add	r2,r3,r2
 c0061b4:	e0bff815 	stw	r2,-32(fp)
            cin += s1;
 c0061b8:	e0bffc17 	ldw	r2,-16(fp)
 c0061bc:	e0fff717 	ldw	r3,-36(fp)
 c0061c0:	1885883a 	add	r2,r3,r2
 c0061c4:	e0bff715 	stw	r2,-36(fp)
        cout = &out[x];
        *cout = CF(CF2A * cin[0] + CF2B * cin[s1]);  cout += w;
        *cout = CF(CF3X * cin[0] + CF3Y * cin[s1] + CF3Z * cin[s2]);  cout += w;
        *cout = CF(CF3A * cin[0] + CF3B * cin[s1] + CF3C * cin[s2]);  cout += w;
        cin += s1;
        for (y = c->height - 3;  y;  --y) {
 c0061c8:	e0bffa17 	ldw	r2,-24(fp)
 c0061cc:	10bfffc4 	addi	r2,r2,-1
 c0061d0:	e0bffa15 	stw	r2,-24(fp)
 c0061d4:	e0bffa17 	ldw	r2,-24(fp)
 c0061d8:	103fad1e 	bne	r2,zero,c006090 <__alt_data_end+0xfc006090>
            *cout = CF(CF4A * cin[-s1] + CF4B * cin[0] + CF4C * cin[s1] + CF4D * cin[s2]);  cout += w;
            *cout = CF(CF4D * cin[-s1] + CF4C * cin[0] + CF4B * cin[s1] + CF4A * cin[s2]);  cout += w;
            cin += s1;
        }
        cin += s1;
 c0061dc:	e0bffc17 	ldw	r2,-16(fp)
 c0061e0:	e0fff717 	ldw	r3,-36(fp)
 c0061e4:	1885883a 	add	r2,r3,r2
 c0061e8:	e0bff715 	stw	r2,-36(fp)
        *cout = CF(CF3A * cin[0] + CF3B * cin[-s1] + CF3C * cin[-s2]);  cout += w;
 c0061ec:	e0bff717 	ldw	r2,-36(fp)
 c0061f0:	10800003 	ldbu	r2,0(r2)
 c0061f4:	10803fcc 	andi	r2,r2,255
 c0061f8:	10c00724 	muli	r3,r2,28
 c0061fc:	e0bffc17 	ldw	r2,-16(fp)
 c006200:	0085c83a 	sub	r2,zero,r2
 c006204:	e13ff717 	ldw	r4,-36(fp)
 c006208:	2085883a 	add	r2,r4,r2
 c00620c:	10800003 	ldbu	r2,0(r2)
 c006210:	10803fcc 	andi	r2,r2,255
 c006214:	10801b64 	muli	r2,r2,109
 c006218:	1887883a 	add	r3,r3,r2
 c00621c:	e0bffd17 	ldw	r2,-12(fp)
 c006220:	0085c83a 	sub	r2,zero,r2
 c006224:	e13ff717 	ldw	r4,-36(fp)
 c006228:	2085883a 	add	r2,r4,r2
 c00622c:	10800003 	ldbu	r2,0(r2)
 c006230:	10803fcc 	andi	r2,r2,255
 c006234:	10bffde4 	muli	r2,r2,-9
 c006238:	1885883a 	add	r2,r3,r2
 c00623c:	10801004 	addi	r2,r2,64
 c006240:	1005d1fa 	srai	r2,r2,7
 c006244:	1009883a 	mov	r4,r2
 c006248:	c0037680 	call	c003768 <njClip>
 c00624c:	1007883a 	mov	r3,r2
 c006250:	e0bff817 	ldw	r2,-32(fp)
 c006254:	10c00005 	stb	r3,0(r2)
 c006258:	e0bffb17 	ldw	r2,-20(fp)
 c00625c:	e0fff817 	ldw	r3,-32(fp)
 c006260:	1885883a 	add	r2,r3,r2
 c006264:	e0bff815 	stw	r2,-32(fp)
        *cout = CF(CF3X * cin[0] + CF3Y * cin[-s1] + CF3Z * cin[-s2]);  cout += w;
 c006268:	e0bff717 	ldw	r2,-36(fp)
 c00626c:	10800003 	ldbu	r2,0(r2)
 c006270:	10803fcc 	andi	r2,r2,255
 c006274:	10c01a24 	muli	r3,r2,104
 c006278:	e0bffc17 	ldw	r2,-16(fp)
 c00627c:	0085c83a 	sub	r2,zero,r2
 c006280:	e13ff717 	ldw	r4,-36(fp)
 c006284:	2085883a 	add	r2,r4,r2
 c006288:	10800003 	ldbu	r2,0(r2)
 c00628c:	10803fcc 	andi	r2,r2,255
 c006290:	108006e4 	muli	r2,r2,27
 c006294:	1887883a 	add	r3,r3,r2
 c006298:	e0bffd17 	ldw	r2,-12(fp)
 c00629c:	0085c83a 	sub	r2,zero,r2
 c0062a0:	e13ff717 	ldw	r4,-36(fp)
 c0062a4:	2085883a 	add	r2,r4,r2
 c0062a8:	10800003 	ldbu	r2,0(r2)
 c0062ac:	10803fcc 	andi	r2,r2,255
 c0062b0:	10bfff64 	muli	r2,r2,-3
 c0062b4:	1885883a 	add	r2,r3,r2
 c0062b8:	10801004 	addi	r2,r2,64
 c0062bc:	1005d1fa 	srai	r2,r2,7
 c0062c0:	1009883a 	mov	r4,r2
 c0062c4:	c0037680 	call	c003768 <njClip>
 c0062c8:	1007883a 	mov	r3,r2
 c0062cc:	e0bff817 	ldw	r2,-32(fp)
 c0062d0:	10c00005 	stb	r3,0(r2)
 c0062d4:	e0bffb17 	ldw	r2,-20(fp)
 c0062d8:	e0fff817 	ldw	r3,-32(fp)
 c0062dc:	1885883a 	add	r2,r3,r2
 c0062e0:	e0bff815 	stw	r2,-32(fp)
        *cout = CF(CF2A * cin[0] + CF2B * cin[-s1]);
 c0062e4:	e0bff717 	ldw	r2,-36(fp)
 c0062e8:	10800003 	ldbu	r2,0(r2)
 c0062ec:	10803fcc 	andi	r2,r2,255
 c0062f0:	10c022e4 	muli	r3,r2,139
 c0062f4:	e0bffc17 	ldw	r2,-16(fp)
 c0062f8:	0085c83a 	sub	r2,zero,r2
 c0062fc:	e13ff717 	ldw	r4,-36(fp)
 c006300:	2085883a 	add	r2,r4,r2
 c006304:	10800003 	ldbu	r2,0(r2)
 c006308:	10803fcc 	andi	r2,r2,255
 c00630c:	10bffd64 	muli	r2,r2,-11
 c006310:	1885883a 	add	r2,r3,r2
 c006314:	10801004 	addi	r2,r2,64
 c006318:	1005d1fa 	srai	r2,r2,7
 c00631c:	1009883a 	mov	r4,r2
 c006320:	c0037680 	call	c003768 <njClip>
 c006324:	1007883a 	mov	r3,r2
 c006328:	e0bff817 	ldw	r2,-32(fp)
 c00632c:	10c00005 	stb	r3,0(r2)
    const int w = c->width, s1 = c->stride, s2 = s1 + s1;
    unsigned char *out, *cin, *cout;
    int x, y;
    out = (unsigned char*) njAllocMem((c->width * c->height) << 1);
    if (!out) njThrow(NJ_OUT_OF_MEM);
    for (x = 0;  x < w;  ++x) {
 c006330:	e0bff917 	ldw	r2,-28(fp)
 c006334:	10800044 	addi	r2,r2,1
 c006338:	e0bff915 	stw	r2,-28(fp)
 c00633c:	e0fff917 	ldw	r3,-28(fp)
 c006340:	e0bffb17 	ldw	r2,-20(fp)
 c006344:	18bef016 	blt	r3,r2,c005f08 <__alt_data_end+0xfc005f08>
        cin += s1;
        *cout = CF(CF3A * cin[0] + CF3B * cin[-s1] + CF3C * cin[-s2]);  cout += w;
        *cout = CF(CF3X * cin[0] + CF3Y * cin[-s1] + CF3Z * cin[-s2]);  cout += w;
        *cout = CF(CF2A * cin[0] + CF2B * cin[-s1]);
    }
    c->height <<= 1;
 c006348:	e0bfff17 	ldw	r2,-4(fp)
 c00634c:	10800417 	ldw	r2,16(r2)
 c006350:	1085883a 	add	r2,r2,r2
 c006354:	1007883a 	mov	r3,r2
 c006358:	e0bfff17 	ldw	r2,-4(fp)
 c00635c:	10c00415 	stw	r3,16(r2)
    c->stride = c->width;
 c006360:	e0bfff17 	ldw	r2,-4(fp)
 c006364:	10c00317 	ldw	r3,12(r2)
 c006368:	e0bfff17 	ldw	r2,-4(fp)
 c00636c:	10c00515 	stw	r3,20(r2)
    njFreeMem((void*) c->pixels);
 c006370:	e0bfff17 	ldw	r2,-4(fp)
 c006374:	10800a17 	ldw	r2,40(r2)
 c006378:	1009883a 	mov	r4,r2
 c00637c:	c008dc00 	call	c008dc0 <free>
    c->pixels = out;
 c006380:	e0bfff17 	ldw	r2,-4(fp)
 c006384:	e0fffe17 	ldw	r3,-8(fp)
 c006388:	10c00a15 	stw	r3,40(r2)
}
 c00638c:	e037883a 	mov	sp,fp
 c006390:	dfc00117 	ldw	ra,4(sp)
 c006394:	df000017 	ldw	fp,0(sp)
 c006398:	dec00204 	addi	sp,sp,8
 c00639c:	f800283a 	ret

0c0063a0 <njConvert>:
    c->pixels = out;
}

#endif

NJ_INLINE void njConvert(void) {
 c0063a0:	deffef04 	addi	sp,sp,-68
 c0063a4:	dfc01015 	stw	ra,64(sp)
 c0063a8:	df000f15 	stw	fp,60(sp)
 c0063ac:	dcc00e15 	stw	r19,56(sp)
 c0063b0:	dc800d15 	stw	r18,52(sp)
 c0063b4:	dc400c15 	stw	r17,48(sp)
 c0063b8:	dc000b15 	stw	r16,44(sp)
 c0063bc:	df000f04 	addi	fp,sp,60
    int i;
    nj_component_t* c;
    for (i = 0, c = nj.comp;  i < nj.ncomp;  ++i, ++c) {
 c0063c0:	e03ff115 	stw	zero,-60(fp)
 c0063c4:	008300b4 	movhi	r2,3074
 c0063c8:	10976b04 	addi	r2,r2,23980
 c0063cc:	e0bff215 	stw	r2,-56(fp)
 c0063d0:	00003e06 	br	c0064cc <njConvert+0x12c>
        #if NJ_CHROMA_FILTER
            while ((c->width < nj.width) || (c->height < nj.height)) {
 c0063d4:	00001a06 	br	c006440 <njConvert+0xa0>
                if (c->width < nj.width) njUpsampleH(c);
 c0063d8:	e0bff217 	ldw	r2,-56(fp)
 c0063dc:	10c00317 	ldw	r3,12(r2)
 c0063e0:	008300b4 	movhi	r2,3074
 c0063e4:	10976004 	addi	r2,r2,23936
 c0063e8:	10800417 	ldw	r2,16(r2)
 c0063ec:	1880020e 	bge	r3,r2,c0063f8 <njConvert+0x58>
 c0063f0:	e13ff217 	ldw	r4,-56(fp)
 c0063f4:	c0059f00 	call	c0059f0 <njUpsampleH>
                njCheckError();
 c0063f8:	008300b4 	movhi	r2,3074
 c0063fc:	10976004 	addi	r2,r2,23936
 c006400:	10800017 	ldw	r2,0(r2)
 c006404:	10000126 	beq	r2,zero,c00640c <njConvert+0x6c>
 c006408:	0000e606 	br	c0067a4 <njConvert+0x404>
                if (c->height < nj.height) njUpsampleV(c);
 c00640c:	e0bff217 	ldw	r2,-56(fp)
 c006410:	10c00417 	ldw	r3,16(r2)
 c006414:	008300b4 	movhi	r2,3074
 c006418:	10976004 	addi	r2,r2,23936
 c00641c:	10800517 	ldw	r2,20(r2)
 c006420:	1880020e 	bge	r3,r2,c00642c <njConvert+0x8c>
 c006424:	e13ff217 	ldw	r4,-56(fp)
 c006428:	c005e840 	call	c005e84 <njUpsampleV>
                njCheckError();
 c00642c:	008300b4 	movhi	r2,3074
 c006430:	10976004 	addi	r2,r2,23936
 c006434:	10800017 	ldw	r2,0(r2)
 c006438:	10000126 	beq	r2,zero,c006440 <njConvert+0xa0>
 c00643c:	0000d906 	br	c0067a4 <njConvert+0x404>
NJ_INLINE void njConvert(void) {
    int i;
    nj_component_t* c;
    for (i = 0, c = nj.comp;  i < nj.ncomp;  ++i, ++c) {
        #if NJ_CHROMA_FILTER
            while ((c->width < nj.width) || (c->height < nj.height)) {
 c006440:	e0bff217 	ldw	r2,-56(fp)
 c006444:	10c00317 	ldw	r3,12(r2)
 c006448:	008300b4 	movhi	r2,3074
 c00644c:	10976004 	addi	r2,r2,23936
 c006450:	10800417 	ldw	r2,16(r2)
 c006454:	18bfe016 	blt	r3,r2,c0063d8 <__alt_data_end+0xfc0063d8>
 c006458:	e0bff217 	ldw	r2,-56(fp)
 c00645c:	10c00417 	ldw	r3,16(r2)
 c006460:	008300b4 	movhi	r2,3074
 c006464:	10976004 	addi	r2,r2,23936
 c006468:	10800517 	ldw	r2,20(r2)
 c00646c:	18bfda16 	blt	r3,r2,c0063d8 <__alt_data_end+0xfc0063d8>
            }
        #else
            if ((c->width < nj.width) || (c->height < nj.height))
                njUpsample(c);
        #endif
        if ((c->width < nj.width) || (c->height < nj.height)) njThrow(NJ_INTERNAL_ERR);
 c006470:	e0bff217 	ldw	r2,-56(fp)
 c006474:	10c00317 	ldw	r3,12(r2)
 c006478:	008300b4 	movhi	r2,3074
 c00647c:	10976004 	addi	r2,r2,23936
 c006480:	10800417 	ldw	r2,16(r2)
 c006484:	18800616 	blt	r3,r2,c0064a0 <njConvert+0x100>
 c006488:	e0bff217 	ldw	r2,-56(fp)
 c00648c:	10c00417 	ldw	r3,16(r2)
 c006490:	008300b4 	movhi	r2,3074
 c006494:	10976004 	addi	r2,r2,23936
 c006498:	10800517 	ldw	r2,20(r2)
 c00649c:	1880050e 	bge	r3,r2,c0064b4 <njConvert+0x114>
 c0064a0:	008300b4 	movhi	r2,3074
 c0064a4:	10976004 	addi	r2,r2,23936
 c0064a8:	00c00104 	movi	r3,4
 c0064ac:	10c00015 	stw	r3,0(r2)
 c0064b0:	0000bc06 	br	c0067a4 <njConvert+0x404>
#endif

NJ_INLINE void njConvert(void) {
    int i;
    nj_component_t* c;
    for (i = 0, c = nj.comp;  i < nj.ncomp;  ++i, ++c) {
 c0064b4:	e0bff117 	ldw	r2,-60(fp)
 c0064b8:	10800044 	addi	r2,r2,1
 c0064bc:	e0bff115 	stw	r2,-60(fp)
 c0064c0:	e0bff217 	ldw	r2,-56(fp)
 c0064c4:	10800b04 	addi	r2,r2,44
 c0064c8:	e0bff215 	stw	r2,-56(fp)
 c0064cc:	008300b4 	movhi	r2,3074
 c0064d0:	10976004 	addi	r2,r2,23936
 c0064d4:	10800a17 	ldw	r2,40(r2)
 c0064d8:	e0fff117 	ldw	r3,-60(fp)
 c0064dc:	18bfbd16 	blt	r3,r2,c0063d4 <__alt_data_end+0xfc0063d4>
            if ((c->width < nj.width) || (c->height < nj.height))
                njUpsample(c);
        #endif
        if ((c->width < nj.width) || (c->height < nj.height)) njThrow(NJ_INTERNAL_ERR);
    }
    if (nj.ncomp == 3) {
 c0064e0:	008300b4 	movhi	r2,3074
 c0064e4:	10976004 	addi	r2,r2,23936
 c0064e8:	10800a17 	ldw	r2,40(r2)
 c0064ec:	108000d8 	cmpnei	r2,r2,3
 c0064f0:	10006f1e 	bne	r2,zero,c0066b0 <njConvert+0x310>
        // convert to RGB
        int x, yy;
        unsigned char *prgb = nj.rgb;
 c0064f4:	00c300b4 	movhi	r3,3074
 c0064f8:	18d76004 	addi	r3,r3,23936
 c0064fc:	00800234 	movhi	r2,8
 c006500:	1080b104 	addi	r2,r2,708
 c006504:	1885883a 	add	r2,r3,r2
 c006508:	10800017 	ldw	r2,0(r2)
 c00650c:	e0bff515 	stw	r2,-44(fp)
        const unsigned char *py  = nj.comp[0].pixels;
 c006510:	008300b4 	movhi	r2,3074
 c006514:	10976004 	addi	r2,r2,23936
 c006518:	10801517 	ldw	r2,84(r2)
 c00651c:	e0bff615 	stw	r2,-40(fp)
        const unsigned char *pcb = nj.comp[1].pixels;
 c006520:	008300b4 	movhi	r2,3074
 c006524:	10976004 	addi	r2,r2,23936
 c006528:	10802017 	ldw	r2,128(r2)
 c00652c:	e0bff715 	stw	r2,-36(fp)
        const unsigned char *pcr = nj.comp[2].pixels;
 c006530:	008300b4 	movhi	r2,3074
 c006534:	10976004 	addi	r2,r2,23936
 c006538:	10802b17 	ldw	r2,172(r2)
 c00653c:	e0bff815 	stw	r2,-32(fp)
        for (yy = nj.height;  yy;  --yy) {
 c006540:	008300b4 	movhi	r2,3074
 c006544:	10976004 	addi	r2,r2,23936
 c006548:	10800517 	ldw	r2,20(r2)
 c00654c:	e0bff415 	stw	r2,-48(fp)
 c006550:	00005406 	br	c0066a4 <njConvert+0x304>
            for (x = 0;  x < nj.width;  ++x) {
 c006554:	e03ff315 	stw	zero,-52(fp)
 c006558:	00003506 	br	c006630 <njConvert+0x290>
                register int y = py[x] << 8;
 c00655c:	e0bff317 	ldw	r2,-52(fp)
 c006560:	e0fff617 	ldw	r3,-40(fp)
 c006564:	1885883a 	add	r2,r3,r2
 c006568:	10800003 	ldbu	r2,0(r2)
 c00656c:	10803fcc 	andi	r2,r2,255
 c006570:	1020923a 	slli	r16,r2,8
                register int cb = pcb[x] - 128;
 c006574:	e0bff317 	ldw	r2,-52(fp)
 c006578:	e0fff717 	ldw	r3,-36(fp)
 c00657c:	1885883a 	add	r2,r3,r2
 c006580:	10800003 	ldbu	r2,0(r2)
 c006584:	10803fcc 	andi	r2,r2,255
 c006588:	14bfe004 	addi	r18,r2,-128
                register int cr = pcr[x] - 128;
 c00658c:	e0bff317 	ldw	r2,-52(fp)
 c006590:	e0fff817 	ldw	r3,-32(fp)
 c006594:	1885883a 	add	r2,r3,r2
 c006598:	10800003 	ldbu	r2,0(r2)
 c00659c:	10803fcc 	andi	r2,r2,255
 c0065a0:	14ffe004 	addi	r19,r2,-128
                *prgb++ = njClip((y            + 359 * cr + 128) >> 8);
 c0065a4:	e47ff517 	ldw	r17,-44(fp)
 c0065a8:	88800044 	addi	r2,r17,1
 c0065ac:	e0bff515 	stw	r2,-44(fp)
 c0065b0:	988059e4 	muli	r2,r19,359
 c0065b4:	1405883a 	add	r2,r2,r16
 c0065b8:	10802004 	addi	r2,r2,128
 c0065bc:	1005d23a 	srai	r2,r2,8
 c0065c0:	1009883a 	mov	r4,r2
 c0065c4:	c0037680 	call	c003768 <njClip>
 c0065c8:	88800005 	stb	r2,0(r17)
                *prgb++ = njClip((y -  88 * cb - 183 * cr + 128) >> 8);
 c0065cc:	e47ff517 	ldw	r17,-44(fp)
 c0065d0:	88800044 	addi	r2,r17,1
 c0065d4:	e0bff515 	stw	r2,-44(fp)
 c0065d8:	90bfea24 	muli	r2,r18,-88
 c0065dc:	1407883a 	add	r3,r2,r16
 c0065e0:	98bfd264 	muli	r2,r19,-183
 c0065e4:	1885883a 	add	r2,r3,r2
 c0065e8:	10802004 	addi	r2,r2,128
 c0065ec:	1005d23a 	srai	r2,r2,8
 c0065f0:	1009883a 	mov	r4,r2
 c0065f4:	c0037680 	call	c003768 <njClip>
 c0065f8:	88800005 	stb	r2,0(r17)
                *prgb++ = njClip((y + 454 * cb            + 128) >> 8);
 c0065fc:	e47ff517 	ldw	r17,-44(fp)
 c006600:	88800044 	addi	r2,r17,1
 c006604:	e0bff515 	stw	r2,-44(fp)
 c006608:	908071a4 	muli	r2,r18,454
 c00660c:	1405883a 	add	r2,r2,r16
 c006610:	10802004 	addi	r2,r2,128
 c006614:	1005d23a 	srai	r2,r2,8
 c006618:	1009883a 	mov	r4,r2
 c00661c:	c0037680 	call	c003768 <njClip>
 c006620:	88800005 	stb	r2,0(r17)
        unsigned char *prgb = nj.rgb;
        const unsigned char *py  = nj.comp[0].pixels;
        const unsigned char *pcb = nj.comp[1].pixels;
        const unsigned char *pcr = nj.comp[2].pixels;
        for (yy = nj.height;  yy;  --yy) {
            for (x = 0;  x < nj.width;  ++x) {
 c006624:	e0bff317 	ldw	r2,-52(fp)
 c006628:	10800044 	addi	r2,r2,1
 c00662c:	e0bff315 	stw	r2,-52(fp)
 c006630:	008300b4 	movhi	r2,3074
 c006634:	10976004 	addi	r2,r2,23936
 c006638:	10800417 	ldw	r2,16(r2)
 c00663c:	e0fff317 	ldw	r3,-52(fp)
 c006640:	18bfc616 	blt	r3,r2,c00655c <__alt_data_end+0xfc00655c>
                register int cr = pcr[x] - 128;
                *prgb++ = njClip((y            + 359 * cr + 128) >> 8);
                *prgb++ = njClip((y -  88 * cb - 183 * cr + 128) >> 8);
                *prgb++ = njClip((y + 454 * cb            + 128) >> 8);
            }
            py += nj.comp[0].stride;
 c006644:	008300b4 	movhi	r2,3074
 c006648:	10976004 	addi	r2,r2,23936
 c00664c:	10801017 	ldw	r2,64(r2)
 c006650:	1007883a 	mov	r3,r2
 c006654:	e0bff617 	ldw	r2,-40(fp)
 c006658:	10c5883a 	add	r2,r2,r3
 c00665c:	e0bff615 	stw	r2,-40(fp)
            pcb += nj.comp[1].stride;
 c006660:	008300b4 	movhi	r2,3074
 c006664:	10976004 	addi	r2,r2,23936
 c006668:	10801b17 	ldw	r2,108(r2)
 c00666c:	1007883a 	mov	r3,r2
 c006670:	e0bff717 	ldw	r2,-36(fp)
 c006674:	10c5883a 	add	r2,r2,r3
 c006678:	e0bff715 	stw	r2,-36(fp)
            pcr += nj.comp[2].stride;
 c00667c:	008300b4 	movhi	r2,3074
 c006680:	10976004 	addi	r2,r2,23936
 c006684:	10802617 	ldw	r2,152(r2)
 c006688:	1007883a 	mov	r3,r2
 c00668c:	e0bff817 	ldw	r2,-32(fp)
 c006690:	10c5883a 	add	r2,r2,r3
 c006694:	e0bff815 	stw	r2,-32(fp)
        int x, yy;
        unsigned char *prgb = nj.rgb;
        const unsigned char *py  = nj.comp[0].pixels;
        const unsigned char *pcb = nj.comp[1].pixels;
        const unsigned char *pcr = nj.comp[2].pixels;
        for (yy = nj.height;  yy;  --yy) {
 c006698:	e0bff417 	ldw	r2,-48(fp)
 c00669c:	10bfffc4 	addi	r2,r2,-1
 c0066a0:	e0bff415 	stw	r2,-48(fp)
 c0066a4:	e0bff417 	ldw	r2,-48(fp)
 c0066a8:	103faa1e 	bne	r2,zero,c006554 <__alt_data_end+0xfc006554>
 c0066ac:	00003d06 	br	c0067a4 <njConvert+0x404>
            }
            py += nj.comp[0].stride;
            pcb += nj.comp[1].stride;
            pcr += nj.comp[2].stride;
        }
    } else if (nj.comp[0].width != nj.comp[0].stride) {
 c0066b0:	008300b4 	movhi	r2,3074
 c0066b4:	10976004 	addi	r2,r2,23936
 c0066b8:	10c00e17 	ldw	r3,56(r2)
 c0066bc:	008300b4 	movhi	r2,3074
 c0066c0:	10976004 	addi	r2,r2,23936
 c0066c4:	10801017 	ldw	r2,64(r2)
 c0066c8:	18803626 	beq	r3,r2,c0067a4 <njConvert+0x404>
        // grayscale -> only remove stride
        unsigned char *pin = &nj.comp[0].pixels[nj.comp[0].stride];
 c0066cc:	008300b4 	movhi	r2,3074
 c0066d0:	10976004 	addi	r2,r2,23936
 c0066d4:	10c01517 	ldw	r3,84(r2)
 c0066d8:	008300b4 	movhi	r2,3074
 c0066dc:	10976004 	addi	r2,r2,23936
 c0066e0:	10801017 	ldw	r2,64(r2)
 c0066e4:	1885883a 	add	r2,r3,r2
 c0066e8:	e0bff915 	stw	r2,-28(fp)
        unsigned char *pout = &nj.comp[0].pixels[nj.comp[0].width];
 c0066ec:	008300b4 	movhi	r2,3074
 c0066f0:	10976004 	addi	r2,r2,23936
 c0066f4:	10c01517 	ldw	r3,84(r2)
 c0066f8:	008300b4 	movhi	r2,3074
 c0066fc:	10976004 	addi	r2,r2,23936
 c006700:	10800e17 	ldw	r2,56(r2)
 c006704:	1885883a 	add	r2,r3,r2
 c006708:	e0bffa15 	stw	r2,-24(fp)
        int y;
        for (y = nj.comp[0].height - 1;  y;  --y) {
 c00670c:	008300b4 	movhi	r2,3074
 c006710:	10976004 	addi	r2,r2,23936
 c006714:	10800f17 	ldw	r2,60(r2)
 c006718:	10bfffc4 	addi	r2,r2,-1
 c00671c:	e0bffb15 	stw	r2,-20(fp)
 c006720:	00001806 	br	c006784 <njConvert+0x3e4>
            njCopyMem(pout, pin, nj.comp[0].width);
 c006724:	008300b4 	movhi	r2,3074
 c006728:	10976004 	addi	r2,r2,23936
 c00672c:	10800e17 	ldw	r2,56(r2)
 c006730:	e13ffa17 	ldw	r4,-24(fp)
 c006734:	e17ff917 	ldw	r5,-28(fp)
 c006738:	100d883a 	mov	r6,r2
 c00673c:	c00957c0 	call	c00957c <memcpy>
            pin += nj.comp[0].stride;
 c006740:	008300b4 	movhi	r2,3074
 c006744:	10976004 	addi	r2,r2,23936
 c006748:	10801017 	ldw	r2,64(r2)
 c00674c:	1007883a 	mov	r3,r2
 c006750:	e0bff917 	ldw	r2,-28(fp)
 c006754:	10c5883a 	add	r2,r2,r3
 c006758:	e0bff915 	stw	r2,-28(fp)
            pout += nj.comp[0].width;
 c00675c:	008300b4 	movhi	r2,3074
 c006760:	10976004 	addi	r2,r2,23936
 c006764:	10800e17 	ldw	r2,56(r2)
 c006768:	1007883a 	mov	r3,r2
 c00676c:	e0bffa17 	ldw	r2,-24(fp)
 c006770:	10c5883a 	add	r2,r2,r3
 c006774:	e0bffa15 	stw	r2,-24(fp)
    } else if (nj.comp[0].width != nj.comp[0].stride) {
        // grayscale -> only remove stride
        unsigned char *pin = &nj.comp[0].pixels[nj.comp[0].stride];
        unsigned char *pout = &nj.comp[0].pixels[nj.comp[0].width];
        int y;
        for (y = nj.comp[0].height - 1;  y;  --y) {
 c006778:	e0bffb17 	ldw	r2,-20(fp)
 c00677c:	10bfffc4 	addi	r2,r2,-1
 c006780:	e0bffb15 	stw	r2,-20(fp)
 c006784:	e0bffb17 	ldw	r2,-20(fp)
 c006788:	103fe61e 	bne	r2,zero,c006724 <__alt_data_end+0xfc006724>
            njCopyMem(pout, pin, nj.comp[0].width);
            pin += nj.comp[0].stride;
            pout += nj.comp[0].width;
        }
        nj.comp[0].stride = nj.comp[0].width;
 c00678c:	008300b4 	movhi	r2,3074
 c006790:	10976004 	addi	r2,r2,23936
 c006794:	10c00e17 	ldw	r3,56(r2)
 c006798:	008300b4 	movhi	r2,3074
 c00679c:	10976004 	addi	r2,r2,23936
 c0067a0:	10c01015 	stw	r3,64(r2)
    }
}
 c0067a4:	e6fffc04 	addi	sp,fp,-16
 c0067a8:	dfc00517 	ldw	ra,20(sp)
 c0067ac:	df000417 	ldw	fp,16(sp)
 c0067b0:	dcc00317 	ldw	r19,12(sp)
 c0067b4:	dc800217 	ldw	r18,8(sp)
 c0067b8:	dc400117 	ldw	r17,4(sp)
 c0067bc:	dc000017 	ldw	r16,0(sp)
 c0067c0:	dec00604 	addi	sp,sp,24
 c0067c4:	f800283a 	ret

0c0067c8 <njInit>:

void njInit(void) {
 c0067c8:	defffe04 	addi	sp,sp,-8
 c0067cc:	dfc00115 	stw	ra,4(sp)
 c0067d0:	df000015 	stw	fp,0(sp)
 c0067d4:	d839883a 	mov	fp,sp
    njFillMem(&nj, 0, sizeof(nj_context_t));
 c0067d8:	010300b4 	movhi	r4,3074
 c0067dc:	21176004 	addi	r4,r4,23936
 c0067e0:	000b883a 	mov	r5,zero
 c0067e4:	01800234 	movhi	r6,8
 c0067e8:	3180b204 	addi	r6,r6,712
 c0067ec:	c0096b40 	call	c0096b4 <memset>
}
 c0067f0:	e037883a 	mov	sp,fp
 c0067f4:	dfc00117 	ldw	ra,4(sp)
 c0067f8:	df000017 	ldw	fp,0(sp)
 c0067fc:	dec00204 	addi	sp,sp,8
 c006800:	f800283a 	ret

0c006804 <njDone>:

void njDone(void) {
 c006804:	defffd04 	addi	sp,sp,-12
 c006808:	dfc00215 	stw	ra,8(sp)
 c00680c:	df000115 	stw	fp,4(sp)
 c006810:	df000104 	addi	fp,sp,4
    int i;
    for (i = 0;  i < 3;  ++i)
 c006814:	e03fff15 	stw	zero,-4(fp)
 c006818:	00001406 	br	c00686c <njDone+0x68>
        if (nj.comp[i].pixels) njFreeMem((void*) nj.comp[i].pixels);
 c00681c:	008300b4 	movhi	r2,3074
 c006820:	10976004 	addi	r2,r2,23936
 c006824:	e0ffff17 	ldw	r3,-4(fp)
 c006828:	18c00b24 	muli	r3,r3,44
 c00682c:	10c5883a 	add	r2,r2,r3
 c006830:	10801504 	addi	r2,r2,84
 c006834:	10800017 	ldw	r2,0(r2)
 c006838:	10000926 	beq	r2,zero,c006860 <njDone+0x5c>
 c00683c:	008300b4 	movhi	r2,3074
 c006840:	10976004 	addi	r2,r2,23936
 c006844:	e0ffff17 	ldw	r3,-4(fp)
 c006848:	18c00b24 	muli	r3,r3,44
 c00684c:	10c5883a 	add	r2,r2,r3
 c006850:	10801504 	addi	r2,r2,84
 c006854:	10800017 	ldw	r2,0(r2)
 c006858:	1009883a 	mov	r4,r2
 c00685c:	c008dc00 	call	c008dc0 <free>
    njFillMem(&nj, 0, sizeof(nj_context_t));
}

void njDone(void) {
    int i;
    for (i = 0;  i < 3;  ++i)
 c006860:	e0bfff17 	ldw	r2,-4(fp)
 c006864:	10800044 	addi	r2,r2,1
 c006868:	e0bfff15 	stw	r2,-4(fp)
 c00686c:	e0bfff17 	ldw	r2,-4(fp)
 c006870:	108000d0 	cmplti	r2,r2,3
 c006874:	103fe91e 	bne	r2,zero,c00681c <__alt_data_end+0xfc00681c>
        if (nj.comp[i].pixels) njFreeMem((void*) nj.comp[i].pixels);
    if (nj.rgb) njFreeMem((void*) nj.rgb);
 c006878:	00c300b4 	movhi	r3,3074
 c00687c:	18d76004 	addi	r3,r3,23936
 c006880:	00800234 	movhi	r2,8
 c006884:	1080b104 	addi	r2,r2,708
 c006888:	1885883a 	add	r2,r3,r2
 c00688c:	10800017 	ldw	r2,0(r2)
 c006890:	10000826 	beq	r2,zero,c0068b4 <njDone+0xb0>
 c006894:	00c300b4 	movhi	r3,3074
 c006898:	18d76004 	addi	r3,r3,23936
 c00689c:	00800234 	movhi	r2,8
 c0068a0:	1080b104 	addi	r2,r2,708
 c0068a4:	1885883a 	add	r2,r3,r2
 c0068a8:	10800017 	ldw	r2,0(r2)
 c0068ac:	1009883a 	mov	r4,r2
 c0068b0:	c008dc00 	call	c008dc0 <free>
    njInit();
 c0068b4:	c0067c80 	call	c0067c8 <njInit>
}
 c0068b8:	e037883a 	mov	sp,fp
 c0068bc:	dfc00117 	ldw	ra,4(sp)
 c0068c0:	df000017 	ldw	fp,0(sp)
 c0068c4:	dec00204 	addi	sp,sp,8
 c0068c8:	f800283a 	ret

0c0068cc <njDecode>:

nj_result_t njDecode(const void* jpeg, const int size) {
 c0068cc:	defffc04 	addi	sp,sp,-16
 c0068d0:	dfc00315 	stw	ra,12(sp)
 c0068d4:	df000215 	stw	fp,8(sp)
 c0068d8:	df000204 	addi	fp,sp,8
 c0068dc:	e13ffe15 	stw	r4,-8(fp)
 c0068e0:	e17fff15 	stw	r5,-4(fp)
    njDone();
 c0068e4:	c0068040 	call	c006804 <njDone>
    nj.pos = (const unsigned char*) jpeg;
 c0068e8:	008300b4 	movhi	r2,3074
 c0068ec:	10976004 	addi	r2,r2,23936
 c0068f0:	e0fffe17 	ldw	r3,-8(fp)
 c0068f4:	10c00115 	stw	r3,4(r2)
    nj.size = size & 0x7FFFFFFF;
 c0068f8:	e0ffff17 	ldw	r3,-4(fp)
 c0068fc:	00a00034 	movhi	r2,32768
 c006900:	10bfffc4 	addi	r2,r2,-1
 c006904:	1886703a 	and	r3,r3,r2
 c006908:	008300b4 	movhi	r2,3074
 c00690c:	10976004 	addi	r2,r2,23936
 c006910:	10c00215 	stw	r3,8(r2)
    if (nj.size < 2) return NJ_NO_JPEG;
 c006914:	008300b4 	movhi	r2,3074
 c006918:	10976004 	addi	r2,r2,23936
 c00691c:	10800217 	ldw	r2,8(r2)
 c006920:	10800088 	cmpgei	r2,r2,2
 c006924:	1000021e 	bne	r2,zero,c006930 <njDecode+0x64>
 c006928:	00800044 	movi	r2,1
 c00692c:	00006806 	br	c006ad0 <njDecode+0x204>
    if ((nj.pos[0] ^ 0xFF) | (nj.pos[1] ^ 0xD8)) return NJ_NO_JPEG;
 c006930:	008300b4 	movhi	r2,3074
 c006934:	10976004 	addi	r2,r2,23936
 c006938:	10800117 	ldw	r2,4(r2)
 c00693c:	10800003 	ldbu	r2,0(r2)
 c006940:	0084303a 	nor	r2,zero,r2
 c006944:	1009883a 	mov	r4,r2
 c006948:	008300b4 	movhi	r2,3074
 c00694c:	10976004 	addi	r2,r2,23936
 c006950:	10800117 	ldw	r2,4(r2)
 c006954:	10800044 	addi	r2,r2,1
 c006958:	10c00003 	ldbu	r3,0(r2)
 c00695c:	00bff604 	movi	r2,-40
 c006960:	1884f03a 	xor	r2,r3,r2
 c006964:	2084b03a 	or	r2,r4,r2
 c006968:	10803fcc 	andi	r2,r2,255
 c00696c:	10000226 	beq	r2,zero,c006978 <njDecode+0xac>
 c006970:	00800044 	movi	r2,1
 c006974:	00005606 	br	c006ad0 <njDecode+0x204>
    njSkip(2);
 c006978:	01000084 	movi	r4,2
 c00697c:	c00442c0 	call	c00442c <njSkip>
    while (!nj.error) {
 c006980:	00003f06 	br	c006a80 <njDecode+0x1b4>
        if ((nj.size < 2) || (nj.pos[0] != 0xFF)) return NJ_SYNTAX_ERROR;
 c006984:	008300b4 	movhi	r2,3074
 c006988:	10976004 	addi	r2,r2,23936
 c00698c:	10800217 	ldw	r2,8(r2)
 c006990:	10800090 	cmplti	r2,r2,2
 c006994:	1000071e 	bne	r2,zero,c0069b4 <njDecode+0xe8>
 c006998:	008300b4 	movhi	r2,3074
 c00699c:	10976004 	addi	r2,r2,23936
 c0069a0:	10800117 	ldw	r2,4(r2)
 c0069a4:	10800003 	ldbu	r2,0(r2)
 c0069a8:	10803fcc 	andi	r2,r2,255
 c0069ac:	10803fe0 	cmpeqi	r2,r2,255
 c0069b0:	1000021e 	bne	r2,zero,c0069bc <njDecode+0xf0>
 c0069b4:	00800144 	movi	r2,5
 c0069b8:	00004506 	br	c006ad0 <njDecode+0x204>
        njSkip(2);
 c0069bc:	01000084 	movi	r4,2
 c0069c0:	c00442c0 	call	c00442c <njSkip>
        switch (nj.pos[-1]) {
 c0069c4:	008300b4 	movhi	r2,3074
 c0069c8:	10976004 	addi	r2,r2,23936
 c0069cc:	10800117 	ldw	r2,4(r2)
 c0069d0:	10bfffc4 	addi	r2,r2,-1
 c0069d4:	10800003 	ldbu	r2,0(r2)
 c0069d8:	10803fcc 	andi	r2,r2,255
 c0069dc:	10c036a0 	cmpeqi	r3,r2,218
 c0069e0:	1800161e 	bne	r3,zero,c006a3c <njDecode+0x170>
 c0069e4:	10c036c8 	cmpgei	r3,r2,219
 c0069e8:	1800051e 	bne	r3,zero,c006a00 <njDecode+0x134>
 c0069ec:	10c03020 	cmpeqi	r3,r2,192
 c0069f0:	18000a1e 	bne	r3,zero,c006a1c <njDecode+0x150>
 c0069f4:	10803120 	cmpeqi	r2,r2,196
 c0069f8:	10000a1e 	bne	r2,zero,c006a24 <njDecode+0x158>
 c0069fc:	00001306 	br	c006a4c <njDecode+0x180>
 c006a00:	10c03760 	cmpeqi	r3,r2,221
 c006a04:	18000b1e 	bne	r3,zero,c006a34 <njDecode+0x168>
 c006a08:	10c03fa0 	cmpeqi	r3,r2,254
 c006a0c:	18000d1e 	bne	r3,zero,c006a44 <njDecode+0x178>
 c006a10:	108036e0 	cmpeqi	r2,r2,219
 c006a14:	1000051e 	bne	r2,zero,c006a2c <njDecode+0x160>
 c006a18:	00000c06 	br	c006a4c <njDecode+0x180>
            case 0xC0: njDecodeSOF();  break;
 c006a1c:	c0045f80 	call	c0045f8 <njDecodeSOF>
 c006a20:	00001706 	br	c006a80 <njDecode+0x1b4>
            case 0xC4: njDecodeDHT();  break;
 c006a24:	c004cbc0 	call	c004cbc <njDecodeDHT>
 c006a28:	00001506 	br	c006a80 <njDecode+0x1b4>
            case 0xDB: njDecodeDQT();  break;
 c006a2c:	c004fa00 	call	c004fa0 <njDecodeDQT>
 c006a30:	00001306 	br	c006a80 <njDecode+0x1b4>
            case 0xDD: njDecodeDRI();  break;
 c006a34:	c0050e80 	call	c0050e8 <njDecodeDRI>
 c006a38:	00001106 	br	c006a80 <njDecode+0x1b4>
            case 0xDA: njDecodeScan(); break;
 c006a3c:	c0055600 	call	c005560 <njDecodeScan>
 c006a40:	00000f06 	br	c006a80 <njDecode+0x1b4>
            case 0xFE: njSkipMarker(); break;
 c006a44:	c0045bc0 	call	c0045bc <njSkipMarker>
 c006a48:	00000d06 	br	c006a80 <njDecode+0x1b4>
            default:
                if ((nj.pos[-1] & 0xF0) == 0xE0)
 c006a4c:	008300b4 	movhi	r2,3074
 c006a50:	10976004 	addi	r2,r2,23936
 c006a54:	10800117 	ldw	r2,4(r2)
 c006a58:	10bfffc4 	addi	r2,r2,-1
 c006a5c:	10800003 	ldbu	r2,0(r2)
 c006a60:	10803fcc 	andi	r2,r2,255
 c006a64:	10803c0c 	andi	r2,r2,240
 c006a68:	10803818 	cmpnei	r2,r2,224
 c006a6c:	1000021e 	bne	r2,zero,c006a78 <njDecode+0x1ac>
                    njSkipMarker();
 c006a70:	c0045bc0 	call	c0045bc <njSkipMarker>
 c006a74:	00000206 	br	c006a80 <njDecode+0x1b4>
                else
                    return NJ_UNSUPPORTED;
 c006a78:	00800084 	movi	r2,2
 c006a7c:	00001406 	br	c006ad0 <njDecode+0x204>
    nj.pos = (const unsigned char*) jpeg;
    nj.size = size & 0x7FFFFFFF;
    if (nj.size < 2) return NJ_NO_JPEG;
    if ((nj.pos[0] ^ 0xFF) | (nj.pos[1] ^ 0xD8)) return NJ_NO_JPEG;
    njSkip(2);
    while (!nj.error) {
 c006a80:	008300b4 	movhi	r2,3074
 c006a84:	10976004 	addi	r2,r2,23936
 c006a88:	10800017 	ldw	r2,0(r2)
 c006a8c:	103fbd26 	beq	r2,zero,c006984 <__alt_data_end+0xfc006984>
                    njSkipMarker();
                else
                    return NJ_UNSUPPORTED;
        }
    }
    if (nj.error != __NJ_FINISHED) return nj.error;
 c006a90:	008300b4 	movhi	r2,3074
 c006a94:	10976004 	addi	r2,r2,23936
 c006a98:	10800017 	ldw	r2,0(r2)
 c006a9c:	108001a0 	cmpeqi	r2,r2,6
 c006aa0:	1000041e 	bne	r2,zero,c006ab4 <njDecode+0x1e8>
 c006aa4:	008300b4 	movhi	r2,3074
 c006aa8:	10976004 	addi	r2,r2,23936
 c006aac:	10800017 	ldw	r2,0(r2)
 c006ab0:	00000706 	br	c006ad0 <njDecode+0x204>
    nj.error = NJ_OK;
 c006ab4:	008300b4 	movhi	r2,3074
 c006ab8:	10976004 	addi	r2,r2,23936
 c006abc:	10000015 	stw	zero,0(r2)
    njConvert();
 c006ac0:	c0063a00 	call	c0063a0 <njConvert>
    return nj.error;
 c006ac4:	008300b4 	movhi	r2,3074
 c006ac8:	10976004 	addi	r2,r2,23936
 c006acc:	10800017 	ldw	r2,0(r2)
}
 c006ad0:	e037883a 	mov	sp,fp
 c006ad4:	dfc00117 	ldw	ra,4(sp)
 c006ad8:	df000017 	ldw	fp,0(sp)
 c006adc:	dec00204 	addi	sp,sp,8
 c006ae0:	f800283a 	ret

0c006ae4 <njGetWidth>:

int njGetWidth(void)            { return nj.width; }
 c006ae4:	deffff04 	addi	sp,sp,-4
 c006ae8:	df000015 	stw	fp,0(sp)
 c006aec:	d839883a 	mov	fp,sp
 c006af0:	008300b4 	movhi	r2,3074
 c006af4:	10976004 	addi	r2,r2,23936
 c006af8:	10800417 	ldw	r2,16(r2)
 c006afc:	e037883a 	mov	sp,fp
 c006b00:	df000017 	ldw	fp,0(sp)
 c006b04:	dec00104 	addi	sp,sp,4
 c006b08:	f800283a 	ret

0c006b0c <njGetHeight>:
int njGetHeight(void)           { return nj.height; }
 c006b0c:	deffff04 	addi	sp,sp,-4
 c006b10:	df000015 	stw	fp,0(sp)
 c006b14:	d839883a 	mov	fp,sp
 c006b18:	008300b4 	movhi	r2,3074
 c006b1c:	10976004 	addi	r2,r2,23936
 c006b20:	10800517 	ldw	r2,20(r2)
 c006b24:	e037883a 	mov	sp,fp
 c006b28:	df000017 	ldw	fp,0(sp)
 c006b2c:	dec00104 	addi	sp,sp,4
 c006b30:	f800283a 	ret

0c006b34 <njIsColor>:
int njIsColor(void)             { return (nj.ncomp != 1); }
 c006b34:	deffff04 	addi	sp,sp,-4
 c006b38:	df000015 	stw	fp,0(sp)
 c006b3c:	d839883a 	mov	fp,sp
 c006b40:	008300b4 	movhi	r2,3074
 c006b44:	10976004 	addi	r2,r2,23936
 c006b48:	10800a17 	ldw	r2,40(r2)
 c006b4c:	10800058 	cmpnei	r2,r2,1
 c006b50:	10803fcc 	andi	r2,r2,255
 c006b54:	e037883a 	mov	sp,fp
 c006b58:	df000017 	ldw	fp,0(sp)
 c006b5c:	dec00104 	addi	sp,sp,4
 c006b60:	f800283a 	ret

0c006b64 <njGetImage>:
unsigned char* njGetImage(void) { return (nj.ncomp == 1) ? nj.comp[0].pixels : nj.rgb; }
 c006b64:	deffff04 	addi	sp,sp,-4
 c006b68:	df000015 	stw	fp,0(sp)
 c006b6c:	d839883a 	mov	fp,sp
 c006b70:	008300b4 	movhi	r2,3074
 c006b74:	10976004 	addi	r2,r2,23936
 c006b78:	10800a17 	ldw	r2,40(r2)
 c006b7c:	10800058 	cmpnei	r2,r2,1
 c006b80:	1000041e 	bne	r2,zero,c006b94 <njGetImage+0x30>
 c006b84:	008300b4 	movhi	r2,3074
 c006b88:	10976004 	addi	r2,r2,23936
 c006b8c:	10801517 	ldw	r2,84(r2)
 c006b90:	00000606 	br	c006bac <njGetImage+0x48>
 c006b94:	00c300b4 	movhi	r3,3074
 c006b98:	18d76004 	addi	r3,r3,23936
 c006b9c:	00800234 	movhi	r2,8
 c006ba0:	1080b104 	addi	r2,r2,708
 c006ba4:	1885883a 	add	r2,r3,r2
 c006ba8:	10800017 	ldw	r2,0(r2)
 c006bac:	e037883a 	mov	sp,fp
 c006bb0:	df000017 	ldw	fp,0(sp)
 c006bb4:	dec00104 	addi	sp,sp,4
 c006bb8:	f800283a 	ret

0c006bbc <njGetImageSize>:
int njGetImageSize(void)        { return nj.width * nj.height * nj.ncomp; }
 c006bbc:	deffff04 	addi	sp,sp,-4
 c006bc0:	df000015 	stw	fp,0(sp)
 c006bc4:	d839883a 	mov	fp,sp
 c006bc8:	008300b4 	movhi	r2,3074
 c006bcc:	10976004 	addi	r2,r2,23936
 c006bd0:	10c00417 	ldw	r3,16(r2)
 c006bd4:	008300b4 	movhi	r2,3074
 c006bd8:	10976004 	addi	r2,r2,23936
 c006bdc:	10800517 	ldw	r2,20(r2)
 c006be0:	1887383a 	mul	r3,r3,r2
 c006be4:	008300b4 	movhi	r2,3074
 c006be8:	10976004 	addi	r2,r2,23936
 c006bec:	10800a17 	ldw	r2,40(r2)
 c006bf0:	1885383a 	mul	r2,r3,r2
 c006bf4:	e037883a 	mov	sp,fp
 c006bf8:	df000017 	ldw	fp,0(sp)
 c006bfc:	dec00104 	addi	sp,sp,4
 c006c00:	f800283a 	ret

0c006c04 <cam_unit_test>:


#define _NJ_INCLUDE_HEADER_ONLY

int cam_unit_test(void)
{
 c006c04:	defffe04 	addi	sp,sp,-8
 c006c08:	dfc00115 	stw	ra,4(sp)
 c006c0c:	df000015 	stw	fp,0(sp)
 c006c10:	d839883a 	mov	fp,sp
 c006c14:	023ffef4 	movhi	r8,65531
 c006c18:	4213f304 	addi	r8,r8,20428
 c006c1c:	da37883a 	add	sp,sp,r8
    njInit();
 c006c20:	c0067c80 	call	c0067c8 <njInit>
    init_palette();
 c006c24:	c0026c40 	call	c0026c4 <init_palette>
    camera_reset();
 c006c28:	c0007300 	call	c000730 <camera_reset>


    cam_init();
 c006c2c:	c0004880 	call	c000488 <cam_init>
    unsigned char y = get_image_resolution();
 c006c30:	c0004d40 	call	c0004d4 <get_image_resolution>
 c006c34:	00fffef4 	movhi	r3,65531
 c006c38:	18d3f704 	addi	r3,r3,20444
 c006c3c:	1f07883a 	add	r3,r3,fp
 c006c40:	18800005 	stb	r2,0(r3)
    printf("Data is: [%02x]\n", y);
 c006c44:	013ffef4 	movhi	r4,65531
 c006c48:	2113f704 	addi	r4,r4,20444
 c006c4c:	2709883a 	add	r4,r4,fp
 c006c50:	20800003 	ldbu	r2,0(r4)
 c006c54:	010300b4 	movhi	r4,3074
 c006c58:	21087b04 	addi	r4,r4,8684
 c006c5c:	100b883a 	mov	r5,r2
 c006c60:	c0098040 	call	c009804 <printf>
    y = set_image_resolution(FRAME_640x480);
 c006c64:	0009883a 	mov	r4,zero
 c006c68:	c0005600 	call	c000560 <set_image_resolution>
 c006c6c:	017ffef4 	movhi	r5,65531
 c006c70:	2953f704 	addi	r5,r5,20444
 c006c74:	2f0b883a 	add	r5,r5,fp
 c006c78:	28800005 	stb	r2,0(r5)
    printf("Set returned : [%02x]\n", y);
 c006c7c:	00fffef4 	movhi	r3,65531
 c006c80:	18d3f704 	addi	r3,r3,20444
 c006c84:	1f07883a 	add	r3,r3,fp
 c006c88:	18800003 	ldbu	r2,0(r3)
 c006c8c:	010300b4 	movhi	r4,3074
 c006c90:	21088004 	addi	r4,r4,8704
 c006c94:	100b883a 	mov	r5,r2
 c006c98:	c0098040 	call	c009804 <printf>
    y = get_image_resolution();
 c006c9c:	c0004d40 	call	c0004d4 <get_image_resolution>
 c006ca0:	013ffef4 	movhi	r4,65531
 c006ca4:	2113f704 	addi	r4,r4,20444
 c006ca8:	2709883a 	add	r4,r4,fp
 c006cac:	20800005 	stb	r2,0(r4)
    printf("Data is: [%02x]\n", y);
 c006cb0:	017ffef4 	movhi	r5,65531
 c006cb4:	2953f704 	addi	r5,r5,20444
 c006cb8:	2f0b883a 	add	r5,r5,fp
 c006cbc:	28800003 	ldbu	r2,0(r5)
 c006cc0:	010300b4 	movhi	r4,3074
 c006cc4:	21087b04 	addi	r4,r4,8684
 c006cc8:	100b883a 	mov	r5,r2
 c006ccc:	c0098040 	call	c009804 <printf>

    take_picture();
 c006cd0:	c0005dc0 	call	c0005dc <take_picture>
    uint32_t size = frame_length();
 c006cd4:	c00063c0 	call	c00063c <frame_length>
 c006cd8:	00fffef4 	movhi	r3,65531
 c006cdc:	18d3f304 	addi	r3,r3,20428
 c006ce0:	1f07883a 	add	r3,r3,fp
 c006ce4:	18800015 	stw	r2,0(r3)
    uint32_t len = size;
 c006ce8:	013ffef4 	movhi	r4,65531
 c006cec:	2113f304 	addi	r4,r4,20428
 c006cf0:	2709883a 	add	r4,r4,fp
 c006cf4:	20800017 	ldw	r2,0(r4)
 c006cf8:	017ffef4 	movhi	r5,65531
 c006cfc:	2953f804 	addi	r5,r5,20448
 c006d00:	2f0b883a 	add	r5,r5,fp
 c006d04:	28800015 	stw	r2,0(r5)
    printf("Frame size: %ld\n", size);
 c006d08:	010300b4 	movhi	r4,3074
 c006d0c:	21088604 	addi	r4,r4,8728
 c006d10:	00bffef4 	movhi	r2,65531
 c006d14:	1093f304 	addi	r2,r2,20428
 c006d18:	1705883a 	add	r2,r2,fp
 c006d1c:	11400017 	ldw	r5,0(r2)
 c006d20:	c0098040 	call	c009804 <printf>
//  fprintf(fp, "This is testing for fprintf...\n");
//  fputs("This is testing for fputs...\n", fp);
//  fclose(fp);
//  printf("done");

    int current_index = 0;
 c006d24:	00fffef4 	movhi	r3,65531
 c006d28:	18d3f404 	addi	r3,r3,20432
 c006d2c:	1f07883a 	add	r3,r3,fp
 c006d30:	18000015 	stw	zero,0(r3)
    int i;
    uint8_t *jpeg_buffer = malloc(sizeof(uint8_t)*size);
 c006d34:	017ffef4 	movhi	r5,65531
 c006d38:	2953f304 	addi	r5,r5,20428
 c006d3c:	2f0b883a 	add	r5,r5,fp
 c006d40:	29000017 	ldw	r4,0(r5)
 c006d44:	c008dac0 	call	c008dac <malloc>
 c006d48:	00fffef4 	movhi	r3,65531
 c006d4c:	18d3f904 	addi	r3,r3,20452
 c006d50:	1f07883a 	add	r3,r3,fp
 c006d54:	18800015 	stw	r2,0(r3)
    uint8_t *buffer;

    while (size > 64) {
 c006d58:	00004606 	br	c006e74 <cam_unit_test+0x270>
        // read 32 bytes at a time;
        buffer = read_picture(64);
 c006d5c:	01001004 	movi	r4,64
 c006d60:	c0007740 	call	c000774 <read_picture>
 c006d64:	013ffef4 	movhi	r4,65531
 c006d68:	2113fa04 	addi	r4,r4,20456
 c006d6c:	2709883a 	add	r4,r4,fp
 c006d70:	20800015 	stw	r2,0(r4)
        size -= 64;
 c006d74:	017ffef4 	movhi	r5,65531
 c006d78:	2953f304 	addi	r5,r5,20428
 c006d7c:	2f0b883a 	add	r5,r5,fp
 c006d80:	28800017 	ldw	r2,0(r5)
 c006d84:	10bff004 	addi	r2,r2,-64
 c006d88:	00fffef4 	movhi	r3,65531
 c006d8c:	18d3f304 	addi	r3,r3,20428
 c006d90:	1f07883a 	add	r3,r3,fp
 c006d94:	18800015 	stw	r2,0(r3)
        for(i=0;i<64;i++)
 c006d98:	013ffef4 	movhi	r4,65531
 c006d9c:	2113f504 	addi	r4,r4,20436
 c006da0:	2709883a 	add	r4,r4,fp
 c006da4:	20000015 	stw	zero,0(r4)
 c006da8:	00002306 	br	c006e38 <cam_unit_test+0x234>
            jpeg_buffer[current_index+i] = *(buffer+i);
 c006dac:	017ffef4 	movhi	r5,65531
 c006db0:	2953f404 	addi	r5,r5,20432
 c006db4:	2f0b883a 	add	r5,r5,fp
 c006db8:	28c00017 	ldw	r3,0(r5)
 c006dbc:	013ffef4 	movhi	r4,65531
 c006dc0:	2113f504 	addi	r4,r4,20436
 c006dc4:	2709883a 	add	r4,r4,fp
 c006dc8:	20800017 	ldw	r2,0(r4)
 c006dcc:	1885883a 	add	r2,r3,r2
 c006dd0:	1007883a 	mov	r3,r2
 c006dd4:	017ffef4 	movhi	r5,65531
 c006dd8:	2953f904 	addi	r5,r5,20452
 c006ddc:	2f0b883a 	add	r5,r5,fp
 c006de0:	28800017 	ldw	r2,0(r5)
 c006de4:	10c5883a 	add	r2,r2,r3
 c006de8:	013ffef4 	movhi	r4,65531
 c006dec:	2113f504 	addi	r4,r4,20436
 c006df0:	2709883a 	add	r4,r4,fp
 c006df4:	20c00017 	ldw	r3,0(r4)
 c006df8:	017ffef4 	movhi	r5,65531
 c006dfc:	2953fa04 	addi	r5,r5,20456
 c006e00:	2f0b883a 	add	r5,r5,fp
 c006e04:	29000017 	ldw	r4,0(r5)
 c006e08:	20c7883a 	add	r3,r4,r3
 c006e0c:	18c00003 	ldbu	r3,0(r3)
 c006e10:	10c00005 	stb	r3,0(r2)

    while (size > 64) {
        // read 32 bytes at a time;
        buffer = read_picture(64);
        size -= 64;
        for(i=0;i<64;i++)
 c006e14:	00fffef4 	movhi	r3,65531
 c006e18:	18d3f504 	addi	r3,r3,20436
 c006e1c:	1f07883a 	add	r3,r3,fp
 c006e20:	18800017 	ldw	r2,0(r3)
 c006e24:	10800044 	addi	r2,r2,1
 c006e28:	013ffef4 	movhi	r4,65531
 c006e2c:	2113f504 	addi	r4,r4,20436
 c006e30:	2709883a 	add	r4,r4,fp
 c006e34:	20800015 	stw	r2,0(r4)
 c006e38:	017ffef4 	movhi	r5,65531
 c006e3c:	2953f504 	addi	r5,r5,20436
 c006e40:	2f0b883a 	add	r5,r5,fp
 c006e44:	28800017 	ldw	r2,0(r5)
 c006e48:	10801010 	cmplti	r2,r2,64
 c006e4c:	103fd71e 	bne	r2,zero,c006dac <__alt_data_end+0xfc006dac>
            jpeg_buffer[current_index+i] = *(buffer+i);
        current_index += 64;
 c006e50:	00fffef4 	movhi	r3,65531
 c006e54:	18d3f404 	addi	r3,r3,20432
 c006e58:	1f07883a 	add	r3,r3,fp
 c006e5c:	18800017 	ldw	r2,0(r3)
 c006e60:	10801004 	addi	r2,r2,64
 c006e64:	013ffef4 	movhi	r4,65531
 c006e68:	2113f404 	addi	r4,r4,20432
 c006e6c:	2709883a 	add	r4,r4,fp
 c006e70:	20800015 	stw	r2,0(r4)
    int current_index = 0;
    int i;
    uint8_t *jpeg_buffer = malloc(sizeof(uint8_t)*size);
    uint8_t *buffer;

    while (size > 64) {
 c006e74:	017ffef4 	movhi	r5,65531
 c006e78:	2953f304 	addi	r5,r5,20428
 c006e7c:	2f0b883a 	add	r5,r5,fp
 c006e80:	28800017 	ldw	r2,0(r5)
 c006e84:	10801068 	cmpgeui	r2,r2,65
 c006e88:	103fb41e 	bne	r2,zero,c006d5c <__alt_data_end+0xfc006d5c>
        for(i=0;i<64;i++)
            jpeg_buffer[current_index+i] = *(buffer+i);
        current_index += 64;
    }

    buffer = read_picture(size);
 c006e8c:	00fffef4 	movhi	r3,65531
 c006e90:	18d3f304 	addi	r3,r3,20428
 c006e94:	1f07883a 	add	r3,r3,fp
 c006e98:	18800017 	ldw	r2,0(r3)
 c006e9c:	10803fcc 	andi	r2,r2,255
 c006ea0:	1009883a 	mov	r4,r2
 c006ea4:	c0007740 	call	c000774 <read_picture>
 c006ea8:	013ffef4 	movhi	r4,65531
 c006eac:	2113fa04 	addi	r4,r4,20456
 c006eb0:	2709883a 	add	r4,r4,fp
 c006eb4:	20800015 	stw	r2,0(r4)
    for(i=0;i<size;i++)
 c006eb8:	017ffef4 	movhi	r5,65531
 c006ebc:	2953f504 	addi	r5,r5,20436
 c006ec0:	2f0b883a 	add	r5,r5,fp
 c006ec4:	28000015 	stw	zero,0(r5)
 c006ec8:	00002306 	br	c006f58 <cam_unit_test+0x354>
        jpeg_buffer[current_index+i] = *(buffer+i);
 c006ecc:	00bffef4 	movhi	r2,65531
 c006ed0:	1093f404 	addi	r2,r2,20432
 c006ed4:	1705883a 	add	r2,r2,fp
 c006ed8:	10c00017 	ldw	r3,0(r2)
 c006edc:	013ffef4 	movhi	r4,65531
 c006ee0:	2113f504 	addi	r4,r4,20436
 c006ee4:	2709883a 	add	r4,r4,fp
 c006ee8:	20800017 	ldw	r2,0(r4)
 c006eec:	1885883a 	add	r2,r3,r2
 c006ef0:	1007883a 	mov	r3,r2
 c006ef4:	017ffef4 	movhi	r5,65531
 c006ef8:	2953f904 	addi	r5,r5,20452
 c006efc:	2f0b883a 	add	r5,r5,fp
 c006f00:	28800017 	ldw	r2,0(r5)
 c006f04:	10c5883a 	add	r2,r2,r3
 c006f08:	013ffef4 	movhi	r4,65531
 c006f0c:	2113f504 	addi	r4,r4,20436
 c006f10:	2709883a 	add	r4,r4,fp
 c006f14:	20c00017 	ldw	r3,0(r4)
 c006f18:	017ffef4 	movhi	r5,65531
 c006f1c:	2953fa04 	addi	r5,r5,20456
 c006f20:	2f0b883a 	add	r5,r5,fp
 c006f24:	29000017 	ldw	r4,0(r5)
 c006f28:	20c7883a 	add	r3,r4,r3
 c006f2c:	18c00003 	ldbu	r3,0(r3)
 c006f30:	10c00005 	stb	r3,0(r2)
            jpeg_buffer[current_index+i] = *(buffer+i);
        current_index += 64;
    }

    buffer = read_picture(size);
    for(i=0;i<size;i++)
 c006f34:	00fffef4 	movhi	r3,65531
 c006f38:	18d3f504 	addi	r3,r3,20436
 c006f3c:	1f07883a 	add	r3,r3,fp
 c006f40:	18800017 	ldw	r2,0(r3)
 c006f44:	10800044 	addi	r2,r2,1
 c006f48:	013ffef4 	movhi	r4,65531
 c006f4c:	2113f504 	addi	r4,r4,20436
 c006f50:	2709883a 	add	r4,r4,fp
 c006f54:	20800015 	stw	r2,0(r4)
 c006f58:	017ffef4 	movhi	r5,65531
 c006f5c:	2953f504 	addi	r5,r5,20436
 c006f60:	2f0b883a 	add	r5,r5,fp
 c006f64:	28c00017 	ldw	r3,0(r5)
 c006f68:	013ffef4 	movhi	r4,65531
 c006f6c:	2113f304 	addi	r4,r4,20428
 c006f70:	2709883a 	add	r4,r4,fp
 c006f74:	20800017 	ldw	r2,0(r4)
 c006f78:	18bfd436 	bltu	r3,r2,c006ecc <__alt_data_end+0xfc006ecc>
        jpeg_buffer[current_index+i] = *(buffer+i);


    printf("\nStarted Decoding\n");
 c006f7c:	010300b4 	movhi	r4,3074
 c006f80:	21088b04 	addi	r4,r4,8748
 c006f84:	c0099180 	call	c009918 <puts>

    //print_byte_array(jpeg_buffer, len);
    printf("The value of decode is: %d\n", njDecode(jpeg_buffer,len));
 c006f88:	017ffef4 	movhi	r5,65531
 c006f8c:	2953f804 	addi	r5,r5,20448
 c006f90:	2f0b883a 	add	r5,r5,fp
 c006f94:	28800017 	ldw	r2,0(r5)
 c006f98:	00fffef4 	movhi	r3,65531
 c006f9c:	18d3f904 	addi	r3,r3,20452
 c006fa0:	1f07883a 	add	r3,r3,fp
 c006fa4:	19000017 	ldw	r4,0(r3)
 c006fa8:	100b883a 	mov	r5,r2
 c006fac:	c0068cc0 	call	c0068cc <njDecode>
 c006fb0:	010300b4 	movhi	r4,3074
 c006fb4:	21089004 	addi	r4,r4,8768
 c006fb8:	100b883a 	mov	r5,r2
 c006fbc:	c0098040 	call	c009804 <printf>
    printf("The value of width is: %d\n", njGetWidth());
 c006fc0:	c006ae40 	call	c006ae4 <njGetWidth>
 c006fc4:	010300b4 	movhi	r4,3074
 c006fc8:	21089704 	addi	r4,r4,8796
 c006fcc:	100b883a 	mov	r5,r2
 c006fd0:	c0098040 	call	c009804 <printf>
    printf("The value of height is: %d\n", njGetHeight());
 c006fd4:	c006b0c0 	call	c006b0c <njGetHeight>
 c006fd8:	010300b4 	movhi	r4,3074
 c006fdc:	21089e04 	addi	r4,r4,8824
 c006fe0:	100b883a 	mov	r5,r2
 c006fe4:	c0098040 	call	c009804 <printf>
    printf("The value of size is: %d\n", njGetImageSize());
 c006fe8:	c006bbc0 	call	c006bbc <njGetImageSize>
 c006fec:	010300b4 	movhi	r4,3074
 c006ff0:	2108a504 	addi	r4,r4,8852
 c006ff4:	100b883a 	mov	r5,r2
 c006ff8:	c0098040 	call	c009804 <printf>

    printf("Copying into array\n");
 c006ffc:	010300b4 	movhi	r4,3074
 c007000:	2108ac04 	addi	r4,r4,8880
 c007004:	c0099180 	call	c009918 <puts>

    unsigned char *bitmap = njGetImage();
 c007008:	c006b640 	call	c006b64 <njGetImage>
 c00700c:	013ffef4 	movhi	r4,65531
 c007010:	2113fb04 	addi	r4,r4,20460
 c007014:	2709883a 	add	r4,r4,fp
 c007018:	20800015 	stw	r2,0(r4)
    unsigned char PMF[640][480];
    unsigned char value;
    int curr;
    for(curr = 0; curr < njGetImageSize()/3; curr++)
 c00701c:	017ffef4 	movhi	r5,65531
 c007020:	2953f604 	addi	r5,r5,20440
 c007024:	2f0b883a 	add	r5,r5,fp
 c007028:	28000015 	stw	zero,0(r5)
 c00702c:	00009806 	br	c007290 <cam_unit_test+0x68c>
    {
        value = (bitmap[3*curr] & 0xC0) | (bitmap[3*curr+1] & 0xC0)>>2 |  (bitmap[3*curr+2] & 0xC0)>>4;
 c007030:	00bffef4 	movhi	r2,65531
 c007034:	1093f604 	addi	r2,r2,20440
 c007038:	1705883a 	add	r2,r2,fp
 c00703c:	10c00017 	ldw	r3,0(r2)
 c007040:	1805883a 	mov	r2,r3
 c007044:	1085883a 	add	r2,r2,r2
 c007048:	10c5883a 	add	r2,r2,r3
 c00704c:	1007883a 	mov	r3,r2
 c007050:	013ffef4 	movhi	r4,65531
 c007054:	2113fb04 	addi	r4,r4,20460
 c007058:	2709883a 	add	r4,r4,fp
 c00705c:	20800017 	ldw	r2,0(r4)
 c007060:	10c5883a 	add	r2,r2,r3
 c007064:	10800003 	ldbu	r2,0(r2)
 c007068:	1007883a 	mov	r3,r2
 c00706c:	00bff004 	movi	r2,-64
 c007070:	1884703a 	and	r2,r3,r2
 c007074:	1009883a 	mov	r4,r2
 c007078:	017ffef4 	movhi	r5,65531
 c00707c:	2953f604 	addi	r5,r5,20440
 c007080:	2f0b883a 	add	r5,r5,fp
 c007084:	28c00017 	ldw	r3,0(r5)
 c007088:	1805883a 	mov	r2,r3
 c00708c:	1085883a 	add	r2,r2,r2
 c007090:	10c5883a 	add	r2,r2,r3
 c007094:	10800044 	addi	r2,r2,1
 c007098:	017ffef4 	movhi	r5,65531
 c00709c:	2953fb04 	addi	r5,r5,20460
 c0070a0:	2f0b883a 	add	r5,r5,fp
 c0070a4:	28c00017 	ldw	r3,0(r5)
 c0070a8:	1885883a 	add	r2,r3,r2
 c0070ac:	10800003 	ldbu	r2,0(r2)
 c0070b0:	10803fcc 	andi	r2,r2,255
 c0070b4:	1080300c 	andi	r2,r2,192
 c0070b8:	1005d0ba 	srai	r2,r2,2
 c0070bc:	2084b03a 	or	r2,r4,r2
 c0070c0:	1009883a 	mov	r4,r2
 c0070c4:	00bffef4 	movhi	r2,65531
 c0070c8:	1093f604 	addi	r2,r2,20440
 c0070cc:	1705883a 	add	r2,r2,fp
 c0070d0:	10c00017 	ldw	r3,0(r2)
 c0070d4:	1805883a 	mov	r2,r3
 c0070d8:	1085883a 	add	r2,r2,r2
 c0070dc:	10c5883a 	add	r2,r2,r3
 c0070e0:	10800084 	addi	r2,r2,2
 c0070e4:	017ffef4 	movhi	r5,65531
 c0070e8:	2953fb04 	addi	r5,r5,20460
 c0070ec:	2f0b883a 	add	r5,r5,fp
 c0070f0:	28c00017 	ldw	r3,0(r5)
 c0070f4:	1885883a 	add	r2,r3,r2
 c0070f8:	10800003 	ldbu	r2,0(r2)
 c0070fc:	10803fcc 	andi	r2,r2,255
 c007100:	1080300c 	andi	r2,r2,192
 c007104:	1005d13a 	srai	r2,r2,4
 c007108:	2084b03a 	or	r2,r4,r2
 c00710c:	00fffef4 	movhi	r3,65531
 c007110:	18d3fc04 	addi	r3,r3,20464
 c007114:	1f07883a 	add	r3,r3,fp
 c007118:	18800005 	stb	r2,0(r3)
        int R = bitmap[3*curr];
 c00711c:	013ffef4 	movhi	r4,65531
 c007120:	2113f604 	addi	r4,r4,20440
 c007124:	2709883a 	add	r4,r4,fp
 c007128:	20c00017 	ldw	r3,0(r4)
 c00712c:	1805883a 	mov	r2,r3
 c007130:	1085883a 	add	r2,r2,r2
 c007134:	10c5883a 	add	r2,r2,r3
 c007138:	1007883a 	mov	r3,r2
 c00713c:	017ffef4 	movhi	r5,65531
 c007140:	2953fb04 	addi	r5,r5,20460
 c007144:	2f0b883a 	add	r5,r5,fp
 c007148:	28800017 	ldw	r2,0(r5)
 c00714c:	10c5883a 	add	r2,r2,r3
 c007150:	10800003 	ldbu	r2,0(r2)
 c007154:	10803fcc 	andi	r2,r2,255
 c007158:	00fffef4 	movhi	r3,65531
 c00715c:	18d3fd04 	addi	r3,r3,20468
 c007160:	1f07883a 	add	r3,r3,fp
 c007164:	18800015 	stw	r2,0(r3)
        int G = bitmap[3*curr+1];
 c007168:	013ffef4 	movhi	r4,65531
 c00716c:	2113f604 	addi	r4,r4,20440
 c007170:	2709883a 	add	r4,r4,fp
 c007174:	20c00017 	ldw	r3,0(r4)
 c007178:	1805883a 	mov	r2,r3
 c00717c:	1085883a 	add	r2,r2,r2
 c007180:	10c5883a 	add	r2,r2,r3
 c007184:	10800044 	addi	r2,r2,1
 c007188:	017ffef4 	movhi	r5,65531
 c00718c:	2953fb04 	addi	r5,r5,20460
 c007190:	2f0b883a 	add	r5,r5,fp
 c007194:	28c00017 	ldw	r3,0(r5)
 c007198:	1885883a 	add	r2,r3,r2
 c00719c:	10800003 	ldbu	r2,0(r2)
 c0071a0:	10803fcc 	andi	r2,r2,255
 c0071a4:	00fffef4 	movhi	r3,65531
 c0071a8:	18d3fe04 	addi	r3,r3,20472
 c0071ac:	1f07883a 	add	r3,r3,fp
 c0071b0:	18800015 	stw	r2,0(r3)
        int B = bitmap[3*curr+2];
 c0071b4:	013ffef4 	movhi	r4,65531
 c0071b8:	2113f604 	addi	r4,r4,20440
 c0071bc:	2709883a 	add	r4,r4,fp
 c0071c0:	20c00017 	ldw	r3,0(r4)
 c0071c4:	1805883a 	mov	r2,r3
 c0071c8:	1085883a 	add	r2,r2,r2
 c0071cc:	10c5883a 	add	r2,r2,r3
 c0071d0:	10800084 	addi	r2,r2,2
 c0071d4:	017ffef4 	movhi	r5,65531
 c0071d8:	2953fb04 	addi	r5,r5,20460
 c0071dc:	2f0b883a 	add	r5,r5,fp
 c0071e0:	28c00017 	ldw	r3,0(r5)
 c0071e4:	1885883a 	add	r2,r3,r2
 c0071e8:	10800003 	ldbu	r2,0(r2)
 c0071ec:	10803fcc 	andi	r2,r2,255
 c0071f0:	00fffef4 	movhi	r3,65531
 c0071f4:	18d3ff04 	addi	r3,r3,20476
 c0071f8:	1f07883a 	add	r3,r3,fp
 c0071fc:	18800015 	stw	r2,0(r3)
        PMF[curr%640][(int)(curr/640)] = (value)>>2;
 c007200:	013ffef4 	movhi	r4,65531
 c007204:	2113f604 	addi	r4,r4,20440
 c007208:	2709883a 	add	r4,r4,fp
 c00720c:	20800017 	ldw	r2,0(r4)
 c007210:	00c0a004 	movi	r3,640
 c007214:	10c7283a 	div	r3,r2,r3
 c007218:	18c0a024 	muli	r3,r3,640
 c00721c:	10c7c83a 	sub	r3,r2,r3
 c007220:	017ffef4 	movhi	r5,65531
 c007224:	2953f604 	addi	r5,r5,20440
 c007228:	2f0b883a 	add	r5,r5,fp
 c00722c:	29000017 	ldw	r4,0(r5)
 c007230:	0080a004 	movi	r2,640
 c007234:	2085283a 	div	r2,r4,r2
 c007238:	017ffef4 	movhi	r5,65531
 c00723c:	2953fc04 	addi	r5,r5,20464
 c007240:	2f0b883a 	add	r5,r5,fp
 c007244:	29000003 	ldbu	r4,0(r5)
 c007248:	2008d0ba 	srli	r4,r4,2
 c00724c:	18c07824 	muli	r3,r3,480
 c007250:	017ffef4 	movhi	r5,65531
 c007254:	2953f304 	addi	r5,r5,20428
 c007258:	2f0b883a 	add	r5,r5,fp
 c00725c:	28c7883a 	add	r3,r5,r3
 c007260:	1885883a 	add	r2,r3,r2
 c007264:	10800d04 	addi	r2,r2,52
 c007268:	11000005 	stb	r4,0(r2)

    unsigned char *bitmap = njGetImage();
    unsigned char PMF[640][480];
    unsigned char value;
    int curr;
    for(curr = 0; curr < njGetImageSize()/3; curr++)
 c00726c:	00fffef4 	movhi	r3,65531
 c007270:	18d3f604 	addi	r3,r3,20440
 c007274:	1f07883a 	add	r3,r3,fp
 c007278:	18800017 	ldw	r2,0(r3)
 c00727c:	10800044 	addi	r2,r2,1
 c007280:	013ffef4 	movhi	r4,65531
 c007284:	2113f604 	addi	r4,r4,20440
 c007288:	2709883a 	add	r4,r4,fp
 c00728c:	20800015 	stw	r2,0(r4)
 c007290:	c006bbc0 	call	c006bbc <njGetImageSize>
 c007294:	1007883a 	mov	r3,r2
 c007298:	008000c4 	movi	r2,3
 c00729c:	1885283a 	div	r2,r3,r2
 c0072a0:	017ffef4 	movhi	r5,65531
 c0072a4:	2953f604 	addi	r5,r5,20440
 c0072a8:	2f0b883a 	add	r5,r5,fp
 c0072ac:	28c00017 	ldw	r3,0(r5)
 c0072b0:	18bf5f16 	blt	r3,r2,c007030 <__alt_data_end+0xfc007030>
        int G = bitmap[3*curr+1];
        int B = bitmap[3*curr+2];
        PMF[curr%640][(int)(curr/640)] = (value)>>2;
    }

    print_image(PMF, 640, 480);
 c0072b4:	00fffef4 	movhi	r3,65531
 c0072b8:	18d40004 	addi	r3,r3,20480
 c0072bc:	e0c5883a 	add	r2,fp,r3
 c0072c0:	1009883a 	mov	r4,r2
 c0072c4:	0140a004 	movi	r5,640
 c0072c8:	01807804 	movi	r6,480
 c0072cc:	c0027ac0 	call	c0027ac <print_image>
    njDone();
 c0072d0:	c0068040 	call	c006804 <njDone>
    return 0;
 c0072d4:	0005883a 	mov	r2,zero
}
 c0072d8:	e037883a 	mov	sp,fp
 c0072dc:	dfc00117 	ldw	ra,4(sp)
 c0072e0:	df000017 	ldw	fp,0(sp)
 c0072e4:	dec00204 	addi	sp,sp,8
 c0072e8:	f800283a 	ret

0c0072ec <main>:

int main()
{
 c0072ec:	defffd04 	addi	sp,sp,-12
 c0072f0:	dfc00215 	stw	ra,8(sp)
 c0072f4:	df000115 	stw	fp,4(sp)
 c0072f8:	df000104 	addi	fp,sp,4
    //cam_unit_test();
    njInit();
 c0072fc:	c0067c80 	call	c0067c8 <njInit>
    cam_init();
 c007300:	c0004880 	call	c000488 <cam_init>
    camera_reset();
 c007304:	c0007300 	call	c000730 <camera_reset>
    unsigned char y = get_image_resolution();
 c007308:	c0004d40 	call	c0004d4 <get_image_resolution>
 c00730c:	e0bfff05 	stb	r2,-4(fp)
    printf("Data is: [%02x]\n", y);
 c007310:	e0bfff03 	ldbu	r2,-4(fp)
 c007314:	010300b4 	movhi	r4,3074
 c007318:	21087b04 	addi	r4,r4,8684
 c00731c:	100b883a 	mov	r5,r2
 c007320:	c0098040 	call	c009804 <printf>
    y = set_image_resolution(FRAME_320x240);
 c007324:	01000444 	movi	r4,17
 c007328:	c0005600 	call	c000560 <set_image_resolution>
 c00732c:	e0bfff05 	stb	r2,-4(fp)
    printf("Set returned : [%02x]\n", y);
 c007330:	e0bfff03 	ldbu	r2,-4(fp)
 c007334:	010300b4 	movhi	r4,3074
 c007338:	21088004 	addi	r4,r4,8704
 c00733c:	100b883a 	mov	r5,r2
 c007340:	c0098040 	call	c009804 <printf>
    y = get_image_resolution();
 c007344:	c0004d40 	call	c0004d4 <get_image_resolution>
 c007348:	e0bfff05 	stb	r2,-4(fp)
    printf("Data is: [%02x]\n", y);
 c00734c:	e0bfff03 	ldbu	r2,-4(fp)
 c007350:	010300b4 	movhi	r4,3074
 c007354:	21087b04 	addi	r4,r4,8684
 c007358:	100b883a 	mov	r5,r2
 c00735c:	c0098040 	call	c009804 <printf>
    init_gui();
 c007360:	c002d1c0 	call	c002d1c <init_gui>

    // Getting an image setup
    while (1)
        proccess_buttons(10000);
 c007364:	0109c404 	movi	r4,10000
 c007368:	c0031ac0 	call	c0031ac <proccess_buttons>
 c00736c:	003ffd06 	br	c007364 <__alt_data_end+0xfc007364>

0c007370 <init_motors>:

//===================================================================
// Public Function Definitions
//===================================================================
void init_motors(void)
{
 c007370:	deffff04 	addi	sp,sp,-4
 c007374:	df000015 	stw	fp,0(sp)
 c007378:	d839883a 	mov	fp,sp
	motor_speed = 0x01;
 c00737c:	00800044 	movi	r2,1
 c007380:	d0a6e2c5 	stb	r2,-25717(gp)
	PWM_CW1 = (kMinMotor + kMaxMotor ) / 2;
 c007384:	00a00034 	movhi	r2,32768
 c007388:	10800404 	addi	r2,r2,16
 c00738c:	00c00544 	movi	r3,21
 c007390:	10c00005 	stb	r3,0(r2)
	PWM_CW2 = (kMinMotor + kMaxMotor ) / 2;
 c007394:	00a00034 	movhi	r2,32768
 c007398:	00c00544 	movi	r3,21
 c00739c:	10c00005 	stb	r3,0(r2)
}
 c0073a0:	e037883a 	mov	sp,fp
 c0073a4:	df000017 	ldw	fp,0(sp)
 c0073a8:	dec00104 	addi	sp,sp,4
 c0073ac:	f800283a 	ret

0c0073b0 <move_up>:

void move_up(void)
{
 c0073b0:	defffe04 	addi	sp,sp,-8
 c0073b4:	dfc00115 	stw	ra,4(sp)
 c0073b8:	df000015 	stw	fp,0(sp)
 c0073bc:	d839883a 	mov	fp,sp
	if (PWM_CW1 < kMaxMotor)
 c0073c0:	00a00034 	movhi	r2,32768
 c0073c4:	10800404 	addi	r2,r2,16
 c0073c8:	10800003 	ldbu	r2,0(r2)
 c0073cc:	10803fcc 	andi	r2,r2,255
 c0073d0:	10800868 	cmpgeui	r2,r2,33
 c0073d4:	10001f1e 	bne	r2,zero,c007454 <move_up+0xa4>
    {
        PWM_CW1 += motor_speed;
 c0073d8:	00a00034 	movhi	r2,32768
 c0073dc:	10800404 	addi	r2,r2,16
 c0073e0:	00e00034 	movhi	r3,32768
 c0073e4:	18c00404 	addi	r3,r3,16
 c0073e8:	19000003 	ldbu	r4,0(r3)
 c0073ec:	d0e6e2c3 	ldbu	r3,-25717(gp)
 c0073f0:	20c7883a 	add	r3,r4,r3
 c0073f4:	10c00005 	stb	r3,0(r2)
        PWM_CW1 = PWM_CW1 < kMaxMotor ? PWM_CW1 : kMaxMotor;
 c0073f8:	00a00034 	movhi	r2,32768
 c0073fc:	10800404 	addi	r2,r2,16
 c007400:	00e00034 	movhi	r3,32768
 c007404:	18c00404 	addi	r3,r3,16
 c007408:	18c00003 	ldbu	r3,0(r3)
 c00740c:	19003fcc 	andi	r4,r3,255
 c007410:	210008b0 	cmpltui	r4,r4,34
 c007414:	2000011e 	bne	r4,zero,c00741c <move_up+0x6c>
 c007418:	00c00844 	movi	r3,33
 c00741c:	10c00005 	stb	r3,0(r2)
        assert(PWM_CW1 <= kMaxMotor);
 c007420:	00a00034 	movhi	r2,32768
 c007424:	10800404 	addi	r2,r2,16
 c007428:	10800003 	ldbu	r2,0(r2)
 c00742c:	10803fcc 	andi	r2,r2,255
 c007430:	108008b0 	cmpltui	r2,r2,34
 c007434:	1000071e 	bne	r2,zero,c007454 <move_up+0xa4>
 c007438:	010300b4 	movhi	r4,3074
 c00743c:	2108b104 	addi	r4,r4,8900
 c007440:	01400c04 	movi	r5,48
 c007444:	d1a00304 	addi	r6,gp,-32756
 c007448:	01c300b4 	movhi	r7,3074
 c00744c:	39c8b304 	addi	r7,r7,8908
 c007450:	c008cd80 	call	c008cd8 <__assert_func>
    }
}
 c007454:	e037883a 	mov	sp,fp
 c007458:	dfc00117 	ldw	ra,4(sp)
 c00745c:	df000017 	ldw	fp,0(sp)
 c007460:	dec00204 	addi	sp,sp,8
 c007464:	f800283a 	ret

0c007468 <move_down>:

void move_down(void)
{
 c007468:	defffe04 	addi	sp,sp,-8
 c00746c:	dfc00115 	stw	ra,4(sp)
 c007470:	df000015 	stw	fp,0(sp)
 c007474:	d839883a 	mov	fp,sp
    if (PWM_CW1 > kMinMotor)
 c007478:	00a00034 	movhi	r2,32768
 c00747c:	10800404 	addi	r2,r2,16
 c007480:	10800003 	ldbu	r2,0(r2)
 c007484:	10803fcc 	andi	r2,r2,255
 c007488:	108002f0 	cmpltui	r2,r2,11
 c00748c:	1000201e 	bne	r2,zero,c007510 <move_down+0xa8>
    {
        PWM_CW1 -= motor_speed;
 c007490:	00a00034 	movhi	r2,32768
 c007494:	10800404 	addi	r2,r2,16
 c007498:	00e00034 	movhi	r3,32768
 c00749c:	18c00404 	addi	r3,r3,16
 c0074a0:	19000003 	ldbu	r4,0(r3)
 c0074a4:	d0e6e2c3 	ldbu	r3,-25717(gp)
 c0074a8:	20c7c83a 	sub	r3,r4,r3
 c0074ac:	10c00005 	stb	r3,0(r2)
        PWM_CW1 = PWM_CW1 > kMinMotor ? PWM_CW1 : kMinMotor;
 c0074b0:	00a00034 	movhi	r2,32768
 c0074b4:	10800404 	addi	r2,r2,16
 c0074b8:	00e00034 	movhi	r3,32768
 c0074bc:	18c00404 	addi	r3,r3,16
 c0074c0:	18c00003 	ldbu	r3,0(r3)
 c0074c4:	19003fcc 	andi	r4,r3,255
 c0074c8:	210002a8 	cmpgeui	r4,r4,10
 c0074cc:	2000011e 	bne	r4,zero,c0074d4 <move_down+0x6c>
 c0074d0:	00c00284 	movi	r3,10
 c0074d4:	10c00005 	stb	r3,0(r2)
        assert(PWM_CW1 >= kMinMotor);
 c0074d8:	00a00034 	movhi	r2,32768
 c0074dc:	10800404 	addi	r2,r2,16
 c0074e0:	10800003 	ldbu	r2,0(r2)
 c0074e4:	10803fcc 	andi	r2,r2,255
 c0074e8:	108002a8 	cmpgeui	r2,r2,10
 c0074ec:	1000081e 	bne	r2,zero,c007510 <move_down+0xa8>
 c0074f0:	010300b4 	movhi	r4,3074
 c0074f4:	2108b104 	addi	r4,r4,8900
 c0074f8:	01400e84 	movi	r5,58
 c0074fc:	018300b4 	movhi	r6,3074
 c007500:	3188d604 	addi	r6,r6,9048
 c007504:	01c300b4 	movhi	r7,3074
 c007508:	39c8b904 	addi	r7,r7,8932
 c00750c:	c008cd80 	call	c008cd8 <__assert_func>
    }
}
 c007510:	e037883a 	mov	sp,fp
 c007514:	dfc00117 	ldw	ra,4(sp)
 c007518:	df000017 	ldw	fp,0(sp)
 c00751c:	dec00204 	addi	sp,sp,8
 c007520:	f800283a 	ret

0c007524 <move_left>:

void move_left(void)
{
 c007524:	defffe04 	addi	sp,sp,-8
 c007528:	dfc00115 	stw	ra,4(sp)
 c00752c:	df000015 	stw	fp,0(sp)
 c007530:	d839883a 	mov	fp,sp
    if (PWM_CW2 < kMaxMotor)
 c007534:	00a00034 	movhi	r2,32768
 c007538:	10800003 	ldbu	r2,0(r2)
 c00753c:	10803fcc 	andi	r2,r2,255
 c007540:	10800868 	cmpgeui	r2,r2,33
 c007544:	10001b1e 	bne	r2,zero,c0075b4 <move_left+0x90>
    {
        PWM_CW2 += motor_speed;
 c007548:	00a00034 	movhi	r2,32768
 c00754c:	00e00034 	movhi	r3,32768
 c007550:	19000003 	ldbu	r4,0(r3)
 c007554:	d0e6e2c3 	ldbu	r3,-25717(gp)
 c007558:	20c7883a 	add	r3,r4,r3
 c00755c:	10c00005 	stb	r3,0(r2)
        PWM_CW2 = PWM_CW2 < kMaxMotor ? PWM_CW2 : kMaxMotor;
 c007560:	00e00034 	movhi	r3,32768
 c007564:	00a00034 	movhi	r2,32768
 c007568:	10800003 	ldbu	r2,0(r2)
 c00756c:	11003fcc 	andi	r4,r2,255
 c007570:	210008b0 	cmpltui	r4,r4,34
 c007574:	2000011e 	bne	r4,zero,c00757c <move_left+0x58>
 c007578:	00800844 	movi	r2,33
 c00757c:	18800005 	stb	r2,0(r3)
        assert(PWM_CW2 <= kMaxMotor);
 c007580:	00a00034 	movhi	r2,32768
 c007584:	10800003 	ldbu	r2,0(r2)
 c007588:	10803fcc 	andi	r2,r2,255
 c00758c:	108008b0 	cmpltui	r2,r2,34
 c007590:	1000081e 	bne	r2,zero,c0075b4 <move_left+0x90>
 c007594:	010300b4 	movhi	r4,3074
 c007598:	2108b104 	addi	r4,r4,8900
 c00759c:	01401104 	movi	r5,68
 c0075a0:	018300b4 	movhi	r6,3074
 c0075a4:	3188d904 	addi	r6,r6,9060
 c0075a8:	01c300b4 	movhi	r7,3074
 c0075ac:	39c8bf04 	addi	r7,r7,8956
 c0075b0:	c008cd80 	call	c008cd8 <__assert_func>
    }
}
 c0075b4:	e037883a 	mov	sp,fp
 c0075b8:	dfc00117 	ldw	ra,4(sp)
 c0075bc:	df000017 	ldw	fp,0(sp)
 c0075c0:	dec00204 	addi	sp,sp,8
 c0075c4:	f800283a 	ret

0c0075c8 <move_right>:

void move_right(void)
{
 c0075c8:	defffe04 	addi	sp,sp,-8
 c0075cc:	dfc00115 	stw	ra,4(sp)
 c0075d0:	df000015 	stw	fp,0(sp)
 c0075d4:	d839883a 	mov	fp,sp
    if (PWM_CW2 > kMinMotor)
 c0075d8:	00a00034 	movhi	r2,32768
 c0075dc:	10800003 	ldbu	r2,0(r2)
 c0075e0:	10803fcc 	andi	r2,r2,255
 c0075e4:	108002f0 	cmpltui	r2,r2,11
 c0075e8:	10001c1e 	bne	r2,zero,c00765c <move_right+0x94>
    {
        PWM_CW2 -= motor_speed;
 c0075ec:	00a00034 	movhi	r2,32768
 c0075f0:	00e00034 	movhi	r3,32768
 c0075f4:	19000003 	ldbu	r4,0(r3)
 c0075f8:	d0e6e2c3 	ldbu	r3,-25717(gp)
 c0075fc:	20c7c83a 	sub	r3,r4,r3
 c007600:	10c00005 	stb	r3,0(r2)
        PWM_CW2 = PWM_CW2 > kMinMotor ? PWM_CW2 : kMinMotor;
 c007604:	00e00034 	movhi	r3,32768
 c007608:	00a00034 	movhi	r2,32768
 c00760c:	10800003 	ldbu	r2,0(r2)
 c007610:	11003fcc 	andi	r4,r2,255
 c007614:	210002a8 	cmpgeui	r4,r4,10
 c007618:	2000011e 	bne	r4,zero,c007620 <move_right+0x58>
 c00761c:	00800284 	movi	r2,10
 c007620:	18800005 	stb	r2,0(r3)
        assert(PWM_CW1 >= kMinMotor);
 c007624:	00a00034 	movhi	r2,32768
 c007628:	10800404 	addi	r2,r2,16
 c00762c:	10800003 	ldbu	r2,0(r2)
 c007630:	10803fcc 	andi	r2,r2,255
 c007634:	108002a8 	cmpgeui	r2,r2,10
 c007638:	1000081e 	bne	r2,zero,c00765c <move_right+0x94>
 c00763c:	010300b4 	movhi	r4,3074
 c007640:	2108b104 	addi	r4,r4,8900
 c007644:	01401384 	movi	r5,78
 c007648:	018300b4 	movhi	r6,3074
 c00764c:	3188dc04 	addi	r6,r6,9072
 c007650:	01c300b4 	movhi	r7,3074
 c007654:	39c8b904 	addi	r7,r7,8932
 c007658:	c008cd80 	call	c008cd8 <__assert_func>
    }
}
 c00765c:	e037883a 	mov	sp,fp
 c007660:	dfc00117 	ldw	ra,4(sp)
 c007664:	df000017 	ldw	fp,0(sp)
 c007668:	dec00204 	addi	sp,sp,8
 c00766c:	f800283a 	ret

0c007670 <set_motor_speed>:

void set_motor_speed(void* speed)
{
 c007670:	defffd04 	addi	sp,sp,-12
 c007674:	dfc00215 	stw	ra,8(sp)
 c007678:	df000115 	stw	fp,4(sp)
 c00767c:	df000104 	addi	fp,sp,4
 c007680:	e13fff15 	stw	r4,-4(fp)
	motor_speed = *((unsigned char*)speed);
 c007684:	e0bfff17 	ldw	r2,-4(fp)
 c007688:	10800003 	ldbu	r2,0(r2)
 c00768c:	d0a6e2c5 	stb	r2,-25717(gp)
	assert(MIN_MOTOR_SPEED <= motor_speed && motor_speed <= MAX_MOTOR_SPEED);
 c007690:	d0a6e2c3 	ldbu	r2,-25717(gp)
 c007694:	10803fcc 	andi	r2,r2,255
 c007698:	10000426 	beq	r2,zero,c0076ac <set_motor_speed+0x3c>
 c00769c:	d0a6e2c3 	ldbu	r2,-25717(gp)
 c0076a0:	10803fcc 	andi	r2,r2,255
 c0076a4:	10800130 	cmpltui	r2,r2,4
 c0076a8:	1000081e 	bne	r2,zero,c0076cc <set_motor_speed+0x5c>
 c0076ac:	010300b4 	movhi	r4,3074
 c0076b0:	2108b104 	addi	r4,r4,8900
 c0076b4:	01401544 	movi	r5,85
 c0076b8:	018300b4 	movhi	r6,3074
 c0076bc:	3188df04 	addi	r6,r6,9084
 c0076c0:	01c300b4 	movhi	r7,3074
 c0076c4:	39c8c504 	addi	r7,r7,8980
 c0076c8:	c008cd80 	call	c008cd8 <__assert_func>
}
 c0076cc:	e037883a 	mov	sp,fp
 c0076d0:	dfc00117 	ldw	ra,4(sp)
 c0076d4:	df000017 	ldw	fp,0(sp)
 c0076d8:	dec00204 	addi	sp,sp,8
 c0076dc:	f800283a 	ret

0c0076e0 <handle_serial_interrupts>:

//===================================================================
// ISR Serial Handler
//===================================================================
static void handle_serial_interrupts(void* context, alt_u32 id)
{
 c0076e0:	defffc04 	addi	sp,sp,-16
 c0076e4:	df000315 	stw	fp,12(sp)
 c0076e8:	df000304 	addi	fp,sp,12
 c0076ec:	e13ffe15 	stw	r4,-8(fp)
 c0076f0:	e17fff15 	stw	r5,-4(fp)
    volatile unsigned char* edge_capture_ptr = (volatile int*) context;
 c0076f4:	e0bffe17 	ldw	r2,-8(fp)
 c0076f8:	e0bffd15 	stw	r2,-12(fp)
    (*edge_capture_ptr) = RXDATA(CAMERA);
 c0076fc:	00a10034 	movhi	r2,33792
 c007700:	10808484 	addi	r2,r2,530
 c007704:	10c00003 	ldbu	r3,0(r2)
 c007708:	e0bffd17 	ldw	r2,-12(fp)
 c00770c:	10c00005 	stb	r3,0(r2)
}
 c007710:	e037883a 	mov	sp,fp
 c007714:	df000017 	ldw	fp,0(sp)
 c007718:	dec00104 	addi	sp,sp,4
 c00771c:	f800283a 	ret

0c007720 <init_serial>:

//===================================================================
// Private Function Definitions
//===================================================================
void init_serial(volatile unsigned char* device)
{
 c007720:	defffe04 	addi	sp,sp,-8
 c007724:	df000115 	stw	fp,4(sp)
 c007728:	df000104 	addi	fp,sp,4
 c00772c:	e13fff15 	stw	r4,-4(fp)
    CONTROL(device) = 0x00;
 c007730:	e0bfff17 	ldw	r2,-4(fp)
 c007734:	10000005 	stb	zero,0(r2)
    CONTROL(device) = 0x15;
 c007738:	e0bfff17 	ldw	r2,-4(fp)
 c00773c:	00c00544 	movi	r3,21
 c007740:	10c00005 	stb	r3,0(r2)
    if (device == TOUCHSCREEN)
 c007744:	e0ffff17 	ldw	r3,-4(fp)
 c007748:	00a10034 	movhi	r2,33792
 c00774c:	10808c04 	addi	r2,r2,560
 c007750:	1880051e 	bne	r3,r2,c007768 <init_serial+0x48>
        BAUD(device) = 0x07;
 c007754:	e0bfff17 	ldw	r2,-4(fp)
 c007758:	10800104 	addi	r2,r2,4
 c00775c:	00c001c4 	movi	r3,7
 c007760:	10c00005 	stb	r3,0(r2)
 c007764:	00000d06 	br	c00779c <init_serial+0x7c>
    else if (device == CAMERA)
 c007768:	e0ffff17 	ldw	r3,-4(fp)
 c00776c:	00a10034 	movhi	r2,33792
 c007770:	10808404 	addi	r2,r2,528
 c007774:	1880051e 	bne	r3,r2,c00778c <init_serial+0x6c>
        BAUD(device) = 0x03;
 c007778:	e0bfff17 	ldw	r2,-4(fp)
 c00777c:	10800104 	addi	r2,r2,4
 c007780:	00c000c4 	movi	r3,3
 c007784:	10c00005 	stb	r3,0(r2)
 c007788:	00000406 	br	c00779c <init_serial+0x7c>
    else
        BAUD(device) = 0x01;
 c00778c:	e0bfff17 	ldw	r2,-4(fp)
 c007790:	10800104 	addi	r2,r2,4
 c007794:	00c00044 	movi	r3,1
 c007798:	10c00005 	stb	r3,0(r2)
}
 c00779c:	e037883a 	mov	sp,fp
 c0077a0:	df000017 	ldw	fp,0(sp)
 c0077a4:	dec00104 	addi	sp,sp,4
 c0077a8:	f800283a 	ret

0c0077ac <enable_device_recv_irq>:

void enable_device_recv_irq(volatile unsigned char* device)
{
 c0077ac:	defffc04 	addi	sp,sp,-16
 c0077b0:	dfc00315 	stw	ra,12(sp)
 c0077b4:	df000215 	stw	fp,8(sp)
 c0077b8:	df000204 	addi	fp,sp,8
 c0077bc:	e13fff15 	stw	r4,-4(fp)
    void* edge_capture_ptr = (void*) &edge_capture;
 c0077c0:	d0a6e304 	addi	r2,gp,-25716
 c0077c4:	e0bffe15 	stw	r2,-8(fp)
    // Enable IRQ
    //unsigned char clear_data = RXDATA(device);
    CONTROL(device) = 0x95;
 c0077c8:	e0bfff17 	ldw	r2,-4(fp)
 c0077cc:	00ffe544 	movi	r3,-107
 c0077d0:	10c00005 	stb	r3,0(r2)
    // Register the ISR
    alt_irq_register( TO_EXTERNAL_BUS_BRIDGE_0_IRQ, edge_capture_ptr,
 c0077d4:	01000044 	movi	r4,1
 c0077d8:	e17ffe17 	ldw	r5,-8(fp)
 c0077dc:	01830034 	movhi	r6,3072
 c0077e0:	319db804 	addi	r6,r6,30432
 c0077e4:	c014cdc0 	call	c014cdc <alt_irq_register>
            handle_serial_interrupts );
}
 c0077e8:	e037883a 	mov	sp,fp
 c0077ec:	dfc00117 	ldw	ra,4(sp)
 c0077f0:	df000017 	ldw	fp,0(sp)
 c0077f4:	dec00204 	addi	sp,sp,8
 c0077f8:	f800283a 	ret

0c0077fc <test_irq>:

unsigned char test_irq(void)
{
 c0077fc:	deffff04 	addi	sp,sp,-4
 c007800:	df000015 	stw	fp,0(sp)
 c007804:	d839883a 	mov	fp,sp
    return edge_capture;
 c007808:	d0a6e303 	ldbu	r2,-25716(gp)
}
 c00780c:	e037883a 	mov	sp,fp
 c007810:	df000017 	ldw	fp,0(sp)
 c007814:	dec00104 	addi	sp,sp,4
 c007818:	f800283a 	ret

0c00781c <serial_putchar>:

unsigned char serial_putchar(volatile unsigned char* device, char c)
{
 c00781c:	defffd04 	addi	sp,sp,-12
 c007820:	df000215 	stw	fp,8(sp)
 c007824:	df000204 	addi	fp,sp,8
 c007828:	e13ffe15 	stw	r4,-8(fp)
 c00782c:	2805883a 	mov	r2,r5
 c007830:	e0bfff05 	stb	r2,-4(fp)
    // poll Tx bit in 6850 status register. Wait for it to become '1'
    while (!(STATUS(device) & 0x02));
 c007834:	0001883a 	nop
 c007838:	e0bffe17 	ldw	r2,-8(fp)
 c00783c:	10800003 	ldbu	r2,0(r2)
 c007840:	10803fcc 	andi	r2,r2,255
 c007844:	1080008c 	andi	r2,r2,2
 c007848:	103ffb26 	beq	r2,zero,c007838 <__alt_data_end+0xfc007838>
    // write 'c' to the 6850 TxData register to output the character
    TXDATA(device) = c;
 c00784c:	e0bffe17 	ldw	r2,-8(fp)
 c007850:	10800084 	addi	r2,r2,2
 c007854:	e0ffff03 	ldbu	r3,-4(fp)
 c007858:	10c00005 	stb	r3,0(r2)
    return c; // return c
 c00785c:	e0bfff03 	ldbu	r2,-4(fp)
}
 c007860:	e037883a 	mov	sp,fp
 c007864:	df000017 	ldw	fp,0(sp)
 c007868:	dec00104 	addi	sp,sp,4
 c00786c:	f800283a 	ret

0c007870 <serial_getchar>:

unsigned char serial_getchar(volatile unsigned char* device)
{
 c007870:	defffd04 	addi	sp,sp,-12
 c007874:	dfc00215 	stw	ra,8(sp)
 c007878:	df000115 	stw	fp,4(sp)
 c00787c:	df000104 	addi	fp,sp,4
 c007880:	e13fff15 	stw	r4,-4(fp)
    // poll Rx bit in 6850 status register. Wait for it to become '1'
    while (!test_for_received_data(device));
 c007884:	0001883a 	nop
 c007888:	e13fff17 	ldw	r4,-4(fp)
 c00788c:	c007a340 	call	c007a34 <test_for_received_data>
 c007890:	103ffd26 	beq	r2,zero,c007888 <__alt_data_end+0xfc007888>
    // read received character from 6850 RxData register.
    return RXDATA(device);
 c007894:	e0bfff17 	ldw	r2,-4(fp)
 c007898:	10800084 	addi	r2,r2,2
 c00789c:	10800003 	ldbu	r2,0(r2)
}
 c0078a0:	e037883a 	mov	sp,fp
 c0078a4:	dfc00117 	ldw	ra,4(sp)
 c0078a8:	df000017 	ldw	fp,0(sp)
 c0078ac:	dec00204 	addi	sp,sp,8
 c0078b0:	f800283a 	ret

0c0078b4 <serial_write>:

//===================================================================
// Public Function Definitions
//===================================================================
size_t serial_write(volatile unsigned char* device, unsigned char * source_array, size_t source_array_size)
{
 c0078b4:	defffa04 	addi	sp,sp,-24
 c0078b8:	dfc00515 	stw	ra,20(sp)
 c0078bc:	df000415 	stw	fp,16(sp)
 c0078c0:	df000404 	addi	fp,sp,16
 c0078c4:	e13ffd15 	stw	r4,-12(fp)
 c0078c8:	e17ffe15 	stw	r5,-8(fp)
 c0078cc:	e1bfff15 	stw	r6,-4(fp)
    size_t bytes_writen;
    for (bytes_writen = 0; bytes_writen < source_array_size; bytes_writen++)
 c0078d0:	e03ffc15 	stw	zero,-16(fp)
 c0078d4:	00000d06 	br	c00790c <serial_write+0x58>
        serial_putchar(device, source_array[bytes_writen]);
 c0078d8:	e0fffe17 	ldw	r3,-8(fp)
 c0078dc:	e0bffc17 	ldw	r2,-16(fp)
 c0078e0:	1885883a 	add	r2,r3,r2
 c0078e4:	10800003 	ldbu	r2,0(r2)
 c0078e8:	10803fcc 	andi	r2,r2,255
 c0078ec:	1080201c 	xori	r2,r2,128
 c0078f0:	10bfe004 	addi	r2,r2,-128
 c0078f4:	e13ffd17 	ldw	r4,-12(fp)
 c0078f8:	100b883a 	mov	r5,r2
 c0078fc:	c00781c0 	call	c00781c <serial_putchar>
// Public Function Definitions
//===================================================================
size_t serial_write(volatile unsigned char* device, unsigned char * source_array, size_t source_array_size)
{
    size_t bytes_writen;
    for (bytes_writen = 0; bytes_writen < source_array_size; bytes_writen++)
 c007900:	e0bffc17 	ldw	r2,-16(fp)
 c007904:	10800044 	addi	r2,r2,1
 c007908:	e0bffc15 	stw	r2,-16(fp)
 c00790c:	e0fffc17 	ldw	r3,-16(fp)
 c007910:	e0bfff17 	ldw	r2,-4(fp)
 c007914:	18bff036 	bltu	r3,r2,c0078d8 <__alt_data_end+0xfc0078d8>
        serial_putchar(device, source_array[bytes_writen]);

    return bytes_writen;
 c007918:	e0bffc17 	ldw	r2,-16(fp)
}
 c00791c:	e037883a 	mov	sp,fp
 c007920:	dfc00117 	ldw	ra,4(sp)
 c007924:	df000017 	ldw	fp,0(sp)
 c007928:	dec00204 	addi	sp,sp,8
 c00792c:	f800283a 	ret

0c007930 <serial_read>:

size_t serial_read(volatile unsigned char* device, unsigned char * source_array, size_t  source_array_size)
{
 c007930:	defff904 	addi	sp,sp,-28
 c007934:	dfc00615 	stw	ra,24(sp)
 c007938:	df000515 	stw	fp,20(sp)
 c00793c:	dc000415 	stw	r16,16(sp)
 c007940:	df000504 	addi	fp,sp,20
 c007944:	e13ffc15 	stw	r4,-16(fp)
 c007948:	e17ffd15 	stw	r5,-12(fp)
 c00794c:	e1bffe15 	stw	r6,-8(fp)
    size_t bytes_read;
    for (bytes_read = 0; bytes_read < source_array_size; bytes_read++)
 c007950:	e03ffb15 	stw	zero,-20(fp)
 c007954:	00000906 	br	c00797c <serial_read+0x4c>
    {
        source_array[bytes_read] = serial_getchar(device);
 c007958:	e0fffd17 	ldw	r3,-12(fp)
 c00795c:	e0bffb17 	ldw	r2,-20(fp)
 c007960:	18a1883a 	add	r16,r3,r2
 c007964:	e13ffc17 	ldw	r4,-16(fp)
 c007968:	c0078700 	call	c007870 <serial_getchar>
 c00796c:	80800005 	stb	r2,0(r16)
}

size_t serial_read(volatile unsigned char* device, unsigned char * source_array, size_t  source_array_size)
{
    size_t bytes_read;
    for (bytes_read = 0; bytes_read < source_array_size; bytes_read++)
 c007970:	e0bffb17 	ldw	r2,-20(fp)
 c007974:	10800044 	addi	r2,r2,1
 c007978:	e0bffb15 	stw	r2,-20(fp)
 c00797c:	e0fffb17 	ldw	r3,-20(fp)
 c007980:	e0bffe17 	ldw	r2,-8(fp)
 c007984:	18bff436 	bltu	r3,r2,c007958 <__alt_data_end+0xfc007958>
    {
        source_array[bytes_read] = serial_getchar(device);
        //printf("Read the following byte: %04x\n", source_array[bytes_read]);
    }

    return bytes_read;
 c007988:	e0bffb17 	ldw	r2,-20(fp)
}
 c00798c:	e6ffff04 	addi	sp,fp,-4
 c007990:	dfc00217 	ldw	ra,8(sp)
 c007994:	df000117 	ldw	fp,4(sp)
 c007998:	dc000017 	ldw	r16,0(sp)
 c00799c:	dec00304 	addi	sp,sp,12
 c0079a0:	f800283a 	ret

0c0079a4 <serial_read_timeout>:

size_t serial_read_timeout( volatile unsigned char* device, unsigned char * source_array, size_t source_array_size, unsigned long timeout_usec)
{
 c0079a4:	defff804 	addi	sp,sp,-32
 c0079a8:	dfc00715 	stw	ra,28(sp)
 c0079ac:	df000615 	stw	fp,24(sp)
 c0079b0:	dc000515 	stw	r16,20(sp)
 c0079b4:	df000604 	addi	fp,sp,24
 c0079b8:	e13ffb15 	stw	r4,-20(fp)
 c0079bc:	e17ffc15 	stw	r5,-16(fp)
 c0079c0:	e1bffd15 	stw	r6,-12(fp)
 c0079c4:	e1fffe15 	stw	r7,-8(fp)
    size_t bytes_read;
    for (bytes_read = 0; bytes_read < source_array_size; bytes_read++)
 c0079c8:	e03ffa15 	stw	zero,-24(fp)
 c0079cc:	00000f06 	br	c007a0c <serial_read_timeout+0x68>
    {
        if (wait_for_received_data(device, timeout_usec))
 c0079d0:	e13ffb17 	ldw	r4,-20(fp)
 c0079d4:	e17ffe17 	ldw	r5,-8(fp)
 c0079d8:	c007a640 	call	c007a64 <wait_for_received_data>
 c0079dc:	10000726 	beq	r2,zero,c0079fc <serial_read_timeout+0x58>
            source_array[bytes_read] = serial_getchar(device);
 c0079e0:	e0fffc17 	ldw	r3,-16(fp)
 c0079e4:	e0bffa17 	ldw	r2,-24(fp)
 c0079e8:	18a1883a 	add	r16,r3,r2
 c0079ec:	e13ffb17 	ldw	r4,-20(fp)
 c0079f0:	c0078700 	call	c007870 <serial_getchar>
 c0079f4:	80800005 	stb	r2,0(r16)
 c0079f8:	00000106 	br	c007a00 <serial_read_timeout+0x5c>
        else
            break;
 c0079fc:	00000606 	br	c007a18 <serial_read_timeout+0x74>
}

size_t serial_read_timeout( volatile unsigned char* device, unsigned char * source_array, size_t source_array_size, unsigned long timeout_usec)
{
    size_t bytes_read;
    for (bytes_read = 0; bytes_read < source_array_size; bytes_read++)
 c007a00:	e0bffa17 	ldw	r2,-24(fp)
 c007a04:	10800044 	addi	r2,r2,1
 c007a08:	e0bffa15 	stw	r2,-24(fp)
 c007a0c:	e0fffa17 	ldw	r3,-24(fp)
 c007a10:	e0bffd17 	ldw	r2,-12(fp)
 c007a14:	18bfee36 	bltu	r3,r2,c0079d0 <__alt_data_end+0xfc0079d0>
            source_array[bytes_read] = serial_getchar(device);
        else
            break;
    }

    return bytes_read;
 c007a18:	e0bffa17 	ldw	r2,-24(fp)
}
 c007a1c:	e6ffff04 	addi	sp,fp,-4
 c007a20:	dfc00217 	ldw	ra,8(sp)
 c007a24:	df000117 	ldw	fp,4(sp)
 c007a28:	dc000017 	ldw	r16,0(sp)
 c007a2c:	dec00304 	addi	sp,sp,12
 c007a30:	f800283a 	ret

0c007a34 <test_for_received_data>:

int test_for_received_data(volatile unsigned char* device)
{
 c007a34:	defffe04 	addi	sp,sp,-8
 c007a38:	df000115 	stw	fp,4(sp)
 c007a3c:	df000104 	addi	fp,sp,4
 c007a40:	e13fff15 	stw	r4,-4(fp)
  // Test Rx bit in 6850 serial comms chip status register
  // if RX bit is set, return TRUE, otherwise return FALSE
  return STATUS(device) & 0x01;
 c007a44:	e0bfff17 	ldw	r2,-4(fp)
 c007a48:	10800003 	ldbu	r2,0(r2)
 c007a4c:	10803fcc 	andi	r2,r2,255
 c007a50:	1080004c 	andi	r2,r2,1
}
 c007a54:	e037883a 	mov	sp,fp
 c007a58:	df000017 	ldw	fp,0(sp)
 c007a5c:	dec00104 	addi	sp,sp,4
 c007a60:	f800283a 	ret

0c007a64 <wait_for_received_data>:

int wait_for_received_data(volatile unsigned char* device, unsigned long timeout_usec)
{
 c007a64:	defffa04 	addi	sp,sp,-24
 c007a68:	dfc00515 	stw	ra,20(sp)
 c007a6c:	df000415 	stw	fp,16(sp)
 c007a70:	df000404 	addi	fp,sp,16
 c007a74:	e13ffe15 	stw	r4,-8(fp)
 c007a78:	e17fff15 	stw	r5,-4(fp)
  // Test Rx bit in 6850 serial comms chip status register
  // if RX bit is set, return TRUE, otherwise return FALSE
  int data_available = 0;
 c007a7c:	e03ffc15 	stw	zero,-16(fp)
  int elapsed_time = 0;
 c007a80:	e03ffd15 	stw	zero,-12(fp)
  data_available = test_for_received_data(device);
 c007a84:	e13ffe17 	ldw	r4,-8(fp)
 c007a88:	c007a340 	call	c007a34 <test_for_received_data>
 c007a8c:	e0bffc15 	stw	r2,-16(fp)
  while ((!data_available) && elapsed_time < timeout_usec)
 c007a90:	00000806 	br	c007ab4 <wait_for_received_data+0x50>
  {
      usleep(WAIT_STEP_USEC);
 c007a94:	01000204 	movi	r4,8
 c007a98:	c01561c0 	call	c01561c <usleep>
      elapsed_time += WAIT_STEP_USEC;
 c007a9c:	e0bffd17 	ldw	r2,-12(fp)
 c007aa0:	10800204 	addi	r2,r2,8
 c007aa4:	e0bffd15 	stw	r2,-12(fp)
      data_available = test_for_received_data(device);
 c007aa8:	e13ffe17 	ldw	r4,-8(fp)
 c007aac:	c007a340 	call	c007a34 <test_for_received_data>
 c007ab0:	e0bffc15 	stw	r2,-16(fp)
  // Test Rx bit in 6850 serial comms chip status register
  // if RX bit is set, return TRUE, otherwise return FALSE
  int data_available = 0;
  int elapsed_time = 0;
  data_available = test_for_received_data(device);
  while ((!data_available) && elapsed_time < timeout_usec)
 c007ab4:	e0bffc17 	ldw	r2,-16(fp)
 c007ab8:	1000031e 	bne	r2,zero,c007ac8 <wait_for_received_data+0x64>
 c007abc:	e0fffd17 	ldw	r3,-12(fp)
 c007ac0:	e0bfff17 	ldw	r2,-4(fp)
 c007ac4:	18bff336 	bltu	r3,r2,c007a94 <__alt_data_end+0xfc007a94>
  {
      usleep(WAIT_STEP_USEC);
      elapsed_time += WAIT_STEP_USEC;
      data_available = test_for_received_data(device);
  }
  return data_available;
 c007ac8:	e0bffc17 	ldw	r2,-16(fp)
}
 c007acc:	e037883a 	mov	sp,fp
 c007ad0:	dfc00117 	ldw	ra,4(sp)
 c007ad4:	df000017 	ldw	fp,0(sp)
 c007ad8:	dec00204 	addi	sp,sp,8
 c007adc:	f800283a 	ret

0c007ae0 <get_raw_coordinates>:

//===================================================================
// Utility Functions
//===================================================================
int get_raw_coordinates(unsigned char upper_byte, unsigned char lower_byte)
{
 c007ae0:	defffd04 	addi	sp,sp,-12
 c007ae4:	df000215 	stw	fp,8(sp)
 c007ae8:	df000204 	addi	fp,sp,8
 c007aec:	2007883a 	mov	r3,r4
 c007af0:	2805883a 	mov	r2,r5
 c007af4:	e0fffe05 	stb	r3,-8(fp)
 c007af8:	e0bfff05 	stb	r2,-4(fp)
    return ((upper_byte & 0x1F) << 0x07) | (lower_byte & 0x7F);
 c007afc:	e0bffe03 	ldbu	r2,-8(fp)
 c007b00:	108007cc 	andi	r2,r2,31
 c007b04:	100691fa 	slli	r3,r2,7
 c007b08:	e0bfff03 	ldbu	r2,-4(fp)
 c007b0c:	10801fcc 	andi	r2,r2,127
 c007b10:	1884b03a 	or	r2,r3,r2
}
 c007b14:	e037883a 	mov	sp,fp
 c007b18:	df000017 	ldw	fp,0(sp)
 c007b1c:	dec00104 	addi	sp,sp,4
 c007b20:	f800283a 	ret

0c007b24 <verify_touch_report>:
 * \param [in] touch_report, The command byte sent.
 * \return This function returns 1 if the response from the device is well
 *         formed, else it returns 0.
 */
int verify_touch_report(unsigned char * touch_report, int size)
{
 c007b24:	defffc04 	addi	sp,sp,-16
 c007b28:	df000315 	stw	fp,12(sp)
 c007b2c:	df000304 	addi	fp,sp,12
 c007b30:	e13ffe15 	stw	r4,-8(fp)
 c007b34:	e17fff15 	stw	r5,-4(fp)
    int touch_report_index;
    for (touch_report_index = 0; touch_report_index < size; touch_report_index++)
 c007b38:	e03ffd15 	stw	zero,-12(fp)
 c007b3c:	00000d06 	br	c007b74 <verify_touch_report+0x50>
    {
        if (touch_report[touch_report_index] & 0x80)
 c007b40:	e0bffd17 	ldw	r2,-12(fp)
 c007b44:	e0fffe17 	ldw	r3,-8(fp)
 c007b48:	1885883a 	add	r2,r3,r2
 c007b4c:	10800003 	ldbu	r2,0(r2)
 c007b50:	10803fcc 	andi	r2,r2,255
 c007b54:	1080201c 	xori	r2,r2,128
 c007b58:	10bfe004 	addi	r2,r2,-128
 c007b5c:	1000020e 	bge	r2,zero,c007b68 <verify_touch_report+0x44>
            return 0;
 c007b60:	0005883a 	mov	r2,zero
 c007b64:	00000706 	br	c007b84 <verify_touch_report+0x60>
 *         formed, else it returns 0.
 */
int verify_touch_report(unsigned char * touch_report, int size)
{
    int touch_report_index;
    for (touch_report_index = 0; touch_report_index < size; touch_report_index++)
 c007b68:	e0bffd17 	ldw	r2,-12(fp)
 c007b6c:	10800044 	addi	r2,r2,1
 c007b70:	e0bffd15 	stw	r2,-12(fp)
 c007b74:	e0fffd17 	ldw	r3,-12(fp)
 c007b78:	e0bfff17 	ldw	r2,-4(fp)
 c007b7c:	18bff016 	blt	r3,r2,c007b40 <__alt_data_end+0xfc007b40>
    {
        if (touch_report[touch_report_index] & 0x80)
            return 0;
    }

    return 1;
 c007b80:	00800044 	movi	r2,1
}
 c007b84:	e037883a 	mov	sp,fp
 c007b88:	df000017 	ldw	fp,0(sp)
 c007b8c:	dec00104 	addi	sp,sp,4
 c007b90:	f800283a 	ret

0c007b94 <init_touch>:

//===================================================================
// Public Function Definitions
//===================================================================
int init_touch(void)
{
 c007b94:	defffd04 	addi	sp,sp,-12
 c007b98:	dfc00215 	stw	ra,8(sp)
 c007b9c:	df000115 	stw	fp,4(sp)
 c007ba0:	df000104 	addi	fp,sp,4
    // Program 6850 and baud rate generator to communicate with touchscreen
    init_serial(TOUCHSCREEN);
 c007ba4:	01210034 	movhi	r4,33792
 c007ba8:	21008c04 	addi	r4,r4,560
 c007bac:	c0077200 	call	c007720 <init_serial>
    // send touchscreen controller an "enable touch" command
    serial_write(TOUCHSCREEN, ENABLE_TOUCH_COMMAND, 0x03);
 c007bb0:	01210034 	movhi	r4,33792
 c007bb4:	21008c04 	addi	r4,r4,560
 c007bb8:	d1600504 	addi	r5,gp,-32748
 c007bbc:	018000c4 	movi	r6,3
 c007bc0:	c0078b40 	call	c0078b4 <serial_write>
    // Wait for response
    unsigned char touch_enable_response[0x04];
    serial_read(TOUCHSCREEN, touch_enable_response, 0x04);
 c007bc4:	01210034 	movhi	r4,33792
 c007bc8:	21008c04 	addi	r4,r4,560
 c007bcc:	e17fff04 	addi	r5,fp,-4
 c007bd0:	01800104 	movi	r6,4
 c007bd4:	c0079300 	call	c007930 <serial_read>
    if ((touch_enable_response[2] != STATUS_OK) || (touch_enable_response[3] != 0x12))
 c007bd8:	e0bfff83 	ldbu	r2,-2(fp)
 c007bdc:	10803fcc 	andi	r2,r2,255
 c007be0:	1000041e 	bne	r2,zero,c007bf4 <init_touch+0x60>
 c007be4:	e0bfffc3 	ldbu	r2,-1(fp)
 c007be8:	10803fcc 	andi	r2,r2,255
 c007bec:	108004a0 	cmpeqi	r2,r2,18
 c007bf0:	1000021e 	bne	r2,zero,c007bfc <init_touch+0x68>
            return 0;
 c007bf4:	0005883a 	mov	r2,zero
 c007bf8:	00000106 	br	c007c00 <init_touch+0x6c>

    return 1;
 c007bfc:	00800044 	movi	r2,1
}
 c007c00:	e037883a 	mov	sp,fp
 c007c04:	dfc00117 	ldw	ra,4(sp)
 c007c08:	df000017 	ldw	fp,0(sp)
 c007c0c:	dec00204 	addi	sp,sp,8
 c007c10:	f800283a 	ret

0c007c14 <ScreenTouched>:


int ScreenTouched( void )
{
 c007c14:	defffe04 	addi	sp,sp,-8
 c007c18:	dfc00115 	stw	ra,4(sp)
 c007c1c:	df000015 	stw	fp,0(sp)
 c007c20:	d839883a 	mov	fp,sp
    return test_for_received_data(CAMERA);
 c007c24:	01210034 	movhi	r4,33792
 c007c28:	21008404 	addi	r4,r4,528
 c007c2c:	c007a340 	call	c007a34 <test_for_received_data>
}
 c007c30:	e037883a 	mov	sp,fp
 c007c34:	dfc00117 	ldw	ra,4(sp)
 c007c38:	df000017 	ldw	fp,0(sp)
 c007c3c:	dec00204 	addi	sp,sp,8
 c007c40:	f800283a 	ret

0c007c44 <WaitForTouch>:



void WaitForTouch()
{
 c007c44:	defffe04 	addi	sp,sp,-8
 c007c48:	dfc00115 	stw	ra,4(sp)
 c007c4c:	df000015 	stw	fp,0(sp)
 c007c50:	d839883a 	mov	fp,sp
    while(!ScreenTouched());
 c007c54:	0001883a 	nop
 c007c58:	c007c140 	call	c007c14 <ScreenTouched>
 c007c5c:	103ffe26 	beq	r2,zero,c007c58 <__alt_data_end+0xfc007c58>
}
 c007c60:	e037883a 	mov	sp,fp
 c007c64:	dfc00117 	ldw	ra,4(sp)
 c007c68:	df000017 	ldw	fp,0(sp)
 c007c6c:	dec00204 	addi	sp,sp,8
 c007c70:	f800283a 	ret

0c007c74 <get_press_timeout>:

Point get_press_timeout(unsigned long timeout_usec)
{
 c007c74:	defff804 	addi	sp,sp,-32
 c007c78:	dfc00715 	stw	ra,28(sp)
 c007c7c:	df000615 	stw	fp,24(sp)
 c007c80:	df000604 	addi	fp,sp,24
 c007c84:	e13fff15 	stw	r4,-4(fp)
    Point press_point = {.x = INVALID_POINT_DATA, .y = INVALID_POINT_DATA};
 c007c88:	00bfffc4 	movi	r2,-1
 c007c8c:	e0bffb15 	stw	r2,-20(fp)
 c007c90:	00bfffc4 	movi	r2,-1
 c007c94:	e0bffc15 	stw	r2,-16(fp)
    int num_bytes = 0;
 c007c98:	e03ffa15 	stw	zero,-24(fp)
    // wait for a pen down command then return the X,Y coord of the point
    // Wait for the first byte to indicate the type of message.
    unsigned char received_event_byte = 0x00;
 c007c9c:	e03ffd05 	stb	zero,-12(fp)
    while (received_event_byte != PEN_DOWN)
 c007ca0:	00000e06 	br	c007cdc <get_press_timeout+0x68>
    {
        num_bytes = serial_read_timeout(TOUCHSCREEN, &received_event_byte,
 c007ca4:	e0bffd04 	addi	r2,fp,-12
 c007ca8:	01210034 	movhi	r4,33792
 c007cac:	21008c04 	addi	r4,r4,560
 c007cb0:	100b883a 	mov	r5,r2
 c007cb4:	01800044 	movi	r6,1
 c007cb8:	e1ffff17 	ldw	r7,-4(fp)
 c007cbc:	c0079a40 	call	c0079a4 <serial_read_timeout>
 c007cc0:	e0bffa15 	stw	r2,-24(fp)
                                        0x01, timeout_usec);
        if (num_bytes != 1)
 c007cc4:	e0bffa17 	ldw	r2,-24(fp)
 c007cc8:	10800060 	cmpeqi	r2,r2,1
 c007ccc:	1000031e 	bne	r2,zero,c007cdc <get_press_timeout+0x68>
            return press_point;
 c007cd0:	e0bffb17 	ldw	r2,-20(fp)
 c007cd4:	e0fffc17 	ldw	r3,-16(fp)
 c007cd8:	00004d06 	br	c007e10 <get_press_timeout+0x19c>
    Point press_point = {.x = INVALID_POINT_DATA, .y = INVALID_POINT_DATA};
    int num_bytes = 0;
    // wait for a pen down command then return the X,Y coord of the point
    // Wait for the first byte to indicate the type of message.
    unsigned char received_event_byte = 0x00;
    while (received_event_byte != PEN_DOWN)
 c007cdc:	e0bffd03 	ldbu	r2,-12(fp)
 c007ce0:	10803fcc 	andi	r2,r2,255
 c007ce4:	10802058 	cmpnei	r2,r2,129
 c007ce8:	103fee1e 	bne	r2,zero,c007ca4 <__alt_data_end+0xfc007ca4>
            return press_point;
    }

    // Receive the rest of the message Pen Down Message
    unsigned char touch_report[0x04];
    num_bytes = serial_read_timeout(TOUCHSCREEN, &touch_report, 0x04, timeout_usec);
 c007cec:	e0bffd44 	addi	r2,fp,-11
 c007cf0:	01210034 	movhi	r4,33792
 c007cf4:	21008c04 	addi	r4,r4,560
 c007cf8:	100b883a 	mov	r5,r2
 c007cfc:	01800104 	movi	r6,4
 c007d00:	e1ffff17 	ldw	r7,-4(fp)
 c007d04:	c0079a40 	call	c0079a4 <serial_read_timeout>
 c007d08:	e0bffa15 	stw	r2,-24(fp)

    if (num_bytes != 0x04)
 c007d0c:	e0bffa17 	ldw	r2,-24(fp)
 c007d10:	10800120 	cmpeqi	r2,r2,4
 c007d14:	1000031e 	bne	r2,zero,c007d24 <get_press_timeout+0xb0>
        return press_point;
 c007d18:	e0bffb17 	ldw	r2,-20(fp)
 c007d1c:	e0fffc17 	ldw	r3,-16(fp)
 c007d20:	00003b06 	br	c007e10 <get_press_timeout+0x19c>

    if (verify_touch_report(touch_report, num_bytes))
 c007d24:	e0bffd44 	addi	r2,fp,-11
 c007d28:	1009883a 	mov	r4,r2
 c007d2c:	e17ffa17 	ldw	r5,-24(fp)
 c007d30:	c007b240 	call	c007b24 <verify_touch_report>
 c007d34:	10003426 	beq	r2,zero,c007e08 <get_press_timeout+0x194>
    {
        press_point.x =  (get_raw_coordinates(touch_report[1], touch_report[0]))/ X_CONVERSION_FACTOR;
 c007d38:	e0bffd83 	ldbu	r2,-10(fp)
 c007d3c:	10c03fcc 	andi	r3,r2,255
 c007d40:	e0bffd43 	ldbu	r2,-11(fp)
 c007d44:	10803fcc 	andi	r2,r2,255
 c007d48:	1809883a 	mov	r4,r3
 c007d4c:	100b883a 	mov	r5,r2
 c007d50:	c007ae00 	call	c007ae0 <get_raw_coordinates>
 c007d54:	1009883a 	mov	r4,r2
 c007d58:	c008a780 	call	c008a78 <__floatsidf>
 c007d5c:	100b883a 	mov	r5,r2
 c007d60:	180d883a 	mov	r6,r3
 c007d64:	2809883a 	mov	r4,r5
 c007d68:	300b883a 	mov	r5,r6
 c007d6c:	0191ebb4 	movhi	r6,18350
 c007d70:	31851ec4 	addi	r6,r6,5243
 c007d74:	01d00534 	movhi	r7,16404
 c007d78:	39deb844 	addi	r7,r7,31457
 c007d7c:	c0081240 	call	c008124 <__divdf3>
 c007d80:	1009883a 	mov	r4,r2
 c007d84:	180b883a 	mov	r5,r3
 c007d88:	2005883a 	mov	r2,r4
 c007d8c:	2807883a 	mov	r3,r5
 c007d90:	1009883a 	mov	r4,r2
 c007d94:	180b883a 	mov	r5,r3
 c007d98:	c0089f00 	call	c0089f0 <__fixdfsi>
 c007d9c:	e0bffb15 	stw	r2,-20(fp)
        press_point.y =  (get_raw_coordinates(touch_report[3], touch_report[2]))/ Y_CONVERSION_FACTOR;
 c007da0:	e0bffe03 	ldbu	r2,-8(fp)
 c007da4:	10c03fcc 	andi	r3,r2,255
 c007da8:	e0bffdc3 	ldbu	r2,-9(fp)
 c007dac:	10803fcc 	andi	r2,r2,255
 c007db0:	1809883a 	mov	r4,r3
 c007db4:	100b883a 	mov	r5,r2
 c007db8:	c007ae00 	call	c007ae0 <get_raw_coordinates>
 c007dbc:	1009883a 	mov	r4,r2
 c007dc0:	c008a780 	call	c008a78 <__floatsidf>
 c007dc4:	100b883a 	mov	r5,r2
 c007dc8:	180d883a 	mov	r6,r3
 c007dcc:	2809883a 	mov	r4,r5
 c007dd0:	300b883a 	mov	r5,r6
 c007dd4:	018a3db4 	movhi	r6,10486
 c007dd8:	31b0a3c4 	addi	r6,r6,-15729
 c007ddc:	01d00874 	movhi	r7,16417
 c007de0:	39c3d704 	addi	r7,r7,3932
 c007de4:	c0081240 	call	c008124 <__divdf3>
 c007de8:	1009883a 	mov	r4,r2
 c007dec:	180b883a 	mov	r5,r3
 c007df0:	2005883a 	mov	r2,r4
 c007df4:	2807883a 	mov	r3,r5
 c007df8:	1009883a 	mov	r4,r2
 c007dfc:	180b883a 	mov	r5,r3
 c007e00:	c0089f00 	call	c0089f0 <__fixdfsi>
 c007e04:	e0bffc15 	stw	r2,-16(fp)
    }
    // calibrated correctly so that it maps to a pixel on screen
    return press_point;
 c007e08:	e0bffb17 	ldw	r2,-20(fp)
 c007e0c:	e0fffc17 	ldw	r3,-16(fp)
 c007e10:	1009883a 	mov	r4,r2
 c007e14:	180b883a 	mov	r5,r3
}
 c007e18:	2005883a 	mov	r2,r4
 c007e1c:	2807883a 	mov	r3,r5
 c007e20:	e037883a 	mov	sp,fp
 c007e24:	dfc00117 	ldw	ra,4(sp)
 c007e28:	df000017 	ldw	fp,0(sp)
 c007e2c:	dec00204 	addi	sp,sp,8
 c007e30:	f800283a 	ret

0c007e34 <get_press>:


Point get_press(void)
{
 c007e34:	defffa04 	addi	sp,sp,-24
 c007e38:	dfc00515 	stw	ra,20(sp)
 c007e3c:	df000415 	stw	fp,16(sp)
 c007e40:	df000404 	addi	fp,sp,16
    Point press_point = {.x = -1, .y = -1};
 c007e44:	00bfffc4 	movi	r2,-1
 c007e48:	e0bffc15 	stw	r2,-16(fp)
 c007e4c:	00bfffc4 	movi	r2,-1
 c007e50:	e0bffd15 	stw	r2,-12(fp)
    // wait for a pen down command then return the X,Y coord of the point
    // Wait for the first byte to indicate the type of message.
    unsigned char received_event_byte = 0x00;
 c007e54:	e03ffe05 	stb	zero,-8(fp)
    while (received_event_byte != PEN_DOWN)
 c007e58:	00000606 	br	c007e74 <get_press+0x40>
        serial_read(TOUCHSCREEN, &received_event_byte, 0x01);
 c007e5c:	e0bffe04 	addi	r2,fp,-8
 c007e60:	01210034 	movhi	r4,33792
 c007e64:	21008c04 	addi	r4,r4,560
 c007e68:	100b883a 	mov	r5,r2
 c007e6c:	01800044 	movi	r6,1
 c007e70:	c0079300 	call	c007930 <serial_read>
{
    Point press_point = {.x = -1, .y = -1};
    // wait for a pen down command then return the X,Y coord of the point
    // Wait for the first byte to indicate the type of message.
    unsigned char received_event_byte = 0x00;
    while (received_event_byte != PEN_DOWN)
 c007e74:	e0bffe03 	ldbu	r2,-8(fp)
 c007e78:	10803fcc 	andi	r2,r2,255
 c007e7c:	10802058 	cmpnei	r2,r2,129
 c007e80:	103ff61e 	bne	r2,zero,c007e5c <__alt_data_end+0xfc007e5c>
        serial_read(TOUCHSCREEN, &received_event_byte, 0x01);
    // Receive the rest of the message Pen Down Message
    unsigned char touch_report[0x04];
    serial_read(TOUCHSCREEN, &touch_report, 0x04);
 c007e84:	e0bffe44 	addi	r2,fp,-7
 c007e88:	01210034 	movhi	r4,33792
 c007e8c:	21008c04 	addi	r4,r4,560
 c007e90:	100b883a 	mov	r5,r2
 c007e94:	01800104 	movi	r6,4
 c007e98:	c0079300 	call	c007930 <serial_read>
    if (verify_touch_report(touch_report, 0x04))
 c007e9c:	e0bffe44 	addi	r2,fp,-7
 c007ea0:	1009883a 	mov	r4,r2
 c007ea4:	01400104 	movi	r5,4
 c007ea8:	c007b240 	call	c007b24 <verify_touch_report>
 c007eac:	10003426 	beq	r2,zero,c007f80 <get_press+0x14c>
    {
        press_point.x =  (get_raw_coordinates(touch_report[1], touch_report[0]))/ X_CONVERSION_FACTOR;
 c007eb0:	e0bffe83 	ldbu	r2,-6(fp)
 c007eb4:	10c03fcc 	andi	r3,r2,255
 c007eb8:	e0bffe43 	ldbu	r2,-7(fp)
 c007ebc:	10803fcc 	andi	r2,r2,255
 c007ec0:	1809883a 	mov	r4,r3
 c007ec4:	100b883a 	mov	r5,r2
 c007ec8:	c007ae00 	call	c007ae0 <get_raw_coordinates>
 c007ecc:	1009883a 	mov	r4,r2
 c007ed0:	c008a780 	call	c008a78 <__floatsidf>
 c007ed4:	100b883a 	mov	r5,r2
 c007ed8:	180d883a 	mov	r6,r3
 c007edc:	2809883a 	mov	r4,r5
 c007ee0:	300b883a 	mov	r5,r6
 c007ee4:	0191ebb4 	movhi	r6,18350
 c007ee8:	31851ec4 	addi	r6,r6,5243
 c007eec:	01d00534 	movhi	r7,16404
 c007ef0:	39deb844 	addi	r7,r7,31457
 c007ef4:	c0081240 	call	c008124 <__divdf3>
 c007ef8:	1009883a 	mov	r4,r2
 c007efc:	180b883a 	mov	r5,r3
 c007f00:	2005883a 	mov	r2,r4
 c007f04:	2807883a 	mov	r3,r5
 c007f08:	1009883a 	mov	r4,r2
 c007f0c:	180b883a 	mov	r5,r3
 c007f10:	c0089f00 	call	c0089f0 <__fixdfsi>
 c007f14:	e0bffc15 	stw	r2,-16(fp)
        press_point.y =  (get_raw_coordinates(touch_report[3], touch_report[2]))/ Y_CONVERSION_FACTOR;
 c007f18:	e0bfff03 	ldbu	r2,-4(fp)
 c007f1c:	10c03fcc 	andi	r3,r2,255
 c007f20:	e0bffec3 	ldbu	r2,-5(fp)
 c007f24:	10803fcc 	andi	r2,r2,255
 c007f28:	1809883a 	mov	r4,r3
 c007f2c:	100b883a 	mov	r5,r2
 c007f30:	c007ae00 	call	c007ae0 <get_raw_coordinates>
 c007f34:	1009883a 	mov	r4,r2
 c007f38:	c008a780 	call	c008a78 <__floatsidf>
 c007f3c:	100b883a 	mov	r5,r2
 c007f40:	180d883a 	mov	r6,r3
 c007f44:	2809883a 	mov	r4,r5
 c007f48:	300b883a 	mov	r5,r6
 c007f4c:	018a3db4 	movhi	r6,10486
 c007f50:	31b0a3c4 	addi	r6,r6,-15729
 c007f54:	01d00874 	movhi	r7,16417
 c007f58:	39c3d704 	addi	r7,r7,3932
 c007f5c:	c0081240 	call	c008124 <__divdf3>
 c007f60:	1009883a 	mov	r4,r2
 c007f64:	180b883a 	mov	r5,r3
 c007f68:	2005883a 	mov	r2,r4
 c007f6c:	2807883a 	mov	r3,r5
 c007f70:	1009883a 	mov	r4,r2
 c007f74:	180b883a 	mov	r5,r3
 c007f78:	c0089f00 	call	c0089f0 <__fixdfsi>
 c007f7c:	e0bffd15 	stw	r2,-12(fp)
    }
    // calibrated correctly so that it maps to a pixel on screen
    return press_point;
 c007f80:	e0bffc17 	ldw	r2,-16(fp)
 c007f84:	e0fffd17 	ldw	r3,-12(fp)
 c007f88:	1009883a 	mov	r4,r2
 c007f8c:	180b883a 	mov	r5,r3
}
 c007f90:	2005883a 	mov	r2,r4
 c007f94:	2807883a 	mov	r3,r5
 c007f98:	e037883a 	mov	sp,fp
 c007f9c:	dfc00117 	ldw	ra,4(sp)
 c007fa0:	df000017 	ldw	fp,0(sp)
 c007fa4:	dec00204 	addi	sp,sp,8
 c007fa8:	f800283a 	ret

0c007fac <get_release>:

Point get_release(void)
{
 c007fac:	defffa04 	addi	sp,sp,-24
 c007fb0:	dfc00515 	stw	ra,20(sp)
 c007fb4:	df000415 	stw	fp,16(sp)
 c007fb8:	df000404 	addi	fp,sp,16
    Point release_point = {.x = -1, .y = -1};
 c007fbc:	00bfffc4 	movi	r2,-1
 c007fc0:	e0bffc15 	stw	r2,-16(fp)
 c007fc4:	00bfffc4 	movi	r2,-1
 c007fc8:	e0bffd15 	stw	r2,-12(fp)
    // wait for a pen down command then return the X,Y coord of the point
    // Wait for the first byte to indicate the type of message.
    unsigned char received_event_byte = 0x00;
 c007fcc:	e03ffe05 	stb	zero,-8(fp)
    while (received_event_byte != PEN_UP)
 c007fd0:	00000606 	br	c007fec <get_release+0x40>
        serial_read(TOUCHSCREEN, &received_event_byte, 0x01);
 c007fd4:	e0bffe04 	addi	r2,fp,-8
 c007fd8:	01210034 	movhi	r4,33792
 c007fdc:	21008c04 	addi	r4,r4,560
 c007fe0:	100b883a 	mov	r5,r2
 c007fe4:	01800044 	movi	r6,1
 c007fe8:	c0079300 	call	c007930 <serial_read>
{
    Point release_point = {.x = -1, .y = -1};
    // wait for a pen down command then return the X,Y coord of the point
    // Wait for the first byte to indicate the type of message.
    unsigned char received_event_byte = 0x00;
    while (received_event_byte != PEN_UP)
 c007fec:	e0bffe03 	ldbu	r2,-8(fp)
 c007ff0:	10803fcc 	andi	r2,r2,255
 c007ff4:	10802018 	cmpnei	r2,r2,128
 c007ff8:	103ff61e 	bne	r2,zero,c007fd4 <__alt_data_end+0xfc007fd4>
        serial_read(TOUCHSCREEN, &received_event_byte, 0x01);
    // Receive the rest of the message Pen Down Message
    unsigned char touch_report[0x04];
    serial_read(TOUCHSCREEN, &touch_report, 0x04);
 c007ffc:	e0bffe44 	addi	r2,fp,-7
 c008000:	01210034 	movhi	r4,33792
 c008004:	21008c04 	addi	r4,r4,560
 c008008:	100b883a 	mov	r5,r2
 c00800c:	01800104 	movi	r6,4
 c008010:	c0079300 	call	c007930 <serial_read>
    if (verify_touch_report(touch_report, 0x04))
 c008014:	e0bffe44 	addi	r2,fp,-7
 c008018:	1009883a 	mov	r4,r2
 c00801c:	01400104 	movi	r5,4
 c008020:	c007b240 	call	c007b24 <verify_touch_report>
 c008024:	10003426 	beq	r2,zero,c0080f8 <get_release+0x14c>
    {
        release_point.x =  (get_raw_coordinates(touch_report[1], touch_report[0]))/ X_CONVERSION_FACTOR;
 c008028:	e0bffe83 	ldbu	r2,-6(fp)
 c00802c:	10c03fcc 	andi	r3,r2,255
 c008030:	e0bffe43 	ldbu	r2,-7(fp)
 c008034:	10803fcc 	andi	r2,r2,255
 c008038:	1809883a 	mov	r4,r3
 c00803c:	100b883a 	mov	r5,r2
 c008040:	c007ae00 	call	c007ae0 <get_raw_coordinates>
 c008044:	1009883a 	mov	r4,r2
 c008048:	c008a780 	call	c008a78 <__floatsidf>
 c00804c:	100b883a 	mov	r5,r2
 c008050:	180d883a 	mov	r6,r3
 c008054:	2809883a 	mov	r4,r5
 c008058:	300b883a 	mov	r5,r6
 c00805c:	0191ebb4 	movhi	r6,18350
 c008060:	31851ec4 	addi	r6,r6,5243
 c008064:	01d00534 	movhi	r7,16404
 c008068:	39deb844 	addi	r7,r7,31457
 c00806c:	c0081240 	call	c008124 <__divdf3>
 c008070:	1009883a 	mov	r4,r2
 c008074:	180b883a 	mov	r5,r3
 c008078:	2005883a 	mov	r2,r4
 c00807c:	2807883a 	mov	r3,r5
 c008080:	1009883a 	mov	r4,r2
 c008084:	180b883a 	mov	r5,r3
 c008088:	c0089f00 	call	c0089f0 <__fixdfsi>
 c00808c:	e0bffc15 	stw	r2,-16(fp)
        release_point.y =  (get_raw_coordinates(touch_report[3], touch_report[2]))/ Y_CONVERSION_FACTOR;
 c008090:	e0bfff03 	ldbu	r2,-4(fp)
 c008094:	10c03fcc 	andi	r3,r2,255
 c008098:	e0bffec3 	ldbu	r2,-5(fp)
 c00809c:	10803fcc 	andi	r2,r2,255
 c0080a0:	1809883a 	mov	r4,r3
 c0080a4:	100b883a 	mov	r5,r2
 c0080a8:	c007ae00 	call	c007ae0 <get_raw_coordinates>
 c0080ac:	1009883a 	mov	r4,r2
 c0080b0:	c008a780 	call	c008a78 <__floatsidf>
 c0080b4:	100b883a 	mov	r5,r2
 c0080b8:	180d883a 	mov	r6,r3
 c0080bc:	2809883a 	mov	r4,r5
 c0080c0:	300b883a 	mov	r5,r6
 c0080c4:	018a3db4 	movhi	r6,10486
 c0080c8:	31b0a3c4 	addi	r6,r6,-15729
 c0080cc:	01d00874 	movhi	r7,16417
 c0080d0:	39c3d704 	addi	r7,r7,3932
 c0080d4:	c0081240 	call	c008124 <__divdf3>
 c0080d8:	1009883a 	mov	r4,r2
 c0080dc:	180b883a 	mov	r5,r3
 c0080e0:	2005883a 	mov	r2,r4
 c0080e4:	2807883a 	mov	r3,r5
 c0080e8:	1009883a 	mov	r4,r2
 c0080ec:	180b883a 	mov	r5,r3
 c0080f0:	c0089f00 	call	c0089f0 <__fixdfsi>
 c0080f4:	e0bffd15 	stw	r2,-12(fp)
    }
    // calibrated correctly so that it maps to a pixel on screen
    return release_point;
 c0080f8:	e0bffc17 	ldw	r2,-16(fp)
 c0080fc:	e0fffd17 	ldw	r3,-12(fp)
 c008100:	1009883a 	mov	r4,r2
 c008104:	180b883a 	mov	r5,r3
}
 c008108:	2005883a 	mov	r2,r4
 c00810c:	2807883a 	mov	r3,r5
 c008110:	e037883a 	mov	sp,fp
 c008114:	dfc00117 	ldw	ra,4(sp)
 c008118:	df000017 	ldw	fp,0(sp)
 c00811c:	dec00204 	addi	sp,sp,8
 c008120:	f800283a 	ret

0c008124 <__divdf3>:
 c008124:	defff204 	addi	sp,sp,-56
 c008128:	dd000815 	stw	r20,32(sp)
 c00812c:	2828d53a 	srli	r20,r5,20
 c008130:	dd800a15 	stw	r22,40(sp)
 c008134:	282cd7fa 	srli	r22,r5,31
 c008138:	dc000415 	stw	r16,16(sp)
 c00813c:	04000434 	movhi	r16,16
 c008140:	df000c15 	stw	fp,48(sp)
 c008144:	dcc00715 	stw	r19,28(sp)
 c008148:	dc800615 	stw	r18,24(sp)
 c00814c:	dc400515 	stw	r17,20(sp)
 c008150:	843fffc4 	addi	r16,r16,-1
 c008154:	dfc00d15 	stw	ra,52(sp)
 c008158:	ddc00b15 	stw	r23,44(sp)
 c00815c:	dd400915 	stw	r21,36(sp)
 c008160:	a501ffcc 	andi	r20,r20,2047
 c008164:	2025883a 	mov	r18,r4
 c008168:	2027883a 	mov	r19,r4
 c00816c:	2c22703a 	and	r17,r5,r16
 c008170:	b7003fcc 	andi	fp,r22,255
 c008174:	a0005e26 	beq	r20,zero,c0082f0 <__divdf3+0x1cc>
 c008178:	0081ffc4 	movi	r2,2047
 c00817c:	a0803526 	beq	r20,r2,c008254 <__divdf3+0x130>
 c008180:	8c000434 	orhi	r16,r17,16
 c008184:	2004d77a 	srli	r2,r4,29
 c008188:	802090fa 	slli	r16,r16,3
 c00818c:	202690fa 	slli	r19,r4,3
 c008190:	a53f0044 	addi	r20,r20,-1023
 c008194:	80a2b03a 	or	r17,r16,r2
 c008198:	0025883a 	mov	r18,zero
 c00819c:	0011883a 	mov	r8,zero
 c0081a0:	380ad53a 	srli	r5,r7,20
 c0081a4:	382ed7fa 	srli	r23,r7,31
 c0081a8:	04000434 	movhi	r16,16
 c0081ac:	843fffc4 	addi	r16,r16,-1
 c0081b0:	2941ffcc 	andi	r5,r5,2047
 c0081b4:	302b883a 	mov	r21,r6
 c0081b8:	3c20703a 	and	r16,r7,r16
 c0081bc:	ba403fcc 	andi	r9,r23,255
 c0081c0:	28006726 	beq	r5,zero,c008360 <__divdf3+0x23c>
 c0081c4:	0081ffc4 	movi	r2,2047
 c0081c8:	28805f26 	beq	r5,r2,c008348 <__divdf3+0x224>
 c0081cc:	84000434 	orhi	r16,r16,16
 c0081d0:	3004d77a 	srli	r2,r6,29
 c0081d4:	802090fa 	slli	r16,r16,3
 c0081d8:	302a90fa 	slli	r21,r6,3
 c0081dc:	297f0044 	addi	r5,r5,-1023
 c0081e0:	80a0b03a 	or	r16,r16,r2
 c0081e4:	000f883a 	mov	r7,zero
 c0081e8:	3c86b03a 	or	r3,r7,r18
 c0081ec:	180690ba 	slli	r3,r3,2
 c0081f0:	00830074 	movhi	r2,3073
 c0081f4:	10a08504 	addi	r2,r2,-32236
 c0081f8:	1887883a 	add	r3,r3,r2
 c0081fc:	18c00017 	ldw	r3,0(r3)
 c008200:	b5c8f03a 	xor	r4,r22,r23
 c008204:	200d883a 	mov	r6,r4
 c008208:	24803fcc 	andi	r18,r4,255
 c00820c:	a169c83a 	sub	r20,r20,r5
 c008210:	1800683a 	jmp	r3
 c008214:	0c00845c 	xori	r16,at,529
 c008218:	0c00828c 	andi	r16,at,522
 c00821c:	0c008420 	cmpeqi	r16,at,528
 c008220:	0c008270 	cmpltui	r16,at,521
 c008224:	0c008420 	cmpeqi	r16,at,528
 c008228:	0c0083f4 	orhi	r16,at,527
 c00822c:	0c008420 	cmpeqi	r16,at,528
 c008230:	0c008270 	cmpltui	r16,at,521
 c008234:	0c00828c 	andi	r16,at,522
 c008238:	0c00828c 	andi	r16,at,522
 c00823c:	0c0083f4 	orhi	r16,at,527
 c008240:	0c008270 	cmpltui	r16,at,521
 c008244:	0c008280 	call	c00828 <__alt_mem_sdram-0xb3ff7d8>
 c008248:	0c008280 	call	c00828 <__alt_mem_sdram-0xb3ff7d8>
 c00824c:	0c008280 	call	c00828 <__alt_mem_sdram-0xb3ff7d8>
 c008250:	0c008430 	cmpltui	r16,at,528
 c008254:	8904b03a 	or	r2,r17,r4
 c008258:	1000631e 	bne	r2,zero,c0083e8 <__divdf3+0x2c4>
 c00825c:	04800204 	movi	r18,8
 c008260:	0023883a 	mov	r17,zero
 c008264:	0027883a 	mov	r19,zero
 c008268:	02000084 	movi	r8,2
 c00826c:	003fcc06 	br	c0081a0 <__alt_data_end+0xfc0081a0>
 c008270:	8023883a 	mov	r17,r16
 c008274:	a827883a 	mov	r19,r21
 c008278:	4839883a 	mov	fp,r9
 c00827c:	3811883a 	mov	r8,r7
 c008280:	00800084 	movi	r2,2
 c008284:	40812a1e 	bne	r8,r2,c008730 <__divdf3+0x60c>
 c008288:	e025883a 	mov	r18,fp
 c00828c:	9180004c 	andi	r6,r18,1
 c008290:	0101ffc4 	movi	r4,2047
 c008294:	000b883a 	mov	r5,zero
 c008298:	0027883a 	mov	r19,zero
 c00829c:	2008953a 	slli	r4,r4,20
 c0082a0:	30c03fcc 	andi	r3,r6,255
 c0082a4:	04000434 	movhi	r16,16
 c0082a8:	180697fa 	slli	r3,r3,31
 c0082ac:	843fffc4 	addi	r16,r16,-1
 c0082b0:	2c20703a 	and	r16,r5,r16
 c0082b4:	8120b03a 	or	r16,r16,r4
 c0082b8:	80c6b03a 	or	r3,r16,r3
 c0082bc:	9805883a 	mov	r2,r19
 c0082c0:	dfc00d17 	ldw	ra,52(sp)
 c0082c4:	df000c17 	ldw	fp,48(sp)
 c0082c8:	ddc00b17 	ldw	r23,44(sp)
 c0082cc:	dd800a17 	ldw	r22,40(sp)
 c0082d0:	dd400917 	ldw	r21,36(sp)
 c0082d4:	dd000817 	ldw	r20,32(sp)
 c0082d8:	dcc00717 	ldw	r19,28(sp)
 c0082dc:	dc800617 	ldw	r18,24(sp)
 c0082e0:	dc400517 	ldw	r17,20(sp)
 c0082e4:	dc000417 	ldw	r16,16(sp)
 c0082e8:	dec00e04 	addi	sp,sp,56
 c0082ec:	f800283a 	ret
 c0082f0:	8904b03a 	or	r2,r17,r4
 c0082f4:	10003726 	beq	r2,zero,c0083d4 <__divdf3+0x2b0>
 c0082f8:	88011c26 	beq	r17,zero,c00876c <__divdf3+0x648>
 c0082fc:	8809883a 	mov	r4,r17
 c008300:	d9800315 	stw	r6,12(sp)
 c008304:	d9c00115 	stw	r7,4(sp)
 c008308:	c008b480 	call	c008b48 <__clzsi2>
 c00830c:	d9800317 	ldw	r6,12(sp)
 c008310:	d9c00117 	ldw	r7,4(sp)
 c008314:	1007883a 	mov	r3,r2
 c008318:	01000a04 	movi	r4,40
 c00831c:	1cfffe04 	addi	r19,r3,-8
 c008320:	20c9c83a 	sub	r4,r4,r3
 c008324:	8cca983a 	sll	r5,r17,r19
 c008328:	9108d83a 	srl	r4,r18,r4
 c00832c:	94e6983a 	sll	r19,r18,r19
 c008330:	2162b03a 	or	r17,r4,r5
 c008334:	053f0344 	movi	r20,-1011
 c008338:	a0e9c83a 	sub	r20,r20,r3
 c00833c:	0025883a 	mov	r18,zero
 c008340:	0011883a 	mov	r8,zero
 c008344:	003f9606 	br	c0081a0 <__alt_data_end+0xfc0081a0>
 c008348:	8184b03a 	or	r2,r16,r6
 c00834c:	10001f1e 	bne	r2,zero,c0083cc <__divdf3+0x2a8>
 c008350:	0021883a 	mov	r16,zero
 c008354:	002b883a 	mov	r21,zero
 c008358:	01c00084 	movi	r7,2
 c00835c:	003fa206 	br	c0081e8 <__alt_data_end+0xfc0081e8>
 c008360:	8184b03a 	or	r2,r16,r6
 c008364:	10001526 	beq	r2,zero,c0083bc <__divdf3+0x298>
 c008368:	80010c26 	beq	r16,zero,c00879c <__divdf3+0x678>
 c00836c:	8009883a 	mov	r4,r16
 c008370:	d9800315 	stw	r6,12(sp)
 c008374:	da000215 	stw	r8,8(sp)
 c008378:	da400015 	stw	r9,0(sp)
 c00837c:	c008b480 	call	c008b48 <__clzsi2>
 c008380:	d9800317 	ldw	r6,12(sp)
 c008384:	da000217 	ldw	r8,8(sp)
 c008388:	da400017 	ldw	r9,0(sp)
 c00838c:	1007883a 	mov	r3,r2
 c008390:	01000a04 	movi	r4,40
 c008394:	1d7ffe04 	addi	r21,r3,-8
 c008398:	20c9c83a 	sub	r4,r4,r3
 c00839c:	8560983a 	sll	r16,r16,r21
 c0083a0:	3108d83a 	srl	r4,r6,r4
 c0083a4:	356a983a 	sll	r21,r6,r21
 c0083a8:	2420b03a 	or	r16,r4,r16
 c0083ac:	017f0344 	movi	r5,-1011
 c0083b0:	28cbc83a 	sub	r5,r5,r3
 c0083b4:	000f883a 	mov	r7,zero
 c0083b8:	003f8b06 	br	c0081e8 <__alt_data_end+0xfc0081e8>
 c0083bc:	0021883a 	mov	r16,zero
 c0083c0:	002b883a 	mov	r21,zero
 c0083c4:	01c00044 	movi	r7,1
 c0083c8:	003f8706 	br	c0081e8 <__alt_data_end+0xfc0081e8>
 c0083cc:	01c000c4 	movi	r7,3
 c0083d0:	003f8506 	br	c0081e8 <__alt_data_end+0xfc0081e8>
 c0083d4:	04800104 	movi	r18,4
 c0083d8:	0023883a 	mov	r17,zero
 c0083dc:	0027883a 	mov	r19,zero
 c0083e0:	02000044 	movi	r8,1
 c0083e4:	003f6e06 	br	c0081a0 <__alt_data_end+0xfc0081a0>
 c0083e8:	04800304 	movi	r18,12
 c0083ec:	020000c4 	movi	r8,3
 c0083f0:	003f6b06 	br	c0081a0 <__alt_data_end+0xfc0081a0>
 c0083f4:	01400434 	movhi	r5,16
 c0083f8:	000d883a 	mov	r6,zero
 c0083fc:	297fffc4 	addi	r5,r5,-1
 c008400:	04ffffc4 	movi	r19,-1
 c008404:	0101ffc4 	movi	r4,2047
 c008408:	003fa406 	br	c00829c <__alt_data_end+0xfc00829c>
 c00840c:	043f0084 	movi	r16,-1022
 c008410:	8521c83a 	sub	r16,r16,r20
 c008414:	00800e04 	movi	r2,56
 c008418:	1401200e 	bge	r2,r16,c00889c <__divdf3+0x778>
 c00841c:	9180004c 	andi	r6,r18,1
 c008420:	0009883a 	mov	r4,zero
 c008424:	000b883a 	mov	r5,zero
 c008428:	0027883a 	mov	r19,zero
 c00842c:	003f9b06 	br	c00829c <__alt_data_end+0xfc00829c>
 c008430:	8880022c 	andhi	r2,r17,8
 c008434:	1000c726 	beq	r2,zero,c008754 <__divdf3+0x630>
 c008438:	8080022c 	andhi	r2,r16,8
 c00843c:	1000c51e 	bne	r2,zero,c008754 <__divdf3+0x630>
 c008440:	00800434 	movhi	r2,16
 c008444:	81400234 	orhi	r5,r16,8
 c008448:	10bfffc4 	addi	r2,r2,-1
 c00844c:	b80d883a 	mov	r6,r23
 c008450:	288a703a 	and	r5,r5,r2
 c008454:	a827883a 	mov	r19,r21
 c008458:	003fea06 	br	c008404 <__alt_data_end+0xfc008404>
 c00845c:	8440ea36 	bltu	r16,r17,c008808 <__divdf3+0x6e4>
 c008460:	8c00e826 	beq	r17,r16,c008804 <__divdf3+0x6e0>
 c008464:	a53fffc4 	addi	r20,r20,-1
 c008468:	882d883a 	mov	r22,r17
 c00846c:	000d883a 	mov	r6,zero
 c008470:	a804d63a 	srli	r2,r21,24
 c008474:	8020923a 	slli	r16,r16,8
 c008478:	b009883a 	mov	r4,r22
 c00847c:	d9800315 	stw	r6,12(sp)
 c008480:	1420b03a 	or	r16,r2,r16
 c008484:	802ed43a 	srli	r23,r16,16
 c008488:	873fffcc 	andi	fp,r16,65535
 c00848c:	a82a923a 	slli	r21,r21,8
 c008490:	b80b883a 	mov	r5,r23
 c008494:	c008cc80 	call	c008cc8 <__udivsi3>
 c008498:	b009883a 	mov	r4,r22
 c00849c:	b80b883a 	mov	r5,r23
 c0084a0:	1023883a 	mov	r17,r2
 c0084a4:	c008cd00 	call	c008cd0 <__umodsi3>
 c0084a8:	1004943a 	slli	r2,r2,16
 c0084ac:	9808d43a 	srli	r4,r19,16
 c0084b0:	8f2d383a 	mul	r22,r17,fp
 c0084b4:	d9800317 	ldw	r6,12(sp)
 c0084b8:	1106b03a 	or	r3,r2,r4
 c0084bc:	1d80062e 	bgeu	r3,r22,c0084d8 <__divdf3+0x3b4>
 c0084c0:	1c07883a 	add	r3,r3,r16
 c0084c4:	88bfffc4 	addi	r2,r17,-1
 c0084c8:	1c00dc36 	bltu	r3,r16,c00883c <__divdf3+0x718>
 c0084cc:	1d80db2e 	bgeu	r3,r22,c00883c <__divdf3+0x718>
 c0084d0:	8c7fff84 	addi	r17,r17,-2
 c0084d4:	1c07883a 	add	r3,r3,r16
 c0084d8:	1dadc83a 	sub	r22,r3,r22
 c0084dc:	b009883a 	mov	r4,r22
 c0084e0:	b80b883a 	mov	r5,r23
 c0084e4:	d9800315 	stw	r6,12(sp)
 c0084e8:	c008cc80 	call	c008cc8 <__udivsi3>
 c0084ec:	b009883a 	mov	r4,r22
 c0084f0:	b80b883a 	mov	r5,r23
 c0084f4:	d8800015 	stw	r2,0(sp)
 c0084f8:	c008cd00 	call	c008cd0 <__umodsi3>
 c0084fc:	da400017 	ldw	r9,0(sp)
 c008500:	1004943a 	slli	r2,r2,16
 c008504:	9cffffcc 	andi	r19,r19,65535
 c008508:	4f07383a 	mul	r3,r9,fp
 c00850c:	14c8b03a 	or	r4,r2,r19
 c008510:	d9800317 	ldw	r6,12(sp)
 c008514:	20c0062e 	bgeu	r4,r3,c008530 <__divdf3+0x40c>
 c008518:	2409883a 	add	r4,r4,r16
 c00851c:	48bfffc4 	addi	r2,r9,-1
 c008520:	2400c436 	bltu	r4,r16,c008834 <__divdf3+0x710>
 c008524:	20c0c32e 	bgeu	r4,r3,c008834 <__divdf3+0x710>
 c008528:	4a7fff84 	addi	r9,r9,-2
 c00852c:	2409883a 	add	r4,r4,r16
 c008530:	8822943a 	slli	r17,r17,16
 c008534:	a80ed43a 	srli	r7,r21,16
 c008538:	aa3fffcc 	andi	r8,r21,65535
 c00853c:	4c62b03a 	or	r17,r9,r17
 c008540:	8816d43a 	srli	r11,r17,16
 c008544:	897fffcc 	andi	r5,r17,65535
 c008548:	2a15383a 	mul	r10,r5,r8
 c00854c:	5a19383a 	mul	r12,r11,r8
 c008550:	29cb383a 	mul	r5,r5,r7
 c008554:	5012d43a 	srli	r9,r10,16
 c008558:	20c5c83a 	sub	r2,r4,r3
 c00855c:	614b883a 	add	r5,r12,r5
 c008560:	2a4b883a 	add	r5,r5,r9
 c008564:	59c7383a 	mul	r3,r11,r7
 c008568:	2b00022e 	bgeu	r5,r12,c008574 <__divdf3+0x450>
 c00856c:	01000074 	movhi	r4,1
 c008570:	1907883a 	add	r3,r3,r4
 c008574:	2808d43a 	srli	r4,r5,16
 c008578:	280a943a 	slli	r5,r5,16
 c00857c:	54ffffcc 	andi	r19,r10,65535
 c008580:	1907883a 	add	r3,r3,r4
 c008584:	2ccb883a 	add	r5,r5,r19
 c008588:	10c09336 	bltu	r2,r3,c0087d8 <__divdf3+0x6b4>
 c00858c:	10c0ad26 	beq	r2,r3,c008844 <__divdf3+0x720>
 c008590:	10c7c83a 	sub	r3,r2,r3
 c008594:	3167c83a 	sub	r19,r6,r5
 c008598:	34ed803a 	cmpltu	r22,r6,r19
 c00859c:	1dadc83a 	sub	r22,r3,r22
 c0085a0:	b400b226 	beq	r22,r16,c00886c <__divdf3+0x748>
 c0085a4:	b009883a 	mov	r4,r22
 c0085a8:	b80b883a 	mov	r5,r23
 c0085ac:	d9c00115 	stw	r7,4(sp)
 c0085b0:	da000215 	stw	r8,8(sp)
 c0085b4:	c008cc80 	call	c008cc8 <__udivsi3>
 c0085b8:	b009883a 	mov	r4,r22
 c0085bc:	b80b883a 	mov	r5,r23
 c0085c0:	d8800315 	stw	r2,12(sp)
 c0085c4:	c008cd00 	call	c008cd0 <__umodsi3>
 c0085c8:	d9800317 	ldw	r6,12(sp)
 c0085cc:	1004943a 	slli	r2,r2,16
 c0085d0:	9808d43a 	srli	r4,r19,16
 c0085d4:	372d383a 	mul	r22,r6,fp
 c0085d8:	d9c00117 	ldw	r7,4(sp)
 c0085dc:	1106b03a 	or	r3,r2,r4
 c0085e0:	da000217 	ldw	r8,8(sp)
 c0085e4:	1d80062e 	bgeu	r3,r22,c008600 <__divdf3+0x4dc>
 c0085e8:	1c07883a 	add	r3,r3,r16
 c0085ec:	30bfffc4 	addi	r2,r6,-1
 c0085f0:	1c00a036 	bltu	r3,r16,c008874 <__divdf3+0x750>
 c0085f4:	1d809f2e 	bgeu	r3,r22,c008874 <__divdf3+0x750>
 c0085f8:	31bfff84 	addi	r6,r6,-2
 c0085fc:	1c07883a 	add	r3,r3,r16
 c008600:	1dadc83a 	sub	r22,r3,r22
 c008604:	b009883a 	mov	r4,r22
 c008608:	b80b883a 	mov	r5,r23
 c00860c:	d9800315 	stw	r6,12(sp)
 c008610:	d9c00115 	stw	r7,4(sp)
 c008614:	da000215 	stw	r8,8(sp)
 c008618:	c008cc80 	call	c008cc8 <__udivsi3>
 c00861c:	b009883a 	mov	r4,r22
 c008620:	b80b883a 	mov	r5,r23
 c008624:	d8800015 	stw	r2,0(sp)
 c008628:	c008cd00 	call	c008cd0 <__umodsi3>
 c00862c:	da400017 	ldw	r9,0(sp)
 c008630:	1004943a 	slli	r2,r2,16
 c008634:	993fffcc 	andi	r4,r19,65535
 c008638:	4f39383a 	mul	fp,r9,fp
 c00863c:	1106b03a 	or	r3,r2,r4
 c008640:	d9800317 	ldw	r6,12(sp)
 c008644:	d9c00117 	ldw	r7,4(sp)
 c008648:	da000217 	ldw	r8,8(sp)
 c00864c:	1f00062e 	bgeu	r3,fp,c008668 <__divdf3+0x544>
 c008650:	1c07883a 	add	r3,r3,r16
 c008654:	48bfffc4 	addi	r2,r9,-1
 c008658:	1c008836 	bltu	r3,r16,c00887c <__divdf3+0x758>
 c00865c:	1f00872e 	bgeu	r3,fp,c00887c <__divdf3+0x758>
 c008660:	4a7fff84 	addi	r9,r9,-2
 c008664:	1c07883a 	add	r3,r3,r16
 c008668:	3008943a 	slli	r4,r6,16
 c00866c:	1f07c83a 	sub	r3,r3,fp
 c008670:	4926b03a 	or	r19,r9,r4
 c008674:	993fffcc 	andi	r4,r19,65535
 c008678:	980cd43a 	srli	r6,r19,16
 c00867c:	220b383a 	mul	r5,r4,r8
 c008680:	21c5383a 	mul	r2,r4,r7
 c008684:	3211383a 	mul	r8,r6,r8
 c008688:	2808d43a 	srli	r4,r5,16
 c00868c:	31cf383a 	mul	r7,r6,r7
 c008690:	4085883a 	add	r2,r8,r2
 c008694:	1105883a 	add	r2,r2,r4
 c008698:	1200022e 	bgeu	r2,r8,c0086a4 <__divdf3+0x580>
 c00869c:	01000074 	movhi	r4,1
 c0086a0:	390f883a 	add	r7,r7,r4
 c0086a4:	1008d43a 	srli	r4,r2,16
 c0086a8:	1004943a 	slli	r2,r2,16
 c0086ac:	297fffcc 	andi	r5,r5,65535
 c0086b0:	390f883a 	add	r7,r7,r4
 c0086b4:	1145883a 	add	r2,r2,r5
 c0086b8:	19c06536 	bltu	r3,r7,c008850 <__divdf3+0x72c>
 c0086bc:	19c09f26 	beq	r3,r7,c00893c <__divdf3+0x818>
 c0086c0:	9cc00054 	ori	r19,r19,1
 c0086c4:	a100ffc4 	addi	r4,r20,1023
 c0086c8:	013f500e 	bge	zero,r4,c00840c <__alt_data_end+0xfc00840c>
 c0086cc:	988001cc 	andi	r2,r19,7
 c0086d0:	10000726 	beq	r2,zero,c0086f0 <__divdf3+0x5cc>
 c0086d4:	98c003cc 	andi	r3,r19,15
 c0086d8:	00800104 	movi	r2,4
 c0086dc:	18800426 	beq	r3,r2,c0086f0 <__divdf3+0x5cc>
 c0086e0:	9885883a 	add	r2,r19,r2
 c0086e4:	14e1803a 	cmpltu	r16,r2,r19
 c0086e8:	8c23883a 	add	r17,r17,r16
 c0086ec:	1027883a 	mov	r19,r2
 c0086f0:	8880402c 	andhi	r2,r17,256
 c0086f4:	10000426 	beq	r2,zero,c008708 <__divdf3+0x5e4>
 c0086f8:	00bfc034 	movhi	r2,65280
 c0086fc:	10bfffc4 	addi	r2,r2,-1
 c008700:	a1010004 	addi	r4,r20,1024
 c008704:	88a2703a 	and	r17,r17,r2
 c008708:	0081ff84 	movi	r2,2046
 c00870c:	113edf16 	blt	r2,r4,c00828c <__alt_data_end+0xfc00828c>
 c008710:	9826d0fa 	srli	r19,r19,3
 c008714:	8804977a 	slli	r2,r17,29
 c008718:	8820927a 	slli	r16,r17,9
 c00871c:	2101ffcc 	andi	r4,r4,2047
 c008720:	14e6b03a 	or	r19,r2,r19
 c008724:	800ad33a 	srli	r5,r16,12
 c008728:	9180004c 	andi	r6,r18,1
 c00872c:	003edb06 	br	c00829c <__alt_data_end+0xfc00829c>
 c008730:	008000c4 	movi	r2,3
 c008734:	4080a826 	beq	r8,r2,c0089d8 <__divdf3+0x8b4>
 c008738:	00800044 	movi	r2,1
 c00873c:	4080551e 	bne	r8,r2,c008894 <__divdf3+0x770>
 c008740:	e00d883a 	mov	r6,fp
 c008744:	0009883a 	mov	r4,zero
 c008748:	000b883a 	mov	r5,zero
 c00874c:	0027883a 	mov	r19,zero
 c008750:	003ed206 	br	c00829c <__alt_data_end+0xfc00829c>
 c008754:	00800434 	movhi	r2,16
 c008758:	89400234 	orhi	r5,r17,8
 c00875c:	10bfffc4 	addi	r2,r2,-1
 c008760:	b00d883a 	mov	r6,r22
 c008764:	288a703a 	and	r5,r5,r2
 c008768:	003f2606 	br	c008404 <__alt_data_end+0xfc008404>
 c00876c:	d9800315 	stw	r6,12(sp)
 c008770:	d9c00115 	stw	r7,4(sp)
 c008774:	c008b480 	call	c008b48 <__clzsi2>
 c008778:	10c00804 	addi	r3,r2,32
 c00877c:	010009c4 	movi	r4,39
 c008780:	d9800317 	ldw	r6,12(sp)
 c008784:	d9c00117 	ldw	r7,4(sp)
 c008788:	20fee30e 	bge	r4,r3,c008318 <__alt_data_end+0xfc008318>
 c00878c:	117ffe04 	addi	r5,r2,-8
 c008790:	9162983a 	sll	r17,r18,r5
 c008794:	0027883a 	mov	r19,zero
 c008798:	003ee606 	br	c008334 <__alt_data_end+0xfc008334>
 c00879c:	3009883a 	mov	r4,r6
 c0087a0:	d9800315 	stw	r6,12(sp)
 c0087a4:	da000215 	stw	r8,8(sp)
 c0087a8:	da400015 	stw	r9,0(sp)
 c0087ac:	c008b480 	call	c008b48 <__clzsi2>
 c0087b0:	10c00804 	addi	r3,r2,32
 c0087b4:	010009c4 	movi	r4,39
 c0087b8:	d9800317 	ldw	r6,12(sp)
 c0087bc:	da000217 	ldw	r8,8(sp)
 c0087c0:	da400017 	ldw	r9,0(sp)
 c0087c4:	20fef20e 	bge	r4,r3,c008390 <__alt_data_end+0xfc008390>
 c0087c8:	10bffe04 	addi	r2,r2,-8
 c0087cc:	a8a0983a 	sll	r16,r21,r2
 c0087d0:	002b883a 	mov	r21,zero
 c0087d4:	003ef506 	br	c0083ac <__alt_data_end+0xfc0083ac>
 c0087d8:	354d883a 	add	r6,r6,r21
 c0087dc:	3549803a 	cmpltu	r4,r6,r21
 c0087e0:	2409883a 	add	r4,r4,r16
 c0087e4:	2089883a 	add	r4,r4,r2
 c0087e8:	88bfffc4 	addi	r2,r17,-1
 c0087ec:	81000c2e 	bgeu	r16,r4,c008820 <__divdf3+0x6fc>
 c0087f0:	20c04436 	bltu	r4,r3,c008904 <__divdf3+0x7e0>
 c0087f4:	19006f26 	beq	r3,r4,c0089b4 <__divdf3+0x890>
 c0087f8:	20c7c83a 	sub	r3,r4,r3
 c0087fc:	1023883a 	mov	r17,r2
 c008800:	003f6406 	br	c008594 <__alt_data_end+0xfc008594>
 c008804:	9d7f1736 	bltu	r19,r21,c008464 <__alt_data_end+0xfc008464>
 c008808:	9806d07a 	srli	r3,r19,1
 c00880c:	880497fa 	slli	r2,r17,31
 c008810:	980c97fa 	slli	r6,r19,31
 c008814:	882cd07a 	srli	r22,r17,1
 c008818:	18a6b03a 	or	r19,r3,r2
 c00881c:	003f1406 	br	c008470 <__alt_data_end+0xfc008470>
 c008820:	243ff51e 	bne	r4,r16,c0087f8 <__alt_data_end+0xfc0087f8>
 c008824:	357ff22e 	bgeu	r6,r21,c0087f0 <__alt_data_end+0xfc0087f0>
 c008828:	80c7c83a 	sub	r3,r16,r3
 c00882c:	1023883a 	mov	r17,r2
 c008830:	003f5806 	br	c008594 <__alt_data_end+0xfc008594>
 c008834:	1013883a 	mov	r9,r2
 c008838:	003f3d06 	br	c008530 <__alt_data_end+0xfc008530>
 c00883c:	1023883a 	mov	r17,r2
 c008840:	003f2506 	br	c0084d8 <__alt_data_end+0xfc0084d8>
 c008844:	317fe436 	bltu	r6,r5,c0087d8 <__alt_data_end+0xfc0087d8>
 c008848:	0007883a 	mov	r3,zero
 c00884c:	003f5106 	br	c008594 <__alt_data_end+0xfc008594>
 c008850:	1c07883a 	add	r3,r3,r16
 c008854:	993fffc4 	addi	r4,r19,-1
 c008858:	1c000a2e 	bgeu	r3,r16,c008884 <__divdf3+0x760>
 c00885c:	2027883a 	mov	r19,r4
 c008860:	19ff971e 	bne	r3,r7,c0086c0 <__alt_data_end+0xfc0086c0>
 c008864:	a8bf961e 	bne	r21,r2,c0086c0 <__alt_data_end+0xfc0086c0>
 c008868:	003f9606 	br	c0086c4 <__alt_data_end+0xfc0086c4>
 c00886c:	04ffffc4 	movi	r19,-1
 c008870:	003f9406 	br	c0086c4 <__alt_data_end+0xfc0086c4>
 c008874:	100d883a 	mov	r6,r2
 c008878:	003f6106 	br	c008600 <__alt_data_end+0xfc008600>
 c00887c:	1013883a 	mov	r9,r2
 c008880:	003f7906 	br	c008668 <__alt_data_end+0xfc008668>
 c008884:	19c02636 	bltu	r3,r7,c008920 <__divdf3+0x7fc>
 c008888:	38c04d26 	beq	r7,r3,c0089c0 <__divdf3+0x89c>
 c00888c:	2027883a 	mov	r19,r4
 c008890:	003f8b06 	br	c0086c0 <__alt_data_end+0xfc0086c0>
 c008894:	e025883a 	mov	r18,fp
 c008898:	003f8a06 	br	c0086c4 <__alt_data_end+0xfc0086c4>
 c00889c:	008007c4 	movi	r2,31
 c0088a0:	14002a16 	blt	r2,r16,c00894c <__divdf3+0x828>
 c0088a4:	a5010784 	addi	r20,r20,1054
 c0088a8:	8d04983a 	sll	r2,r17,r20
 c0088ac:	9c06d83a 	srl	r3,r19,r16
 c0088b0:	9d28983a 	sll	r20,r19,r20
 c0088b4:	8c20d83a 	srl	r16,r17,r16
 c0088b8:	1886b03a 	or	r3,r3,r2
 c0088bc:	a004c03a 	cmpne	r2,r20,zero
 c0088c0:	1884b03a 	or	r2,r3,r2
 c0088c4:	10c001cc 	andi	r3,r2,7
 c0088c8:	18000726 	beq	r3,zero,c0088e8 <__divdf3+0x7c4>
 c0088cc:	110003cc 	andi	r4,r2,15
 c0088d0:	00c00104 	movi	r3,4
 c0088d4:	20c00426 	beq	r4,r3,c0088e8 <__divdf3+0x7c4>
 c0088d8:	10c00104 	addi	r3,r2,4
 c0088dc:	1885803a 	cmpltu	r2,r3,r2
 c0088e0:	80a1883a 	add	r16,r16,r2
 c0088e4:	1805883a 	mov	r2,r3
 c0088e8:	80c0202c 	andhi	r3,r16,128
 c0088ec:	18002d26 	beq	r3,zero,c0089a4 <__divdf3+0x880>
 c0088f0:	9180004c 	andi	r6,r18,1
 c0088f4:	01000044 	movi	r4,1
 c0088f8:	000b883a 	mov	r5,zero
 c0088fc:	0027883a 	mov	r19,zero
 c008900:	003e6606 	br	c00829c <__alt_data_end+0xfc00829c>
 c008904:	354d883a 	add	r6,r6,r21
 c008908:	356d803a 	cmpltu	r22,r6,r21
 c00890c:	b42d883a 	add	r22,r22,r16
 c008910:	b12d883a 	add	r22,r22,r4
 c008914:	8c7fff84 	addi	r17,r17,-2
 c008918:	b0c7c83a 	sub	r3,r22,r3
 c00891c:	003f1d06 	br	c008594 <__alt_data_end+0xfc008594>
 c008920:	ad4b883a 	add	r5,r21,r21
 c008924:	2d6b803a 	cmpltu	r21,r5,r21
 c008928:	ac2b883a 	add	r21,r21,r16
 c00892c:	1d47883a 	add	r3,r3,r21
 c008930:	993fff84 	addi	r4,r19,-2
 c008934:	282b883a 	mov	r21,r5
 c008938:	003fc806 	br	c00885c <__alt_data_end+0xfc00885c>
 c00893c:	103fc41e 	bne	r2,zero,c008850 <__alt_data_end+0xfc008850>
 c008940:	002b883a 	mov	r21,zero
 c008944:	a8bf5e1e 	bne	r21,r2,c0086c0 <__alt_data_end+0xfc0086c0>
 c008948:	003f5e06 	br	c0086c4 <__alt_data_end+0xfc0086c4>
 c00894c:	00bef884 	movi	r2,-1054
 c008950:	1505c83a 	sub	r2,r2,r20
 c008954:	00c00804 	movi	r3,32
 c008958:	8884d83a 	srl	r2,r17,r2
 c00895c:	80c01c26 	beq	r16,r3,c0089d0 <__divdf3+0x8ac>
 c008960:	a0c10f84 	addi	r3,r20,1086
 c008964:	88c6983a 	sll	r3,r17,r3
 c008968:	1cc6b03a 	or	r3,r3,r19
 c00896c:	1806c03a 	cmpne	r3,r3,zero
 c008970:	1884b03a 	or	r2,r3,r2
 c008974:	140001cc 	andi	r16,r2,7
 c008978:	8000061e 	bne	r16,zero,c008994 <__divdf3+0x870>
 c00897c:	000b883a 	mov	r5,zero
 c008980:	1004d0fa 	srli	r2,r2,3
 c008984:	9180004c 	andi	r6,r18,1
 c008988:	0009883a 	mov	r4,zero
 c00898c:	1426b03a 	or	r19,r2,r16
 c008990:	003e4206 	br	c00829c <__alt_data_end+0xfc00829c>
 c008994:	110003cc 	andi	r4,r2,15
 c008998:	00c00104 	movi	r3,4
 c00899c:	0021883a 	mov	r16,zero
 c0089a0:	20ffcd1e 	bne	r4,r3,c0088d8 <__alt_data_end+0xfc0088d8>
 c0089a4:	800a927a 	slli	r5,r16,9
 c0089a8:	8020977a 	slli	r16,r16,29
 c0089ac:	280ad33a 	srli	r5,r5,12
 c0089b0:	003ff306 	br	c008980 <__alt_data_end+0xfc008980>
 c0089b4:	317fd336 	bltu	r6,r5,c008904 <__alt_data_end+0xfc008904>
 c0089b8:	1023883a 	mov	r17,r2
 c0089bc:	003fa206 	br	c008848 <__alt_data_end+0xfc008848>
 c0089c0:	a8bfd736 	bltu	r21,r2,c008920 <__alt_data_end+0xfc008920>
 c0089c4:	2027883a 	mov	r19,r4
 c0089c8:	a8bf3d1e 	bne	r21,r2,c0086c0 <__alt_data_end+0xfc0086c0>
 c0089cc:	003f3d06 	br	c0086c4 <__alt_data_end+0xfc0086c4>
 c0089d0:	0007883a 	mov	r3,zero
 c0089d4:	003fe406 	br	c008968 <__alt_data_end+0xfc008968>
 c0089d8:	00800434 	movhi	r2,16
 c0089dc:	89400234 	orhi	r5,r17,8
 c0089e0:	10bfffc4 	addi	r2,r2,-1
 c0089e4:	e00d883a 	mov	r6,fp
 c0089e8:	288a703a 	and	r5,r5,r2
 c0089ec:	003e8506 	br	c008404 <__alt_data_end+0xfc008404>

0c0089f0 <__fixdfsi>:
 c0089f0:	2806d53a 	srli	r3,r5,20
 c0089f4:	00800434 	movhi	r2,16
 c0089f8:	10bfffc4 	addi	r2,r2,-1
 c0089fc:	18c1ffcc 	andi	r3,r3,2047
 c008a00:	0180ff84 	movi	r6,1022
 c008a04:	2884703a 	and	r2,r5,r2
 c008a08:	280ad7fa 	srli	r5,r5,31
 c008a0c:	30c0130e 	bge	r6,r3,c008a5c <__fixdfsi+0x6c>
 c008a10:	01810744 	movi	r6,1053
 c008a14:	30c00d16 	blt	r6,r3,c008a4c <__fixdfsi+0x5c>
 c008a18:	01810cc4 	movi	r6,1075
 c008a1c:	30cdc83a 	sub	r6,r6,r3
 c008a20:	01c007c4 	movi	r7,31
 c008a24:	10800434 	orhi	r2,r2,16
 c008a28:	39800e0e 	bge	r7,r6,c008a64 <__fixdfsi+0x74>
 c008a2c:	010104c4 	movi	r4,1043
 c008a30:	20c7c83a 	sub	r3,r4,r3
 c008a34:	10c6d83a 	srl	r3,r2,r3
 c008a38:	29403fcc 	andi	r5,r5,255
 c008a3c:	0145c83a 	sub	r2,zero,r5
 c008a40:	1884f03a 	xor	r2,r3,r2
 c008a44:	1145883a 	add	r2,r2,r5
 c008a48:	f800283a 	ret
 c008a4c:	00a00034 	movhi	r2,32768
 c008a50:	10bfffc4 	addi	r2,r2,-1
 c008a54:	2885883a 	add	r2,r5,r2
 c008a58:	f800283a 	ret
 c008a5c:	0005883a 	mov	r2,zero
 c008a60:	f800283a 	ret
 c008a64:	18fefb44 	addi	r3,r3,-1043
 c008a68:	2188d83a 	srl	r4,r4,r6
 c008a6c:	10c6983a 	sll	r3,r2,r3
 c008a70:	20c6b03a 	or	r3,r4,r3
 c008a74:	003ff006 	br	c008a38 <__alt_data_end+0xfc008a38>

0c008a78 <__floatsidf>:
 c008a78:	defffd04 	addi	sp,sp,-12
 c008a7c:	dc400115 	stw	r17,4(sp)
 c008a80:	dfc00215 	stw	ra,8(sp)
 c008a84:	dc000015 	stw	r16,0(sp)
 c008a88:	2023883a 	mov	r17,r4
 c008a8c:	20001426 	beq	r4,zero,c008ae0 <__floatsidf+0x68>
 c008a90:	2020d7fa 	srli	r16,r4,31
 c008a94:	80000126 	beq	r16,zero,c008a9c <__floatsidf+0x24>
 c008a98:	0123c83a 	sub	r17,zero,r4
 c008a9c:	8809883a 	mov	r4,r17
 c008aa0:	c008b480 	call	c008b48 <__clzsi2>
 c008aa4:	01410784 	movi	r5,1054
 c008aa8:	00c00284 	movi	r3,10
 c008aac:	288bc83a 	sub	r5,r5,r2
 c008ab0:	18801c16 	blt	r3,r2,c008b24 <__floatsidf+0xac>
 c008ab4:	00c002c4 	movi	r3,11
 c008ab8:	1887c83a 	sub	r3,r3,r2
 c008abc:	88c8d83a 	srl	r4,r17,r3
 c008ac0:	00c00434 	movhi	r3,16
 c008ac4:	18ffffc4 	addi	r3,r3,-1
 c008ac8:	10800544 	addi	r2,r2,21
 c008acc:	20c8703a 	and	r4,r4,r3
 c008ad0:	8884983a 	sll	r2,r17,r2
 c008ad4:	28c1ffcc 	andi	r3,r5,2047
 c008ad8:	800d883a 	mov	r6,r16
 c008adc:	00000406 	br	c008af0 <__floatsidf+0x78>
 c008ae0:	000d883a 	mov	r6,zero
 c008ae4:	0007883a 	mov	r3,zero
 c008ae8:	0009883a 	mov	r4,zero
 c008aec:	0005883a 	mov	r2,zero
 c008af0:	180a953a 	slli	r5,r3,20
 c008af4:	31803fcc 	andi	r6,r6,255
 c008af8:	00c00434 	movhi	r3,16
 c008afc:	300c97fa 	slli	r6,r6,31
 c008b00:	18ffffc4 	addi	r3,r3,-1
 c008b04:	20c6703a 	and	r3,r4,r3
 c008b08:	1946b03a 	or	r3,r3,r5
 c008b0c:	1986b03a 	or	r3,r3,r6
 c008b10:	dfc00217 	ldw	ra,8(sp)
 c008b14:	dc400117 	ldw	r17,4(sp)
 c008b18:	dc000017 	ldw	r16,0(sp)
 c008b1c:	dec00304 	addi	sp,sp,12
 c008b20:	f800283a 	ret
 c008b24:	10fffd44 	addi	r3,r2,-11
 c008b28:	88c8983a 	sll	r4,r17,r3
 c008b2c:	00800434 	movhi	r2,16
 c008b30:	10bfffc4 	addi	r2,r2,-1
 c008b34:	2088703a 	and	r4,r4,r2
 c008b38:	28c1ffcc 	andi	r3,r5,2047
 c008b3c:	800d883a 	mov	r6,r16
 c008b40:	0005883a 	mov	r2,zero
 c008b44:	003fea06 	br	c008af0 <__alt_data_end+0xfc008af0>

0c008b48 <__clzsi2>:
 c008b48:	00bfffd4 	movui	r2,65535
 c008b4c:	11000b36 	bltu	r2,r4,c008b7c <__clzsi2+0x34>
 c008b50:	00803fc4 	movi	r2,255
 c008b54:	1100122e 	bgeu	r2,r4,c008ba0 <__clzsi2+0x58>
 c008b58:	00c00204 	movi	r3,8
 c008b5c:	01400604 	movi	r5,24
 c008b60:	20c8d83a 	srl	r4,r4,r3
 c008b64:	008300b4 	movhi	r2,3074
 c008b68:	1088e304 	addi	r2,r2,9100
 c008b6c:	1109883a 	add	r4,r2,r4
 c008b70:	20800003 	ldbu	r2,0(r4)
 c008b74:	2885c83a 	sub	r2,r5,r2
 c008b78:	f800283a 	ret
 c008b7c:	00804034 	movhi	r2,256
 c008b80:	10bfffc4 	addi	r2,r2,-1
 c008b84:	11000336 	bltu	r2,r4,c008b94 <__clzsi2+0x4c>
 c008b88:	00c00404 	movi	r3,16
 c008b8c:	180b883a 	mov	r5,r3
 c008b90:	003ff306 	br	c008b60 <__alt_data_end+0xfc008b60>
 c008b94:	00c00604 	movi	r3,24
 c008b98:	01400204 	movi	r5,8
 c008b9c:	003ff006 	br	c008b60 <__alt_data_end+0xfc008b60>
 c008ba0:	0007883a 	mov	r3,zero
 c008ba4:	01400804 	movi	r5,32
 c008ba8:	003fed06 	br	c008b60 <__alt_data_end+0xfc008b60>

0c008bac <udivmodsi4>:
 c008bac:	2900182e 	bgeu	r5,r4,c008c10 <udivmodsi4+0x64>
 c008bb0:	28001716 	blt	r5,zero,c008c10 <udivmodsi4+0x64>
 c008bb4:	00800804 	movi	r2,32
 c008bb8:	00c00044 	movi	r3,1
 c008bbc:	00000206 	br	c008bc8 <udivmodsi4+0x1c>
 c008bc0:	10001126 	beq	r2,zero,c008c08 <udivmodsi4+0x5c>
 c008bc4:	28000516 	blt	r5,zero,c008bdc <udivmodsi4+0x30>
 c008bc8:	294b883a 	add	r5,r5,r5
 c008bcc:	10bfffc4 	addi	r2,r2,-1
 c008bd0:	18c7883a 	add	r3,r3,r3
 c008bd4:	293ffa36 	bltu	r5,r4,c008bc0 <__alt_data_end+0xfc008bc0>
 c008bd8:	18000b26 	beq	r3,zero,c008c08 <udivmodsi4+0x5c>
 c008bdc:	0005883a 	mov	r2,zero
 c008be0:	21400236 	bltu	r4,r5,c008bec <udivmodsi4+0x40>
 c008be4:	2149c83a 	sub	r4,r4,r5
 c008be8:	10c4b03a 	or	r2,r2,r3
 c008bec:	1806d07a 	srli	r3,r3,1
 c008bf0:	280ad07a 	srli	r5,r5,1
 c008bf4:	183ffa1e 	bne	r3,zero,c008be0 <__alt_data_end+0xfc008be0>
 c008bf8:	3000011e 	bne	r6,zero,c008c00 <udivmodsi4+0x54>
 c008bfc:	f800283a 	ret
 c008c00:	2005883a 	mov	r2,r4
 c008c04:	f800283a 	ret
 c008c08:	0005883a 	mov	r2,zero
 c008c0c:	003ffa06 	br	c008bf8 <__alt_data_end+0xfc008bf8>
 c008c10:	00c00044 	movi	r3,1
 c008c14:	003ff106 	br	c008bdc <__alt_data_end+0xfc008bdc>

0c008c18 <__divsi3>:
 c008c18:	defffe04 	addi	sp,sp,-8
 c008c1c:	dfc00115 	stw	ra,4(sp)
 c008c20:	dc000015 	stw	r16,0(sp)
 c008c24:	20000b16 	blt	r4,zero,c008c54 <__divsi3+0x3c>
 c008c28:	0021883a 	mov	r16,zero
 c008c2c:	28000c16 	blt	r5,zero,c008c60 <__divsi3+0x48>
 c008c30:	000d883a 	mov	r6,zero
 c008c34:	c008bac0 	call	c008bac <udivmodsi4>
 c008c38:	0407c83a 	sub	r3,zero,r16
 c008c3c:	1884f03a 	xor	r2,r3,r2
 c008c40:	1405883a 	add	r2,r2,r16
 c008c44:	dfc00117 	ldw	ra,4(sp)
 c008c48:	dc000017 	ldw	r16,0(sp)
 c008c4c:	dec00204 	addi	sp,sp,8
 c008c50:	f800283a 	ret
 c008c54:	0109c83a 	sub	r4,zero,r4
 c008c58:	04000044 	movi	r16,1
 c008c5c:	283ff40e 	bge	r5,zero,c008c30 <__alt_data_end+0xfc008c30>
 c008c60:	014bc83a 	sub	r5,zero,r5
 c008c64:	8400005c 	xori	r16,r16,1
 c008c68:	003ff106 	br	c008c30 <__alt_data_end+0xfc008c30>

0c008c6c <__modsi3>:
 c008c6c:	defffd04 	addi	sp,sp,-12
 c008c70:	dfc00215 	stw	ra,8(sp)
 c008c74:	dc400115 	stw	r17,4(sp)
 c008c78:	dc000015 	stw	r16,0(sp)
 c008c7c:	20000c16 	blt	r4,zero,c008cb0 <__modsi3+0x44>
 c008c80:	0023883a 	mov	r17,zero
 c008c84:	0021883a 	mov	r16,zero
 c008c88:	28000d16 	blt	r5,zero,c008cc0 <__modsi3+0x54>
 c008c8c:	01800044 	movi	r6,1
 c008c90:	c008bac0 	call	c008bac <udivmodsi4>
 c008c94:	1404f03a 	xor	r2,r2,r16
 c008c98:	8885883a 	add	r2,r17,r2
 c008c9c:	dfc00217 	ldw	ra,8(sp)
 c008ca0:	dc400117 	ldw	r17,4(sp)
 c008ca4:	dc000017 	ldw	r16,0(sp)
 c008ca8:	dec00304 	addi	sp,sp,12
 c008cac:	f800283a 	ret
 c008cb0:	0109c83a 	sub	r4,zero,r4
 c008cb4:	04400044 	movi	r17,1
 c008cb8:	043fffc4 	movi	r16,-1
 c008cbc:	283ff30e 	bge	r5,zero,c008c8c <__alt_data_end+0xfc008c8c>
 c008cc0:	014bc83a 	sub	r5,zero,r5
 c008cc4:	003ff106 	br	c008c8c <__alt_data_end+0xfc008c8c>

0c008cc8 <__udivsi3>:
 c008cc8:	000d883a 	mov	r6,zero
 c008ccc:	c008bac1 	jmpi	c008bac <udivmodsi4>

0c008cd0 <__umodsi3>:
 c008cd0:	01800044 	movi	r6,1
 c008cd4:	c008bac1 	jmpi	c008bac <udivmodsi4>

0c008cd8 <__assert_func>:
 c008cd8:	008300b4 	movhi	r2,3074
 c008cdc:	10907604 	addi	r2,r2,16856
 c008ce0:	10800017 	ldw	r2,0(r2)
 c008ce4:	defffc04 	addi	sp,sp,-16
 c008ce8:	dfc00315 	stw	ra,12(sp)
 c008cec:	2013883a 	mov	r9,r4
 c008cf0:	2811883a 	mov	r8,r5
 c008cf4:	11000317 	ldw	r4,12(r2)
 c008cf8:	30000c26 	beq	r6,zero,c008d2c <__assert_func+0x54>
 c008cfc:	00c300b4 	movhi	r3,3074
 c008d00:	18c92304 	addi	r3,r3,9356
 c008d04:	3005883a 	mov	r2,r6
 c008d08:	014300b4 	movhi	r5,3074
 c008d0c:	380d883a 	mov	r6,r7
 c008d10:	29492704 	addi	r5,r5,9372
 c008d14:	480f883a 	mov	r7,r9
 c008d18:	da000015 	stw	r8,0(sp)
 c008d1c:	d8c00115 	stw	r3,4(sp)
 c008d20:	d8800215 	stw	r2,8(sp)
 c008d24:	c008d700 	call	c008d70 <fiprintf>
 c008d28:	c00bb840 	call	c00bb84 <abort>
 c008d2c:	00c300b4 	movhi	r3,3074
 c008d30:	18c92604 	addi	r3,r3,9368
 c008d34:	1805883a 	mov	r2,r3
 c008d38:	003ff306 	br	c008d08 <__alt_data_end+0xfc008d08>

0c008d3c <__assert>:
 c008d3c:	deffff04 	addi	sp,sp,-4
 c008d40:	300f883a 	mov	r7,r6
 c008d44:	000d883a 	mov	r6,zero
 c008d48:	dfc00015 	stw	ra,0(sp)
 c008d4c:	c008cd80 	call	c008cd8 <__assert_func>

0c008d50 <_fiprintf_r>:
 c008d50:	defffe04 	addi	sp,sp,-8
 c008d54:	dfc00015 	stw	ra,0(sp)
 c008d58:	d9c00115 	stw	r7,4(sp)
 c008d5c:	d9c00104 	addi	r7,sp,4
 c008d60:	c009a180 	call	c009a18 <_vfiprintf_r>
 c008d64:	dfc00017 	ldw	ra,0(sp)
 c008d68:	dec00204 	addi	sp,sp,8
 c008d6c:	f800283a 	ret

0c008d70 <fiprintf>:
 c008d70:	defffd04 	addi	sp,sp,-12
 c008d74:	2005883a 	mov	r2,r4
 c008d78:	dfc00015 	stw	ra,0(sp)
 c008d7c:	d9800115 	stw	r6,4(sp)
 c008d80:	d9c00215 	stw	r7,8(sp)
 c008d84:	00c300b4 	movhi	r3,3074
 c008d88:	18d07604 	addi	r3,r3,16856
 c008d8c:	19000017 	ldw	r4,0(r3)
 c008d90:	280d883a 	mov	r6,r5
 c008d94:	d9c00104 	addi	r7,sp,4
 c008d98:	100b883a 	mov	r5,r2
 c008d9c:	c009a180 	call	c009a18 <_vfiprintf_r>
 c008da0:	dfc00017 	ldw	ra,0(sp)
 c008da4:	dec00304 	addi	sp,sp,12
 c008da8:	f800283a 	ret

0c008dac <malloc>:
 c008dac:	008300b4 	movhi	r2,3074
 c008db0:	10907604 	addi	r2,r2,16856
 c008db4:	200b883a 	mov	r5,r4
 c008db8:	11000017 	ldw	r4,0(r2)
 c008dbc:	c008dd41 	jmpi	c008dd4 <_malloc_r>

0c008dc0 <free>:
 c008dc0:	008300b4 	movhi	r2,3074
 c008dc4:	10907604 	addi	r2,r2,16856
 c008dc8:	200b883a 	mov	r5,r4
 c008dcc:	11000017 	ldw	r4,0(r2)
 c008dd0:	c00dbe01 	jmpi	c00dbe0 <_free_r>

0c008dd4 <_malloc_r>:
 c008dd4:	defff504 	addi	sp,sp,-44
 c008dd8:	dc800315 	stw	r18,12(sp)
 c008ddc:	dfc00a15 	stw	ra,40(sp)
 c008de0:	df000915 	stw	fp,36(sp)
 c008de4:	ddc00815 	stw	r23,32(sp)
 c008de8:	dd800715 	stw	r22,28(sp)
 c008dec:	dd400615 	stw	r21,24(sp)
 c008df0:	dd000515 	stw	r20,20(sp)
 c008df4:	dcc00415 	stw	r19,16(sp)
 c008df8:	dc400215 	stw	r17,8(sp)
 c008dfc:	dc000115 	stw	r16,4(sp)
 c008e00:	288002c4 	addi	r2,r5,11
 c008e04:	00c00584 	movi	r3,22
 c008e08:	2025883a 	mov	r18,r4
 c008e0c:	18802a2e 	bgeu	r3,r2,c008eb8 <_malloc_r+0xe4>
 c008e10:	047ffe04 	movi	r17,-8
 c008e14:	1462703a 	and	r17,r2,r17
 c008e18:	88009e16 	blt	r17,zero,c009094 <_malloc_r+0x2c0>
 c008e1c:	89409d36 	bltu	r17,r5,c009094 <_malloc_r+0x2c0>
 c008e20:	c0153800 	call	c015380 <__malloc_lock>
 c008e24:	00807dc4 	movi	r2,503
 c008e28:	14402736 	bltu	r2,r17,c008ec8 <_malloc_r+0xf4>
 c008e2c:	8806d0fa 	srli	r3,r17,3
 c008e30:	04c300b4 	movhi	r19,3074
 c008e34:	9ccac204 	addi	r19,r19,11016
 c008e38:	18c5883a 	add	r2,r3,r3
 c008e3c:	1085883a 	add	r2,r2,r2
 c008e40:	1085883a 	add	r2,r2,r2
 c008e44:	9885883a 	add	r2,r19,r2
 c008e48:	14000317 	ldw	r16,12(r2)
 c008e4c:	80814a26 	beq	r16,r2,c009378 <_malloc_r+0x5a4>
 c008e50:	80c00117 	ldw	r3,4(r16)
 c008e54:	81000317 	ldw	r4,12(r16)
 c008e58:	00bfff04 	movi	r2,-4
 c008e5c:	1884703a 	and	r2,r3,r2
 c008e60:	81400217 	ldw	r5,8(r16)
 c008e64:	8085883a 	add	r2,r16,r2
 c008e68:	10c00117 	ldw	r3,4(r2)
 c008e6c:	29000315 	stw	r4,12(r5)
 c008e70:	21400215 	stw	r5,8(r4)
 c008e74:	18c00054 	ori	r3,r3,1
 c008e78:	10c00115 	stw	r3,4(r2)
 c008e7c:	9009883a 	mov	r4,r18
 c008e80:	c0153a00 	call	c0153a0 <__malloc_unlock>
 c008e84:	80800204 	addi	r2,r16,8
 c008e88:	dfc00a17 	ldw	ra,40(sp)
 c008e8c:	df000917 	ldw	fp,36(sp)
 c008e90:	ddc00817 	ldw	r23,32(sp)
 c008e94:	dd800717 	ldw	r22,28(sp)
 c008e98:	dd400617 	ldw	r21,24(sp)
 c008e9c:	dd000517 	ldw	r20,20(sp)
 c008ea0:	dcc00417 	ldw	r19,16(sp)
 c008ea4:	dc800317 	ldw	r18,12(sp)
 c008ea8:	dc400217 	ldw	r17,8(sp)
 c008eac:	dc000117 	ldw	r16,4(sp)
 c008eb0:	dec00b04 	addi	sp,sp,44
 c008eb4:	f800283a 	ret
 c008eb8:	04400404 	movi	r17,16
 c008ebc:	89407536 	bltu	r17,r5,c009094 <_malloc_r+0x2c0>
 c008ec0:	c0153800 	call	c015380 <__malloc_lock>
 c008ec4:	003fd906 	br	c008e2c <__alt_data_end+0xfc008e2c>
 c008ec8:	8806d27a 	srli	r3,r17,9
 c008ecc:	18007526 	beq	r3,zero,c0090a4 <_malloc_r+0x2d0>
 c008ed0:	00800104 	movi	r2,4
 c008ed4:	10c0ef36 	bltu	r2,r3,c009294 <_malloc_r+0x4c0>
 c008ed8:	8806d1ba 	srli	r3,r17,6
 c008edc:	19c00e04 	addi	r7,r3,56
 c008ee0:	39cb883a 	add	r5,r7,r7
 c008ee4:	04c300b4 	movhi	r19,3074
 c008ee8:	294b883a 	add	r5,r5,r5
 c008eec:	9ccac204 	addi	r19,r19,11016
 c008ef0:	294b883a 	add	r5,r5,r5
 c008ef4:	994b883a 	add	r5,r19,r5
 c008ef8:	2c000317 	ldw	r16,12(r5)
 c008efc:	2c000e26 	beq	r5,r16,c008f38 <_malloc_r+0x164>
 c008f00:	80800117 	ldw	r2,4(r16)
 c008f04:	01bfff04 	movi	r6,-4
 c008f08:	010003c4 	movi	r4,15
 c008f0c:	1184703a 	and	r2,r2,r6
 c008f10:	1447c83a 	sub	r3,r2,r17
 c008f14:	20c00716 	blt	r4,r3,c008f34 <_malloc_r+0x160>
 c008f18:	1800650e 	bge	r3,zero,c0090b0 <_malloc_r+0x2dc>
 c008f1c:	84000317 	ldw	r16,12(r16)
 c008f20:	2c000526 	beq	r5,r16,c008f38 <_malloc_r+0x164>
 c008f24:	80800117 	ldw	r2,4(r16)
 c008f28:	1184703a 	and	r2,r2,r6
 c008f2c:	1447c83a 	sub	r3,r2,r17
 c008f30:	20fff90e 	bge	r4,r3,c008f18 <__alt_data_end+0xfc008f18>
 c008f34:	39ffffc4 	addi	r7,r7,-1
 c008f38:	38c00044 	addi	r3,r7,1
 c008f3c:	018300b4 	movhi	r6,3074
 c008f40:	9c000417 	ldw	r16,16(r19)
 c008f44:	318ac204 	addi	r6,r6,11016
 c008f48:	32400204 	addi	r9,r6,8
 c008f4c:	82410326 	beq	r16,r9,c00935c <_malloc_r+0x588>
 c008f50:	81000117 	ldw	r4,4(r16)
 c008f54:	00bfff04 	movi	r2,-4
 c008f58:	208e703a 	and	r7,r4,r2
 c008f5c:	3c45c83a 	sub	r2,r7,r17
 c008f60:	010003c4 	movi	r4,15
 c008f64:	2080ee16 	blt	r4,r2,c009320 <_malloc_r+0x54c>
 c008f68:	32400515 	stw	r9,20(r6)
 c008f6c:	32400415 	stw	r9,16(r6)
 c008f70:	1000510e 	bge	r2,zero,c0090b8 <_malloc_r+0x2e4>
 c008f74:	00807fc4 	movi	r2,511
 c008f78:	11c0ce36 	bltu	r2,r7,c0092b4 <_malloc_r+0x4e0>
 c008f7c:	3808d0fa 	srli	r4,r7,3
 c008f80:	01c00044 	movi	r7,1
 c008f84:	30800117 	ldw	r2,4(r6)
 c008f88:	210b883a 	add	r5,r4,r4
 c008f8c:	294b883a 	add	r5,r5,r5
 c008f90:	2009d0ba 	srai	r4,r4,2
 c008f94:	294b883a 	add	r5,r5,r5
 c008f98:	298b883a 	add	r5,r5,r6
 c008f9c:	2a000217 	ldw	r8,8(r5)
 c008fa0:	3908983a 	sll	r4,r7,r4
 c008fa4:	81400315 	stw	r5,12(r16)
 c008fa8:	82000215 	stw	r8,8(r16)
 c008fac:	2088b03a 	or	r4,r4,r2
 c008fb0:	2c000215 	stw	r16,8(r5)
 c008fb4:	31000115 	stw	r4,4(r6)
 c008fb8:	44000315 	stw	r16,12(r8)
 c008fbc:	1805d0ba 	srai	r2,r3,2
 c008fc0:	01400044 	movi	r5,1
 c008fc4:	288a983a 	sll	r5,r5,r2
 c008fc8:	21404336 	bltu	r4,r5,c0090d8 <_malloc_r+0x304>
 c008fcc:	2144703a 	and	r2,r4,r5
 c008fd0:	10000a1e 	bne	r2,zero,c008ffc <_malloc_r+0x228>
 c008fd4:	00bfff04 	movi	r2,-4
 c008fd8:	294b883a 	add	r5,r5,r5
 c008fdc:	1886703a 	and	r3,r3,r2
 c008fe0:	2144703a 	and	r2,r4,r5
 c008fe4:	18c00104 	addi	r3,r3,4
 c008fe8:	1000041e 	bne	r2,zero,c008ffc <_malloc_r+0x228>
 c008fec:	294b883a 	add	r5,r5,r5
 c008ff0:	2144703a 	and	r2,r4,r5
 c008ff4:	18c00104 	addi	r3,r3,4
 c008ff8:	103ffc26 	beq	r2,zero,c008fec <__alt_data_end+0xfc008fec>
 c008ffc:	023fff04 	movi	r8,-4
 c009000:	01c003c4 	movi	r7,15
 c009004:	18c5883a 	add	r2,r3,r3
 c009008:	1085883a 	add	r2,r2,r2
 c00900c:	1085883a 	add	r2,r2,r2
 c009010:	9895883a 	add	r10,r19,r2
 c009014:	52c00304 	addi	r11,r10,12
 c009018:	1819883a 	mov	r12,r3
 c00901c:	5c000017 	ldw	r16,0(r11)
 c009020:	59bffd04 	addi	r6,r11,-12
 c009024:	8180041e 	bne	r16,r6,c009038 <_malloc_r+0x264>
 c009028:	0000ce06 	br	c009364 <_malloc_r+0x590>
 c00902c:	2000d70e 	bge	r4,zero,c00938c <_malloc_r+0x5b8>
 c009030:	84000317 	ldw	r16,12(r16)
 c009034:	8180cb26 	beq	r16,r6,c009364 <_malloc_r+0x590>
 c009038:	80800117 	ldw	r2,4(r16)
 c00903c:	1204703a 	and	r2,r2,r8
 c009040:	1449c83a 	sub	r4,r2,r17
 c009044:	393ff90e 	bge	r7,r4,c00902c <__alt_data_end+0xfc00902c>
 c009048:	80800317 	ldw	r2,12(r16)
 c00904c:	80c00217 	ldw	r3,8(r16)
 c009050:	89400054 	ori	r5,r17,1
 c009054:	81400115 	stw	r5,4(r16)
 c009058:	18800315 	stw	r2,12(r3)
 c00905c:	10c00215 	stw	r3,8(r2)
 c009060:	8463883a 	add	r17,r16,r17
 c009064:	9c400515 	stw	r17,20(r19)
 c009068:	9c400415 	stw	r17,16(r19)
 c00906c:	20800054 	ori	r2,r4,1
 c009070:	88800115 	stw	r2,4(r17)
 c009074:	8a400315 	stw	r9,12(r17)
 c009078:	8a400215 	stw	r9,8(r17)
 c00907c:	8923883a 	add	r17,r17,r4
 c009080:	89000015 	stw	r4,0(r17)
 c009084:	9009883a 	mov	r4,r18
 c009088:	c0153a00 	call	c0153a0 <__malloc_unlock>
 c00908c:	80800204 	addi	r2,r16,8
 c009090:	003f7d06 	br	c008e88 <__alt_data_end+0xfc008e88>
 c009094:	00800304 	movi	r2,12
 c009098:	90800015 	stw	r2,0(r18)
 c00909c:	0005883a 	mov	r2,zero
 c0090a0:	003f7906 	br	c008e88 <__alt_data_end+0xfc008e88>
 c0090a4:	01401f84 	movi	r5,126
 c0090a8:	01c00fc4 	movi	r7,63
 c0090ac:	003f8d06 	br	c008ee4 <__alt_data_end+0xfc008ee4>
 c0090b0:	81000317 	ldw	r4,12(r16)
 c0090b4:	003f6a06 	br	c008e60 <__alt_data_end+0xfc008e60>
 c0090b8:	81c5883a 	add	r2,r16,r7
 c0090bc:	10c00117 	ldw	r3,4(r2)
 c0090c0:	9009883a 	mov	r4,r18
 c0090c4:	18c00054 	ori	r3,r3,1
 c0090c8:	10c00115 	stw	r3,4(r2)
 c0090cc:	c0153a00 	call	c0153a0 <__malloc_unlock>
 c0090d0:	80800204 	addi	r2,r16,8
 c0090d4:	003f6c06 	br	c008e88 <__alt_data_end+0xfc008e88>
 c0090d8:	9c000217 	ldw	r16,8(r19)
 c0090dc:	00bfff04 	movi	r2,-4
 c0090e0:	85800117 	ldw	r22,4(r16)
 c0090e4:	b0ac703a 	and	r22,r22,r2
 c0090e8:	b4400336 	bltu	r22,r17,c0090f8 <_malloc_r+0x324>
 c0090ec:	b445c83a 	sub	r2,r22,r17
 c0090f0:	00c003c4 	movi	r3,15
 c0090f4:	18805d16 	blt	r3,r2,c00926c <_malloc_r+0x498>
 c0090f8:	05c300b4 	movhi	r23,3074
 c0090fc:	008300b4 	movhi	r2,3074
 c009100:	bdd07704 	addi	r23,r23,16860
 c009104:	10975504 	addi	r2,r2,23892
 c009108:	15400017 	ldw	r21,0(r2)
 c00910c:	b9000017 	ldw	r4,0(r23)
 c009110:	00ffffc4 	movi	r3,-1
 c009114:	858d883a 	add	r6,r16,r22
 c009118:	8d6b883a 	add	r21,r17,r21
 c00911c:	20c0e426 	beq	r4,r3,c0094b0 <_malloc_r+0x6dc>
 c009120:	ad4403c4 	addi	r21,r21,4111
 c009124:	00fc0004 	movi	r3,-4096
 c009128:	a8ea703a 	and	r21,r21,r3
 c00912c:	9009883a 	mov	r4,r18
 c009130:	a80b883a 	mov	r5,r21
 c009134:	d9800015 	stw	r6,0(sp)
 c009138:	c00992c0 	call	c00992c <_sbrk_r>
 c00913c:	00ffffc4 	movi	r3,-1
 c009140:	1029883a 	mov	r20,r2
 c009144:	d9800017 	ldw	r6,0(sp)
 c009148:	10c0a426 	beq	r2,r3,c0093dc <_malloc_r+0x608>
 c00914c:	1180a236 	bltu	r2,r6,c0093d8 <_malloc_r+0x604>
 c009150:	070302b4 	movhi	fp,3082
 c009154:	e7181604 	addi	fp,fp,24664
 c009158:	e0c00017 	ldw	r3,0(fp)
 c00915c:	a8c7883a 	add	r3,r21,r3
 c009160:	e0c00015 	stw	r3,0(fp)
 c009164:	3500da26 	beq	r6,r20,c0094d0 <_malloc_r+0x6fc>
 c009168:	b9000017 	ldw	r4,0(r23)
 c00916c:	00bfffc4 	movi	r2,-1
 c009170:	2080e426 	beq	r4,r2,c009504 <_malloc_r+0x730>
 c009174:	a185c83a 	sub	r2,r20,r6
 c009178:	1885883a 	add	r2,r3,r2
 c00917c:	e0800015 	stw	r2,0(fp)
 c009180:	a0c001cc 	andi	r3,r20,7
 c009184:	1800b526 	beq	r3,zero,c00945c <_malloc_r+0x688>
 c009188:	a0e9c83a 	sub	r20,r20,r3
 c00918c:	00840204 	movi	r2,4104
 c009190:	a5000204 	addi	r20,r20,8
 c009194:	10c7c83a 	sub	r3,r2,r3
 c009198:	a545883a 	add	r2,r20,r21
 c00919c:	1083ffcc 	andi	r2,r2,4095
 c0091a0:	18abc83a 	sub	r21,r3,r2
 c0091a4:	9009883a 	mov	r4,r18
 c0091a8:	a80b883a 	mov	r5,r21
 c0091ac:	c00992c0 	call	c00992c <_sbrk_r>
 c0091b0:	00ffffc4 	movi	r3,-1
 c0091b4:	10c0d026 	beq	r2,r3,c0094f8 <_malloc_r+0x724>
 c0091b8:	1507c83a 	sub	r3,r2,r20
 c0091bc:	a8c7883a 	add	r3,r21,r3
 c0091c0:	18c00054 	ori	r3,r3,1
 c0091c4:	e0800017 	ldw	r2,0(fp)
 c0091c8:	9d000215 	stw	r20,8(r19)
 c0091cc:	a0c00115 	stw	r3,4(r20)
 c0091d0:	a887883a 	add	r3,r21,r2
 c0091d4:	e0c00015 	stw	r3,0(fp)
 c0091d8:	84c00e26 	beq	r16,r19,c009214 <_malloc_r+0x440>
 c0091dc:	018003c4 	movi	r6,15
 c0091e0:	3580a02e 	bgeu	r6,r22,c009464 <_malloc_r+0x690>
 c0091e4:	81400117 	ldw	r5,4(r16)
 c0091e8:	013ffe04 	movi	r4,-8
 c0091ec:	b0bffd04 	addi	r2,r22,-12
 c0091f0:	1104703a 	and	r2,r2,r4
 c0091f4:	2900004c 	andi	r4,r5,1
 c0091f8:	1108b03a 	or	r4,r2,r4
 c0091fc:	81000115 	stw	r4,4(r16)
 c009200:	01400144 	movi	r5,5
 c009204:	8089883a 	add	r4,r16,r2
 c009208:	21400115 	stw	r5,4(r4)
 c00920c:	21400215 	stw	r5,8(r4)
 c009210:	3080c036 	bltu	r6,r2,c009514 <_malloc_r+0x740>
 c009214:	008300b4 	movhi	r2,3074
 c009218:	10975404 	addi	r2,r2,23888
 c00921c:	11000017 	ldw	r4,0(r2)
 c009220:	20c0012e 	bgeu	r4,r3,c009228 <_malloc_r+0x454>
 c009224:	10c00015 	stw	r3,0(r2)
 c009228:	008300b4 	movhi	r2,3074
 c00922c:	10975304 	addi	r2,r2,23884
 c009230:	11000017 	ldw	r4,0(r2)
 c009234:	9c000217 	ldw	r16,8(r19)
 c009238:	20c0012e 	bgeu	r4,r3,c009240 <_malloc_r+0x46c>
 c00923c:	10c00015 	stw	r3,0(r2)
 c009240:	80c00117 	ldw	r3,4(r16)
 c009244:	00bfff04 	movi	r2,-4
 c009248:	1886703a 	and	r3,r3,r2
 c00924c:	1c45c83a 	sub	r2,r3,r17
 c009250:	1c400236 	bltu	r3,r17,c00925c <_malloc_r+0x488>
 c009254:	00c003c4 	movi	r3,15
 c009258:	18800416 	blt	r3,r2,c00926c <_malloc_r+0x498>
 c00925c:	9009883a 	mov	r4,r18
 c009260:	c0153a00 	call	c0153a0 <__malloc_unlock>
 c009264:	0005883a 	mov	r2,zero
 c009268:	003f0706 	br	c008e88 <__alt_data_end+0xfc008e88>
 c00926c:	88c00054 	ori	r3,r17,1
 c009270:	80c00115 	stw	r3,4(r16)
 c009274:	8463883a 	add	r17,r16,r17
 c009278:	10800054 	ori	r2,r2,1
 c00927c:	9c400215 	stw	r17,8(r19)
 c009280:	88800115 	stw	r2,4(r17)
 c009284:	9009883a 	mov	r4,r18
 c009288:	c0153a00 	call	c0153a0 <__malloc_unlock>
 c00928c:	80800204 	addi	r2,r16,8
 c009290:	003efd06 	br	c008e88 <__alt_data_end+0xfc008e88>
 c009294:	00800504 	movi	r2,20
 c009298:	10c0482e 	bgeu	r2,r3,c0093bc <_malloc_r+0x5e8>
 c00929c:	00801504 	movi	r2,84
 c0092a0:	10c06836 	bltu	r2,r3,c009444 <_malloc_r+0x670>
 c0092a4:	8806d33a 	srli	r3,r17,12
 c0092a8:	19c01b84 	addi	r7,r3,110
 c0092ac:	39cb883a 	add	r5,r7,r7
 c0092b0:	003f0c06 	br	c008ee4 <__alt_data_end+0xfc008ee4>
 c0092b4:	3804d27a 	srli	r2,r7,9
 c0092b8:	01000104 	movi	r4,4
 c0092bc:	2080422e 	bgeu	r4,r2,c0093c8 <_malloc_r+0x5f4>
 c0092c0:	01000504 	movi	r4,20
 c0092c4:	20807c36 	bltu	r4,r2,c0094b8 <_malloc_r+0x6e4>
 c0092c8:	110016c4 	addi	r4,r2,91
 c0092cc:	210b883a 	add	r5,r4,r4
 c0092d0:	294b883a 	add	r5,r5,r5
 c0092d4:	294b883a 	add	r5,r5,r5
 c0092d8:	994b883a 	add	r5,r19,r5
 c0092dc:	28800217 	ldw	r2,8(r5)
 c0092e0:	020300b4 	movhi	r8,3074
 c0092e4:	420ac204 	addi	r8,r8,11016
 c0092e8:	11406326 	beq	r2,r5,c009478 <_malloc_r+0x6a4>
 c0092ec:	01bfff04 	movi	r6,-4
 c0092f0:	11000117 	ldw	r4,4(r2)
 c0092f4:	2188703a 	and	r4,r4,r6
 c0092f8:	3900022e 	bgeu	r7,r4,c009304 <_malloc_r+0x530>
 c0092fc:	10800217 	ldw	r2,8(r2)
 c009300:	28bffb1e 	bne	r5,r2,c0092f0 <__alt_data_end+0xfc0092f0>
 c009304:	11800317 	ldw	r6,12(r2)
 c009308:	99000117 	ldw	r4,4(r19)
 c00930c:	81800315 	stw	r6,12(r16)
 c009310:	80800215 	stw	r2,8(r16)
 c009314:	34000215 	stw	r16,8(r6)
 c009318:	14000315 	stw	r16,12(r2)
 c00931c:	003f2706 	br	c008fbc <__alt_data_end+0xfc008fbc>
 c009320:	88c00054 	ori	r3,r17,1
 c009324:	80c00115 	stw	r3,4(r16)
 c009328:	8463883a 	add	r17,r16,r17
 c00932c:	34400515 	stw	r17,20(r6)
 c009330:	34400415 	stw	r17,16(r6)
 c009334:	10c00054 	ori	r3,r2,1
 c009338:	8a400315 	stw	r9,12(r17)
 c00933c:	8a400215 	stw	r9,8(r17)
 c009340:	88c00115 	stw	r3,4(r17)
 c009344:	88a3883a 	add	r17,r17,r2
 c009348:	88800015 	stw	r2,0(r17)
 c00934c:	9009883a 	mov	r4,r18
 c009350:	c0153a00 	call	c0153a0 <__malloc_unlock>
 c009354:	80800204 	addi	r2,r16,8
 c009358:	003ecb06 	br	c008e88 <__alt_data_end+0xfc008e88>
 c00935c:	31000117 	ldw	r4,4(r6)
 c009360:	003f1606 	br	c008fbc <__alt_data_end+0xfc008fbc>
 c009364:	63000044 	addi	r12,r12,1
 c009368:	608000cc 	andi	r2,r12,3
 c00936c:	5ac00204 	addi	r11,r11,8
 c009370:	103f2a1e 	bne	r2,zero,c00901c <__alt_data_end+0xfc00901c>
 c009374:	00002106 	br	c0093fc <_malloc_r+0x628>
 c009378:	80800204 	addi	r2,r16,8
 c00937c:	84000517 	ldw	r16,20(r16)
 c009380:	143eb31e 	bne	r2,r16,c008e50 <__alt_data_end+0xfc008e50>
 c009384:	18c00084 	addi	r3,r3,2
 c009388:	003eec06 	br	c008f3c <__alt_data_end+0xfc008f3c>
 c00938c:	8085883a 	add	r2,r16,r2
 c009390:	10c00117 	ldw	r3,4(r2)
 c009394:	81000317 	ldw	r4,12(r16)
 c009398:	81400217 	ldw	r5,8(r16)
 c00939c:	18c00054 	ori	r3,r3,1
 c0093a0:	10c00115 	stw	r3,4(r2)
 c0093a4:	29000315 	stw	r4,12(r5)
 c0093a8:	21400215 	stw	r5,8(r4)
 c0093ac:	9009883a 	mov	r4,r18
 c0093b0:	c0153a00 	call	c0153a0 <__malloc_unlock>
 c0093b4:	80800204 	addi	r2,r16,8
 c0093b8:	003eb306 	br	c008e88 <__alt_data_end+0xfc008e88>
 c0093bc:	19c016c4 	addi	r7,r3,91
 c0093c0:	39cb883a 	add	r5,r7,r7
 c0093c4:	003ec706 	br	c008ee4 <__alt_data_end+0xfc008ee4>
 c0093c8:	3804d1ba 	srli	r2,r7,6
 c0093cc:	11000e04 	addi	r4,r2,56
 c0093d0:	210b883a 	add	r5,r4,r4
 c0093d4:	003fbe06 	br	c0092d0 <__alt_data_end+0xfc0092d0>
 c0093d8:	84ff5d26 	beq	r16,r19,c009150 <__alt_data_end+0xfc009150>
 c0093dc:	9c000217 	ldw	r16,8(r19)
 c0093e0:	00bfff04 	movi	r2,-4
 c0093e4:	80c00117 	ldw	r3,4(r16)
 c0093e8:	1886703a 	and	r3,r3,r2
 c0093ec:	003f9706 	br	c00924c <__alt_data_end+0xfc00924c>
 c0093f0:	52800017 	ldw	r10,0(r10)
 c0093f4:	18ffffc4 	addi	r3,r3,-1
 c0093f8:	50805c1e 	bne	r10,r2,c00956c <_malloc_r+0x798>
 c0093fc:	190000cc 	andi	r4,r3,3
 c009400:	50bffe04 	addi	r2,r10,-8
 c009404:	203ffa1e 	bne	r4,zero,c0093f0 <__alt_data_end+0xfc0093f0>
 c009408:	98800117 	ldw	r2,4(r19)
 c00940c:	0146303a 	nor	r3,zero,r5
 c009410:	1884703a 	and	r2,r3,r2
 c009414:	98800115 	stw	r2,4(r19)
 c009418:	294b883a 	add	r5,r5,r5
 c00941c:	117f2e36 	bltu	r2,r5,c0090d8 <__alt_data_end+0xfc0090d8>
 c009420:	283f2d26 	beq	r5,zero,c0090d8 <__alt_data_end+0xfc0090d8>
 c009424:	1146703a 	and	r3,r2,r5
 c009428:	1800521e 	bne	r3,zero,c009574 <_malloc_r+0x7a0>
 c00942c:	6007883a 	mov	r3,r12
 c009430:	294b883a 	add	r5,r5,r5
 c009434:	1148703a 	and	r4,r2,r5
 c009438:	18c00104 	addi	r3,r3,4
 c00943c:	203ffc26 	beq	r4,zero,c009430 <__alt_data_end+0xfc009430>
 c009440:	003ef006 	br	c009004 <__alt_data_end+0xfc009004>
 c009444:	00805504 	movi	r2,340
 c009448:	10c01336 	bltu	r2,r3,c009498 <_malloc_r+0x6c4>
 c00944c:	8806d3fa 	srli	r3,r17,15
 c009450:	19c01dc4 	addi	r7,r3,119
 c009454:	39cb883a 	add	r5,r7,r7
 c009458:	003ea206 	br	c008ee4 <__alt_data_end+0xfc008ee4>
 c00945c:	00c40004 	movi	r3,4096
 c009460:	003f4d06 	br	c009198 <__alt_data_end+0xfc009198>
 c009464:	00800044 	movi	r2,1
 c009468:	a0800115 	stw	r2,4(r20)
 c00946c:	a021883a 	mov	r16,r20
 c009470:	0007883a 	mov	r3,zero
 c009474:	003f7506 	br	c00924c <__alt_data_end+0xfc00924c>
 c009478:	200bd0ba 	srai	r5,r4,2
 c00947c:	01800044 	movi	r6,1
 c009480:	41000117 	ldw	r4,4(r8)
 c009484:	314a983a 	sll	r5,r6,r5
 c009488:	100d883a 	mov	r6,r2
 c00948c:	2908b03a 	or	r4,r5,r4
 c009490:	41000115 	stw	r4,4(r8)
 c009494:	003f9d06 	br	c00930c <__alt_data_end+0xfc00930c>
 c009498:	00815504 	movi	r2,1364
 c00949c:	10c01336 	bltu	r2,r3,c0094ec <_malloc_r+0x718>
 c0094a0:	8806d4ba 	srli	r3,r17,18
 c0094a4:	19c01f04 	addi	r7,r3,124
 c0094a8:	39cb883a 	add	r5,r7,r7
 c0094ac:	003e8d06 	br	c008ee4 <__alt_data_end+0xfc008ee4>
 c0094b0:	ad400404 	addi	r21,r21,16
 c0094b4:	003f1d06 	br	c00912c <__alt_data_end+0xfc00912c>
 c0094b8:	01001504 	movi	r4,84
 c0094bc:	20801c36 	bltu	r4,r2,c009530 <_malloc_r+0x75c>
 c0094c0:	3804d33a 	srli	r2,r7,12
 c0094c4:	11001b84 	addi	r4,r2,110
 c0094c8:	210b883a 	add	r5,r4,r4
 c0094cc:	003f8006 	br	c0092d0 <__alt_data_end+0xfc0092d0>
 c0094d0:	3083ffcc 	andi	r2,r6,4095
 c0094d4:	103f241e 	bne	r2,zero,c009168 <__alt_data_end+0xfc009168>
 c0094d8:	99000217 	ldw	r4,8(r19)
 c0094dc:	ad85883a 	add	r2,r21,r22
 c0094e0:	10800054 	ori	r2,r2,1
 c0094e4:	20800115 	stw	r2,4(r4)
 c0094e8:	003f4a06 	br	c009214 <__alt_data_end+0xfc009214>
 c0094ec:	01403f04 	movi	r5,252
 c0094f0:	01c01f84 	movi	r7,126
 c0094f4:	003e7b06 	br	c008ee4 <__alt_data_end+0xfc008ee4>
 c0094f8:	00c00044 	movi	r3,1
 c0094fc:	002b883a 	mov	r21,zero
 c009500:	003f3006 	br	c0091c4 <__alt_data_end+0xfc0091c4>
 c009504:	008300b4 	movhi	r2,3074
 c009508:	10907704 	addi	r2,r2,16860
 c00950c:	15000015 	stw	r20,0(r2)
 c009510:	003f1b06 	br	c009180 <__alt_data_end+0xfc009180>
 c009514:	9009883a 	mov	r4,r18
 c009518:	81400204 	addi	r5,r16,8
 c00951c:	c00dbe00 	call	c00dbe0 <_free_r>
 c009520:	008302b4 	movhi	r2,3082
 c009524:	10981604 	addi	r2,r2,24664
 c009528:	10c00017 	ldw	r3,0(r2)
 c00952c:	003f3906 	br	c009214 <__alt_data_end+0xfc009214>
 c009530:	01005504 	movi	r4,340
 c009534:	20800436 	bltu	r4,r2,c009548 <_malloc_r+0x774>
 c009538:	3804d3fa 	srli	r2,r7,15
 c00953c:	11001dc4 	addi	r4,r2,119
 c009540:	210b883a 	add	r5,r4,r4
 c009544:	003f6206 	br	c0092d0 <__alt_data_end+0xfc0092d0>
 c009548:	01015504 	movi	r4,1364
 c00954c:	20800436 	bltu	r4,r2,c009560 <_malloc_r+0x78c>
 c009550:	3804d4ba 	srli	r2,r7,18
 c009554:	11001f04 	addi	r4,r2,124
 c009558:	210b883a 	add	r5,r4,r4
 c00955c:	003f5c06 	br	c0092d0 <__alt_data_end+0xfc0092d0>
 c009560:	01403f04 	movi	r5,252
 c009564:	01001f84 	movi	r4,126
 c009568:	003f5906 	br	c0092d0 <__alt_data_end+0xfc0092d0>
 c00956c:	98800117 	ldw	r2,4(r19)
 c009570:	003fa906 	br	c009418 <__alt_data_end+0xfc009418>
 c009574:	6007883a 	mov	r3,r12
 c009578:	003ea206 	br	c009004 <__alt_data_end+0xfc009004>

0c00957c <memcpy>:
 c00957c:	deffff04 	addi	sp,sp,-4
 c009580:	dc000015 	stw	r16,0(sp)
 c009584:	00c003c4 	movi	r3,15
 c009588:	2005883a 	mov	r2,r4
 c00958c:	1980432e 	bgeu	r3,r6,c00969c <memcpy+0x120>
 c009590:	2146b03a 	or	r3,r4,r5
 c009594:	18c000cc 	andi	r3,r3,3
 c009598:	1800421e 	bne	r3,zero,c0096a4 <memcpy+0x128>
 c00959c:	343ffc04 	addi	r16,r6,-16
 c0095a0:	8020d13a 	srli	r16,r16,4
 c0095a4:	28c00104 	addi	r3,r5,4
 c0095a8:	23400104 	addi	r13,r4,4
 c0095ac:	801e913a 	slli	r15,r16,4
 c0095b0:	2b000204 	addi	r12,r5,8
 c0095b4:	22c00204 	addi	r11,r4,8
 c0095b8:	7bc00504 	addi	r15,r15,20
 c0095bc:	2a800304 	addi	r10,r5,12
 c0095c0:	22400304 	addi	r9,r4,12
 c0095c4:	2bdf883a 	add	r15,r5,r15
 c0095c8:	2811883a 	mov	r8,r5
 c0095cc:	200f883a 	mov	r7,r4
 c0095d0:	41000017 	ldw	r4,0(r8)
 c0095d4:	39c00404 	addi	r7,r7,16
 c0095d8:	18c00404 	addi	r3,r3,16
 c0095dc:	393ffc15 	stw	r4,-16(r7)
 c0095e0:	1bbffc17 	ldw	r14,-16(r3)
 c0095e4:	6b400404 	addi	r13,r13,16
 c0095e8:	5ac00404 	addi	r11,r11,16
 c0095ec:	6bbffc15 	stw	r14,-16(r13)
 c0095f0:	63800017 	ldw	r14,0(r12)
 c0095f4:	4a400404 	addi	r9,r9,16
 c0095f8:	42000404 	addi	r8,r8,16
 c0095fc:	5bbffc15 	stw	r14,-16(r11)
 c009600:	53800017 	ldw	r14,0(r10)
 c009604:	63000404 	addi	r12,r12,16
 c009608:	52800404 	addi	r10,r10,16
 c00960c:	4bbffc15 	stw	r14,-16(r9)
 c009610:	1bffef1e 	bne	r3,r15,c0095d0 <__alt_data_end+0xfc0095d0>
 c009614:	81c00044 	addi	r7,r16,1
 c009618:	380e913a 	slli	r7,r7,4
 c00961c:	310003cc 	andi	r4,r6,15
 c009620:	02c000c4 	movi	r11,3
 c009624:	11c7883a 	add	r3,r2,r7
 c009628:	29cb883a 	add	r5,r5,r7
 c00962c:	59001f2e 	bgeu	r11,r4,c0096ac <memcpy+0x130>
 c009630:	1813883a 	mov	r9,r3
 c009634:	2811883a 	mov	r8,r5
 c009638:	200f883a 	mov	r7,r4
 c00963c:	42800017 	ldw	r10,0(r8)
 c009640:	4a400104 	addi	r9,r9,4
 c009644:	39ffff04 	addi	r7,r7,-4
 c009648:	4abfff15 	stw	r10,-4(r9)
 c00964c:	42000104 	addi	r8,r8,4
 c009650:	59fffa36 	bltu	r11,r7,c00963c <__alt_data_end+0xfc00963c>
 c009654:	213fff04 	addi	r4,r4,-4
 c009658:	2008d0ba 	srli	r4,r4,2
 c00965c:	318000cc 	andi	r6,r6,3
 c009660:	21000044 	addi	r4,r4,1
 c009664:	2109883a 	add	r4,r4,r4
 c009668:	2109883a 	add	r4,r4,r4
 c00966c:	1907883a 	add	r3,r3,r4
 c009670:	290b883a 	add	r5,r5,r4
 c009674:	30000626 	beq	r6,zero,c009690 <memcpy+0x114>
 c009678:	198d883a 	add	r6,r3,r6
 c00967c:	29c00003 	ldbu	r7,0(r5)
 c009680:	18c00044 	addi	r3,r3,1
 c009684:	29400044 	addi	r5,r5,1
 c009688:	19ffffc5 	stb	r7,-1(r3)
 c00968c:	19bffb1e 	bne	r3,r6,c00967c <__alt_data_end+0xfc00967c>
 c009690:	dc000017 	ldw	r16,0(sp)
 c009694:	dec00104 	addi	sp,sp,4
 c009698:	f800283a 	ret
 c00969c:	2007883a 	mov	r3,r4
 c0096a0:	003ff406 	br	c009674 <__alt_data_end+0xfc009674>
 c0096a4:	2007883a 	mov	r3,r4
 c0096a8:	003ff306 	br	c009678 <__alt_data_end+0xfc009678>
 c0096ac:	200d883a 	mov	r6,r4
 c0096b0:	003ff006 	br	c009674 <__alt_data_end+0xfc009674>

0c0096b4 <memset>:
 c0096b4:	20c000cc 	andi	r3,r4,3
 c0096b8:	2005883a 	mov	r2,r4
 c0096bc:	18004326 	beq	r3,zero,c0097cc <memset+0x118>
 c0096c0:	31ffffc4 	addi	r7,r6,-1
 c0096c4:	30004026 	beq	r6,zero,c0097c8 <memset+0x114>
 c0096c8:	2813883a 	mov	r9,r5
 c0096cc:	200d883a 	mov	r6,r4
 c0096d0:	2007883a 	mov	r3,r4
 c0096d4:	00000406 	br	c0096e8 <memset+0x34>
 c0096d8:	3a3fffc4 	addi	r8,r7,-1
 c0096dc:	31800044 	addi	r6,r6,1
 c0096e0:	38003926 	beq	r7,zero,c0097c8 <memset+0x114>
 c0096e4:	400f883a 	mov	r7,r8
 c0096e8:	18c00044 	addi	r3,r3,1
 c0096ec:	32400005 	stb	r9,0(r6)
 c0096f0:	1a0000cc 	andi	r8,r3,3
 c0096f4:	403ff81e 	bne	r8,zero,c0096d8 <__alt_data_end+0xfc0096d8>
 c0096f8:	010000c4 	movi	r4,3
 c0096fc:	21c02d2e 	bgeu	r4,r7,c0097b4 <memset+0x100>
 c009700:	29803fcc 	andi	r6,r5,255
 c009704:	3008923a 	slli	r4,r6,8
 c009708:	218cb03a 	or	r6,r4,r6
 c00970c:	3008943a 	slli	r4,r6,16
 c009710:	218cb03a 	or	r6,r4,r6
 c009714:	010003c4 	movi	r4,15
 c009718:	21c0182e 	bgeu	r4,r7,c00977c <memset+0xc8>
 c00971c:	3b3ffc04 	addi	r12,r7,-16
 c009720:	6018d13a 	srli	r12,r12,4
 c009724:	1a000104 	addi	r8,r3,4
 c009728:	1ac00204 	addi	r11,r3,8
 c00972c:	6008913a 	slli	r4,r12,4
 c009730:	1a800304 	addi	r10,r3,12
 c009734:	1813883a 	mov	r9,r3
 c009738:	21000504 	addi	r4,r4,20
 c00973c:	1909883a 	add	r4,r3,r4
 c009740:	49800015 	stw	r6,0(r9)
 c009744:	41800015 	stw	r6,0(r8)
 c009748:	59800015 	stw	r6,0(r11)
 c00974c:	51800015 	stw	r6,0(r10)
 c009750:	42000404 	addi	r8,r8,16
 c009754:	4a400404 	addi	r9,r9,16
 c009758:	5ac00404 	addi	r11,r11,16
 c00975c:	52800404 	addi	r10,r10,16
 c009760:	413ff71e 	bne	r8,r4,c009740 <__alt_data_end+0xfc009740>
 c009764:	63000044 	addi	r12,r12,1
 c009768:	6018913a 	slli	r12,r12,4
 c00976c:	39c003cc 	andi	r7,r7,15
 c009770:	010000c4 	movi	r4,3
 c009774:	1b07883a 	add	r3,r3,r12
 c009778:	21c00e2e 	bgeu	r4,r7,c0097b4 <memset+0x100>
 c00977c:	1813883a 	mov	r9,r3
 c009780:	3811883a 	mov	r8,r7
 c009784:	010000c4 	movi	r4,3
 c009788:	49800015 	stw	r6,0(r9)
 c00978c:	423fff04 	addi	r8,r8,-4
 c009790:	4a400104 	addi	r9,r9,4
 c009794:	223ffc36 	bltu	r4,r8,c009788 <__alt_data_end+0xfc009788>
 c009798:	393fff04 	addi	r4,r7,-4
 c00979c:	2008d0ba 	srli	r4,r4,2
 c0097a0:	39c000cc 	andi	r7,r7,3
 c0097a4:	21000044 	addi	r4,r4,1
 c0097a8:	2109883a 	add	r4,r4,r4
 c0097ac:	2109883a 	add	r4,r4,r4
 c0097b0:	1907883a 	add	r3,r3,r4
 c0097b4:	38000426 	beq	r7,zero,c0097c8 <memset+0x114>
 c0097b8:	19cf883a 	add	r7,r3,r7
 c0097bc:	19400005 	stb	r5,0(r3)
 c0097c0:	18c00044 	addi	r3,r3,1
 c0097c4:	19fffd1e 	bne	r3,r7,c0097bc <__alt_data_end+0xfc0097bc>
 c0097c8:	f800283a 	ret
 c0097cc:	2007883a 	mov	r3,r4
 c0097d0:	300f883a 	mov	r7,r6
 c0097d4:	003fc806 	br	c0096f8 <__alt_data_end+0xfc0096f8>

0c0097d8 <_printf_r>:
 c0097d8:	defffd04 	addi	sp,sp,-12
 c0097dc:	dfc00015 	stw	ra,0(sp)
 c0097e0:	d9800115 	stw	r6,4(sp)
 c0097e4:	d9c00215 	stw	r7,8(sp)
 c0097e8:	280d883a 	mov	r6,r5
 c0097ec:	21400217 	ldw	r5,8(r4)
 c0097f0:	d9c00104 	addi	r7,sp,4
 c0097f4:	c009a340 	call	c009a34 <___vfprintf_internal_r>
 c0097f8:	dfc00017 	ldw	ra,0(sp)
 c0097fc:	dec00304 	addi	sp,sp,12
 c009800:	f800283a 	ret

0c009804 <printf>:
 c009804:	defffc04 	addi	sp,sp,-16
 c009808:	dfc00015 	stw	ra,0(sp)
 c00980c:	d9400115 	stw	r5,4(sp)
 c009810:	d9800215 	stw	r6,8(sp)
 c009814:	d9c00315 	stw	r7,12(sp)
 c009818:	008300b4 	movhi	r2,3074
 c00981c:	10907604 	addi	r2,r2,16856
 c009820:	10800017 	ldw	r2,0(r2)
 c009824:	200b883a 	mov	r5,r4
 c009828:	d9800104 	addi	r6,sp,4
 c00982c:	11000217 	ldw	r4,8(r2)
 c009830:	c00ba300 	call	c00ba30 <__vfprintf_internal>
 c009834:	dfc00017 	ldw	ra,0(sp)
 c009838:	dec00404 	addi	sp,sp,16
 c00983c:	f800283a 	ret

0c009840 <_putchar_r>:
 c009840:	21800217 	ldw	r6,8(r4)
 c009844:	c00f94c1 	jmpi	c00f94c <_putc_r>

0c009848 <putchar>:
 c009848:	008300b4 	movhi	r2,3074
 c00984c:	10907604 	addi	r2,r2,16856
 c009850:	200b883a 	mov	r5,r4
 c009854:	11000017 	ldw	r4,0(r2)
 c009858:	21800217 	ldw	r6,8(r4)
 c00985c:	c00f94c1 	jmpi	c00f94c <_putc_r>

0c009860 <_puts_r>:
 c009860:	defff604 	addi	sp,sp,-40
 c009864:	dc000715 	stw	r16,28(sp)
 c009868:	2021883a 	mov	r16,r4
 c00986c:	2809883a 	mov	r4,r5
 c009870:	dc400815 	stw	r17,32(sp)
 c009874:	dfc00915 	stw	ra,36(sp)
 c009878:	2823883a 	mov	r17,r5
 c00987c:	c0099800 	call	c009980 <strlen>
 c009880:	00c300b4 	movhi	r3,3074
 c009884:	18d07604 	addi	r3,r3,16856
 c009888:	18c00017 	ldw	r3,0(r3)
 c00988c:	11000044 	addi	r4,r2,1
 c009890:	d8800115 	stw	r2,4(sp)
 c009894:	18c00217 	ldw	r3,8(r3)
 c009898:	014300b4 	movhi	r5,3074
 c00989c:	29493404 	addi	r5,r5,9424
 c0098a0:	1880030b 	ldhu	r2,12(r3)
 c0098a4:	d9400215 	stw	r5,8(sp)
 c0098a8:	d9000615 	stw	r4,24(sp)
 c0098ac:	01400044 	movi	r5,1
 c0098b0:	01000084 	movi	r4,2
 c0098b4:	d9000515 	stw	r4,20(sp)
 c0098b8:	dc400015 	stw	r17,0(sp)
 c0098bc:	d9400315 	stw	r5,12(sp)
 c0098c0:	dec00415 	stw	sp,16(sp)
 c0098c4:	1108000c 	andi	r4,r2,8192
 c0098c8:	2000061e 	bne	r4,zero,c0098e4 <_puts_r+0x84>
 c0098cc:	19401917 	ldw	r5,100(r3)
 c0098d0:	0137ffc4 	movi	r4,-8193
 c0098d4:	10880014 	ori	r2,r2,8192
 c0098d8:	2908703a 	and	r4,r5,r4
 c0098dc:	1880030d 	sth	r2,12(r3)
 c0098e0:	19001915 	stw	r4,100(r3)
 c0098e4:	81400217 	ldw	r5,8(r16)
 c0098e8:	8009883a 	mov	r4,r16
 c0098ec:	d9800404 	addi	r6,sp,16
 c0098f0:	c00ded00 	call	c00ded0 <__sfvwrite_r>
 c0098f4:	1000061e 	bne	r2,zero,c009910 <_puts_r+0xb0>
 c0098f8:	00800284 	movi	r2,10
 c0098fc:	dfc00917 	ldw	ra,36(sp)
 c009900:	dc400817 	ldw	r17,32(sp)
 c009904:	dc000717 	ldw	r16,28(sp)
 c009908:	dec00a04 	addi	sp,sp,40
 c00990c:	f800283a 	ret
 c009910:	00bfffc4 	movi	r2,-1
 c009914:	003ff906 	br	c0098fc <__alt_data_end+0xfc0098fc>

0c009918 <puts>:
 c009918:	008300b4 	movhi	r2,3074
 c00991c:	10907604 	addi	r2,r2,16856
 c009920:	200b883a 	mov	r5,r4
 c009924:	11000017 	ldw	r4,0(r2)
 c009928:	c0098601 	jmpi	c009860 <_puts_r>

0c00992c <_sbrk_r>:
 c00992c:	defffd04 	addi	sp,sp,-12
 c009930:	dc000015 	stw	r16,0(sp)
 c009934:	040300b4 	movhi	r16,3074
 c009938:	dc400115 	stw	r17,4(sp)
 c00993c:	84175604 	addi	r16,r16,23896
 c009940:	2023883a 	mov	r17,r4
 c009944:	2809883a 	mov	r4,r5
 c009948:	dfc00215 	stw	ra,8(sp)
 c00994c:	80000015 	stw	zero,0(r16)
 c009950:	c01556c0 	call	c01556c <sbrk>
 c009954:	00ffffc4 	movi	r3,-1
 c009958:	10c00526 	beq	r2,r3,c009970 <_sbrk_r+0x44>
 c00995c:	dfc00217 	ldw	ra,8(sp)
 c009960:	dc400117 	ldw	r17,4(sp)
 c009964:	dc000017 	ldw	r16,0(sp)
 c009968:	dec00304 	addi	sp,sp,12
 c00996c:	f800283a 	ret
 c009970:	80c00017 	ldw	r3,0(r16)
 c009974:	183ff926 	beq	r3,zero,c00995c <__alt_data_end+0xfc00995c>
 c009978:	88c00015 	stw	r3,0(r17)
 c00997c:	003ff706 	br	c00995c <__alt_data_end+0xfc00995c>

0c009980 <strlen>:
 c009980:	208000cc 	andi	r2,r4,3
 c009984:	10002026 	beq	r2,zero,c009a08 <strlen+0x88>
 c009988:	20800007 	ldb	r2,0(r4)
 c00998c:	10002026 	beq	r2,zero,c009a10 <strlen+0x90>
 c009990:	2005883a 	mov	r2,r4
 c009994:	00000206 	br	c0099a0 <strlen+0x20>
 c009998:	10c00007 	ldb	r3,0(r2)
 c00999c:	18001826 	beq	r3,zero,c009a00 <strlen+0x80>
 c0099a0:	10800044 	addi	r2,r2,1
 c0099a4:	10c000cc 	andi	r3,r2,3
 c0099a8:	183ffb1e 	bne	r3,zero,c009998 <__alt_data_end+0xfc009998>
 c0099ac:	10c00017 	ldw	r3,0(r2)
 c0099b0:	01ffbff4 	movhi	r7,65279
 c0099b4:	39ffbfc4 	addi	r7,r7,-257
 c0099b8:	00ca303a 	nor	r5,zero,r3
 c0099bc:	01a02074 	movhi	r6,32897
 c0099c0:	19c7883a 	add	r3,r3,r7
 c0099c4:	31a02004 	addi	r6,r6,-32640
 c0099c8:	1946703a 	and	r3,r3,r5
 c0099cc:	1986703a 	and	r3,r3,r6
 c0099d0:	1800091e 	bne	r3,zero,c0099f8 <strlen+0x78>
 c0099d4:	10800104 	addi	r2,r2,4
 c0099d8:	10c00017 	ldw	r3,0(r2)
 c0099dc:	19cb883a 	add	r5,r3,r7
 c0099e0:	00c6303a 	nor	r3,zero,r3
 c0099e4:	28c6703a 	and	r3,r5,r3
 c0099e8:	1986703a 	and	r3,r3,r6
 c0099ec:	183ff926 	beq	r3,zero,c0099d4 <__alt_data_end+0xfc0099d4>
 c0099f0:	00000106 	br	c0099f8 <strlen+0x78>
 c0099f4:	10800044 	addi	r2,r2,1
 c0099f8:	10c00007 	ldb	r3,0(r2)
 c0099fc:	183ffd1e 	bne	r3,zero,c0099f4 <__alt_data_end+0xfc0099f4>
 c009a00:	1105c83a 	sub	r2,r2,r4
 c009a04:	f800283a 	ret
 c009a08:	2005883a 	mov	r2,r4
 c009a0c:	003fe706 	br	c0099ac <__alt_data_end+0xfc0099ac>
 c009a10:	0005883a 	mov	r2,zero
 c009a14:	f800283a 	ret

0c009a18 <_vfiprintf_r>:
 c009a18:	defffe04 	addi	sp,sp,-8
 c009a1c:	dfc00115 	stw	ra,4(sp)
 c009a20:	d9c00015 	stw	r7,0(sp)
 c009a24:	c0106bc0 	call	c0106bc <___vfiprintf_internal_r>
 c009a28:	dfc00117 	ldw	ra,4(sp)
 c009a2c:	dec00204 	addi	sp,sp,8
 c009a30:	f800283a 	ret

0c009a34 <___vfprintf_internal_r>:
 c009a34:	defeb604 	addi	sp,sp,-1320
 c009a38:	dfc14915 	stw	ra,1316(sp)
 c009a3c:	ddc14715 	stw	r23,1308(sp)
 c009a40:	dd814615 	stw	r22,1304(sp)
 c009a44:	282f883a 	mov	r23,r5
 c009a48:	202d883a 	mov	r22,r4
 c009a4c:	d9812a15 	stw	r6,1192(sp)
 c009a50:	d9c12d15 	stw	r7,1204(sp)
 c009a54:	df014815 	stw	fp,1312(sp)
 c009a58:	dd414515 	stw	r21,1300(sp)
 c009a5c:	dd014415 	stw	r20,1296(sp)
 c009a60:	dcc14315 	stw	r19,1292(sp)
 c009a64:	dc814215 	stw	r18,1288(sp)
 c009a68:	dc414115 	stw	r17,1284(sp)
 c009a6c:	dc014015 	stw	r16,1280(sp)
 c009a70:	c00e5900 	call	c00e590 <_localeconv_r>
 c009a74:	10800017 	ldw	r2,0(r2)
 c009a78:	1009883a 	mov	r4,r2
 c009a7c:	d8813515 	stw	r2,1236(sp)
 c009a80:	c0099800 	call	c009980 <strlen>
 c009a84:	d8813815 	stw	r2,1248(sp)
 c009a88:	b0000226 	beq	r22,zero,c009a94 <___vfprintf_internal_r+0x60>
 c009a8c:	b0800e17 	ldw	r2,56(r22)
 c009a90:	10010426 	beq	r2,zero,c009ea4 <___vfprintf_internal_r+0x470>
 c009a94:	b8c0030b 	ldhu	r3,12(r23)
 c009a98:	1908000c 	andi	r4,r3,8192
 c009a9c:	1805883a 	mov	r2,r3
 c009aa0:	2000071e 	bne	r4,zero,c009ac0 <___vfprintf_internal_r+0x8c>
 c009aa4:	b9001917 	ldw	r4,100(r23)
 c009aa8:	18880014 	ori	r2,r3,8192
 c009aac:	00f7ffc4 	movi	r3,-8193
 c009ab0:	20c8703a 	and	r4,r4,r3
 c009ab4:	b880030d 	sth	r2,12(r23)
 c009ab8:	1007883a 	mov	r3,r2
 c009abc:	b9001915 	stw	r4,100(r23)
 c009ac0:	1100020c 	andi	r4,r2,8
 c009ac4:	2000a726 	beq	r4,zero,c009d64 <___vfprintf_internal_r+0x330>
 c009ac8:	b9000417 	ldw	r4,16(r23)
 c009acc:	2000a526 	beq	r4,zero,c009d64 <___vfprintf_internal_r+0x330>
 c009ad0:	1080068c 	andi	r2,r2,26
 c009ad4:	01000284 	movi	r4,10
 c009ad8:	1100ab26 	beq	r2,r4,c009d88 <___vfprintf_internal_r+0x354>
 c009adc:	dac10e04 	addi	r11,sp,1080
 c009ae0:	db010dc4 	addi	r12,sp,1079
 c009ae4:	d8800404 	addi	r2,sp,16
 c009ae8:	050300b4 	movhi	r20,3074
 c009aec:	dac12815 	stw	r11,1184(sp)
 c009af0:	5b17c83a 	sub	r11,r11,r12
 c009af4:	a5094584 	addi	r20,r20,9494
 c009af8:	db012915 	stw	r12,1188(sp)
 c009afc:	d8811e15 	stw	r2,1144(sp)
 c009b00:	d8012015 	stw	zero,1152(sp)
 c009b04:	d8011f15 	stw	zero,1148(sp)
 c009b08:	d8013315 	stw	zero,1228(sp)
 c009b0c:	d8013715 	stw	zero,1244(sp)
 c009b10:	d8013915 	stw	zero,1252(sp)
 c009b14:	d8013b15 	stw	zero,1260(sp)
 c009b18:	d8013a15 	stw	zero,1256(sp)
 c009b1c:	d8012f15 	stw	zero,1212(sp)
 c009b20:	1011883a 	mov	r8,r2
 c009b24:	dac13c15 	stw	r11,1264(sp)
 c009b28:	db012a17 	ldw	r12,1192(sp)
 c009b2c:	60800007 	ldb	r2,0(r12)
 c009b30:	1000df26 	beq	r2,zero,c009eb0 <___vfprintf_internal_r+0x47c>
 c009b34:	00c00944 	movi	r3,37
 c009b38:	10c0dd26 	beq	r2,r3,c009eb0 <___vfprintf_internal_r+0x47c>
 c009b3c:	6021883a 	mov	r16,r12
 c009b40:	00000106 	br	c009b48 <___vfprintf_internal_r+0x114>
 c009b44:	10c08426 	beq	r2,r3,c009d58 <___vfprintf_internal_r+0x324>
 c009b48:	84000044 	addi	r16,r16,1
 c009b4c:	80800007 	ldb	r2,0(r16)
 c009b50:	103ffc1e 	bne	r2,zero,c009b44 <__alt_data_end+0xfc009b44>
 c009b54:	dac12a17 	ldw	r11,1192(sp)
 c009b58:	82e3c83a 	sub	r17,r16,r11
 c009b5c:	88000f26 	beq	r17,zero,c009b9c <___vfprintf_internal_r+0x168>
 c009b60:	d8c12017 	ldw	r3,1152(sp)
 c009b64:	d8811f17 	ldw	r2,1148(sp)
 c009b68:	dac12a17 	ldw	r11,1192(sp)
 c009b6c:	1c47883a 	add	r3,r3,r17
 c009b70:	10800044 	addi	r2,r2,1
 c009b74:	d8c12015 	stw	r3,1152(sp)
 c009b78:	42c00015 	stw	r11,0(r8)
 c009b7c:	44400115 	stw	r17,4(r8)
 c009b80:	d8811f15 	stw	r2,1148(sp)
 c009b84:	00c001c4 	movi	r3,7
 c009b88:	1880b416 	blt	r3,r2,c009e5c <___vfprintf_internal_r+0x428>
 c009b8c:	42000204 	addi	r8,r8,8
 c009b90:	db012f17 	ldw	r12,1212(sp)
 c009b94:	6459883a 	add	r12,r12,r17
 c009b98:	db012f15 	stw	r12,1212(sp)
 c009b9c:	80800007 	ldb	r2,0(r16)
 c009ba0:	1000b526 	beq	r2,zero,c009e78 <___vfprintf_internal_r+0x444>
 c009ba4:	80800044 	addi	r2,r16,1
 c009ba8:	84000047 	ldb	r16,1(r16)
 c009bac:	d8012785 	stb	zero,1182(sp)
 c009bb0:	000d883a 	mov	r6,zero
 c009bb4:	027fffc4 	movi	r9,-1
 c009bb8:	d8012e15 	stw	zero,1208(sp)
 c009bbc:	0023883a 	mov	r17,zero
 c009bc0:	01001604 	movi	r4,88
 c009bc4:	01400244 	movi	r5,9
 c009bc8:	02800a84 	movi	r10,42
 c009bcc:	01c01b04 	movi	r7,108
 c009bd0:	10c00044 	addi	r3,r2,1
 c009bd4:	80bff804 	addi	r2,r16,-32
 c009bd8:	2082f236 	bltu	r4,r2,c00a7a4 <___vfprintf_internal_r+0xd70>
 c009bdc:	100490ba 	slli	r2,r2,2
 c009be0:	02c30074 	movhi	r11,3073
 c009be4:	5ae6fd04 	addi	r11,r11,-25612
 c009be8:	12c5883a 	add	r2,r2,r11
 c009bec:	10800017 	ldw	r2,0(r2)
 c009bf0:	1000683a 	jmp	r2
 c009bf4:	0c00a5ec 	andhi	r16,at,663
 c009bf8:	0c00a7a4 	muli	r16,at,670
 c009bfc:	0c00a7a4 	muli	r16,at,670
 c009c00:	0c00a60c 	andi	r16,at,664
 c009c04:	0c00a7a4 	muli	r16,at,670
 c009c08:	0c00a7a4 	muli	r16,at,670
 c009c0c:	0c00a7a4 	muli	r16,at,670
 c009c10:	0c00a7a4 	muli	r16,at,670
 c009c14:	0c00a7a4 	muli	r16,at,670
 c009c18:	0c00a7a4 	muli	r16,at,670
 c009c1c:	0c00a768 	cmpgeui	r16,at,669
 c009c20:	0c00a794 	ori	r16,at,670
 c009c24:	0c00a7a4 	muli	r16,at,670
 c009c28:	0c009eb8 	rdprs	r16,at,634
 c009c2c:	0c009ec8 	cmpgei	r16,at,635
 c009c30:	0c00a7a4 	muli	r16,at,670
 c009c34:	0c009f08 	cmpgei	r16,at,636
 c009c38:	0c00a3fc 	xorhi	r16,at,655
 c009c3c:	0c00a3fc 	xorhi	r16,at,655
 c009c40:	0c00a3fc 	xorhi	r16,at,655
 c009c44:	0c00a3fc 	xorhi	r16,at,655
 c009c48:	0c00a3fc 	xorhi	r16,at,655
 c009c4c:	0c00a3fc 	xorhi	r16,at,655
 c009c50:	0c00a3fc 	xorhi	r16,at,655
 c009c54:	0c00a3fc 	xorhi	r16,at,655
 c009c58:	0c00a3fc 	xorhi	r16,at,655
 c009c5c:	0c00a7a4 	muli	r16,at,670
 c009c60:	0c00a7a4 	muli	r16,at,670
 c009c64:	0c00a7a4 	muli	r16,at,670
 c009c68:	0c00a7a4 	muli	r16,at,670
 c009c6c:	0c00a7a4 	muli	r16,at,670
 c009c70:	0c00a7a4 	muli	r16,at,670
 c009c74:	0c00a7a4 	muli	r16,at,670
 c009c78:	0c00a7a4 	muli	r16,at,670
 c009c7c:	0c00a7a4 	muli	r16,at,670
 c009c80:	0c00a7a4 	muli	r16,at,670
 c009c84:	0c00a430 	cmpltui	r16,at,656
 c009c88:	0c009f18 	cmpnei	r16,at,636
 c009c8c:	0c00a7a4 	muli	r16,at,670
 c009c90:	0c009f18 	cmpnei	r16,at,636
 c009c94:	0c00a7a4 	muli	r16,at,670
 c009c98:	0c00a7a4 	muli	r16,at,670
 c009c9c:	0c00a7a4 	muli	r16,at,670
 c009ca0:	0c00a7a4 	muli	r16,at,670
 c009ca4:	0c009fbc 	xorhi	r16,at,638
 c009ca8:	0c00a7a4 	muli	r16,at,670
 c009cac:	0c00a7a4 	muli	r16,at,670
 c009cb0:	0c009fcc 	andi	r16,at,639
 c009cb4:	0c00a7a4 	muli	r16,at,670
 c009cb8:	0c00a7a4 	muli	r16,at,670
 c009cbc:	0c00a7a4 	muli	r16,at,670
 c009cc0:	0c00a7a4 	muli	r16,at,670
 c009cc4:	0c00a7a4 	muli	r16,at,670
 c009cc8:	0c00a3c8 	cmpgei	r16,at,655
 c009ccc:	0c00a7a4 	muli	r16,at,670
 c009cd0:	0c00a7a4 	muli	r16,at,670
 c009cd4:	0c00a478 	rdprs	r16,at,657
 c009cd8:	0c00a7a4 	muli	r16,at,670
 c009cdc:	0c00a7a4 	muli	r16,at,670
 c009ce0:	0c00a7a4 	muli	r16,at,670
 c009ce4:	0c00a7a4 	muli	r16,at,670
 c009ce8:	0c00a7a4 	muli	r16,at,670
 c009cec:	0c00a7a4 	muli	r16,at,670
 c009cf0:	0c00a7a4 	muli	r16,at,670
 c009cf4:	0c00a7a4 	muli	r16,at,670
 c009cf8:	0c00a7a4 	muli	r16,at,670
 c009cfc:	0c00a7a4 	muli	r16,at,670
 c009d00:	0c00a66c 	andhi	r16,at,665
 c009d04:	0c00a61c 	xori	r16,at,664
 c009d08:	0c009f18 	cmpnei	r16,at,636
 c009d0c:	0c009f18 	cmpnei	r16,at,636
 c009d10:	0c009f18 	cmpnei	r16,at,636
 c009d14:	0c00a65c 	xori	r16,at,665
 c009d18:	0c00a61c 	xori	r16,at,664
 c009d1c:	0c00a7a4 	muli	r16,at,670
 c009d20:	0c00a7a4 	muli	r16,at,670
 c009d24:	0c00a564 	muli	r16,at,661
 c009d28:	0c00a7a4 	muli	r16,at,670
 c009d2c:	0c00a578 	rdprs	r16,at,661
 c009d30:	0c00a5ac 	andhi	r16,at,662
 c009d34:	0c00a6ac 	andhi	r16,at,666
 c009d38:	0c00a4d4 	ori	r16,at,659
 c009d3c:	0c00a7a4 	muli	r16,at,670
 c009d40:	0c00a6f4 	orhi	r16,at,667
 c009d44:	0c00a7a4 	muli	r16,at,670
 c009d48:	0c00a4e4 	muli	r16,at,659
 c009d4c:	0c00a7a4 	muli	r16,at,670
 c009d50:	0c00a7a4 	muli	r16,at,670
 c009d54:	0c00a524 	muli	r16,at,660
 c009d58:	db012a17 	ldw	r12,1192(sp)
 c009d5c:	8323c83a 	sub	r17,r16,r12
 c009d60:	003f7e06 	br	c009b5c <__alt_data_end+0xfc009b5c>
 c009d64:	b009883a 	mov	r4,r22
 c009d68:	b80b883a 	mov	r5,r23
 c009d6c:	c00ba540 	call	c00ba54 <__swsetup_r>
 c009d70:	10002d1e 	bne	r2,zero,c009e28 <___vfprintf_internal_r+0x3f4>
 c009d74:	b8c0030b 	ldhu	r3,12(r23)
 c009d78:	01000284 	movi	r4,10
 c009d7c:	1805883a 	mov	r2,r3
 c009d80:	1080068c 	andi	r2,r2,26
 c009d84:	113f551e 	bne	r2,r4,c009adc <__alt_data_end+0xfc009adc>
 c009d88:	b880038b 	ldhu	r2,14(r23)
 c009d8c:	113fffcc 	andi	r4,r2,65535
 c009d90:	2120001c 	xori	r4,r4,32768
 c009d94:	21200004 	addi	r4,r4,-32768
 c009d98:	203f5016 	blt	r4,zero,c009adc <__alt_data_end+0xfc009adc>
 c009d9c:	bac01917 	ldw	r11,100(r23)
 c009da0:	ba800717 	ldw	r10,28(r23)
 c009da4:	ba400917 	ldw	r9,36(r23)
 c009da8:	d9812a17 	ldw	r6,1192(sp)
 c009dac:	d9c12d17 	ldw	r7,1204(sp)
 c009db0:	02010004 	movi	r8,1024
 c009db4:	18ffff4c 	andi	r3,r3,65533
 c009db8:	d881078d 	sth	r2,1054(sp)
 c009dbc:	b009883a 	mov	r4,r22
 c009dc0:	d8800404 	addi	r2,sp,16
 c009dc4:	d9410404 	addi	r5,sp,1040
 c009dc8:	d8c1070d 	sth	r3,1052(sp)
 c009dcc:	dac11d15 	stw	r11,1140(sp)
 c009dd0:	da810b15 	stw	r10,1068(sp)
 c009dd4:	da410d15 	stw	r9,1076(sp)
 c009dd8:	d8810415 	stw	r2,1040(sp)
 c009ddc:	d8810815 	stw	r2,1056(sp)
 c009de0:	da010615 	stw	r8,1048(sp)
 c009de4:	da010915 	stw	r8,1060(sp)
 c009de8:	d8010a15 	stw	zero,1064(sp)
 c009dec:	c009a340 	call	c009a34 <___vfprintf_internal_r>
 c009df0:	1021883a 	mov	r16,r2
 c009df4:	10000416 	blt	r2,zero,c009e08 <___vfprintf_internal_r+0x3d4>
 c009df8:	b009883a 	mov	r4,r22
 c009dfc:	d9410404 	addi	r5,sp,1040
 c009e00:	c00d4c40 	call	c00d4c4 <_fflush_r>
 c009e04:	1006ee1e 	bne	r2,zero,c00b9c0 <___vfprintf_internal_r+0x1f8c>
 c009e08:	d881070b 	ldhu	r2,1052(sp)
 c009e0c:	1080100c 	andi	r2,r2,64
 c009e10:	10000326 	beq	r2,zero,c009e20 <___vfprintf_internal_r+0x3ec>
 c009e14:	b880030b 	ldhu	r2,12(r23)
 c009e18:	10801014 	ori	r2,r2,64
 c009e1c:	b880030d 	sth	r2,12(r23)
 c009e20:	8005883a 	mov	r2,r16
 c009e24:	00000106 	br	c009e2c <___vfprintf_internal_r+0x3f8>
 c009e28:	00bfffc4 	movi	r2,-1
 c009e2c:	dfc14917 	ldw	ra,1316(sp)
 c009e30:	df014817 	ldw	fp,1312(sp)
 c009e34:	ddc14717 	ldw	r23,1308(sp)
 c009e38:	dd814617 	ldw	r22,1304(sp)
 c009e3c:	dd414517 	ldw	r21,1300(sp)
 c009e40:	dd014417 	ldw	r20,1296(sp)
 c009e44:	dcc14317 	ldw	r19,1292(sp)
 c009e48:	dc814217 	ldw	r18,1288(sp)
 c009e4c:	dc414117 	ldw	r17,1284(sp)
 c009e50:	dc014017 	ldw	r16,1280(sp)
 c009e54:	dec14a04 	addi	sp,sp,1320
 c009e58:	f800283a 	ret
 c009e5c:	b009883a 	mov	r4,r22
 c009e60:	b80b883a 	mov	r5,r23
 c009e64:	d9811e04 	addi	r6,sp,1144
 c009e68:	c0106a40 	call	c0106a4 <__sprint_r>
 c009e6c:	1000081e 	bne	r2,zero,c009e90 <___vfprintf_internal_r+0x45c>
 c009e70:	da000404 	addi	r8,sp,16
 c009e74:	003f4606 	br	c009b90 <__alt_data_end+0xfc009b90>
 c009e78:	d8812017 	ldw	r2,1152(sp)
 c009e7c:	10000426 	beq	r2,zero,c009e90 <___vfprintf_internal_r+0x45c>
 c009e80:	b009883a 	mov	r4,r22
 c009e84:	b80b883a 	mov	r5,r23
 c009e88:	d9811e04 	addi	r6,sp,1144
 c009e8c:	c0106a40 	call	c0106a4 <__sprint_r>
 c009e90:	b880030b 	ldhu	r2,12(r23)
 c009e94:	1080100c 	andi	r2,r2,64
 c009e98:	103fe31e 	bne	r2,zero,c009e28 <__alt_data_end+0xfc009e28>
 c009e9c:	d8812f17 	ldw	r2,1212(sp)
 c009ea0:	003fe206 	br	c009e2c <__alt_data_end+0xfc009e2c>
 c009ea4:	b009883a 	mov	r4,r22
 c009ea8:	c00da6c0 	call	c00da6c <__sinit>
 c009eac:	003ef906 	br	c009a94 <__alt_data_end+0xfc009a94>
 c009eb0:	dc012a17 	ldw	r16,1192(sp)
 c009eb4:	003f3906 	br	c009b9c <__alt_data_end+0xfc009b9c>
 c009eb8:	1805883a 	mov	r2,r3
 c009ebc:	8c400114 	ori	r17,r17,4
 c009ec0:	1c000007 	ldb	r16,0(r3)
 c009ec4:	003f4206 	br	c009bd0 <__alt_data_end+0xfc009bd0>
 c009ec8:	1c000007 	ldb	r16,0(r3)
 c009ecc:	18800044 	addi	r2,r3,1
 c009ed0:	8286b326 	beq	r16,r10,c00b9a0 <___vfprintf_internal_r+0x1f6c>
 c009ed4:	82fff404 	addi	r11,r16,-48
 c009ed8:	1007883a 	mov	r3,r2
 c009edc:	0013883a 	mov	r9,zero
 c009ee0:	2aff3c36 	bltu	r5,r11,c009bd4 <__alt_data_end+0xfc009bd4>
 c009ee4:	1c000007 	ldb	r16,0(r3)
 c009ee8:	4a4002a4 	muli	r9,r9,10
 c009eec:	18c00044 	addi	r3,r3,1
 c009ef0:	5a53883a 	add	r9,r11,r9
 c009ef4:	82fff404 	addi	r11,r16,-48
 c009ef8:	2afffa2e 	bgeu	r5,r11,c009ee4 <__alt_data_end+0xfc009ee4>
 c009efc:	483f350e 	bge	r9,zero,c009bd4 <__alt_data_end+0xfc009bd4>
 c009f00:	027fffc4 	movi	r9,-1
 c009f04:	003f3306 	br	c009bd4 <__alt_data_end+0xfc009bd4>
 c009f08:	8c402014 	ori	r17,r17,128
 c009f0c:	1805883a 	mov	r2,r3
 c009f10:	1c000007 	ldb	r16,0(r3)
 c009f14:	003f2e06 	br	c009bd0 <__alt_data_end+0xfc009bd0>
 c009f18:	db012d17 	ldw	r12,1204(sp)
 c009f1c:	dac12d17 	ldw	r11,1204(sp)
 c009f20:	d8c12a15 	stw	r3,1192(sp)
 c009f24:	63000017 	ldw	r12,0(r12)
 c009f28:	5ac00117 	ldw	r11,4(r11)
 c009f2c:	d9812785 	stb	r6,1182(sp)
 c009f30:	6009883a 	mov	r4,r12
 c009f34:	580b883a 	mov	r5,r11
 c009f38:	db013715 	stw	r12,1244(sp)
 c009f3c:	da013f15 	stw	r8,1276(sp)
 c009f40:	da413e15 	stw	r9,1272(sp)
 c009f44:	dac13915 	stw	r11,1252(sp)
 c009f48:	c0100540 	call	c010054 <__fpclassifyd>
 c009f4c:	db012d17 	ldw	r12,1204(sp)
 c009f50:	04800044 	movi	r18,1
 c009f54:	da013f17 	ldw	r8,1276(sp)
 c009f58:	64c00204 	addi	r19,r12,8
 c009f5c:	da413e17 	ldw	r9,1272(sp)
 c009f60:	d9013717 	ldw	r4,1244(sp)
 c009f64:	d9413917 	ldw	r5,1252(sp)
 c009f68:	1484581e 	bne	r2,r18,c00b0cc <___vfprintf_internal_r+0x1698>
 c009f6c:	000d883a 	mov	r6,zero
 c009f70:	000f883a 	mov	r7,zero
 c009f74:	c0138c40 	call	c0138c4 <__ledf2>
 c009f78:	da013f17 	ldw	r8,1276(sp)
 c009f7c:	1005ef16 	blt	r2,zero,c00b73c <___vfprintf_internal_r+0x1d08>
 c009f80:	dd412783 	ldbu	r21,1182(sp)
 c009f84:	008011c4 	movi	r2,71
 c009f88:	14053b0e 	bge	r2,r16,c00b478 <___vfprintf_internal_r+0x1a44>
 c009f8c:	00c300b4 	movhi	r3,3074
 c009f90:	18c93604 	addi	r3,r3,9432
 c009f94:	d8c13115 	stw	r3,1220(sp)
 c009f98:	02c000c4 	movi	r11,3
 c009f9c:	00bfdfc4 	movi	r2,-129
 c009fa0:	dac12b15 	stw	r11,1196(sp)
 c009fa4:	88a2703a 	and	r17,r17,r2
 c009fa8:	dcc12d15 	stw	r19,1204(sp)
 c009fac:	5825883a 	mov	r18,r11
 c009fb0:	d8013215 	stw	zero,1224(sp)
 c009fb4:	d8013415 	stw	zero,1232(sp)
 c009fb8:	00003206 	br	c00a084 <___vfprintf_internal_r+0x650>
 c009fbc:	8c400214 	ori	r17,r17,8
 c009fc0:	1805883a 	mov	r2,r3
 c009fc4:	1c000007 	ldb	r16,0(r3)
 c009fc8:	003f0106 	br	c009bd0 <__alt_data_end+0xfc009bd0>
 c009fcc:	8c400414 	ori	r17,r17,16
 c009fd0:	d8c12a15 	stw	r3,1192(sp)
 c009fd4:	88c0080c 	andi	r3,r17,32
 c009fd8:	d8812d17 	ldw	r2,1204(sp)
 c009fdc:	18017726 	beq	r3,zero,c00a5bc <___vfprintf_internal_r+0xb88>
 c009fe0:	db012d17 	ldw	r12,1204(sp)
 c009fe4:	14c00017 	ldw	r19,0(r2)
 c009fe8:	17000117 	ldw	fp,4(r2)
 c009fec:	63000204 	addi	r12,r12,8
 c009ff0:	db012d15 	stw	r12,1204(sp)
 c009ff4:	0005883a 	mov	r2,zero
 c009ff8:	9f06b03a 	or	r3,r19,fp
 c009ffc:	d8012785 	stb	zero,1182(sp)
 c00a000:	da413215 	stw	r9,1224(sp)
 c00a004:	002b883a 	mov	r21,zero
 c00a008:	48000216 	blt	r9,zero,c00a014 <___vfprintf_internal_r+0x5e0>
 c00a00c:	013fdfc4 	movi	r4,-129
 c00a010:	8922703a 	and	r17,r17,r4
 c00a014:	1801ed1e 	bne	r3,zero,c00a7cc <___vfprintf_internal_r+0xd98>
 c00a018:	4802e026 	beq	r9,zero,c00ab9c <___vfprintf_internal_r+0x1168>
 c00a01c:	10803fcc 	andi	r2,r2,255
 c00a020:	00c00044 	movi	r3,1
 c00a024:	10c20f26 	beq	r2,r3,c00a864 <___vfprintf_internal_r+0xe30>
 c00a028:	00c00084 	movi	r3,2
 c00a02c:	10c2fd26 	beq	r2,r3,c00ac24 <___vfprintf_internal_r+0x11f0>
 c00a030:	d8c10e04 	addi	r3,sp,1080
 c00a034:	9808d0fa 	srli	r4,r19,3
 c00a038:	e00a977a 	slli	r5,fp,29
 c00a03c:	e038d0fa 	srli	fp,fp,3
 c00a040:	9cc001cc 	andi	r19,r19,7
 c00a044:	98800c04 	addi	r2,r19,48
 c00a048:	18ffffc4 	addi	r3,r3,-1
 c00a04c:	2926b03a 	or	r19,r5,r4
 c00a050:	18800005 	stb	r2,0(r3)
 c00a054:	9f08b03a 	or	r4,r19,fp
 c00a058:	203ff61e 	bne	r4,zero,c00a034 <__alt_data_end+0xfc00a034>
 c00a05c:	8900004c 	andi	r4,r17,1
 c00a060:	d8c13115 	stw	r3,1220(sp)
 c00a064:	2003791e 	bne	r4,zero,c00ae4c <___vfprintf_internal_r+0x1418>
 c00a068:	dac12817 	ldw	r11,1184(sp)
 c00a06c:	58e5c83a 	sub	r18,r11,r3
 c00a070:	9005883a 	mov	r2,r18
 c00a074:	9240010e 	bge	r18,r9,c00a07c <___vfprintf_internal_r+0x648>
 c00a078:	4805883a 	mov	r2,r9
 c00a07c:	d8812b15 	stw	r2,1196(sp)
 c00a080:	d8013415 	stw	zero,1232(sp)
 c00a084:	a8803fcc 	andi	r2,r21,255
 c00a088:	1080201c 	xori	r2,r2,128
 c00a08c:	10bfe004 	addi	r2,r2,-128
 c00a090:	10000326 	beq	r2,zero,c00a0a0 <___vfprintf_internal_r+0x66c>
 c00a094:	db012b17 	ldw	r12,1196(sp)
 c00a098:	63000044 	addi	r12,r12,1
 c00a09c:	db012b15 	stw	r12,1196(sp)
 c00a0a0:	88c0008c 	andi	r3,r17,2
 c00a0a4:	d8c12c15 	stw	r3,1200(sp)
 c00a0a8:	18000326 	beq	r3,zero,c00a0b8 <___vfprintf_internal_r+0x684>
 c00a0ac:	dac12b17 	ldw	r11,1196(sp)
 c00a0b0:	5ac00084 	addi	r11,r11,2
 c00a0b4:	dac12b15 	stw	r11,1196(sp)
 c00a0b8:	8b00210c 	andi	r12,r17,132
 c00a0bc:	db013015 	stw	r12,1216(sp)
 c00a0c0:	6001c01e 	bne	r12,zero,c00a7c4 <___vfprintf_internal_r+0xd90>
 c00a0c4:	dac12e17 	ldw	r11,1208(sp)
 c00a0c8:	db012b17 	ldw	r12,1196(sp)
 c00a0cc:	5b39c83a 	sub	fp,r11,r12
 c00a0d0:	0701bc0e 	bge	zero,fp,c00a7c4 <___vfprintf_internal_r+0xd90>
 c00a0d4:	02400404 	movi	r9,16
 c00a0d8:	d8c12017 	ldw	r3,1152(sp)
 c00a0dc:	d8811f17 	ldw	r2,1148(sp)
 c00a0e0:	4f05220e 	bge	r9,fp,c00b56c <___vfprintf_internal_r+0x1b38>
 c00a0e4:	014300b4 	movhi	r5,3074
 c00a0e8:	29494984 	addi	r5,r5,9510
 c00a0ec:	d9413615 	stw	r5,1240(sp)
 c00a0f0:	482b883a 	mov	r21,r9
 c00a0f4:	04c001c4 	movi	r19,7
 c00a0f8:	00000306 	br	c00a108 <___vfprintf_internal_r+0x6d4>
 c00a0fc:	e73ffc04 	addi	fp,fp,-16
 c00a100:	42000204 	addi	r8,r8,8
 c00a104:	af00130e 	bge	r21,fp,c00a154 <___vfprintf_internal_r+0x720>
 c00a108:	02c300b4 	movhi	r11,3074
 c00a10c:	18c00404 	addi	r3,r3,16
 c00a110:	10800044 	addi	r2,r2,1
 c00a114:	5ac94984 	addi	r11,r11,9510
 c00a118:	42c00015 	stw	r11,0(r8)
 c00a11c:	45400115 	stw	r21,4(r8)
 c00a120:	d8c12015 	stw	r3,1152(sp)
 c00a124:	d8811f15 	stw	r2,1148(sp)
 c00a128:	98bff40e 	bge	r19,r2,c00a0fc <__alt_data_end+0xfc00a0fc>
 c00a12c:	b009883a 	mov	r4,r22
 c00a130:	b80b883a 	mov	r5,r23
 c00a134:	d9811e04 	addi	r6,sp,1144
 c00a138:	c0106a40 	call	c0106a4 <__sprint_r>
 c00a13c:	103f541e 	bne	r2,zero,c009e90 <__alt_data_end+0xfc009e90>
 c00a140:	e73ffc04 	addi	fp,fp,-16
 c00a144:	d8c12017 	ldw	r3,1152(sp)
 c00a148:	d8811f17 	ldw	r2,1148(sp)
 c00a14c:	da000404 	addi	r8,sp,16
 c00a150:	af3fed16 	blt	r21,fp,c00a108 <__alt_data_end+0xfc00a108>
 c00a154:	db013617 	ldw	r12,1240(sp)
 c00a158:	e0c7883a 	add	r3,fp,r3
 c00a15c:	10800044 	addi	r2,r2,1
 c00a160:	43000015 	stw	r12,0(r8)
 c00a164:	47000115 	stw	fp,4(r8)
 c00a168:	d8c12015 	stw	r3,1152(sp)
 c00a16c:	d8811f15 	stw	r2,1148(sp)
 c00a170:	010001c4 	movi	r4,7
 c00a174:	2082f416 	blt	r4,r2,c00ad48 <___vfprintf_internal_r+0x1314>
 c00a178:	d8812787 	ldb	r2,1182(sp)
 c00a17c:	42000204 	addi	r8,r8,8
 c00a180:	10000c26 	beq	r2,zero,c00a1b4 <___vfprintf_internal_r+0x780>
 c00a184:	d8811f17 	ldw	r2,1148(sp)
 c00a188:	d9012784 	addi	r4,sp,1182
 c00a18c:	18c00044 	addi	r3,r3,1
 c00a190:	10800044 	addi	r2,r2,1
 c00a194:	41000015 	stw	r4,0(r8)
 c00a198:	01000044 	movi	r4,1
 c00a19c:	41000115 	stw	r4,4(r8)
 c00a1a0:	d8c12015 	stw	r3,1152(sp)
 c00a1a4:	d8811f15 	stw	r2,1148(sp)
 c00a1a8:	010001c4 	movi	r4,7
 c00a1ac:	20828d16 	blt	r4,r2,c00abe4 <___vfprintf_internal_r+0x11b0>
 c00a1b0:	42000204 	addi	r8,r8,8
 c00a1b4:	dac12c17 	ldw	r11,1200(sp)
 c00a1b8:	58000c26 	beq	r11,zero,c00a1ec <___vfprintf_internal_r+0x7b8>
 c00a1bc:	d8811f17 	ldw	r2,1148(sp)
 c00a1c0:	d9012704 	addi	r4,sp,1180
 c00a1c4:	18c00084 	addi	r3,r3,2
 c00a1c8:	10800044 	addi	r2,r2,1
 c00a1cc:	41000015 	stw	r4,0(r8)
 c00a1d0:	01000084 	movi	r4,2
 c00a1d4:	41000115 	stw	r4,4(r8)
 c00a1d8:	d8c12015 	stw	r3,1152(sp)
 c00a1dc:	d8811f15 	stw	r2,1148(sp)
 c00a1e0:	010001c4 	movi	r4,7
 c00a1e4:	20828716 	blt	r4,r2,c00ac04 <___vfprintf_internal_r+0x11d0>
 c00a1e8:	42000204 	addi	r8,r8,8
 c00a1ec:	db013017 	ldw	r12,1216(sp)
 c00a1f0:	00802004 	movi	r2,128
 c00a1f4:	6081e926 	beq	r12,r2,c00a99c <___vfprintf_internal_r+0xf68>
 c00a1f8:	db013217 	ldw	r12,1224(sp)
 c00a1fc:	64abc83a 	sub	r21,r12,r18
 c00a200:	0540260e 	bge	zero,r21,c00a29c <___vfprintf_internal_r+0x868>
 c00a204:	07000404 	movi	fp,16
 c00a208:	d8811f17 	ldw	r2,1148(sp)
 c00a20c:	e5443d0e 	bge	fp,r21,c00b304 <___vfprintf_internal_r+0x18d0>
 c00a210:	014300b4 	movhi	r5,3074
 c00a214:	29494584 	addi	r5,r5,9494
 c00a218:	d9412c15 	stw	r5,1200(sp)
 c00a21c:	04c001c4 	movi	r19,7
 c00a220:	00000306 	br	c00a230 <___vfprintf_internal_r+0x7fc>
 c00a224:	ad7ffc04 	addi	r21,r21,-16
 c00a228:	42000204 	addi	r8,r8,8
 c00a22c:	e540110e 	bge	fp,r21,c00a274 <___vfprintf_internal_r+0x840>
 c00a230:	18c00404 	addi	r3,r3,16
 c00a234:	10800044 	addi	r2,r2,1
 c00a238:	45000015 	stw	r20,0(r8)
 c00a23c:	47000115 	stw	fp,4(r8)
 c00a240:	d8c12015 	stw	r3,1152(sp)
 c00a244:	d8811f15 	stw	r2,1148(sp)
 c00a248:	98bff60e 	bge	r19,r2,c00a224 <__alt_data_end+0xfc00a224>
 c00a24c:	b009883a 	mov	r4,r22
 c00a250:	b80b883a 	mov	r5,r23
 c00a254:	d9811e04 	addi	r6,sp,1144
 c00a258:	c0106a40 	call	c0106a4 <__sprint_r>
 c00a25c:	103f0c1e 	bne	r2,zero,c009e90 <__alt_data_end+0xfc009e90>
 c00a260:	ad7ffc04 	addi	r21,r21,-16
 c00a264:	d8c12017 	ldw	r3,1152(sp)
 c00a268:	d8811f17 	ldw	r2,1148(sp)
 c00a26c:	da000404 	addi	r8,sp,16
 c00a270:	e57fef16 	blt	fp,r21,c00a230 <__alt_data_end+0xfc00a230>
 c00a274:	dac12c17 	ldw	r11,1200(sp)
 c00a278:	1d47883a 	add	r3,r3,r21
 c00a27c:	10800044 	addi	r2,r2,1
 c00a280:	42c00015 	stw	r11,0(r8)
 c00a284:	45400115 	stw	r21,4(r8)
 c00a288:	d8c12015 	stw	r3,1152(sp)
 c00a28c:	d8811f15 	stw	r2,1148(sp)
 c00a290:	010001c4 	movi	r4,7
 c00a294:	20824b16 	blt	r4,r2,c00abc4 <___vfprintf_internal_r+0x1190>
 c00a298:	42000204 	addi	r8,r8,8
 c00a29c:	8880400c 	andi	r2,r17,256
 c00a2a0:	1001761e 	bne	r2,zero,c00a87c <___vfprintf_internal_r+0xe48>
 c00a2a4:	d8811f17 	ldw	r2,1148(sp)
 c00a2a8:	db013117 	ldw	r12,1220(sp)
 c00a2ac:	1c87883a 	add	r3,r3,r18
 c00a2b0:	10800044 	addi	r2,r2,1
 c00a2b4:	43000015 	stw	r12,0(r8)
 c00a2b8:	44800115 	stw	r18,4(r8)
 c00a2bc:	d8c12015 	stw	r3,1152(sp)
 c00a2c0:	d8811f15 	stw	r2,1148(sp)
 c00a2c4:	010001c4 	movi	r4,7
 c00a2c8:	20822616 	blt	r4,r2,c00ab64 <___vfprintf_internal_r+0x1130>
 c00a2cc:	42000204 	addi	r8,r8,8
 c00a2d0:	8c40010c 	andi	r17,r17,4
 c00a2d4:	88003126 	beq	r17,zero,c00a39c <___vfprintf_internal_r+0x968>
 c00a2d8:	db012e17 	ldw	r12,1208(sp)
 c00a2dc:	dac12b17 	ldw	r11,1196(sp)
 c00a2e0:	62e1c83a 	sub	r16,r12,r11
 c00a2e4:	04002d0e 	bge	zero,r16,c00a39c <___vfprintf_internal_r+0x968>
 c00a2e8:	04400404 	movi	r17,16
 c00a2ec:	d8811f17 	ldw	r2,1148(sp)
 c00a2f0:	8c04df0e 	bge	r17,r16,c00b670 <___vfprintf_internal_r+0x1c3c>
 c00a2f4:	010300b4 	movhi	r4,3074
 c00a2f8:	21094984 	addi	r4,r4,9510
 c00a2fc:	d9013615 	stw	r4,1240(sp)
 c00a300:	048001c4 	movi	r18,7
 c00a304:	00000306 	br	c00a314 <___vfprintf_internal_r+0x8e0>
 c00a308:	843ffc04 	addi	r16,r16,-16
 c00a30c:	42000204 	addi	r8,r8,8
 c00a310:	8c00130e 	bge	r17,r16,c00a360 <___vfprintf_internal_r+0x92c>
 c00a314:	014300b4 	movhi	r5,3074
 c00a318:	18c00404 	addi	r3,r3,16
 c00a31c:	10800044 	addi	r2,r2,1
 c00a320:	29494984 	addi	r5,r5,9510
 c00a324:	41400015 	stw	r5,0(r8)
 c00a328:	44400115 	stw	r17,4(r8)
 c00a32c:	d8c12015 	stw	r3,1152(sp)
 c00a330:	d8811f15 	stw	r2,1148(sp)
 c00a334:	90bff40e 	bge	r18,r2,c00a308 <__alt_data_end+0xfc00a308>
 c00a338:	b009883a 	mov	r4,r22
 c00a33c:	b80b883a 	mov	r5,r23
 c00a340:	d9811e04 	addi	r6,sp,1144
 c00a344:	c0106a40 	call	c0106a4 <__sprint_r>
 c00a348:	103ed11e 	bne	r2,zero,c009e90 <__alt_data_end+0xfc009e90>
 c00a34c:	843ffc04 	addi	r16,r16,-16
 c00a350:	d8c12017 	ldw	r3,1152(sp)
 c00a354:	d8811f17 	ldw	r2,1148(sp)
 c00a358:	da000404 	addi	r8,sp,16
 c00a35c:	8c3fed16 	blt	r17,r16,c00a314 <__alt_data_end+0xfc00a314>
 c00a360:	dac13617 	ldw	r11,1240(sp)
 c00a364:	1c07883a 	add	r3,r3,r16
 c00a368:	10800044 	addi	r2,r2,1
 c00a36c:	42c00015 	stw	r11,0(r8)
 c00a370:	44000115 	stw	r16,4(r8)
 c00a374:	d8c12015 	stw	r3,1152(sp)
 c00a378:	d8811f15 	stw	r2,1148(sp)
 c00a37c:	010001c4 	movi	r4,7
 c00a380:	2080060e 	bge	r4,r2,c00a39c <___vfprintf_internal_r+0x968>
 c00a384:	b009883a 	mov	r4,r22
 c00a388:	b80b883a 	mov	r5,r23
 c00a38c:	d9811e04 	addi	r6,sp,1144
 c00a390:	c0106a40 	call	c0106a4 <__sprint_r>
 c00a394:	103ebe1e 	bne	r2,zero,c009e90 <__alt_data_end+0xfc009e90>
 c00a398:	d8c12017 	ldw	r3,1152(sp)
 c00a39c:	d8812b17 	ldw	r2,1196(sp)
 c00a3a0:	db012e17 	ldw	r12,1208(sp)
 c00a3a4:	1300010e 	bge	r2,r12,c00a3ac <___vfprintf_internal_r+0x978>
 c00a3a8:	6005883a 	mov	r2,r12
 c00a3ac:	dac12f17 	ldw	r11,1212(sp)
 c00a3b0:	5897883a 	add	r11,r11,r2
 c00a3b4:	dac12f15 	stw	r11,1212(sp)
 c00a3b8:	1801f21e 	bne	r3,zero,c00ab84 <___vfprintf_internal_r+0x1150>
 c00a3bc:	d8011f15 	stw	zero,1148(sp)
 c00a3c0:	da000404 	addi	r8,sp,16
 c00a3c4:	003dd806 	br	c009b28 <__alt_data_end+0xfc009b28>
 c00a3c8:	8c400414 	ori	r17,r17,16
 c00a3cc:	d8c12a15 	stw	r3,1192(sp)
 c00a3d0:	88c0080c 	andi	r3,r17,32
 c00a3d4:	d8812d17 	ldw	r2,1204(sp)
 c00a3d8:	18004626 	beq	r3,zero,c00a4f4 <___vfprintf_internal_r+0xac0>
 c00a3dc:	dac12d17 	ldw	r11,1204(sp)
 c00a3e0:	14c00017 	ldw	r19,0(r2)
 c00a3e4:	17000117 	ldw	fp,4(r2)
 c00a3e8:	5ac00204 	addi	r11,r11,8
 c00a3ec:	dac12d15 	stw	r11,1204(sp)
 c00a3f0:	00800044 	movi	r2,1
 c00a3f4:	9f06b03a 	or	r3,r19,fp
 c00a3f8:	003f0006 	br	c009ffc <__alt_data_end+0xfc009ffc>
 c00a3fc:	1805883a 	mov	r2,r3
 c00a400:	d8012e15 	stw	zero,1208(sp)
 c00a404:	82fff404 	addi	r11,r16,-48
 c00a408:	0019883a 	mov	r12,zero
 c00a40c:	14000007 	ldb	r16,0(r2)
 c00a410:	630002a4 	muli	r12,r12,10
 c00a414:	18c00044 	addi	r3,r3,1
 c00a418:	1805883a 	mov	r2,r3
 c00a41c:	62d9883a 	add	r12,r12,r11
 c00a420:	82fff404 	addi	r11,r16,-48
 c00a424:	2afff92e 	bgeu	r5,r11,c00a40c <__alt_data_end+0xfc00a40c>
 c00a428:	db012e15 	stw	r12,1208(sp)
 c00a42c:	003de906 	br	c009bd4 <__alt_data_end+0xfc009bd4>
 c00a430:	8c400414 	ori	r17,r17,16
 c00a434:	d8c12a15 	stw	r3,1192(sp)
 c00a438:	d9812785 	stb	r6,1182(sp)
 c00a43c:	8880080c 	andi	r2,r17,32
 c00a440:	d8c12d17 	ldw	r3,1204(sp)
 c00a444:	10007a26 	beq	r2,zero,c00a630 <___vfprintf_internal_r+0xbfc>
 c00a448:	db012d17 	ldw	r12,1204(sp)
 c00a44c:	18800117 	ldw	r2,4(r3)
 c00a450:	1cc00017 	ldw	r19,0(r3)
 c00a454:	63000204 	addi	r12,r12,8
 c00a458:	db012d15 	stw	r12,1204(sp)
 c00a45c:	1039883a 	mov	fp,r2
 c00a460:	10031016 	blt	r2,zero,c00b0a4 <___vfprintf_internal_r+0x1670>
 c00a464:	dd412783 	ldbu	r21,1182(sp)
 c00a468:	da413215 	stw	r9,1224(sp)
 c00a46c:	00800044 	movi	r2,1
 c00a470:	9f06b03a 	or	r3,r19,fp
 c00a474:	003ee406 	br	c00a008 <__alt_data_end+0xfc00a008>
 c00a478:	030300b4 	movhi	r12,3074
 c00a47c:	63093904 	addi	r12,r12,9444
 c00a480:	d8c12a15 	stw	r3,1192(sp)
 c00a484:	d9812785 	stb	r6,1182(sp)
 c00a488:	db013b15 	stw	r12,1260(sp)
 c00a48c:	88c0080c 	andi	r3,r17,32
 c00a490:	d8812d17 	ldw	r2,1204(sp)
 c00a494:	18002b26 	beq	r3,zero,c00a544 <___vfprintf_internal_r+0xb10>
 c00a498:	dac12d17 	ldw	r11,1204(sp)
 c00a49c:	14c00017 	ldw	r19,0(r2)
 c00a4a0:	17000117 	ldw	fp,4(r2)
 c00a4a4:	5ac00204 	addi	r11,r11,8
 c00a4a8:	dac12d15 	stw	r11,1204(sp)
 c00a4ac:	8880004c 	andi	r2,r17,1
 c00a4b0:	10025b26 	beq	r2,zero,c00ae20 <___vfprintf_internal_r+0x13ec>
 c00a4b4:	9f06b03a 	or	r3,r19,fp
 c00a4b8:	18037026 	beq	r3,zero,c00b27c <___vfprintf_internal_r+0x1848>
 c00a4bc:	00800c04 	movi	r2,48
 c00a4c0:	d8812705 	stb	r2,1180(sp)
 c00a4c4:	dc012745 	stb	r16,1181(sp)
 c00a4c8:	8c400094 	ori	r17,r17,2
 c00a4cc:	00800084 	movi	r2,2
 c00a4d0:	003eca06 	br	c009ffc <__alt_data_end+0xfc009ffc>
 c00a4d4:	8c400814 	ori	r17,r17,32
 c00a4d8:	1805883a 	mov	r2,r3
 c00a4dc:	1c000007 	ldb	r16,0(r3)
 c00a4e0:	003dbb06 	br	c009bd0 <__alt_data_end+0xfc009bd0>
 c00a4e4:	d8c12a15 	stw	r3,1192(sp)
 c00a4e8:	88c0080c 	andi	r3,r17,32
 c00a4ec:	d8812d17 	ldw	r2,1204(sp)
 c00a4f0:	183fba1e 	bne	r3,zero,c00a3dc <__alt_data_end+0xfc00a3dc>
 c00a4f4:	88c0040c 	andi	r3,r17,16
 c00a4f8:	18024c1e 	bne	r3,zero,c00ae2c <___vfprintf_internal_r+0x13f8>
 c00a4fc:	88c0100c 	andi	r3,r17,64
 c00a500:	18024a26 	beq	r3,zero,c00ae2c <___vfprintf_internal_r+0x13f8>
 c00a504:	dac12d17 	ldw	r11,1204(sp)
 c00a508:	14c0000b 	ldhu	r19,0(r2)
 c00a50c:	0039883a 	mov	fp,zero
 c00a510:	5ac00104 	addi	r11,r11,4
 c00a514:	dac12d15 	stw	r11,1204(sp)
 c00a518:	00800044 	movi	r2,1
 c00a51c:	9807883a 	mov	r3,r19
 c00a520:	003eb606 	br	c009ffc <__alt_data_end+0xfc009ffc>
 c00a524:	008300b4 	movhi	r2,3074
 c00a528:	10893e04 	addi	r2,r2,9464
 c00a52c:	d8c12a15 	stw	r3,1192(sp)
 c00a530:	d8813b15 	stw	r2,1260(sp)
 c00a534:	d9812785 	stb	r6,1182(sp)
 c00a538:	88c0080c 	andi	r3,r17,32
 c00a53c:	d8812d17 	ldw	r2,1204(sp)
 c00a540:	183fd51e 	bne	r3,zero,c00a498 <__alt_data_end+0xfc00a498>
 c00a544:	88c0040c 	andi	r3,r17,16
 c00a548:	18034126 	beq	r3,zero,c00b250 <___vfprintf_internal_r+0x181c>
 c00a54c:	db012d17 	ldw	r12,1204(sp)
 c00a550:	14c00017 	ldw	r19,0(r2)
 c00a554:	0039883a 	mov	fp,zero
 c00a558:	63000104 	addi	r12,r12,4
 c00a55c:	db012d15 	stw	r12,1204(sp)
 c00a560:	003fd206 	br	c00a4ac <__alt_data_end+0xfc00a4ac>
 c00a564:	1c000007 	ldb	r16,0(r3)
 c00a568:	81c3d626 	beq	r16,r7,c00b4c4 <___vfprintf_internal_r+0x1a90>
 c00a56c:	8c400414 	ori	r17,r17,16
 c00a570:	1805883a 	mov	r2,r3
 c00a574:	003d9606 	br	c009bd0 <__alt_data_end+0xfc009bd0>
 c00a578:	d8c12a15 	stw	r3,1192(sp)
 c00a57c:	d9812785 	stb	r6,1182(sp)
 c00a580:	8880080c 	andi	r2,r17,32
 c00a584:	10033f26 	beq	r2,zero,c00b284 <___vfprintf_internal_r+0x1850>
 c00a588:	db012d17 	ldw	r12,1204(sp)
 c00a58c:	dac12f17 	ldw	r11,1212(sp)
 c00a590:	60800017 	ldw	r2,0(r12)
 c00a594:	5807d7fa 	srai	r3,r11,31
 c00a598:	63000104 	addi	r12,r12,4
 c00a59c:	db012d15 	stw	r12,1204(sp)
 c00a5a0:	12c00015 	stw	r11,0(r2)
 c00a5a4:	10c00115 	stw	r3,4(r2)
 c00a5a8:	003d5f06 	br	c009b28 <__alt_data_end+0xfc009b28>
 c00a5ac:	d8c12a15 	stw	r3,1192(sp)
 c00a5b0:	88c0080c 	andi	r3,r17,32
 c00a5b4:	d8812d17 	ldw	r2,1204(sp)
 c00a5b8:	183e891e 	bne	r3,zero,c009fe0 <__alt_data_end+0xfc009fe0>
 c00a5bc:	88c0040c 	andi	r3,r17,16
 c00a5c0:	1801ea1e 	bne	r3,zero,c00ad6c <___vfprintf_internal_r+0x1338>
 c00a5c4:	88c0100c 	andi	r3,r17,64
 c00a5c8:	1801e826 	beq	r3,zero,c00ad6c <___vfprintf_internal_r+0x1338>
 c00a5cc:	db012d17 	ldw	r12,1204(sp)
 c00a5d0:	14c0000b 	ldhu	r19,0(r2)
 c00a5d4:	0039883a 	mov	fp,zero
 c00a5d8:	63000104 	addi	r12,r12,4
 c00a5dc:	db012d15 	stw	r12,1204(sp)
 c00a5e0:	0005883a 	mov	r2,zero
 c00a5e4:	9807883a 	mov	r3,r19
 c00a5e8:	003e8406 	br	c009ffc <__alt_data_end+0xfc009ffc>
 c00a5ec:	30803fcc 	andi	r2,r6,255
 c00a5f0:	1080201c 	xori	r2,r2,128
 c00a5f4:	10bfe004 	addi	r2,r2,-128
 c00a5f8:	10031d1e 	bne	r2,zero,c00b270 <___vfprintf_internal_r+0x183c>
 c00a5fc:	1805883a 	mov	r2,r3
 c00a600:	01800804 	movi	r6,32
 c00a604:	1c000007 	ldb	r16,0(r3)
 c00a608:	003d7106 	br	c009bd0 <__alt_data_end+0xfc009bd0>
 c00a60c:	8c400054 	ori	r17,r17,1
 c00a610:	1805883a 	mov	r2,r3
 c00a614:	1c000007 	ldb	r16,0(r3)
 c00a618:	003d6d06 	br	c009bd0 <__alt_data_end+0xfc009bd0>
 c00a61c:	d8c12a15 	stw	r3,1192(sp)
 c00a620:	d9812785 	stb	r6,1182(sp)
 c00a624:	8880080c 	andi	r2,r17,32
 c00a628:	d8c12d17 	ldw	r3,1204(sp)
 c00a62c:	103f861e 	bne	r2,zero,c00a448 <__alt_data_end+0xfc00a448>
 c00a630:	8880040c 	andi	r2,r17,16
 c00a634:	1001f31e 	bne	r2,zero,c00ae04 <___vfprintf_internal_r+0x13d0>
 c00a638:	8880100c 	andi	r2,r17,64
 c00a63c:	1001f126 	beq	r2,zero,c00ae04 <___vfprintf_internal_r+0x13d0>
 c00a640:	1cc0000f 	ldh	r19,0(r3)
 c00a644:	db012d17 	ldw	r12,1204(sp)
 c00a648:	9839d7fa 	srai	fp,r19,31
 c00a64c:	63000104 	addi	r12,r12,4
 c00a650:	db012d15 	stw	r12,1204(sp)
 c00a654:	e005883a 	mov	r2,fp
 c00a658:	003f8106 	br	c00a460 <__alt_data_end+0xfc00a460>
 c00a65c:	8c401014 	ori	r17,r17,64
 c00a660:	1805883a 	mov	r2,r3
 c00a664:	1c000007 	ldb	r16,0(r3)
 c00a668:	003d5906 	br	c009bd0 <__alt_data_end+0xfc009bd0>
 c00a66c:	db012d17 	ldw	r12,1204(sp)
 c00a670:	d8c12a15 	stw	r3,1192(sp)
 c00a674:	00c00044 	movi	r3,1
 c00a678:	60800017 	ldw	r2,0(r12)
 c00a67c:	63000104 	addi	r12,r12,4
 c00a680:	d8c12b15 	stw	r3,1196(sp)
 c00a684:	d8012785 	stb	zero,1182(sp)
 c00a688:	d8810405 	stb	r2,1040(sp)
 c00a68c:	db012d15 	stw	r12,1204(sp)
 c00a690:	dac10404 	addi	r11,sp,1040
 c00a694:	1825883a 	mov	r18,r3
 c00a698:	d8013215 	stw	zero,1224(sp)
 c00a69c:	d8013415 	stw	zero,1232(sp)
 c00a6a0:	dac13115 	stw	r11,1220(sp)
 c00a6a4:	0005883a 	mov	r2,zero
 c00a6a8:	003e7d06 	br	c00a0a0 <__alt_data_end+0xfc00a0a0>
 c00a6ac:	db012d17 	ldw	r12,1204(sp)
 c00a6b0:	00800c04 	movi	r2,48
 c00a6b4:	d8812705 	stb	r2,1180(sp)
 c00a6b8:	64c00017 	ldw	r19,0(r12)
 c00a6bc:	00801e04 	movi	r2,120
 c00a6c0:	d8812745 	stb	r2,1181(sp)
 c00a6c4:	008300b4 	movhi	r2,3074
 c00a6c8:	10893e04 	addi	r2,r2,9464
 c00a6cc:	63000104 	addi	r12,r12,4
 c00a6d0:	d8c12a15 	stw	r3,1192(sp)
 c00a6d4:	d8813b15 	stw	r2,1260(sp)
 c00a6d8:	0039883a 	mov	fp,zero
 c00a6dc:	8c400094 	ori	r17,r17,2
 c00a6e0:	db012d15 	stw	r12,1204(sp)
 c00a6e4:	00800084 	movi	r2,2
 c00a6e8:	04001e04 	movi	r16,120
 c00a6ec:	9807883a 	mov	r3,r19
 c00a6f0:	003e4206 	br	c009ffc <__alt_data_end+0xfc009ffc>
 c00a6f4:	dac12d17 	ldw	r11,1204(sp)
 c00a6f8:	db012d17 	ldw	r12,1204(sp)
 c00a6fc:	d8c12a15 	stw	r3,1192(sp)
 c00a700:	5ac00017 	ldw	r11,0(r11)
 c00a704:	d8012785 	stb	zero,1182(sp)
 c00a708:	64c00104 	addi	r19,r12,4
 c00a70c:	dac13115 	stw	r11,1220(sp)
 c00a710:	5803e826 	beq	r11,zero,c00b6b4 <___vfprintf_internal_r+0x1c80>
 c00a714:	d9013117 	ldw	r4,1220(sp)
 c00a718:	48037a16 	blt	r9,zero,c00b504 <___vfprintf_internal_r+0x1ad0>
 c00a71c:	480d883a 	mov	r6,r9
 c00a720:	000b883a 	mov	r5,zero
 c00a724:	da013f15 	stw	r8,1276(sp)
 c00a728:	da413e15 	stw	r9,1272(sp)
 c00a72c:	c00e77c0 	call	c00e77c <memchr>
 c00a730:	da013f17 	ldw	r8,1276(sp)
 c00a734:	da413e17 	ldw	r9,1272(sp)
 c00a738:	10044426 	beq	r2,zero,c00b84c <___vfprintf_internal_r+0x1e18>
 c00a73c:	d8c13117 	ldw	r3,1220(sp)
 c00a740:	10e5c83a 	sub	r18,r2,r3
 c00a744:	4c834416 	blt	r9,r18,c00b458 <___vfprintf_internal_r+0x1a24>
 c00a748:	9005883a 	mov	r2,r18
 c00a74c:	90037216 	blt	r18,zero,c00b518 <___vfprintf_internal_r+0x1ae4>
 c00a750:	dd412783 	ldbu	r21,1182(sp)
 c00a754:	d8812b15 	stw	r2,1196(sp)
 c00a758:	dcc12d15 	stw	r19,1204(sp)
 c00a75c:	d8013215 	stw	zero,1224(sp)
 c00a760:	d8013415 	stw	zero,1232(sp)
 c00a764:	003e4706 	br	c00a084 <__alt_data_end+0xfc00a084>
 c00a768:	dac12d17 	ldw	r11,1204(sp)
 c00a76c:	db012d17 	ldw	r12,1204(sp)
 c00a770:	5ac00017 	ldw	r11,0(r11)
 c00a774:	dac12e15 	stw	r11,1208(sp)
 c00a778:	62c00104 	addi	r11,r12,4
 c00a77c:	db012e17 	ldw	r12,1208(sp)
 c00a780:	60034a16 	blt	r12,zero,c00b4ac <___vfprintf_internal_r+0x1a78>
 c00a784:	dac12d15 	stw	r11,1204(sp)
 c00a788:	1805883a 	mov	r2,r3
 c00a78c:	1c000007 	ldb	r16,0(r3)
 c00a790:	003d0f06 	br	c009bd0 <__alt_data_end+0xfc009bd0>
 c00a794:	1805883a 	mov	r2,r3
 c00a798:	01800ac4 	movi	r6,43
 c00a79c:	1c000007 	ldb	r16,0(r3)
 c00a7a0:	003d0b06 	br	c009bd0 <__alt_data_end+0xfc009bd0>
 c00a7a4:	d8c12a15 	stw	r3,1192(sp)
 c00a7a8:	d9812785 	stb	r6,1182(sp)
 c00a7ac:	803db226 	beq	r16,zero,c009e78 <__alt_data_end+0xfc009e78>
 c00a7b0:	00c00044 	movi	r3,1
 c00a7b4:	d8c12b15 	stw	r3,1196(sp)
 c00a7b8:	dc010405 	stb	r16,1040(sp)
 c00a7bc:	d8012785 	stb	zero,1182(sp)
 c00a7c0:	003fb306 	br	c00a690 <__alt_data_end+0xfc00a690>
 c00a7c4:	d8c12017 	ldw	r3,1152(sp)
 c00a7c8:	003e6d06 	br	c00a180 <__alt_data_end+0xfc00a180>
 c00a7cc:	10803fcc 	andi	r2,r2,255
 c00a7d0:	00c00044 	movi	r3,1
 c00a7d4:	10fe141e 	bne	r2,r3,c00a028 <__alt_data_end+0xfc00a028>
 c00a7d8:	e000021e 	bne	fp,zero,c00a7e4 <___vfprintf_internal_r+0xdb0>
 c00a7dc:	00800244 	movi	r2,9
 c00a7e0:	14c0202e 	bgeu	r2,r19,c00a864 <___vfprintf_internal_r+0xe30>
 c00a7e4:	dc012b15 	stw	r16,1196(sp)
 c00a7e8:	dc412c15 	stw	r17,1200(sp)
 c00a7ec:	9821883a 	mov	r16,r19
 c00a7f0:	e023883a 	mov	r17,fp
 c00a7f4:	dc810e04 	addi	r18,sp,1080
 c00a7f8:	4027883a 	mov	r19,r8
 c00a7fc:	4839883a 	mov	fp,r9
 c00a800:	8009883a 	mov	r4,r16
 c00a804:	880b883a 	mov	r5,r17
 c00a808:	01800284 	movi	r6,10
 c00a80c:	000f883a 	mov	r7,zero
 c00a810:	c0129340 	call	c012934 <__umoddi3>
 c00a814:	10800c04 	addi	r2,r2,48
 c00a818:	94bfffc4 	addi	r18,r18,-1
 c00a81c:	8009883a 	mov	r4,r16
 c00a820:	880b883a 	mov	r5,r17
 c00a824:	01800284 	movi	r6,10
 c00a828:	000f883a 	mov	r7,zero
 c00a82c:	90800005 	stb	r2,0(r18)
 c00a830:	c0123740 	call	c012374 <__udivdi3>
 c00a834:	1021883a 	mov	r16,r2
 c00a838:	10c4b03a 	or	r2,r2,r3
 c00a83c:	1823883a 	mov	r17,r3
 c00a840:	103fef1e 	bne	r2,zero,c00a800 <__alt_data_end+0xfc00a800>
 c00a844:	dac12817 	ldw	r11,1184(sp)
 c00a848:	dc813115 	stw	r18,1220(sp)
 c00a84c:	dc012b17 	ldw	r16,1196(sp)
 c00a850:	9811883a 	mov	r8,r19
 c00a854:	dc412c17 	ldw	r17,1200(sp)
 c00a858:	e013883a 	mov	r9,fp
 c00a85c:	5ca5c83a 	sub	r18,r11,r18
 c00a860:	003e0306 	br	c00a070 <__alt_data_end+0xfc00a070>
 c00a864:	9cc00c04 	addi	r19,r19,48
 c00a868:	d8c10dc4 	addi	r3,sp,1079
 c00a86c:	dcc10dc5 	stb	r19,1079(sp)
 c00a870:	dc813c17 	ldw	r18,1264(sp)
 c00a874:	d8c13115 	stw	r3,1220(sp)
 c00a878:	003dfd06 	br	c00a070 <__alt_data_end+0xfc00a070>
 c00a87c:	00801944 	movi	r2,101
 c00a880:	1400710e 	bge	r2,r16,c00aa48 <___vfprintf_internal_r+0x1014>
 c00a884:	d9013717 	ldw	r4,1244(sp)
 c00a888:	d9413917 	ldw	r5,1252(sp)
 c00a88c:	000d883a 	mov	r6,zero
 c00a890:	000f883a 	mov	r7,zero
 c00a894:	d8c13d15 	stw	r3,1268(sp)
 c00a898:	da013f15 	stw	r8,1276(sp)
 c00a89c:	c0137600 	call	c013760 <__eqdf2>
 c00a8a0:	d8c13d17 	ldw	r3,1268(sp)
 c00a8a4:	da013f17 	ldw	r8,1276(sp)
 c00a8a8:	1000ef1e 	bne	r2,zero,c00ac68 <___vfprintf_internal_r+0x1234>
 c00a8ac:	d8811f17 	ldw	r2,1148(sp)
 c00a8b0:	010300b4 	movhi	r4,3074
 c00a8b4:	21094504 	addi	r4,r4,9492
 c00a8b8:	18c00044 	addi	r3,r3,1
 c00a8bc:	10800044 	addi	r2,r2,1
 c00a8c0:	41000015 	stw	r4,0(r8)
 c00a8c4:	01000044 	movi	r4,1
 c00a8c8:	41000115 	stw	r4,4(r8)
 c00a8cc:	d8c12015 	stw	r3,1152(sp)
 c00a8d0:	d8811f15 	stw	r2,1148(sp)
 c00a8d4:	010001c4 	movi	r4,7
 c00a8d8:	20828e16 	blt	r4,r2,c00b314 <___vfprintf_internal_r+0x18e0>
 c00a8dc:	42000204 	addi	r8,r8,8
 c00a8e0:	d8812617 	ldw	r2,1176(sp)
 c00a8e4:	dac13317 	ldw	r11,1228(sp)
 c00a8e8:	12c00216 	blt	r2,r11,c00a8f4 <___vfprintf_internal_r+0xec0>
 c00a8ec:	8880004c 	andi	r2,r17,1
 c00a8f0:	103e7726 	beq	r2,zero,c00a2d0 <__alt_data_end+0xfc00a2d0>
 c00a8f4:	db013817 	ldw	r12,1248(sp)
 c00a8f8:	d8811f17 	ldw	r2,1148(sp)
 c00a8fc:	dac13517 	ldw	r11,1236(sp)
 c00a900:	1b07883a 	add	r3,r3,r12
 c00a904:	10800044 	addi	r2,r2,1
 c00a908:	42c00015 	stw	r11,0(r8)
 c00a90c:	43000115 	stw	r12,4(r8)
 c00a910:	d8c12015 	stw	r3,1152(sp)
 c00a914:	d8811f15 	stw	r2,1148(sp)
 c00a918:	010001c4 	movi	r4,7
 c00a91c:	2082ed16 	blt	r4,r2,c00b4d4 <___vfprintf_internal_r+0x1aa0>
 c00a920:	42000204 	addi	r8,r8,8
 c00a924:	db013317 	ldw	r12,1228(sp)
 c00a928:	643fffc4 	addi	r16,r12,-1
 c00a92c:	043e680e 	bge	zero,r16,c00a2d0 <__alt_data_end+0xfc00a2d0>
 c00a930:	04800404 	movi	r18,16
 c00a934:	d8811f17 	ldw	r2,1148(sp)
 c00a938:	94007e0e 	bge	r18,r16,c00ab34 <___vfprintf_internal_r+0x1100>
 c00a93c:	014300b4 	movhi	r5,3074
 c00a940:	29494584 	addi	r5,r5,9494
 c00a944:	d9412c15 	stw	r5,1200(sp)
 c00a948:	054001c4 	movi	r21,7
 c00a94c:	00000306 	br	c00a95c <___vfprintf_internal_r+0xf28>
 c00a950:	42000204 	addi	r8,r8,8
 c00a954:	843ffc04 	addi	r16,r16,-16
 c00a958:	9400790e 	bge	r18,r16,c00ab40 <___vfprintf_internal_r+0x110c>
 c00a95c:	18c00404 	addi	r3,r3,16
 c00a960:	10800044 	addi	r2,r2,1
 c00a964:	45000015 	stw	r20,0(r8)
 c00a968:	44800115 	stw	r18,4(r8)
 c00a96c:	d8c12015 	stw	r3,1152(sp)
 c00a970:	d8811f15 	stw	r2,1148(sp)
 c00a974:	a8bff60e 	bge	r21,r2,c00a950 <__alt_data_end+0xfc00a950>
 c00a978:	b009883a 	mov	r4,r22
 c00a97c:	b80b883a 	mov	r5,r23
 c00a980:	d9811e04 	addi	r6,sp,1144
 c00a984:	c0106a40 	call	c0106a4 <__sprint_r>
 c00a988:	103d411e 	bne	r2,zero,c009e90 <__alt_data_end+0xfc009e90>
 c00a98c:	d8c12017 	ldw	r3,1152(sp)
 c00a990:	d8811f17 	ldw	r2,1148(sp)
 c00a994:	da000404 	addi	r8,sp,16
 c00a998:	003fee06 	br	c00a954 <__alt_data_end+0xfc00a954>
 c00a99c:	dac12e17 	ldw	r11,1208(sp)
 c00a9a0:	db012b17 	ldw	r12,1196(sp)
 c00a9a4:	5b2bc83a 	sub	r21,r11,r12
 c00a9a8:	057e130e 	bge	zero,r21,c00a1f8 <__alt_data_end+0xfc00a1f8>
 c00a9ac:	07000404 	movi	fp,16
 c00a9b0:	d8811f17 	ldw	r2,1148(sp)
 c00a9b4:	e543640e 	bge	fp,r21,c00b748 <___vfprintf_internal_r+0x1d14>
 c00a9b8:	014300b4 	movhi	r5,3074
 c00a9bc:	29494584 	addi	r5,r5,9494
 c00a9c0:	d9412c15 	stw	r5,1200(sp)
 c00a9c4:	04c001c4 	movi	r19,7
 c00a9c8:	00000306 	br	c00a9d8 <___vfprintf_internal_r+0xfa4>
 c00a9cc:	ad7ffc04 	addi	r21,r21,-16
 c00a9d0:	42000204 	addi	r8,r8,8
 c00a9d4:	e540110e 	bge	fp,r21,c00aa1c <___vfprintf_internal_r+0xfe8>
 c00a9d8:	18c00404 	addi	r3,r3,16
 c00a9dc:	10800044 	addi	r2,r2,1
 c00a9e0:	45000015 	stw	r20,0(r8)
 c00a9e4:	47000115 	stw	fp,4(r8)
 c00a9e8:	d8c12015 	stw	r3,1152(sp)
 c00a9ec:	d8811f15 	stw	r2,1148(sp)
 c00a9f0:	98bff60e 	bge	r19,r2,c00a9cc <__alt_data_end+0xfc00a9cc>
 c00a9f4:	b009883a 	mov	r4,r22
 c00a9f8:	b80b883a 	mov	r5,r23
 c00a9fc:	d9811e04 	addi	r6,sp,1144
 c00aa00:	c0106a40 	call	c0106a4 <__sprint_r>
 c00aa04:	103d221e 	bne	r2,zero,c009e90 <__alt_data_end+0xfc009e90>
 c00aa08:	ad7ffc04 	addi	r21,r21,-16
 c00aa0c:	d8c12017 	ldw	r3,1152(sp)
 c00aa10:	d8811f17 	ldw	r2,1148(sp)
 c00aa14:	da000404 	addi	r8,sp,16
 c00aa18:	e57fef16 	blt	fp,r21,c00a9d8 <__alt_data_end+0xfc00a9d8>
 c00aa1c:	dac12c17 	ldw	r11,1200(sp)
 c00aa20:	1d47883a 	add	r3,r3,r21
 c00aa24:	10800044 	addi	r2,r2,1
 c00aa28:	42c00015 	stw	r11,0(r8)
 c00aa2c:	45400115 	stw	r21,4(r8)
 c00aa30:	d8c12015 	stw	r3,1152(sp)
 c00aa34:	d8811f15 	stw	r2,1148(sp)
 c00aa38:	010001c4 	movi	r4,7
 c00aa3c:	20819116 	blt	r4,r2,c00b084 <___vfprintf_internal_r+0x1650>
 c00aa40:	42000204 	addi	r8,r8,8
 c00aa44:	003dec06 	br	c00a1f8 <__alt_data_end+0xfc00a1f8>
 c00aa48:	db013317 	ldw	r12,1228(sp)
 c00aa4c:	00800044 	movi	r2,1
 c00aa50:	18c00044 	addi	r3,r3,1
 c00aa54:	1301530e 	bge	r2,r12,c00afa4 <___vfprintf_internal_r+0x1570>
 c00aa58:	dc011f17 	ldw	r16,1148(sp)
 c00aa5c:	dac13117 	ldw	r11,1220(sp)
 c00aa60:	00800044 	movi	r2,1
 c00aa64:	84000044 	addi	r16,r16,1
 c00aa68:	40800115 	stw	r2,4(r8)
 c00aa6c:	42c00015 	stw	r11,0(r8)
 c00aa70:	d8c12015 	stw	r3,1152(sp)
 c00aa74:	dc011f15 	stw	r16,1148(sp)
 c00aa78:	008001c4 	movi	r2,7
 c00aa7c:	14016b16 	blt	r2,r16,c00b02c <___vfprintf_internal_r+0x15f8>
 c00aa80:	42000204 	addi	r8,r8,8
 c00aa84:	db013817 	ldw	r12,1248(sp)
 c00aa88:	dac13517 	ldw	r11,1236(sp)
 c00aa8c:	84000044 	addi	r16,r16,1
 c00aa90:	1b07883a 	add	r3,r3,r12
 c00aa94:	42c00015 	stw	r11,0(r8)
 c00aa98:	43000115 	stw	r12,4(r8)
 c00aa9c:	d8c12015 	stw	r3,1152(sp)
 c00aaa0:	dc011f15 	stw	r16,1148(sp)
 c00aaa4:	008001c4 	movi	r2,7
 c00aaa8:	14016916 	blt	r2,r16,c00b050 <___vfprintf_internal_r+0x161c>
 c00aaac:	44800204 	addi	r18,r8,8
 c00aab0:	d9013717 	ldw	r4,1244(sp)
 c00aab4:	d9413917 	ldw	r5,1252(sp)
 c00aab8:	000d883a 	mov	r6,zero
 c00aabc:	000f883a 	mov	r7,zero
 c00aac0:	d8c13d15 	stw	r3,1268(sp)
 c00aac4:	c0137600 	call	c013760 <__eqdf2>
 c00aac8:	d8c13d17 	ldw	r3,1268(sp)
 c00aacc:	db013317 	ldw	r12,1228(sp)
 c00aad0:	1000ae26 	beq	r2,zero,c00ad8c <___vfprintf_internal_r+0x1358>
 c00aad4:	dac13117 	ldw	r11,1220(sp)
 c00aad8:	60bfffc4 	addi	r2,r12,-1
 c00aadc:	1887883a 	add	r3,r3,r2
 c00aae0:	59000044 	addi	r4,r11,1
 c00aae4:	84000044 	addi	r16,r16,1
 c00aae8:	90800115 	stw	r2,4(r18)
 c00aaec:	91000015 	stw	r4,0(r18)
 c00aaf0:	d8c12015 	stw	r3,1152(sp)
 c00aaf4:	dc011f15 	stw	r16,1148(sp)
 c00aaf8:	008001c4 	movi	r2,7
 c00aafc:	14014216 	blt	r2,r16,c00b008 <___vfprintf_internal_r+0x15d4>
 c00ab00:	94800204 	addi	r18,r18,8
 c00ab04:	dac13a17 	ldw	r11,1256(sp)
 c00ab08:	dd4122c4 	addi	r21,sp,1163
 c00ab0c:	84000044 	addi	r16,r16,1
 c00ab10:	58c7883a 	add	r3,r11,r3
 c00ab14:	95400015 	stw	r21,0(r18)
 c00ab18:	92c00115 	stw	r11,4(r18)
 c00ab1c:	d8c12015 	stw	r3,1152(sp)
 c00ab20:	dc011f15 	stw	r16,1148(sp)
 c00ab24:	008001c4 	movi	r2,7
 c00ab28:	14000e16 	blt	r2,r16,c00ab64 <___vfprintf_internal_r+0x1130>
 c00ab2c:	92000204 	addi	r8,r18,8
 c00ab30:	003de706 	br	c00a2d0 <__alt_data_end+0xfc00a2d0>
 c00ab34:	010300b4 	movhi	r4,3074
 c00ab38:	21094584 	addi	r4,r4,9494
 c00ab3c:	d9012c15 	stw	r4,1200(sp)
 c00ab40:	dac12c17 	ldw	r11,1200(sp)
 c00ab44:	1c07883a 	add	r3,r3,r16
 c00ab48:	44000115 	stw	r16,4(r8)
 c00ab4c:	42c00015 	stw	r11,0(r8)
 c00ab50:	10800044 	addi	r2,r2,1
 c00ab54:	d8c12015 	stw	r3,1152(sp)
 c00ab58:	d8811f15 	stw	r2,1148(sp)
 c00ab5c:	010001c4 	movi	r4,7
 c00ab60:	20bdda0e 	bge	r4,r2,c00a2cc <__alt_data_end+0xfc00a2cc>
 c00ab64:	b009883a 	mov	r4,r22
 c00ab68:	b80b883a 	mov	r5,r23
 c00ab6c:	d9811e04 	addi	r6,sp,1144
 c00ab70:	c0106a40 	call	c0106a4 <__sprint_r>
 c00ab74:	103cc61e 	bne	r2,zero,c009e90 <__alt_data_end+0xfc009e90>
 c00ab78:	d8c12017 	ldw	r3,1152(sp)
 c00ab7c:	da000404 	addi	r8,sp,16
 c00ab80:	003dd306 	br	c00a2d0 <__alt_data_end+0xfc00a2d0>
 c00ab84:	b009883a 	mov	r4,r22
 c00ab88:	b80b883a 	mov	r5,r23
 c00ab8c:	d9811e04 	addi	r6,sp,1144
 c00ab90:	c0106a40 	call	c0106a4 <__sprint_r>
 c00ab94:	103e0926 	beq	r2,zero,c00a3bc <__alt_data_end+0xfc00a3bc>
 c00ab98:	003cbd06 	br	c009e90 <__alt_data_end+0xfc009e90>
 c00ab9c:	10803fcc 	andi	r2,r2,255
 c00aba0:	1000651e 	bne	r2,zero,c00ad38 <___vfprintf_internal_r+0x1304>
 c00aba4:	8880004c 	andi	r2,r17,1
 c00aba8:	10013226 	beq	r2,zero,c00b074 <___vfprintf_internal_r+0x1640>
 c00abac:	00800c04 	movi	r2,48
 c00abb0:	d8c10dc4 	addi	r3,sp,1079
 c00abb4:	d8810dc5 	stb	r2,1079(sp)
 c00abb8:	dc813c17 	ldw	r18,1264(sp)
 c00abbc:	d8c13115 	stw	r3,1220(sp)
 c00abc0:	003d2b06 	br	c00a070 <__alt_data_end+0xfc00a070>
 c00abc4:	b009883a 	mov	r4,r22
 c00abc8:	b80b883a 	mov	r5,r23
 c00abcc:	d9811e04 	addi	r6,sp,1144
 c00abd0:	c0106a40 	call	c0106a4 <__sprint_r>
 c00abd4:	103cae1e 	bne	r2,zero,c009e90 <__alt_data_end+0xfc009e90>
 c00abd8:	d8c12017 	ldw	r3,1152(sp)
 c00abdc:	da000404 	addi	r8,sp,16
 c00abe0:	003dae06 	br	c00a29c <__alt_data_end+0xfc00a29c>
 c00abe4:	b009883a 	mov	r4,r22
 c00abe8:	b80b883a 	mov	r5,r23
 c00abec:	d9811e04 	addi	r6,sp,1144
 c00abf0:	c0106a40 	call	c0106a4 <__sprint_r>
 c00abf4:	103ca61e 	bne	r2,zero,c009e90 <__alt_data_end+0xfc009e90>
 c00abf8:	d8c12017 	ldw	r3,1152(sp)
 c00abfc:	da000404 	addi	r8,sp,16
 c00ac00:	003d6c06 	br	c00a1b4 <__alt_data_end+0xfc00a1b4>
 c00ac04:	b009883a 	mov	r4,r22
 c00ac08:	b80b883a 	mov	r5,r23
 c00ac0c:	d9811e04 	addi	r6,sp,1144
 c00ac10:	c0106a40 	call	c0106a4 <__sprint_r>
 c00ac14:	103c9e1e 	bne	r2,zero,c009e90 <__alt_data_end+0xfc009e90>
 c00ac18:	d8c12017 	ldw	r3,1152(sp)
 c00ac1c:	da000404 	addi	r8,sp,16
 c00ac20:	003d7206 	br	c00a1ec <__alt_data_end+0xfc00a1ec>
 c00ac24:	d9413b17 	ldw	r5,1260(sp)
 c00ac28:	d8c10e04 	addi	r3,sp,1080
 c00ac2c:	988003cc 	andi	r2,r19,15
 c00ac30:	e008973a 	slli	r4,fp,28
 c00ac34:	2885883a 	add	r2,r5,r2
 c00ac38:	9826d13a 	srli	r19,r19,4
 c00ac3c:	10800003 	ldbu	r2,0(r2)
 c00ac40:	e038d13a 	srli	fp,fp,4
 c00ac44:	18ffffc4 	addi	r3,r3,-1
 c00ac48:	24e6b03a 	or	r19,r4,r19
 c00ac4c:	18800005 	stb	r2,0(r3)
 c00ac50:	9f04b03a 	or	r2,r19,fp
 c00ac54:	103ff51e 	bne	r2,zero,c00ac2c <__alt_data_end+0xfc00ac2c>
 c00ac58:	db012817 	ldw	r12,1184(sp)
 c00ac5c:	d8c13115 	stw	r3,1220(sp)
 c00ac60:	60e5c83a 	sub	r18,r12,r3
 c00ac64:	003d0206 	br	c00a070 <__alt_data_end+0xfc00a070>
 c00ac68:	dc012617 	ldw	r16,1176(sp)
 c00ac6c:	0401b10e 	bge	zero,r16,c00b334 <___vfprintf_internal_r+0x1900>
 c00ac70:	db013117 	ldw	r12,1220(sp)
 c00ac74:	dac13317 	ldw	r11,1228(sp)
 c00ac78:	62e1883a 	add	r16,r12,r11
 c00ac7c:	db013417 	ldw	r12,1232(sp)
 c00ac80:	5825883a 	mov	r18,r11
 c00ac84:	62c0010e 	bge	r12,r11,c00ac8c <___vfprintf_internal_r+0x1258>
 c00ac88:	6025883a 	mov	r18,r12
 c00ac8c:	04800b0e 	bge	zero,r18,c00acbc <___vfprintf_internal_r+0x1288>
 c00ac90:	d8811f17 	ldw	r2,1148(sp)
 c00ac94:	dac13117 	ldw	r11,1220(sp)
 c00ac98:	1c87883a 	add	r3,r3,r18
 c00ac9c:	10800044 	addi	r2,r2,1
 c00aca0:	42c00015 	stw	r11,0(r8)
 c00aca4:	44800115 	stw	r18,4(r8)
 c00aca8:	d8c12015 	stw	r3,1152(sp)
 c00acac:	d8811f15 	stw	r2,1148(sp)
 c00acb0:	010001c4 	movi	r4,7
 c00acb4:	20824f16 	blt	r4,r2,c00b5f4 <___vfprintf_internal_r+0x1bc0>
 c00acb8:	42000204 	addi	r8,r8,8
 c00acbc:	90024b16 	blt	r18,zero,c00b5ec <___vfprintf_internal_r+0x1bb8>
 c00acc0:	db013417 	ldw	r12,1232(sp)
 c00acc4:	64a5c83a 	sub	r18,r12,r18
 c00acc8:	0480730e 	bge	zero,r18,c00ae98 <___vfprintf_internal_r+0x1464>
 c00accc:	05400404 	movi	r21,16
 c00acd0:	d8811f17 	ldw	r2,1148(sp)
 c00acd4:	ac817d0e 	bge	r21,r18,c00b2cc <___vfprintf_internal_r+0x1898>
 c00acd8:	014300b4 	movhi	r5,3074
 c00acdc:	29494584 	addi	r5,r5,9494
 c00ace0:	d9412c15 	stw	r5,1200(sp)
 c00ace4:	070001c4 	movi	fp,7
 c00ace8:	00000306 	br	c00acf8 <___vfprintf_internal_r+0x12c4>
 c00acec:	42000204 	addi	r8,r8,8
 c00acf0:	94bffc04 	addi	r18,r18,-16
 c00acf4:	ac81780e 	bge	r21,r18,c00b2d8 <___vfprintf_internal_r+0x18a4>
 c00acf8:	18c00404 	addi	r3,r3,16
 c00acfc:	10800044 	addi	r2,r2,1
 c00ad00:	45000015 	stw	r20,0(r8)
 c00ad04:	45400115 	stw	r21,4(r8)
 c00ad08:	d8c12015 	stw	r3,1152(sp)
 c00ad0c:	d8811f15 	stw	r2,1148(sp)
 c00ad10:	e0bff60e 	bge	fp,r2,c00acec <__alt_data_end+0xfc00acec>
 c00ad14:	b009883a 	mov	r4,r22
 c00ad18:	b80b883a 	mov	r5,r23
 c00ad1c:	d9811e04 	addi	r6,sp,1144
 c00ad20:	c0106a40 	call	c0106a4 <__sprint_r>
 c00ad24:	103c5a1e 	bne	r2,zero,c009e90 <__alt_data_end+0xfc009e90>
 c00ad28:	d8c12017 	ldw	r3,1152(sp)
 c00ad2c:	d8811f17 	ldw	r2,1148(sp)
 c00ad30:	da000404 	addi	r8,sp,16
 c00ad34:	003fee06 	br	c00acf0 <__alt_data_end+0xfc00acf0>
 c00ad38:	dac10e04 	addi	r11,sp,1080
 c00ad3c:	0025883a 	mov	r18,zero
 c00ad40:	dac13115 	stw	r11,1220(sp)
 c00ad44:	003cca06 	br	c00a070 <__alt_data_end+0xfc00a070>
 c00ad48:	b009883a 	mov	r4,r22
 c00ad4c:	b80b883a 	mov	r5,r23
 c00ad50:	d9811e04 	addi	r6,sp,1144
 c00ad54:	c0106a40 	call	c0106a4 <__sprint_r>
 c00ad58:	103c4d1e 	bne	r2,zero,c009e90 <__alt_data_end+0xfc009e90>
 c00ad5c:	d8c12017 	ldw	r3,1152(sp)
 c00ad60:	d8812787 	ldb	r2,1182(sp)
 c00ad64:	da000404 	addi	r8,sp,16
 c00ad68:	003d0506 	br	c00a180 <__alt_data_end+0xfc00a180>
 c00ad6c:	dac12d17 	ldw	r11,1204(sp)
 c00ad70:	14c00017 	ldw	r19,0(r2)
 c00ad74:	0039883a 	mov	fp,zero
 c00ad78:	5ac00104 	addi	r11,r11,4
 c00ad7c:	dac12d15 	stw	r11,1204(sp)
 c00ad80:	0005883a 	mov	r2,zero
 c00ad84:	9807883a 	mov	r3,r19
 c00ad88:	003c9c06 	br	c009ffc <__alt_data_end+0xfc009ffc>
 c00ad8c:	657fffc4 	addi	r21,r12,-1
 c00ad90:	057f5c0e 	bge	zero,r21,c00ab04 <__alt_data_end+0xfc00ab04>
 c00ad94:	07000404 	movi	fp,16
 c00ad98:	e5408f0e 	bge	fp,r21,c00afd8 <___vfprintf_internal_r+0x15a4>
 c00ad9c:	010300b4 	movhi	r4,3074
 c00ada0:	21094584 	addi	r4,r4,9494
 c00ada4:	d9012c15 	stw	r4,1200(sp)
 c00ada8:	01c001c4 	movi	r7,7
 c00adac:	00000306 	br	c00adbc <___vfprintf_internal_r+0x1388>
 c00adb0:	94800204 	addi	r18,r18,8
 c00adb4:	ad7ffc04 	addi	r21,r21,-16
 c00adb8:	e5408a0e 	bge	fp,r21,c00afe4 <___vfprintf_internal_r+0x15b0>
 c00adbc:	18c00404 	addi	r3,r3,16
 c00adc0:	84000044 	addi	r16,r16,1
 c00adc4:	95000015 	stw	r20,0(r18)
 c00adc8:	97000115 	stw	fp,4(r18)
 c00adcc:	d8c12015 	stw	r3,1152(sp)
 c00add0:	dc011f15 	stw	r16,1148(sp)
 c00add4:	3c3ff60e 	bge	r7,r16,c00adb0 <__alt_data_end+0xfc00adb0>
 c00add8:	b009883a 	mov	r4,r22
 c00addc:	b80b883a 	mov	r5,r23
 c00ade0:	d9811e04 	addi	r6,sp,1144
 c00ade4:	d9c13d15 	stw	r7,1268(sp)
 c00ade8:	c0106a40 	call	c0106a4 <__sprint_r>
 c00adec:	d9c13d17 	ldw	r7,1268(sp)
 c00adf0:	103c271e 	bne	r2,zero,c009e90 <__alt_data_end+0xfc009e90>
 c00adf4:	d8c12017 	ldw	r3,1152(sp)
 c00adf8:	dc011f17 	ldw	r16,1148(sp)
 c00adfc:	dc800404 	addi	r18,sp,16
 c00ae00:	003fec06 	br	c00adb4 <__alt_data_end+0xfc00adb4>
 c00ae04:	1cc00017 	ldw	r19,0(r3)
 c00ae08:	dac12d17 	ldw	r11,1204(sp)
 c00ae0c:	9839d7fa 	srai	fp,r19,31
 c00ae10:	5ac00104 	addi	r11,r11,4
 c00ae14:	dac12d15 	stw	r11,1204(sp)
 c00ae18:	e005883a 	mov	r2,fp
 c00ae1c:	003d9006 	br	c00a460 <__alt_data_end+0xfc00a460>
 c00ae20:	00800084 	movi	r2,2
 c00ae24:	9f06b03a 	or	r3,r19,fp
 c00ae28:	003c7406 	br	c009ffc <__alt_data_end+0xfc009ffc>
 c00ae2c:	db012d17 	ldw	r12,1204(sp)
 c00ae30:	14c00017 	ldw	r19,0(r2)
 c00ae34:	0039883a 	mov	fp,zero
 c00ae38:	63000104 	addi	r12,r12,4
 c00ae3c:	db012d15 	stw	r12,1204(sp)
 c00ae40:	00800044 	movi	r2,1
 c00ae44:	9807883a 	mov	r3,r19
 c00ae48:	003c6c06 	br	c009ffc <__alt_data_end+0xfc009ffc>
 c00ae4c:	10803fcc 	andi	r2,r2,255
 c00ae50:	1080201c 	xori	r2,r2,128
 c00ae54:	10bfe004 	addi	r2,r2,-128
 c00ae58:	01000c04 	movi	r4,48
 c00ae5c:	1101a526 	beq	r2,r4,c00b4f4 <___vfprintf_internal_r+0x1ac0>
 c00ae60:	dac13117 	ldw	r11,1220(sp)
 c00ae64:	db012817 	ldw	r12,1184(sp)
 c00ae68:	193fffc5 	stb	r4,-1(r3)
 c00ae6c:	5affffc4 	addi	r11,r11,-1
 c00ae70:	dac13115 	stw	r11,1220(sp)
 c00ae74:	62e5c83a 	sub	r18,r12,r11
 c00ae78:	003c7d06 	br	c00a070 <__alt_data_end+0xfc00a070>
 c00ae7c:	b009883a 	mov	r4,r22
 c00ae80:	b80b883a 	mov	r5,r23
 c00ae84:	d9811e04 	addi	r6,sp,1144
 c00ae88:	c0106a40 	call	c0106a4 <__sprint_r>
 c00ae8c:	103c001e 	bne	r2,zero,c009e90 <__alt_data_end+0xfc009e90>
 c00ae90:	d8c12017 	ldw	r3,1152(sp)
 c00ae94:	da000404 	addi	r8,sp,16
 c00ae98:	db013117 	ldw	r12,1220(sp)
 c00ae9c:	dac13417 	ldw	r11,1232(sp)
 c00aea0:	d8812617 	ldw	r2,1176(sp)
 c00aea4:	62e5883a 	add	r18,r12,r11
 c00aea8:	db013317 	ldw	r12,1228(sp)
 c00aeac:	13000216 	blt	r2,r12,c00aeb8 <___vfprintf_internal_r+0x1484>
 c00aeb0:	8900004c 	andi	r4,r17,1
 c00aeb4:	20000c26 	beq	r4,zero,c00aee8 <___vfprintf_internal_r+0x14b4>
 c00aeb8:	dac13817 	ldw	r11,1248(sp)
 c00aebc:	d9011f17 	ldw	r4,1148(sp)
 c00aec0:	db013517 	ldw	r12,1236(sp)
 c00aec4:	1ac7883a 	add	r3,r3,r11
 c00aec8:	21000044 	addi	r4,r4,1
 c00aecc:	43000015 	stw	r12,0(r8)
 c00aed0:	42c00115 	stw	r11,4(r8)
 c00aed4:	d8c12015 	stw	r3,1152(sp)
 c00aed8:	d9011f15 	stw	r4,1148(sp)
 c00aedc:	014001c4 	movi	r5,7
 c00aee0:	2901cc16 	blt	r5,r4,c00b614 <___vfprintf_internal_r+0x1be0>
 c00aee4:	42000204 	addi	r8,r8,8
 c00aee8:	dac13317 	ldw	r11,1228(sp)
 c00aeec:	8489c83a 	sub	r4,r16,r18
 c00aef0:	5885c83a 	sub	r2,r11,r2
 c00aef4:	1021883a 	mov	r16,r2
 c00aef8:	2080010e 	bge	r4,r2,c00af00 <___vfprintf_internal_r+0x14cc>
 c00aefc:	2021883a 	mov	r16,r4
 c00af00:	04000a0e 	bge	zero,r16,c00af2c <___vfprintf_internal_r+0x14f8>
 c00af04:	d9011f17 	ldw	r4,1148(sp)
 c00af08:	1c07883a 	add	r3,r3,r16
 c00af0c:	44800015 	stw	r18,0(r8)
 c00af10:	21000044 	addi	r4,r4,1
 c00af14:	44000115 	stw	r16,4(r8)
 c00af18:	d8c12015 	stw	r3,1152(sp)
 c00af1c:	d9011f15 	stw	r4,1148(sp)
 c00af20:	014001c4 	movi	r5,7
 c00af24:	2901d616 	blt	r5,r4,c00b680 <___vfprintf_internal_r+0x1c4c>
 c00af28:	42000204 	addi	r8,r8,8
 c00af2c:	8001df16 	blt	r16,zero,c00b6ac <___vfprintf_internal_r+0x1c78>
 c00af30:	1421c83a 	sub	r16,r2,r16
 c00af34:	043ce60e 	bge	zero,r16,c00a2d0 <__alt_data_end+0xfc00a2d0>
 c00af38:	04800404 	movi	r18,16
 c00af3c:	d8811f17 	ldw	r2,1148(sp)
 c00af40:	943efc0e 	bge	r18,r16,c00ab34 <__alt_data_end+0xfc00ab34>
 c00af44:	014300b4 	movhi	r5,3074
 c00af48:	29494584 	addi	r5,r5,9494
 c00af4c:	d9412c15 	stw	r5,1200(sp)
 c00af50:	054001c4 	movi	r21,7
 c00af54:	00000306 	br	c00af64 <___vfprintf_internal_r+0x1530>
 c00af58:	42000204 	addi	r8,r8,8
 c00af5c:	843ffc04 	addi	r16,r16,-16
 c00af60:	943ef70e 	bge	r18,r16,c00ab40 <__alt_data_end+0xfc00ab40>
 c00af64:	18c00404 	addi	r3,r3,16
 c00af68:	10800044 	addi	r2,r2,1
 c00af6c:	45000015 	stw	r20,0(r8)
 c00af70:	44800115 	stw	r18,4(r8)
 c00af74:	d8c12015 	stw	r3,1152(sp)
 c00af78:	d8811f15 	stw	r2,1148(sp)
 c00af7c:	a8bff60e 	bge	r21,r2,c00af58 <__alt_data_end+0xfc00af58>
 c00af80:	b009883a 	mov	r4,r22
 c00af84:	b80b883a 	mov	r5,r23
 c00af88:	d9811e04 	addi	r6,sp,1144
 c00af8c:	c0106a40 	call	c0106a4 <__sprint_r>
 c00af90:	103bbf1e 	bne	r2,zero,c009e90 <__alt_data_end+0xfc009e90>
 c00af94:	d8c12017 	ldw	r3,1152(sp)
 c00af98:	d8811f17 	ldw	r2,1148(sp)
 c00af9c:	da000404 	addi	r8,sp,16
 c00afa0:	003fee06 	br	c00af5c <__alt_data_end+0xfc00af5c>
 c00afa4:	8888703a 	and	r4,r17,r2
 c00afa8:	203eab1e 	bne	r4,zero,c00aa58 <__alt_data_end+0xfc00aa58>
 c00afac:	dc011f17 	ldw	r16,1148(sp)
 c00afb0:	db013117 	ldw	r12,1220(sp)
 c00afb4:	40800115 	stw	r2,4(r8)
 c00afb8:	84000044 	addi	r16,r16,1
 c00afbc:	43000015 	stw	r12,0(r8)
 c00afc0:	d8c12015 	stw	r3,1152(sp)
 c00afc4:	dc011f15 	stw	r16,1148(sp)
 c00afc8:	008001c4 	movi	r2,7
 c00afcc:	14000e16 	blt	r2,r16,c00b008 <___vfprintf_internal_r+0x15d4>
 c00afd0:	44800204 	addi	r18,r8,8
 c00afd4:	003ecb06 	br	c00ab04 <__alt_data_end+0xfc00ab04>
 c00afd8:	008300b4 	movhi	r2,3074
 c00afdc:	10894584 	addi	r2,r2,9494
 c00afe0:	d8812c15 	stw	r2,1200(sp)
 c00afe4:	dac12c17 	ldw	r11,1200(sp)
 c00afe8:	1d47883a 	add	r3,r3,r21
 c00afec:	84000044 	addi	r16,r16,1
 c00aff0:	92c00015 	stw	r11,0(r18)
 c00aff4:	95400115 	stw	r21,4(r18)
 c00aff8:	d8c12015 	stw	r3,1152(sp)
 c00affc:	dc011f15 	stw	r16,1148(sp)
 c00b000:	008001c4 	movi	r2,7
 c00b004:	143ebe0e 	bge	r2,r16,c00ab00 <__alt_data_end+0xfc00ab00>
 c00b008:	b009883a 	mov	r4,r22
 c00b00c:	b80b883a 	mov	r5,r23
 c00b010:	d9811e04 	addi	r6,sp,1144
 c00b014:	c0106a40 	call	c0106a4 <__sprint_r>
 c00b018:	103b9d1e 	bne	r2,zero,c009e90 <__alt_data_end+0xfc009e90>
 c00b01c:	d8c12017 	ldw	r3,1152(sp)
 c00b020:	dc011f17 	ldw	r16,1148(sp)
 c00b024:	dc800404 	addi	r18,sp,16
 c00b028:	003eb606 	br	c00ab04 <__alt_data_end+0xfc00ab04>
 c00b02c:	b009883a 	mov	r4,r22
 c00b030:	b80b883a 	mov	r5,r23
 c00b034:	d9811e04 	addi	r6,sp,1144
 c00b038:	c0106a40 	call	c0106a4 <__sprint_r>
 c00b03c:	103b941e 	bne	r2,zero,c009e90 <__alt_data_end+0xfc009e90>
 c00b040:	d8c12017 	ldw	r3,1152(sp)
 c00b044:	dc011f17 	ldw	r16,1148(sp)
 c00b048:	da000404 	addi	r8,sp,16
 c00b04c:	003e8d06 	br	c00aa84 <__alt_data_end+0xfc00aa84>
 c00b050:	b009883a 	mov	r4,r22
 c00b054:	b80b883a 	mov	r5,r23
 c00b058:	d9811e04 	addi	r6,sp,1144
 c00b05c:	c0106a40 	call	c0106a4 <__sprint_r>
 c00b060:	103b8b1e 	bne	r2,zero,c009e90 <__alt_data_end+0xfc009e90>
 c00b064:	d8c12017 	ldw	r3,1152(sp)
 c00b068:	dc011f17 	ldw	r16,1148(sp)
 c00b06c:	dc800404 	addi	r18,sp,16
 c00b070:	003e8f06 	br	c00aab0 <__alt_data_end+0xfc00aab0>
 c00b074:	db010e04 	addi	r12,sp,1080
 c00b078:	0025883a 	mov	r18,zero
 c00b07c:	db013115 	stw	r12,1220(sp)
 c00b080:	003bfb06 	br	c00a070 <__alt_data_end+0xfc00a070>
 c00b084:	b009883a 	mov	r4,r22
 c00b088:	b80b883a 	mov	r5,r23
 c00b08c:	d9811e04 	addi	r6,sp,1144
 c00b090:	c0106a40 	call	c0106a4 <__sprint_r>
 c00b094:	103b7e1e 	bne	r2,zero,c009e90 <__alt_data_end+0xfc009e90>
 c00b098:	d8c12017 	ldw	r3,1152(sp)
 c00b09c:	da000404 	addi	r8,sp,16
 c00b0a0:	003c5506 	br	c00a1f8 <__alt_data_end+0xfc00a1f8>
 c00b0a4:	04e7c83a 	sub	r19,zero,r19
 c00b0a8:	9804c03a 	cmpne	r2,r19,zero
 c00b0ac:	0739c83a 	sub	fp,zero,fp
 c00b0b0:	e0b9c83a 	sub	fp,fp,r2
 c00b0b4:	05400b44 	movi	r21,45
 c00b0b8:	dd412785 	stb	r21,1182(sp)
 c00b0bc:	da413215 	stw	r9,1224(sp)
 c00b0c0:	00800044 	movi	r2,1
 c00b0c4:	9f06b03a 	or	r3,r19,fp
 c00b0c8:	003bcf06 	br	c00a008 <__alt_data_end+0xfc00a008>
 c00b0cc:	da013f15 	stw	r8,1276(sp)
 c00b0d0:	da413e15 	stw	r9,1272(sp)
 c00b0d4:	c0100540 	call	c010054 <__fpclassifyd>
 c00b0d8:	da013f17 	ldw	r8,1276(sp)
 c00b0dc:	da413e17 	ldw	r9,1272(sp)
 c00b0e0:	1000ce26 	beq	r2,zero,c00b41c <___vfprintf_internal_r+0x19e8>
 c00b0e4:	057ff7c4 	movi	r21,-33
 c00b0e8:	00bfffc4 	movi	r2,-1
 c00b0ec:	856a703a 	and	r21,r16,r21
 c00b0f0:	4881f026 	beq	r9,r2,c00b8b4 <___vfprintf_internal_r+0x1e80>
 c00b0f4:	008011c4 	movi	r2,71
 c00b0f8:	a881e526 	beq	r21,r2,c00b890 <___vfprintf_internal_r+0x1e5c>
 c00b0fc:	db013917 	ldw	r12,1252(sp)
 c00b100:	8ac04014 	ori	r11,r17,256
 c00b104:	dac12d15 	stw	r11,1204(sp)
 c00b108:	6001e416 	blt	r12,zero,c00b89c <___vfprintf_internal_r+0x1e68>
 c00b10c:	dc813917 	ldw	r18,1252(sp)
 c00b110:	d8012b05 	stb	zero,1196(sp)
 c00b114:	00801984 	movi	r2,102
 c00b118:	80811826 	beq	r16,r2,c00b57c <___vfprintf_internal_r+0x1b48>
 c00b11c:	00801184 	movi	r2,70
 c00b120:	80811626 	beq	r16,r2,c00b57c <___vfprintf_internal_r+0x1b48>
 c00b124:	00801144 	movi	r2,69
 c00b128:	a881e026 	beq	r21,r2,c00b8ac <___vfprintf_internal_r+0x1e78>
 c00b12c:	4839883a 	mov	fp,r9
 c00b130:	d8812604 	addi	r2,sp,1176
 c00b134:	d8800115 	stw	r2,4(sp)
 c00b138:	d9413717 	ldw	r5,1244(sp)
 c00b13c:	d8812504 	addi	r2,sp,1172
 c00b140:	d8800215 	stw	r2,8(sp)
 c00b144:	d8812104 	addi	r2,sp,1156
 c00b148:	df000015 	stw	fp,0(sp)
 c00b14c:	d8800315 	stw	r2,12(sp)
 c00b150:	b009883a 	mov	r4,r22
 c00b154:	900d883a 	mov	r6,r18
 c00b158:	01c00084 	movi	r7,2
 c00b15c:	da013f15 	stw	r8,1276(sp)
 c00b160:	da413e15 	stw	r9,1272(sp)
 c00b164:	c00bd9c0 	call	c00bd9c <_dtoa_r>
 c00b168:	d8813115 	stw	r2,1220(sp)
 c00b16c:	008019c4 	movi	r2,103
 c00b170:	da013f17 	ldw	r8,1276(sp)
 c00b174:	da413e17 	ldw	r9,1272(sp)
 c00b178:	80800226 	beq	r16,r2,c00b184 <___vfprintf_internal_r+0x1750>
 c00b17c:	008011c4 	movi	r2,71
 c00b180:	8081101e 	bne	r16,r2,c00b5c4 <___vfprintf_internal_r+0x1b90>
 c00b184:	8880004c 	andi	r2,r17,1
 c00b188:	1001df26 	beq	r2,zero,c00b908 <___vfprintf_internal_r+0x1ed4>
 c00b18c:	db013117 	ldw	r12,1220(sp)
 c00b190:	6715883a 	add	r10,r12,fp
 c00b194:	d9013717 	ldw	r4,1244(sp)
 c00b198:	900b883a 	mov	r5,r18
 c00b19c:	000d883a 	mov	r6,zero
 c00b1a0:	000f883a 	mov	r7,zero
 c00b1a4:	da013f15 	stw	r8,1276(sp)
 c00b1a8:	da413e15 	stw	r9,1272(sp)
 c00b1ac:	da813d15 	stw	r10,1268(sp)
 c00b1b0:	c0137600 	call	c013760 <__eqdf2>
 c00b1b4:	da013f17 	ldw	r8,1276(sp)
 c00b1b8:	da413e17 	ldw	r9,1272(sp)
 c00b1bc:	da813d17 	ldw	r10,1268(sp)
 c00b1c0:	10016526 	beq	r2,zero,c00b758 <___vfprintf_internal_r+0x1d24>
 c00b1c4:	d8812117 	ldw	r2,1156(sp)
 c00b1c8:	1280062e 	bgeu	r2,r10,c00b1e4 <___vfprintf_internal_r+0x17b0>
 c00b1cc:	01000c04 	movi	r4,48
 c00b1d0:	10c00044 	addi	r3,r2,1
 c00b1d4:	d8c12115 	stw	r3,1156(sp)
 c00b1d8:	11000005 	stb	r4,0(r2)
 c00b1dc:	d8812117 	ldw	r2,1156(sp)
 c00b1e0:	12bffb36 	bltu	r2,r10,c00b1d0 <__alt_data_end+0xfc00b1d0>
 c00b1e4:	db013117 	ldw	r12,1220(sp)
 c00b1e8:	1305c83a 	sub	r2,r2,r12
 c00b1ec:	d8813315 	stw	r2,1228(sp)
 c00b1f0:	008011c4 	movi	r2,71
 c00b1f4:	a8814a26 	beq	r21,r2,c00b720 <___vfprintf_internal_r+0x1cec>
 c00b1f8:	00801944 	movi	r2,101
 c00b1fc:	14020a0e 	bge	r2,r16,c00ba28 <___vfprintf_internal_r+0x1ff4>
 c00b200:	00801984 	movi	r2,102
 c00b204:	8081b626 	beq	r16,r2,c00b8e0 <___vfprintf_internal_r+0x1eac>
 c00b208:	db012617 	ldw	r12,1176(sp)
 c00b20c:	db013415 	stw	r12,1232(sp)
 c00b210:	db013417 	ldw	r12,1232(sp)
 c00b214:	dac13317 	ldw	r11,1228(sp)
 c00b218:	62c1a816 	blt	r12,r11,c00b8bc <___vfprintf_internal_r+0x1e88>
 c00b21c:	8c40004c 	andi	r17,r17,1
 c00b220:	8801ca1e 	bne	r17,zero,c00b94c <___vfprintf_internal_r+0x1f18>
 c00b224:	6005883a 	mov	r2,r12
 c00b228:	6001b516 	blt	r12,zero,c00b900 <___vfprintf_internal_r+0x1ecc>
 c00b22c:	dc813417 	ldw	r18,1232(sp)
 c00b230:	df012b07 	ldb	fp,1196(sp)
 c00b234:	e001321e 	bne	fp,zero,c00b700 <___vfprintf_internal_r+0x1ccc>
 c00b238:	dc412d17 	ldw	r17,1204(sp)
 c00b23c:	dd412783 	ldbu	r21,1182(sp)
 c00b240:	d8812b15 	stw	r2,1196(sp)
 c00b244:	dcc12d15 	stw	r19,1204(sp)
 c00b248:	d8013215 	stw	zero,1224(sp)
 c00b24c:	003b8d06 	br	c00a084 <__alt_data_end+0xfc00a084>
 c00b250:	88c0100c 	andi	r3,r17,64
 c00b254:	18008226 	beq	r3,zero,c00b460 <___vfprintf_internal_r+0x1a2c>
 c00b258:	dac12d17 	ldw	r11,1204(sp)
 c00b25c:	14c0000b 	ldhu	r19,0(r2)
 c00b260:	0039883a 	mov	fp,zero
 c00b264:	5ac00104 	addi	r11,r11,4
 c00b268:	dac12d15 	stw	r11,1204(sp)
 c00b26c:	003c8f06 	br	c00a4ac <__alt_data_end+0xfc00a4ac>
 c00b270:	1c000007 	ldb	r16,0(r3)
 c00b274:	1805883a 	mov	r2,r3
 c00b278:	003a5506 	br	c009bd0 <__alt_data_end+0xfc009bd0>
 c00b27c:	00800084 	movi	r2,2
 c00b280:	003b5e06 	br	c009ffc <__alt_data_end+0xfc009ffc>
 c00b284:	8880040c 	andi	r2,r17,16
 c00b288:	1000091e 	bne	r2,zero,c00b2b0 <___vfprintf_internal_r+0x187c>
 c00b28c:	8c40100c 	andi	r17,r17,64
 c00b290:	88000726 	beq	r17,zero,c00b2b0 <___vfprintf_internal_r+0x187c>
 c00b294:	db012d17 	ldw	r12,1204(sp)
 c00b298:	dac12f17 	ldw	r11,1212(sp)
 c00b29c:	60800017 	ldw	r2,0(r12)
 c00b2a0:	63000104 	addi	r12,r12,4
 c00b2a4:	db012d15 	stw	r12,1204(sp)
 c00b2a8:	12c0000d 	sth	r11,0(r2)
 c00b2ac:	003a1e06 	br	c009b28 <__alt_data_end+0xfc009b28>
 c00b2b0:	db012d17 	ldw	r12,1204(sp)
 c00b2b4:	dac12f17 	ldw	r11,1212(sp)
 c00b2b8:	60800017 	ldw	r2,0(r12)
 c00b2bc:	63000104 	addi	r12,r12,4
 c00b2c0:	db012d15 	stw	r12,1204(sp)
 c00b2c4:	12c00015 	stw	r11,0(r2)
 c00b2c8:	003a1706 	br	c009b28 <__alt_data_end+0xfc009b28>
 c00b2cc:	010300b4 	movhi	r4,3074
 c00b2d0:	21094584 	addi	r4,r4,9494
 c00b2d4:	d9012c15 	stw	r4,1200(sp)
 c00b2d8:	dac12c17 	ldw	r11,1200(sp)
 c00b2dc:	1c87883a 	add	r3,r3,r18
 c00b2e0:	10800044 	addi	r2,r2,1
 c00b2e4:	42c00015 	stw	r11,0(r8)
 c00b2e8:	44800115 	stw	r18,4(r8)
 c00b2ec:	d8c12015 	stw	r3,1152(sp)
 c00b2f0:	d8811f15 	stw	r2,1148(sp)
 c00b2f4:	010001c4 	movi	r4,7
 c00b2f8:	20bee016 	blt	r4,r2,c00ae7c <__alt_data_end+0xfc00ae7c>
 c00b2fc:	42000204 	addi	r8,r8,8
 c00b300:	003ee506 	br	c00ae98 <__alt_data_end+0xfc00ae98>
 c00b304:	010300b4 	movhi	r4,3074
 c00b308:	21094584 	addi	r4,r4,9494
 c00b30c:	d9012c15 	stw	r4,1200(sp)
 c00b310:	003bd806 	br	c00a274 <__alt_data_end+0xfc00a274>
 c00b314:	b009883a 	mov	r4,r22
 c00b318:	b80b883a 	mov	r5,r23
 c00b31c:	d9811e04 	addi	r6,sp,1144
 c00b320:	c0106a40 	call	c0106a4 <__sprint_r>
 c00b324:	103ada1e 	bne	r2,zero,c009e90 <__alt_data_end+0xfc009e90>
 c00b328:	d8c12017 	ldw	r3,1152(sp)
 c00b32c:	da000404 	addi	r8,sp,16
 c00b330:	003d6b06 	br	c00a8e0 <__alt_data_end+0xfc00a8e0>
 c00b334:	d8811f17 	ldw	r2,1148(sp)
 c00b338:	030300b4 	movhi	r12,3074
 c00b33c:	01000044 	movi	r4,1
 c00b340:	18c00044 	addi	r3,r3,1
 c00b344:	10800044 	addi	r2,r2,1
 c00b348:	63094504 	addi	r12,r12,9492
 c00b34c:	41000115 	stw	r4,4(r8)
 c00b350:	43000015 	stw	r12,0(r8)
 c00b354:	d8c12015 	stw	r3,1152(sp)
 c00b358:	d8811f15 	stw	r2,1148(sp)
 c00b35c:	010001c4 	movi	r4,7
 c00b360:	20804916 	blt	r4,r2,c00b488 <___vfprintf_internal_r+0x1a54>
 c00b364:	42000204 	addi	r8,r8,8
 c00b368:	8000041e 	bne	r16,zero,c00b37c <___vfprintf_internal_r+0x1948>
 c00b36c:	dac13317 	ldw	r11,1228(sp)
 c00b370:	5800021e 	bne	r11,zero,c00b37c <___vfprintf_internal_r+0x1948>
 c00b374:	8880004c 	andi	r2,r17,1
 c00b378:	103bd526 	beq	r2,zero,c00a2d0 <__alt_data_end+0xfc00a2d0>
 c00b37c:	db013817 	ldw	r12,1248(sp)
 c00b380:	d8811f17 	ldw	r2,1148(sp)
 c00b384:	dac13517 	ldw	r11,1236(sp)
 c00b388:	1b07883a 	add	r3,r3,r12
 c00b38c:	10800044 	addi	r2,r2,1
 c00b390:	42c00015 	stw	r11,0(r8)
 c00b394:	43000115 	stw	r12,4(r8)
 c00b398:	d8c12015 	stw	r3,1152(sp)
 c00b39c:	d8811f15 	stw	r2,1148(sp)
 c00b3a0:	010001c4 	movi	r4,7
 c00b3a4:	20813016 	blt	r4,r2,c00b868 <___vfprintf_internal_r+0x1e34>
 c00b3a8:	42000204 	addi	r8,r8,8
 c00b3ac:	0421c83a 	sub	r16,zero,r16
 c00b3b0:	0400630e 	bge	zero,r16,c00b540 <___vfprintf_internal_r+0x1b0c>
 c00b3b4:	04800404 	movi	r18,16
 c00b3b8:	94009f0e 	bge	r18,r16,c00b638 <___vfprintf_internal_r+0x1c04>
 c00b3bc:	010300b4 	movhi	r4,3074
 c00b3c0:	21094584 	addi	r4,r4,9494
 c00b3c4:	d9012c15 	stw	r4,1200(sp)
 c00b3c8:	054001c4 	movi	r21,7
 c00b3cc:	00000306 	br	c00b3dc <___vfprintf_internal_r+0x19a8>
 c00b3d0:	42000204 	addi	r8,r8,8
 c00b3d4:	843ffc04 	addi	r16,r16,-16
 c00b3d8:	94009a0e 	bge	r18,r16,c00b644 <___vfprintf_internal_r+0x1c10>
 c00b3dc:	18c00404 	addi	r3,r3,16
 c00b3e0:	10800044 	addi	r2,r2,1
 c00b3e4:	45000015 	stw	r20,0(r8)
 c00b3e8:	44800115 	stw	r18,4(r8)
 c00b3ec:	d8c12015 	stw	r3,1152(sp)
 c00b3f0:	d8811f15 	stw	r2,1148(sp)
 c00b3f4:	a8bff60e 	bge	r21,r2,c00b3d0 <__alt_data_end+0xfc00b3d0>
 c00b3f8:	b009883a 	mov	r4,r22
 c00b3fc:	b80b883a 	mov	r5,r23
 c00b400:	d9811e04 	addi	r6,sp,1144
 c00b404:	c0106a40 	call	c0106a4 <__sprint_r>
 c00b408:	103aa11e 	bne	r2,zero,c009e90 <__alt_data_end+0xfc009e90>
 c00b40c:	d8c12017 	ldw	r3,1152(sp)
 c00b410:	d8811f17 	ldw	r2,1148(sp)
 c00b414:	da000404 	addi	r8,sp,16
 c00b418:	003fee06 	br	c00b3d4 <__alt_data_end+0xfc00b3d4>
 c00b41c:	008011c4 	movi	r2,71
 c00b420:	1400b316 	blt	r2,r16,c00b6f0 <___vfprintf_internal_r+0x1cbc>
 c00b424:	030300b4 	movhi	r12,3074
 c00b428:	63093704 	addi	r12,r12,9436
 c00b42c:	db013115 	stw	r12,1220(sp)
 c00b430:	00c000c4 	movi	r3,3
 c00b434:	00bfdfc4 	movi	r2,-129
 c00b438:	d8c12b15 	stw	r3,1196(sp)
 c00b43c:	88a2703a 	and	r17,r17,r2
 c00b440:	dd412783 	ldbu	r21,1182(sp)
 c00b444:	dcc12d15 	stw	r19,1204(sp)
 c00b448:	1825883a 	mov	r18,r3
 c00b44c:	d8013215 	stw	zero,1224(sp)
 c00b450:	d8013415 	stw	zero,1232(sp)
 c00b454:	003b0b06 	br	c00a084 <__alt_data_end+0xfc00a084>
 c00b458:	4825883a 	mov	r18,r9
 c00b45c:	003cba06 	br	c00a748 <__alt_data_end+0xfc00a748>
 c00b460:	db012d17 	ldw	r12,1204(sp)
 c00b464:	14c00017 	ldw	r19,0(r2)
 c00b468:	0039883a 	mov	fp,zero
 c00b46c:	63000104 	addi	r12,r12,4
 c00b470:	db012d15 	stw	r12,1204(sp)
 c00b474:	003c0d06 	br	c00a4ac <__alt_data_end+0xfc00a4ac>
 c00b478:	008300b4 	movhi	r2,3074
 c00b47c:	10893504 	addi	r2,r2,9428
 c00b480:	d8813115 	stw	r2,1220(sp)
 c00b484:	003ac406 	br	c009f98 <__alt_data_end+0xfc009f98>
 c00b488:	b009883a 	mov	r4,r22
 c00b48c:	b80b883a 	mov	r5,r23
 c00b490:	d9811e04 	addi	r6,sp,1144
 c00b494:	c0106a40 	call	c0106a4 <__sprint_r>
 c00b498:	103a7d1e 	bne	r2,zero,c009e90 <__alt_data_end+0xfc009e90>
 c00b49c:	dc012617 	ldw	r16,1176(sp)
 c00b4a0:	d8c12017 	ldw	r3,1152(sp)
 c00b4a4:	da000404 	addi	r8,sp,16
 c00b4a8:	003faf06 	br	c00b368 <__alt_data_end+0xfc00b368>
 c00b4ac:	db012e17 	ldw	r12,1208(sp)
 c00b4b0:	1805883a 	mov	r2,r3
 c00b4b4:	dac12d15 	stw	r11,1204(sp)
 c00b4b8:	0319c83a 	sub	r12,zero,r12
 c00b4bc:	db012e15 	stw	r12,1208(sp)
 c00b4c0:	003a7e06 	br	c009ebc <__alt_data_end+0xfc009ebc>
 c00b4c4:	18800044 	addi	r2,r3,1
 c00b4c8:	8c400814 	ori	r17,r17,32
 c00b4cc:	1c000047 	ldb	r16,1(r3)
 c00b4d0:	0039bf06 	br	c009bd0 <__alt_data_end+0xfc009bd0>
 c00b4d4:	b009883a 	mov	r4,r22
 c00b4d8:	b80b883a 	mov	r5,r23
 c00b4dc:	d9811e04 	addi	r6,sp,1144
 c00b4e0:	c0106a40 	call	c0106a4 <__sprint_r>
 c00b4e4:	103a6a1e 	bne	r2,zero,c009e90 <__alt_data_end+0xfc009e90>
 c00b4e8:	d8c12017 	ldw	r3,1152(sp)
 c00b4ec:	da000404 	addi	r8,sp,16
 c00b4f0:	003d0c06 	br	c00a924 <__alt_data_end+0xfc00a924>
 c00b4f4:	db012817 	ldw	r12,1184(sp)
 c00b4f8:	d8c13117 	ldw	r3,1220(sp)
 c00b4fc:	60e5c83a 	sub	r18,r12,r3
 c00b500:	003adb06 	br	c00a070 <__alt_data_end+0xfc00a070>
 c00b504:	da013f15 	stw	r8,1276(sp)
 c00b508:	c0099800 	call	c009980 <strlen>
 c00b50c:	1025883a 	mov	r18,r2
 c00b510:	da013f17 	ldw	r8,1276(sp)
 c00b514:	903c8e0e 	bge	r18,zero,c00a750 <__alt_data_end+0xfc00a750>
 c00b518:	0005883a 	mov	r2,zero
 c00b51c:	003c8c06 	br	c00a750 <__alt_data_end+0xfc00a750>
 c00b520:	b009883a 	mov	r4,r22
 c00b524:	b80b883a 	mov	r5,r23
 c00b528:	d9811e04 	addi	r6,sp,1144
 c00b52c:	c0106a40 	call	c0106a4 <__sprint_r>
 c00b530:	103a571e 	bne	r2,zero,c009e90 <__alt_data_end+0xfc009e90>
 c00b534:	d8c12017 	ldw	r3,1152(sp)
 c00b538:	d8811f17 	ldw	r2,1148(sp)
 c00b53c:	da000404 	addi	r8,sp,16
 c00b540:	db013317 	ldw	r12,1228(sp)
 c00b544:	dac13117 	ldw	r11,1220(sp)
 c00b548:	10800044 	addi	r2,r2,1
 c00b54c:	60c7883a 	add	r3,r12,r3
 c00b550:	42c00015 	stw	r11,0(r8)
 c00b554:	43000115 	stw	r12,4(r8)
 c00b558:	d8c12015 	stw	r3,1152(sp)
 c00b55c:	d8811f15 	stw	r2,1148(sp)
 c00b560:	010001c4 	movi	r4,7
 c00b564:	20bb590e 	bge	r4,r2,c00a2cc <__alt_data_end+0xfc00a2cc>
 c00b568:	003d7e06 	br	c00ab64 <__alt_data_end+0xfc00ab64>
 c00b56c:	010300b4 	movhi	r4,3074
 c00b570:	21094984 	addi	r4,r4,9510
 c00b574:	d9013615 	stw	r4,1240(sp)
 c00b578:	003af606 	br	c00a154 <__alt_data_end+0xfc00a154>
 c00b57c:	d8812604 	addi	r2,sp,1176
 c00b580:	d8800115 	stw	r2,4(sp)
 c00b584:	d9413717 	ldw	r5,1244(sp)
 c00b588:	d8812504 	addi	r2,sp,1172
 c00b58c:	d8800215 	stw	r2,8(sp)
 c00b590:	d8812104 	addi	r2,sp,1156
 c00b594:	da400015 	stw	r9,0(sp)
 c00b598:	d8800315 	stw	r2,12(sp)
 c00b59c:	b009883a 	mov	r4,r22
 c00b5a0:	900d883a 	mov	r6,r18
 c00b5a4:	01c000c4 	movi	r7,3
 c00b5a8:	da013f15 	stw	r8,1276(sp)
 c00b5ac:	da413e15 	stw	r9,1272(sp)
 c00b5b0:	c00bd9c0 	call	c00bd9c <_dtoa_r>
 c00b5b4:	da413e17 	ldw	r9,1272(sp)
 c00b5b8:	da013f17 	ldw	r8,1276(sp)
 c00b5bc:	d8813115 	stw	r2,1220(sp)
 c00b5c0:	4839883a 	mov	fp,r9
 c00b5c4:	dac13117 	ldw	r11,1220(sp)
 c00b5c8:	00801184 	movi	r2,70
 c00b5cc:	5f15883a 	add	r10,r11,fp
 c00b5d0:	a8bef01e 	bne	r21,r2,c00b194 <__alt_data_end+0xfc00b194>
 c00b5d4:	59000007 	ldb	r4,0(r11)
 c00b5d8:	00800c04 	movi	r2,48
 c00b5dc:	2080e026 	beq	r4,r2,c00b960 <___vfprintf_internal_r+0x1f2c>
 c00b5e0:	d8c12617 	ldw	r3,1176(sp)
 c00b5e4:	50d5883a 	add	r10,r10,r3
 c00b5e8:	003eea06 	br	c00b194 <__alt_data_end+0xfc00b194>
 c00b5ec:	0025883a 	mov	r18,zero
 c00b5f0:	003db306 	br	c00acc0 <__alt_data_end+0xfc00acc0>
 c00b5f4:	b009883a 	mov	r4,r22
 c00b5f8:	b80b883a 	mov	r5,r23
 c00b5fc:	d9811e04 	addi	r6,sp,1144
 c00b600:	c0106a40 	call	c0106a4 <__sprint_r>
 c00b604:	103a221e 	bne	r2,zero,c009e90 <__alt_data_end+0xfc009e90>
 c00b608:	d8c12017 	ldw	r3,1152(sp)
 c00b60c:	da000404 	addi	r8,sp,16
 c00b610:	003daa06 	br	c00acbc <__alt_data_end+0xfc00acbc>
 c00b614:	b009883a 	mov	r4,r22
 c00b618:	b80b883a 	mov	r5,r23
 c00b61c:	d9811e04 	addi	r6,sp,1144
 c00b620:	c0106a40 	call	c0106a4 <__sprint_r>
 c00b624:	103a1a1e 	bne	r2,zero,c009e90 <__alt_data_end+0xfc009e90>
 c00b628:	d8812617 	ldw	r2,1176(sp)
 c00b62c:	d8c12017 	ldw	r3,1152(sp)
 c00b630:	da000404 	addi	r8,sp,16
 c00b634:	003e2c06 	br	c00aee8 <__alt_data_end+0xfc00aee8>
 c00b638:	030300b4 	movhi	r12,3074
 c00b63c:	63094584 	addi	r12,r12,9494
 c00b640:	db012c15 	stw	r12,1200(sp)
 c00b644:	dac12c17 	ldw	r11,1200(sp)
 c00b648:	1c07883a 	add	r3,r3,r16
 c00b64c:	10800044 	addi	r2,r2,1
 c00b650:	42c00015 	stw	r11,0(r8)
 c00b654:	44000115 	stw	r16,4(r8)
 c00b658:	d8c12015 	stw	r3,1152(sp)
 c00b65c:	d8811f15 	stw	r2,1148(sp)
 c00b660:	010001c4 	movi	r4,7
 c00b664:	20bfae16 	blt	r4,r2,c00b520 <__alt_data_end+0xfc00b520>
 c00b668:	42000204 	addi	r8,r8,8
 c00b66c:	003fb406 	br	c00b540 <__alt_data_end+0xfc00b540>
 c00b670:	030300b4 	movhi	r12,3074
 c00b674:	63094984 	addi	r12,r12,9510
 c00b678:	db013615 	stw	r12,1240(sp)
 c00b67c:	003b3806 	br	c00a360 <__alt_data_end+0xfc00a360>
 c00b680:	b009883a 	mov	r4,r22
 c00b684:	b80b883a 	mov	r5,r23
 c00b688:	d9811e04 	addi	r6,sp,1144
 c00b68c:	c0106a40 	call	c0106a4 <__sprint_r>
 c00b690:	1039ff1e 	bne	r2,zero,c009e90 <__alt_data_end+0xfc009e90>
 c00b694:	d8812617 	ldw	r2,1176(sp)
 c00b698:	db013317 	ldw	r12,1228(sp)
 c00b69c:	d8c12017 	ldw	r3,1152(sp)
 c00b6a0:	da000404 	addi	r8,sp,16
 c00b6a4:	6085c83a 	sub	r2,r12,r2
 c00b6a8:	003e2006 	br	c00af2c <__alt_data_end+0xfc00af2c>
 c00b6ac:	0021883a 	mov	r16,zero
 c00b6b0:	003e1f06 	br	c00af30 <__alt_data_end+0xfc00af30>
 c00b6b4:	00800184 	movi	r2,6
 c00b6b8:	1240012e 	bgeu	r2,r9,c00b6c0 <___vfprintf_internal_r+0x1c8c>
 c00b6bc:	1013883a 	mov	r9,r2
 c00b6c0:	4825883a 	mov	r18,r9
 c00b6c4:	4805883a 	mov	r2,r9
 c00b6c8:	48009e16 	blt	r9,zero,c00b944 <___vfprintf_internal_r+0x1f10>
 c00b6cc:	d8812b15 	stw	r2,1196(sp)
 c00b6d0:	008300b4 	movhi	r2,3074
 c00b6d4:	10894304 	addi	r2,r2,9484
 c00b6d8:	d8813115 	stw	r2,1220(sp)
 c00b6dc:	dcc12d15 	stw	r19,1204(sp)
 c00b6e0:	d8013215 	stw	zero,1224(sp)
 c00b6e4:	d8013415 	stw	zero,1232(sp)
 c00b6e8:	0005883a 	mov	r2,zero
 c00b6ec:	003a6c06 	br	c00a0a0 <__alt_data_end+0xfc00a0a0>
 c00b6f0:	008300b4 	movhi	r2,3074
 c00b6f4:	10893804 	addi	r2,r2,9440
 c00b6f8:	d8813115 	stw	r2,1220(sp)
 c00b6fc:	003f4c06 	br	c00b430 <__alt_data_end+0xfc00b430>
 c00b700:	00c00b44 	movi	r3,45
 c00b704:	d8812b15 	stw	r2,1196(sp)
 c00b708:	dc412d17 	ldw	r17,1204(sp)
 c00b70c:	d8c12785 	stb	r3,1182(sp)
 c00b710:	dcc12d15 	stw	r19,1204(sp)
 c00b714:	d8013215 	stw	zero,1224(sp)
 c00b718:	00800b44 	movi	r2,45
 c00b71c:	003a5d06 	br	c00a094 <__alt_data_end+0xfc00a094>
 c00b720:	d8c12617 	ldw	r3,1176(sp)
 c00b724:	00bfff44 	movi	r2,-3
 c00b728:	18800d16 	blt	r3,r2,c00b760 <___vfprintf_internal_r+0x1d2c>
 c00b72c:	48c00c16 	blt	r9,r3,c00b760 <___vfprintf_internal_r+0x1d2c>
 c00b730:	d8c13415 	stw	r3,1232(sp)
 c00b734:	040019c4 	movi	r16,103
 c00b738:	003eb506 	br	c00b210 <__alt_data_end+0xfc00b210>
 c00b73c:	05400b44 	movi	r21,45
 c00b740:	dd412785 	stb	r21,1182(sp)
 c00b744:	003a0f06 	br	c009f84 <__alt_data_end+0xfc009f84>
 c00b748:	010300b4 	movhi	r4,3074
 c00b74c:	21094584 	addi	r4,r4,9494
 c00b750:	d9012c15 	stw	r4,1200(sp)
 c00b754:	003cb106 	br	c00aa1c <__alt_data_end+0xfc00aa1c>
 c00b758:	5005883a 	mov	r2,r10
 c00b75c:	003ea106 	br	c00b1e4 <__alt_data_end+0xfc00b1e4>
 c00b760:	843fff84 	addi	r16,r16,-2
 c00b764:	1f3fffc4 	addi	fp,r3,-1
 c00b768:	df012615 	stw	fp,1176(sp)
 c00b76c:	dc0122c5 	stb	r16,1163(sp)
 c00b770:	e0009516 	blt	fp,zero,c00b9c8 <___vfprintf_internal_r+0x1f94>
 c00b774:	00800ac4 	movi	r2,43
 c00b778:	d8812305 	stb	r2,1164(sp)
 c00b77c:	00800244 	movi	r2,9
 c00b780:	1700690e 	bge	r2,fp,c00b928 <___vfprintf_internal_r+0x1ef4>
 c00b784:	dd4122c4 	addi	r21,sp,1163
 c00b788:	dc012c15 	stw	r16,1200(sp)
 c00b78c:	8825883a 	mov	r18,r17
 c00b790:	a821883a 	mov	r16,r21
 c00b794:	4023883a 	mov	r17,r8
 c00b798:	e009883a 	mov	r4,fp
 c00b79c:	01400284 	movi	r5,10
 c00b7a0:	c008c6c0 	call	c008c6c <__modsi3>
 c00b7a4:	10800c04 	addi	r2,r2,48
 c00b7a8:	843fffc4 	addi	r16,r16,-1
 c00b7ac:	e009883a 	mov	r4,fp
 c00b7b0:	01400284 	movi	r5,10
 c00b7b4:	80800005 	stb	r2,0(r16)
 c00b7b8:	c008c180 	call	c008c18 <__divsi3>
 c00b7bc:	1039883a 	mov	fp,r2
 c00b7c0:	00800244 	movi	r2,9
 c00b7c4:	173ff416 	blt	r2,fp,c00b798 <__alt_data_end+0xfc00b798>
 c00b7c8:	8811883a 	mov	r8,r17
 c00b7cc:	e0800c04 	addi	r2,fp,48
 c00b7d0:	9023883a 	mov	r17,r18
 c00b7d4:	8025883a 	mov	r18,r16
 c00b7d8:	913fffc4 	addi	r4,r18,-1
 c00b7dc:	90bfffc5 	stb	r2,-1(r18)
 c00b7e0:	dc012c17 	ldw	r16,1200(sp)
 c00b7e4:	25408e2e 	bgeu	r4,r21,c00ba20 <___vfprintf_internal_r+0x1fec>
 c00b7e8:	d9412384 	addi	r5,sp,1166
 c00b7ec:	2c8bc83a 	sub	r5,r5,r18
 c00b7f0:	d8c12344 	addi	r3,sp,1165
 c00b7f4:	a94b883a 	add	r5,r21,r5
 c00b7f8:	00000106 	br	c00b800 <___vfprintf_internal_r+0x1dcc>
 c00b7fc:	20800003 	ldbu	r2,0(r4)
 c00b800:	18800005 	stb	r2,0(r3)
 c00b804:	18c00044 	addi	r3,r3,1
 c00b808:	21000044 	addi	r4,r4,1
 c00b80c:	197ffb1e 	bne	r3,r5,c00b7fc <__alt_data_end+0xfc00b7fc>
 c00b810:	d8812304 	addi	r2,sp,1164
 c00b814:	1485c83a 	sub	r2,r2,r18
 c00b818:	d8c12344 	addi	r3,sp,1165
 c00b81c:	1885883a 	add	r2,r3,r2
 c00b820:	dac13317 	ldw	r11,1228(sp)
 c00b824:	156bc83a 	sub	r21,r2,r21
 c00b828:	dd413a15 	stw	r21,1256(sp)
 c00b82c:	00800044 	movi	r2,1
 c00b830:	5d65883a 	add	r18,r11,r21
 c00b834:	12c0770e 	bge	r2,r11,c00ba14 <___vfprintf_internal_r+0x1fe0>
 c00b838:	94800044 	addi	r18,r18,1
 c00b83c:	9005883a 	mov	r2,r18
 c00b840:	90007216 	blt	r18,zero,c00ba0c <___vfprintf_internal_r+0x1fd8>
 c00b844:	d8013415 	stw	zero,1232(sp)
 c00b848:	003e7906 	br	c00b230 <__alt_data_end+0xfc00b230>
 c00b84c:	da412b15 	stw	r9,1196(sp)
 c00b850:	dd412783 	ldbu	r21,1182(sp)
 c00b854:	4825883a 	mov	r18,r9
 c00b858:	dcc12d15 	stw	r19,1204(sp)
 c00b85c:	d8013215 	stw	zero,1224(sp)
 c00b860:	d8013415 	stw	zero,1232(sp)
 c00b864:	003a0706 	br	c00a084 <__alt_data_end+0xfc00a084>
 c00b868:	b009883a 	mov	r4,r22
 c00b86c:	b80b883a 	mov	r5,r23
 c00b870:	d9811e04 	addi	r6,sp,1144
 c00b874:	c0106a40 	call	c0106a4 <__sprint_r>
 c00b878:	1039851e 	bne	r2,zero,c009e90 <__alt_data_end+0xfc009e90>
 c00b87c:	dc012617 	ldw	r16,1176(sp)
 c00b880:	d8c12017 	ldw	r3,1152(sp)
 c00b884:	d8811f17 	ldw	r2,1148(sp)
 c00b888:	da000404 	addi	r8,sp,16
 c00b88c:	003ec706 	br	c00b3ac <__alt_data_end+0xfc00b3ac>
 c00b890:	483e1a1e 	bne	r9,zero,c00b0fc <__alt_data_end+0xfc00b0fc>
 c00b894:	9013883a 	mov	r9,r18
 c00b898:	003e1806 	br	c00b0fc <__alt_data_end+0xfc00b0fc>
 c00b89c:	00c00b44 	movi	r3,45
 c00b8a0:	64a0003c 	xorhi	r18,r12,32768
 c00b8a4:	d8c12b05 	stb	r3,1196(sp)
 c00b8a8:	003e1a06 	br	c00b114 <__alt_data_end+0xfc00b114>
 c00b8ac:	4f000044 	addi	fp,r9,1
 c00b8b0:	003e1f06 	br	c00b130 <__alt_data_end+0xfc00b130>
 c00b8b4:	02400184 	movi	r9,6
 c00b8b8:	003e1006 	br	c00b0fc <__alt_data_end+0xfc00b0fc>
 c00b8bc:	d8c13417 	ldw	r3,1232(sp)
 c00b8c0:	00c04b0e 	bge	zero,r3,c00b9f0 <___vfprintf_internal_r+0x1fbc>
 c00b8c4:	04800044 	movi	r18,1
 c00b8c8:	dac13317 	ldw	r11,1228(sp)
 c00b8cc:	92e5883a 	add	r18,r18,r11
 c00b8d0:	9005883a 	mov	r2,r18
 c00b8d4:	903e560e 	bge	r18,zero,c00b230 <__alt_data_end+0xfc00b230>
 c00b8d8:	0005883a 	mov	r2,zero
 c00b8dc:	003e5406 	br	c00b230 <__alt_data_end+0xfc00b230>
 c00b8e0:	d8c12617 	ldw	r3,1176(sp)
 c00b8e4:	d8c13415 	stw	r3,1232(sp)
 c00b8e8:	00c03b0e 	bge	zero,r3,c00b9d8 <___vfprintf_internal_r+0x1fa4>
 c00b8ec:	4800081e 	bne	r9,zero,c00b910 <___vfprintf_internal_r+0x1edc>
 c00b8f0:	8c40004c 	andi	r17,r17,1
 c00b8f4:	8800061e 	bne	r17,zero,c00b910 <___vfprintf_internal_r+0x1edc>
 c00b8f8:	1805883a 	mov	r2,r3
 c00b8fc:	183e4b0e 	bge	r3,zero,c00b22c <__alt_data_end+0xfc00b22c>
 c00b900:	0005883a 	mov	r2,zero
 c00b904:	003e4906 	br	c00b22c <__alt_data_end+0xfc00b22c>
 c00b908:	d8812117 	ldw	r2,1156(sp)
 c00b90c:	003e3506 	br	c00b1e4 <__alt_data_end+0xfc00b1e4>
 c00b910:	dac13417 	ldw	r11,1232(sp)
 c00b914:	4a400044 	addi	r9,r9,1
 c00b918:	5a65883a 	add	r18,r11,r9
 c00b91c:	9005883a 	mov	r2,r18
 c00b920:	903e430e 	bge	r18,zero,c00b230 <__alt_data_end+0xfc00b230>
 c00b924:	003fec06 	br	c00b8d8 <__alt_data_end+0xfc00b8d8>
 c00b928:	00800c04 	movi	r2,48
 c00b92c:	e0c00c04 	addi	r3,fp,48
 c00b930:	d8812345 	stb	r2,1165(sp)
 c00b934:	d8c12385 	stb	r3,1166(sp)
 c00b938:	d88123c4 	addi	r2,sp,1167
 c00b93c:	dd4122c4 	addi	r21,sp,1163
 c00b940:	003fb706 	br	c00b820 <__alt_data_end+0xfc00b820>
 c00b944:	0005883a 	mov	r2,zero
 c00b948:	003f6006 	br	c00b6cc <__alt_data_end+0xfc00b6cc>
 c00b94c:	db013417 	ldw	r12,1232(sp)
 c00b950:	64800044 	addi	r18,r12,1
 c00b954:	9005883a 	mov	r2,r18
 c00b958:	903e350e 	bge	r18,zero,c00b230 <__alt_data_end+0xfc00b230>
 c00b95c:	003fde06 	br	c00b8d8 <__alt_data_end+0xfc00b8d8>
 c00b960:	d9013717 	ldw	r4,1244(sp)
 c00b964:	900b883a 	mov	r5,r18
 c00b968:	000d883a 	mov	r6,zero
 c00b96c:	000f883a 	mov	r7,zero
 c00b970:	da013f15 	stw	r8,1276(sp)
 c00b974:	da413e15 	stw	r9,1272(sp)
 c00b978:	da813d15 	stw	r10,1268(sp)
 c00b97c:	c0137600 	call	c013760 <__eqdf2>
 c00b980:	da013f17 	ldw	r8,1276(sp)
 c00b984:	da413e17 	ldw	r9,1272(sp)
 c00b988:	da813d17 	ldw	r10,1268(sp)
 c00b98c:	103f1426 	beq	r2,zero,c00b5e0 <__alt_data_end+0xfc00b5e0>
 c00b990:	00800044 	movi	r2,1
 c00b994:	1707c83a 	sub	r3,r2,fp
 c00b998:	d8c12615 	stw	r3,1176(sp)
 c00b99c:	003f1106 	br	c00b5e4 <__alt_data_end+0xfc00b5e4>
 c00b9a0:	dac12d17 	ldw	r11,1204(sp)
 c00b9a4:	5a400017 	ldw	r9,0(r11)
 c00b9a8:	5ac00104 	addi	r11,r11,4
 c00b9ac:	dac12d15 	stw	r11,1204(sp)
 c00b9b0:	483ec60e 	bge	r9,zero,c00b4cc <__alt_data_end+0xfc00b4cc>
 c00b9b4:	027fffc4 	movi	r9,-1
 c00b9b8:	1c000047 	ldb	r16,1(r3)
 c00b9bc:	00388406 	br	c009bd0 <__alt_data_end+0xfc009bd0>
 c00b9c0:	043fffc4 	movi	r16,-1
 c00b9c4:	00391006 	br	c009e08 <__alt_data_end+0xfc009e08>
 c00b9c8:	00800b44 	movi	r2,45
 c00b9cc:	0739c83a 	sub	fp,zero,fp
 c00b9d0:	d8812305 	stb	r2,1164(sp)
 c00b9d4:	003f6906 	br	c00b77c <__alt_data_end+0xfc00b77c>
 c00b9d8:	4800081e 	bne	r9,zero,c00b9fc <___vfprintf_internal_r+0x1fc8>
 c00b9dc:	8c40004c 	andi	r17,r17,1
 c00b9e0:	8800061e 	bne	r17,zero,c00b9fc <___vfprintf_internal_r+0x1fc8>
 c00b9e4:	00800044 	movi	r2,1
 c00b9e8:	1025883a 	mov	r18,r2
 c00b9ec:	003e1006 	br	c00b230 <__alt_data_end+0xfc00b230>
 c00b9f0:	04800084 	movi	r18,2
 c00b9f4:	90e5c83a 	sub	r18,r18,r3
 c00b9f8:	003fb306 	br	c00b8c8 <__alt_data_end+0xfc00b8c8>
 c00b9fc:	4c800084 	addi	r18,r9,2
 c00ba00:	9005883a 	mov	r2,r18
 c00ba04:	903e0a0e 	bge	r18,zero,c00b230 <__alt_data_end+0xfc00b230>
 c00ba08:	003fb306 	br	c00b8d8 <__alt_data_end+0xfc00b8d8>
 c00ba0c:	0005883a 	mov	r2,zero
 c00ba10:	003f8c06 	br	c00b844 <__alt_data_end+0xfc00b844>
 c00ba14:	88a2703a 	and	r17,r17,r2
 c00ba18:	883f8826 	beq	r17,zero,c00b83c <__alt_data_end+0xfc00b83c>
 c00ba1c:	003f8606 	br	c00b838 <__alt_data_end+0xfc00b838>
 c00ba20:	d8812344 	addi	r2,sp,1165
 c00ba24:	003f7e06 	br	c00b820 <__alt_data_end+0xfc00b820>
 c00ba28:	d8c12617 	ldw	r3,1176(sp)
 c00ba2c:	003f4d06 	br	c00b764 <__alt_data_end+0xfc00b764>

0c00ba30 <__vfprintf_internal>:
 c00ba30:	2007883a 	mov	r3,r4
 c00ba34:	010300b4 	movhi	r4,3074
 c00ba38:	21107604 	addi	r4,r4,16856
 c00ba3c:	21000017 	ldw	r4,0(r4)
 c00ba40:	2805883a 	mov	r2,r5
 c00ba44:	300f883a 	mov	r7,r6
 c00ba48:	180b883a 	mov	r5,r3
 c00ba4c:	100d883a 	mov	r6,r2
 c00ba50:	c009a341 	jmpi	c009a34 <___vfprintf_internal_r>

0c00ba54 <__swsetup_r>:
 c00ba54:	008300b4 	movhi	r2,3074
 c00ba58:	defffd04 	addi	sp,sp,-12
 c00ba5c:	10907604 	addi	r2,r2,16856
 c00ba60:	dc400115 	stw	r17,4(sp)
 c00ba64:	2023883a 	mov	r17,r4
 c00ba68:	11000017 	ldw	r4,0(r2)
 c00ba6c:	dc000015 	stw	r16,0(sp)
 c00ba70:	dfc00215 	stw	ra,8(sp)
 c00ba74:	2821883a 	mov	r16,r5
 c00ba78:	20000226 	beq	r4,zero,c00ba84 <__swsetup_r+0x30>
 c00ba7c:	20c00e17 	ldw	r3,56(r4)
 c00ba80:	18002e26 	beq	r3,zero,c00bb3c <__swsetup_r+0xe8>
 c00ba84:	8080030b 	ldhu	r2,12(r16)
 c00ba88:	10c0020c 	andi	r3,r2,8
 c00ba8c:	100d883a 	mov	r6,r2
 c00ba90:	18000f26 	beq	r3,zero,c00bad0 <__swsetup_r+0x7c>
 c00ba94:	80c00417 	ldw	r3,16(r16)
 c00ba98:	18001526 	beq	r3,zero,c00baf0 <__swsetup_r+0x9c>
 c00ba9c:	1100004c 	andi	r4,r2,1
 c00baa0:	20001c1e 	bne	r4,zero,c00bb14 <__swsetup_r+0xc0>
 c00baa4:	1080008c 	andi	r2,r2,2
 c00baa8:	1000261e 	bne	r2,zero,c00bb44 <__swsetup_r+0xf0>
 c00baac:	80800517 	ldw	r2,20(r16)
 c00bab0:	80800215 	stw	r2,8(r16)
 c00bab4:	18001c26 	beq	r3,zero,c00bb28 <__swsetup_r+0xd4>
 c00bab8:	0005883a 	mov	r2,zero
 c00babc:	dfc00217 	ldw	ra,8(sp)
 c00bac0:	dc400117 	ldw	r17,4(sp)
 c00bac4:	dc000017 	ldw	r16,0(sp)
 c00bac8:	dec00304 	addi	sp,sp,12
 c00bacc:	f800283a 	ret
 c00bad0:	3080040c 	andi	r2,r6,16
 c00bad4:	10001726 	beq	r2,zero,c00bb34 <__swsetup_r+0xe0>
 c00bad8:	3080010c 	andi	r2,r6,4
 c00badc:	10001b1e 	bne	r2,zero,c00bb4c <__swsetup_r+0xf8>
 c00bae0:	80c00417 	ldw	r3,16(r16)
 c00bae4:	30800214 	ori	r2,r6,8
 c00bae8:	8080030d 	sth	r2,12(r16)
 c00baec:	183feb1e 	bne	r3,zero,c00ba9c <__alt_data_end+0xfc00ba9c>
 c00baf0:	1140a00c 	andi	r5,r2,640
 c00baf4:	01008004 	movi	r4,512
 c00baf8:	293fe826 	beq	r5,r4,c00ba9c <__alt_data_end+0xfc00ba9c>
 c00bafc:	8809883a 	mov	r4,r17
 c00bb00:	800b883a 	mov	r5,r16
 c00bb04:	c00e5c40 	call	c00e5c4 <__smakebuf_r>
 c00bb08:	8080030b 	ldhu	r2,12(r16)
 c00bb0c:	80c00417 	ldw	r3,16(r16)
 c00bb10:	003fe206 	br	c00ba9c <__alt_data_end+0xfc00ba9c>
 c00bb14:	80800517 	ldw	r2,20(r16)
 c00bb18:	80000215 	stw	zero,8(r16)
 c00bb1c:	0085c83a 	sub	r2,zero,r2
 c00bb20:	80800615 	stw	r2,24(r16)
 c00bb24:	183fe41e 	bne	r3,zero,c00bab8 <__alt_data_end+0xfc00bab8>
 c00bb28:	8080030b 	ldhu	r2,12(r16)
 c00bb2c:	1080200c 	andi	r2,r2,128
 c00bb30:	103fe226 	beq	r2,zero,c00babc <__alt_data_end+0xfc00babc>
 c00bb34:	00bfffc4 	movi	r2,-1
 c00bb38:	003fe006 	br	c00babc <__alt_data_end+0xfc00babc>
 c00bb3c:	c00da6c0 	call	c00da6c <__sinit>
 c00bb40:	003fd006 	br	c00ba84 <__alt_data_end+0xfc00ba84>
 c00bb44:	0005883a 	mov	r2,zero
 c00bb48:	003fd906 	br	c00bab0 <__alt_data_end+0xfc00bab0>
 c00bb4c:	81400c17 	ldw	r5,48(r16)
 c00bb50:	28000626 	beq	r5,zero,c00bb6c <__swsetup_r+0x118>
 c00bb54:	80801004 	addi	r2,r16,64
 c00bb58:	28800326 	beq	r5,r2,c00bb68 <__swsetup_r+0x114>
 c00bb5c:	8809883a 	mov	r4,r17
 c00bb60:	c00dbe00 	call	c00dbe0 <_free_r>
 c00bb64:	8180030b 	ldhu	r6,12(r16)
 c00bb68:	80000c15 	stw	zero,48(r16)
 c00bb6c:	80c00417 	ldw	r3,16(r16)
 c00bb70:	00bff6c4 	movi	r2,-37
 c00bb74:	118c703a 	and	r6,r2,r6
 c00bb78:	80000115 	stw	zero,4(r16)
 c00bb7c:	80c00015 	stw	r3,0(r16)
 c00bb80:	003fd806 	br	c00bae4 <__alt_data_end+0xfc00bae4>

0c00bb84 <abort>:
 c00bb84:	deffff04 	addi	sp,sp,-4
 c00bb88:	01000184 	movi	r4,6
 c00bb8c:	dfc00015 	stw	ra,0(sp)
 c00bb90:	c0103180 	call	c010318 <raise>
 c00bb94:	01000044 	movi	r4,1
 c00bb98:	c014b880 	call	c014b88 <_exit>

0c00bb9c <quorem>:
 c00bb9c:	defff704 	addi	sp,sp,-36
 c00bba0:	dc800215 	stw	r18,8(sp)
 c00bba4:	20800417 	ldw	r2,16(r4)
 c00bba8:	2c800417 	ldw	r18,16(r5)
 c00bbac:	dfc00815 	stw	ra,32(sp)
 c00bbb0:	ddc00715 	stw	r23,28(sp)
 c00bbb4:	dd800615 	stw	r22,24(sp)
 c00bbb8:	dd400515 	stw	r21,20(sp)
 c00bbbc:	dd000415 	stw	r20,16(sp)
 c00bbc0:	dcc00315 	stw	r19,12(sp)
 c00bbc4:	dc400115 	stw	r17,4(sp)
 c00bbc8:	dc000015 	stw	r16,0(sp)
 c00bbcc:	14807116 	blt	r2,r18,c00bd94 <quorem+0x1f8>
 c00bbd0:	94bfffc4 	addi	r18,r18,-1
 c00bbd4:	94ad883a 	add	r22,r18,r18
 c00bbd8:	b5ad883a 	add	r22,r22,r22
 c00bbdc:	2c400504 	addi	r17,r5,20
 c00bbe0:	8da9883a 	add	r20,r17,r22
 c00bbe4:	25400504 	addi	r21,r4,20
 c00bbe8:	282f883a 	mov	r23,r5
 c00bbec:	adad883a 	add	r22,r21,r22
 c00bbf0:	a1400017 	ldw	r5,0(r20)
 c00bbf4:	2021883a 	mov	r16,r4
 c00bbf8:	b1000017 	ldw	r4,0(r22)
 c00bbfc:	29400044 	addi	r5,r5,1
 c00bc00:	c008cc80 	call	c008cc8 <__udivsi3>
 c00bc04:	1027883a 	mov	r19,r2
 c00bc08:	10002c26 	beq	r2,zero,c00bcbc <quorem+0x120>
 c00bc0c:	a813883a 	mov	r9,r21
 c00bc10:	8811883a 	mov	r8,r17
 c00bc14:	0009883a 	mov	r4,zero
 c00bc18:	000d883a 	mov	r6,zero
 c00bc1c:	41c00017 	ldw	r7,0(r8)
 c00bc20:	49400017 	ldw	r5,0(r9)
 c00bc24:	42000104 	addi	r8,r8,4
 c00bc28:	38bfffcc 	andi	r2,r7,65535
 c00bc2c:	14c5383a 	mul	r2,r2,r19
 c00bc30:	380ed43a 	srli	r7,r7,16
 c00bc34:	28ffffcc 	andi	r3,r5,65535
 c00bc38:	2085883a 	add	r2,r4,r2
 c00bc3c:	1008d43a 	srli	r4,r2,16
 c00bc40:	3ccf383a 	mul	r7,r7,r19
 c00bc44:	198d883a 	add	r6,r3,r6
 c00bc48:	10ffffcc 	andi	r3,r2,65535
 c00bc4c:	30c7c83a 	sub	r3,r6,r3
 c00bc50:	280ad43a 	srli	r5,r5,16
 c00bc54:	21c9883a 	add	r4,r4,r7
 c00bc58:	180dd43a 	srai	r6,r3,16
 c00bc5c:	20bfffcc 	andi	r2,r4,65535
 c00bc60:	288bc83a 	sub	r5,r5,r2
 c00bc64:	298b883a 	add	r5,r5,r6
 c00bc68:	280e943a 	slli	r7,r5,16
 c00bc6c:	18ffffcc 	andi	r3,r3,65535
 c00bc70:	2008d43a 	srli	r4,r4,16
 c00bc74:	38ceb03a 	or	r7,r7,r3
 c00bc78:	49c00015 	stw	r7,0(r9)
 c00bc7c:	280dd43a 	srai	r6,r5,16
 c00bc80:	4a400104 	addi	r9,r9,4
 c00bc84:	a23fe52e 	bgeu	r20,r8,c00bc1c <__alt_data_end+0xfc00bc1c>
 c00bc88:	b0800017 	ldw	r2,0(r22)
 c00bc8c:	10000b1e 	bne	r2,zero,c00bcbc <quorem+0x120>
 c00bc90:	b0bfff04 	addi	r2,r22,-4
 c00bc94:	a880082e 	bgeu	r21,r2,c00bcb8 <quorem+0x11c>
 c00bc98:	b0ffff17 	ldw	r3,-4(r22)
 c00bc9c:	18000326 	beq	r3,zero,c00bcac <quorem+0x110>
 c00bca0:	00000506 	br	c00bcb8 <quorem+0x11c>
 c00bca4:	10c00017 	ldw	r3,0(r2)
 c00bca8:	1800031e 	bne	r3,zero,c00bcb8 <quorem+0x11c>
 c00bcac:	10bfff04 	addi	r2,r2,-4
 c00bcb0:	94bfffc4 	addi	r18,r18,-1
 c00bcb4:	a8bffb36 	bltu	r21,r2,c00bca4 <__alt_data_end+0xfc00bca4>
 c00bcb8:	84800415 	stw	r18,16(r16)
 c00bcbc:	8009883a 	mov	r4,r16
 c00bcc0:	b80b883a 	mov	r5,r23
 c00bcc4:	c00f2800 	call	c00f280 <__mcmp>
 c00bcc8:	10002616 	blt	r2,zero,c00bd64 <quorem+0x1c8>
 c00bccc:	9cc00044 	addi	r19,r19,1
 c00bcd0:	a80d883a 	mov	r6,r21
 c00bcd4:	000b883a 	mov	r5,zero
 c00bcd8:	31000017 	ldw	r4,0(r6)
 c00bcdc:	88800017 	ldw	r2,0(r17)
 c00bce0:	31800104 	addi	r6,r6,4
 c00bce4:	20ffffcc 	andi	r3,r4,65535
 c00bce8:	194b883a 	add	r5,r3,r5
 c00bcec:	10ffffcc 	andi	r3,r2,65535
 c00bcf0:	28c7c83a 	sub	r3,r5,r3
 c00bcf4:	1004d43a 	srli	r2,r2,16
 c00bcf8:	2008d43a 	srli	r4,r4,16
 c00bcfc:	180bd43a 	srai	r5,r3,16
 c00bd00:	18ffffcc 	andi	r3,r3,65535
 c00bd04:	2089c83a 	sub	r4,r4,r2
 c00bd08:	2149883a 	add	r4,r4,r5
 c00bd0c:	2004943a 	slli	r2,r4,16
 c00bd10:	8c400104 	addi	r17,r17,4
 c00bd14:	200bd43a 	srai	r5,r4,16
 c00bd18:	10c6b03a 	or	r3,r2,r3
 c00bd1c:	30ffff15 	stw	r3,-4(r6)
 c00bd20:	a47fed2e 	bgeu	r20,r17,c00bcd8 <__alt_data_end+0xfc00bcd8>
 c00bd24:	9485883a 	add	r2,r18,r18
 c00bd28:	1085883a 	add	r2,r2,r2
 c00bd2c:	a887883a 	add	r3,r21,r2
 c00bd30:	18800017 	ldw	r2,0(r3)
 c00bd34:	10000b1e 	bne	r2,zero,c00bd64 <quorem+0x1c8>
 c00bd38:	18bfff04 	addi	r2,r3,-4
 c00bd3c:	a880082e 	bgeu	r21,r2,c00bd60 <quorem+0x1c4>
 c00bd40:	18ffff17 	ldw	r3,-4(r3)
 c00bd44:	18000326 	beq	r3,zero,c00bd54 <quorem+0x1b8>
 c00bd48:	00000506 	br	c00bd60 <quorem+0x1c4>
 c00bd4c:	10c00017 	ldw	r3,0(r2)
 c00bd50:	1800031e 	bne	r3,zero,c00bd60 <quorem+0x1c4>
 c00bd54:	10bfff04 	addi	r2,r2,-4
 c00bd58:	94bfffc4 	addi	r18,r18,-1
 c00bd5c:	a8bffb36 	bltu	r21,r2,c00bd4c <__alt_data_end+0xfc00bd4c>
 c00bd60:	84800415 	stw	r18,16(r16)
 c00bd64:	9805883a 	mov	r2,r19
 c00bd68:	dfc00817 	ldw	ra,32(sp)
 c00bd6c:	ddc00717 	ldw	r23,28(sp)
 c00bd70:	dd800617 	ldw	r22,24(sp)
 c00bd74:	dd400517 	ldw	r21,20(sp)
 c00bd78:	dd000417 	ldw	r20,16(sp)
 c00bd7c:	dcc00317 	ldw	r19,12(sp)
 c00bd80:	dc800217 	ldw	r18,8(sp)
 c00bd84:	dc400117 	ldw	r17,4(sp)
 c00bd88:	dc000017 	ldw	r16,0(sp)
 c00bd8c:	dec00904 	addi	sp,sp,36
 c00bd90:	f800283a 	ret
 c00bd94:	0005883a 	mov	r2,zero
 c00bd98:	003ff306 	br	c00bd68 <__alt_data_end+0xfc00bd68>

0c00bd9c <_dtoa_r>:
 c00bd9c:	20801017 	ldw	r2,64(r4)
 c00bda0:	deffde04 	addi	sp,sp,-136
 c00bda4:	dd401d15 	stw	r21,116(sp)
 c00bda8:	dcc01b15 	stw	r19,108(sp)
 c00bdac:	dc801a15 	stw	r18,104(sp)
 c00bdb0:	dc401915 	stw	r17,100(sp)
 c00bdb4:	dc001815 	stw	r16,96(sp)
 c00bdb8:	dfc02115 	stw	ra,132(sp)
 c00bdbc:	df002015 	stw	fp,128(sp)
 c00bdc0:	ddc01f15 	stw	r23,124(sp)
 c00bdc4:	dd801e15 	stw	r22,120(sp)
 c00bdc8:	dd001c15 	stw	r20,112(sp)
 c00bdcc:	d9c00315 	stw	r7,12(sp)
 c00bdd0:	2021883a 	mov	r16,r4
 c00bdd4:	302b883a 	mov	r21,r6
 c00bdd8:	2825883a 	mov	r18,r5
 c00bddc:	dc402417 	ldw	r17,144(sp)
 c00bde0:	3027883a 	mov	r19,r6
 c00bde4:	10000826 	beq	r2,zero,c00be08 <_dtoa_r+0x6c>
 c00bde8:	21801117 	ldw	r6,68(r4)
 c00bdec:	00c00044 	movi	r3,1
 c00bdf0:	100b883a 	mov	r5,r2
 c00bdf4:	1986983a 	sll	r3,r3,r6
 c00bdf8:	11800115 	stw	r6,4(r2)
 c00bdfc:	10c00215 	stw	r3,8(r2)
 c00be00:	c00ea680 	call	c00ea68 <_Bfree>
 c00be04:	80001015 	stw	zero,64(r16)
 c00be08:	a8002d16 	blt	r21,zero,c00bec0 <_dtoa_r+0x124>
 c00be0c:	88000015 	stw	zero,0(r17)
 c00be10:	a8dffc2c 	andhi	r3,r21,32752
 c00be14:	009ffc34 	movhi	r2,32752
 c00be18:	18801b26 	beq	r3,r2,c00be88 <_dtoa_r+0xec>
 c00be1c:	9009883a 	mov	r4,r18
 c00be20:	980b883a 	mov	r5,r19
 c00be24:	000d883a 	mov	r6,zero
 c00be28:	000f883a 	mov	r7,zero
 c00be2c:	c0137600 	call	c013760 <__eqdf2>
 c00be30:	10002a1e 	bne	r2,zero,c00bedc <_dtoa_r+0x140>
 c00be34:	d8c02317 	ldw	r3,140(sp)
 c00be38:	d9002517 	ldw	r4,148(sp)
 c00be3c:	00800044 	movi	r2,1
 c00be40:	18800015 	stw	r2,0(r3)
 c00be44:	2001a226 	beq	r4,zero,c00c4d0 <_dtoa_r+0x734>
 c00be48:	008300b4 	movhi	r2,3074
 c00be4c:	10894544 	addi	r2,r2,9493
 c00be50:	20800015 	stw	r2,0(r4)
 c00be54:	10bfffc4 	addi	r2,r2,-1
 c00be58:	dfc02117 	ldw	ra,132(sp)
 c00be5c:	df002017 	ldw	fp,128(sp)
 c00be60:	ddc01f17 	ldw	r23,124(sp)
 c00be64:	dd801e17 	ldw	r22,120(sp)
 c00be68:	dd401d17 	ldw	r21,116(sp)
 c00be6c:	dd001c17 	ldw	r20,112(sp)
 c00be70:	dcc01b17 	ldw	r19,108(sp)
 c00be74:	dc801a17 	ldw	r18,104(sp)
 c00be78:	dc401917 	ldw	r17,100(sp)
 c00be7c:	dc001817 	ldw	r16,96(sp)
 c00be80:	dec02204 	addi	sp,sp,136
 c00be84:	f800283a 	ret
 c00be88:	d8c02317 	ldw	r3,140(sp)
 c00be8c:	0089c3c4 	movi	r2,9999
 c00be90:	18800015 	stw	r2,0(r3)
 c00be94:	90017c26 	beq	r18,zero,c00c488 <_dtoa_r+0x6ec>
 c00be98:	008300b4 	movhi	r2,3074
 c00be9c:	10895104 	addi	r2,r2,9540
 c00bea0:	d9002517 	ldw	r4,148(sp)
 c00bea4:	203fec26 	beq	r4,zero,c00be58 <__alt_data_end+0xfc00be58>
 c00bea8:	10c000c7 	ldb	r3,3(r2)
 c00beac:	18017d1e 	bne	r3,zero,c00c4a4 <_dtoa_r+0x708>
 c00beb0:	10c000c4 	addi	r3,r2,3
 c00beb4:	d9802517 	ldw	r6,148(sp)
 c00beb8:	30c00015 	stw	r3,0(r6)
 c00bebc:	003fe606 	br	c00be58 <__alt_data_end+0xfc00be58>
 c00bec0:	04e00034 	movhi	r19,32768
 c00bec4:	9cffffc4 	addi	r19,r19,-1
 c00bec8:	00800044 	movi	r2,1
 c00becc:	ace6703a 	and	r19,r21,r19
 c00bed0:	88800015 	stw	r2,0(r17)
 c00bed4:	982b883a 	mov	r21,r19
 c00bed8:	003fcd06 	br	c00be10 <__alt_data_end+0xfc00be10>
 c00bedc:	d8800204 	addi	r2,sp,8
 c00bee0:	a822d53a 	srli	r17,r21,20
 c00bee4:	d8800015 	stw	r2,0(sp)
 c00bee8:	8009883a 	mov	r4,r16
 c00beec:	900b883a 	mov	r5,r18
 c00bef0:	980d883a 	mov	r6,r19
 c00bef4:	d9c00104 	addi	r7,sp,4
 c00bef8:	c00f5f40 	call	c00f5f4 <__d2b>
 c00befc:	1039883a 	mov	fp,r2
 c00bf00:	88016a1e 	bne	r17,zero,c00c4ac <_dtoa_r+0x710>
 c00bf04:	dd000217 	ldw	r20,8(sp)
 c00bf08:	dc400117 	ldw	r17,4(sp)
 c00bf0c:	00befbc4 	movi	r2,-1041
 c00bf10:	a463883a 	add	r17,r20,r17
 c00bf14:	8882ea16 	blt	r17,r2,c00cac0 <_dtoa_r+0xd24>
 c00bf18:	00bf0384 	movi	r2,-1010
 c00bf1c:	1445c83a 	sub	r2,r2,r17
 c00bf20:	89010484 	addi	r4,r17,1042
 c00bf24:	a8aa983a 	sll	r21,r21,r2
 c00bf28:	9108d83a 	srl	r4,r18,r4
 c00bf2c:	a908b03a 	or	r4,r21,r4
 c00bf30:	c0149980 	call	c014998 <__floatunsidf>
 c00bf34:	017f8434 	movhi	r5,65040
 c00bf38:	01800044 	movi	r6,1
 c00bf3c:	1009883a 	mov	r4,r2
 c00bf40:	194b883a 	add	r5,r3,r5
 c00bf44:	8c7fffc4 	addi	r17,r17,-1
 c00bf48:	d9800f15 	stw	r6,60(sp)
 c00bf4c:	000d883a 	mov	r6,zero
 c00bf50:	01cffe34 	movhi	r7,16376
 c00bf54:	c0140c80 	call	c0140c8 <__subdf3>
 c00bf58:	0198dbf4 	movhi	r6,25455
 c00bf5c:	01cff4f4 	movhi	r7,16339
 c00bf60:	1009883a 	mov	r4,r2
 c00bf64:	180b883a 	mov	r5,r3
 c00bf68:	3190d844 	addi	r6,r6,17249
 c00bf6c:	39e1e9c4 	addi	r7,r7,-30809
 c00bf70:	c0139a40 	call	c0139a4 <__muldf3>
 c00bf74:	01a2d874 	movhi	r6,35681
 c00bf78:	01cff1f4 	movhi	r7,16327
 c00bf7c:	180b883a 	mov	r5,r3
 c00bf80:	31b22cc4 	addi	r6,r6,-14157
 c00bf84:	39e28a04 	addi	r7,r7,-30168
 c00bf88:	1009883a 	mov	r4,r2
 c00bf8c:	c012ec40 	call	c012ec4 <__adddf3>
 c00bf90:	8809883a 	mov	r4,r17
 c00bf94:	102d883a 	mov	r22,r2
 c00bf98:	182b883a 	mov	r21,r3
 c00bf9c:	c008a780 	call	c008a78 <__floatsidf>
 c00bfa0:	019427f4 	movhi	r6,20639
 c00bfa4:	01cff4f4 	movhi	r7,16339
 c00bfa8:	1009883a 	mov	r4,r2
 c00bfac:	180b883a 	mov	r5,r3
 c00bfb0:	319e7ec4 	addi	r6,r6,31227
 c00bfb4:	39d104c4 	addi	r7,r7,17427
 c00bfb8:	c0139a40 	call	c0139a4 <__muldf3>
 c00bfbc:	b009883a 	mov	r4,r22
 c00bfc0:	a80b883a 	mov	r5,r21
 c00bfc4:	100d883a 	mov	r6,r2
 c00bfc8:	180f883a 	mov	r7,r3
 c00bfcc:	c012ec40 	call	c012ec4 <__adddf3>
 c00bfd0:	1009883a 	mov	r4,r2
 c00bfd4:	180b883a 	mov	r5,r3
 c00bfd8:	102d883a 	mov	r22,r2
 c00bfdc:	182b883a 	mov	r21,r3
 c00bfe0:	c0089f00 	call	c0089f0 <__fixdfsi>
 c00bfe4:	b009883a 	mov	r4,r22
 c00bfe8:	a80b883a 	mov	r5,r21
 c00bfec:	000d883a 	mov	r6,zero
 c00bff0:	000f883a 	mov	r7,zero
 c00bff4:	d8800515 	stw	r2,20(sp)
 c00bff8:	c0138c40 	call	c0138c4 <__ledf2>
 c00bffc:	10023116 	blt	r2,zero,c00c8c4 <_dtoa_r+0xb28>
 c00c000:	d8c00517 	ldw	r3,20(sp)
 c00c004:	00800584 	movi	r2,22
 c00c008:	10c21f36 	bltu	r2,r3,c00c888 <_dtoa_r+0xaec>
 c00c00c:	180490fa 	slli	r2,r3,3
 c00c010:	00c300b4 	movhi	r3,3074
 c00c014:	18c96c04 	addi	r3,r3,9648
 c00c018:	1885883a 	add	r2,r3,r2
 c00c01c:	11000017 	ldw	r4,0(r2)
 c00c020:	11400117 	ldw	r5,4(r2)
 c00c024:	900d883a 	mov	r6,r18
 c00c028:	980f883a 	mov	r7,r19
 c00c02c:	c0137e40 	call	c0137e4 <__gedf2>
 c00c030:	0082a70e 	bge	zero,r2,c00cad0 <_dtoa_r+0xd34>
 c00c034:	d9000517 	ldw	r4,20(sp)
 c00c038:	d8000c15 	stw	zero,48(sp)
 c00c03c:	213fffc4 	addi	r4,r4,-1
 c00c040:	d9000515 	stw	r4,20(sp)
 c00c044:	a463c83a 	sub	r17,r20,r17
 c00c048:	8dbfffc4 	addi	r22,r17,-1
 c00c04c:	b0021916 	blt	r22,zero,c00c8b4 <_dtoa_r+0xb18>
 c00c050:	d8000815 	stw	zero,32(sp)
 c00c054:	d8800517 	ldw	r2,20(sp)
 c00c058:	10020e16 	blt	r2,zero,c00c894 <_dtoa_r+0xaf8>
 c00c05c:	b0ad883a 	add	r22,r22,r2
 c00c060:	d8800a15 	stw	r2,40(sp)
 c00c064:	d8000915 	stw	zero,36(sp)
 c00c068:	d8c00317 	ldw	r3,12(sp)
 c00c06c:	00800244 	movi	r2,9
 c00c070:	10c11a36 	bltu	r2,r3,c00c4dc <_dtoa_r+0x740>
 c00c074:	00800144 	movi	r2,5
 c00c078:	10c4fc0e 	bge	r2,r3,c00d46c <_dtoa_r+0x16d0>
 c00c07c:	18ffff04 	addi	r3,r3,-4
 c00c080:	d8c00315 	stw	r3,12(sp)
 c00c084:	0029883a 	mov	r20,zero
 c00c088:	d9800317 	ldw	r6,12(sp)
 c00c08c:	008000c4 	movi	r2,3
 c00c090:	3083bd26 	beq	r6,r2,c00cf88 <_dtoa_r+0x11ec>
 c00c094:	1183670e 	bge	r2,r6,c00ce34 <_dtoa_r+0x1098>
 c00c098:	d8c00317 	ldw	r3,12(sp)
 c00c09c:	00800104 	movi	r2,4
 c00c0a0:	1882e726 	beq	r3,r2,c00cc40 <_dtoa_r+0xea4>
 c00c0a4:	00800144 	movi	r2,5
 c00c0a8:	1884f21e 	bne	r3,r2,c00d474 <_dtoa_r+0x16d8>
 c00c0ac:	00800044 	movi	r2,1
 c00c0b0:	d8800b15 	stw	r2,44(sp)
 c00c0b4:	d8c02217 	ldw	r3,136(sp)
 c00c0b8:	d9000517 	ldw	r4,20(sp)
 c00c0bc:	1907883a 	add	r3,r3,r4
 c00c0c0:	19800044 	addi	r6,r3,1
 c00c0c4:	d8c00d15 	stw	r3,52(sp)
 c00c0c8:	d9800615 	stw	r6,24(sp)
 c00c0cc:	0183c30e 	bge	zero,r6,c00cfdc <_dtoa_r+0x1240>
 c00c0d0:	d9800617 	ldw	r6,24(sp)
 c00c0d4:	3023883a 	mov	r17,r6
 c00c0d8:	80001115 	stw	zero,68(r16)
 c00c0dc:	008005c4 	movi	r2,23
 c00c0e0:	1184f62e 	bgeu	r2,r6,c00d4bc <_dtoa_r+0x1720>
 c00c0e4:	00c00044 	movi	r3,1
 c00c0e8:	00800104 	movi	r2,4
 c00c0ec:	1085883a 	add	r2,r2,r2
 c00c0f0:	11000504 	addi	r4,r2,20
 c00c0f4:	180b883a 	mov	r5,r3
 c00c0f8:	18c00044 	addi	r3,r3,1
 c00c0fc:	313ffb2e 	bgeu	r6,r4,c00c0ec <__alt_data_end+0xfc00c0ec>
 c00c100:	81401115 	stw	r5,68(r16)
 c00c104:	8009883a 	mov	r4,r16
 c00c108:	c00e9c00 	call	c00e9c0 <_Balloc>
 c00c10c:	d8800715 	stw	r2,28(sp)
 c00c110:	80801015 	stw	r2,64(r16)
 c00c114:	00800384 	movi	r2,14
 c00c118:	1440fd36 	bltu	r2,r17,c00c510 <_dtoa_r+0x774>
 c00c11c:	a000fc26 	beq	r20,zero,c00c510 <_dtoa_r+0x774>
 c00c120:	d8800517 	ldw	r2,20(sp)
 c00c124:	0083b90e 	bge	zero,r2,c00d00c <_dtoa_r+0x1270>
 c00c128:	d8c00517 	ldw	r3,20(sp)
 c00c12c:	108003cc 	andi	r2,r2,15
 c00c130:	100490fa 	slli	r2,r2,3
 c00c134:	182fd13a 	srai	r23,r3,4
 c00c138:	00c300b4 	movhi	r3,3074
 c00c13c:	18c96c04 	addi	r3,r3,9648
 c00c140:	1885883a 	add	r2,r3,r2
 c00c144:	b8c0040c 	andi	r3,r23,16
 c00c148:	12c00017 	ldw	r11,0(r2)
 c00c14c:	12800117 	ldw	r10,4(r2)
 c00c150:	18039726 	beq	r3,zero,c00cfb0 <_dtoa_r+0x1214>
 c00c154:	008300b4 	movhi	r2,3074
 c00c158:	10896204 	addi	r2,r2,9608
 c00c15c:	11800817 	ldw	r6,32(r2)
 c00c160:	11c00917 	ldw	r7,36(r2)
 c00c164:	9009883a 	mov	r4,r18
 c00c168:	980b883a 	mov	r5,r19
 c00c16c:	da801615 	stw	r10,88(sp)
 c00c170:	dac01515 	stw	r11,84(sp)
 c00c174:	c0081240 	call	c008124 <__divdf3>
 c00c178:	da801617 	ldw	r10,88(sp)
 c00c17c:	dac01517 	ldw	r11,84(sp)
 c00c180:	bdc003cc 	andi	r23,r23,15
 c00c184:	044000c4 	movi	r17,3
 c00c188:	d8800e15 	stw	r2,56(sp)
 c00c18c:	182b883a 	mov	r21,r3
 c00c190:	b8001126 	beq	r23,zero,c00c1d8 <_dtoa_r+0x43c>
 c00c194:	050300b4 	movhi	r20,3074
 c00c198:	a5096204 	addi	r20,r20,9608
 c00c19c:	5805883a 	mov	r2,r11
 c00c1a0:	5007883a 	mov	r3,r10
 c00c1a4:	b980004c 	andi	r6,r23,1
 c00c1a8:	1009883a 	mov	r4,r2
 c00c1ac:	b82fd07a 	srai	r23,r23,1
 c00c1b0:	180b883a 	mov	r5,r3
 c00c1b4:	30000426 	beq	r6,zero,c00c1c8 <_dtoa_r+0x42c>
 c00c1b8:	a1800017 	ldw	r6,0(r20)
 c00c1bc:	a1c00117 	ldw	r7,4(r20)
 c00c1c0:	8c400044 	addi	r17,r17,1
 c00c1c4:	c0139a40 	call	c0139a4 <__muldf3>
 c00c1c8:	a5000204 	addi	r20,r20,8
 c00c1cc:	b83ff51e 	bne	r23,zero,c00c1a4 <__alt_data_end+0xfc00c1a4>
 c00c1d0:	1017883a 	mov	r11,r2
 c00c1d4:	1815883a 	mov	r10,r3
 c00c1d8:	d9000e17 	ldw	r4,56(sp)
 c00c1dc:	a80b883a 	mov	r5,r21
 c00c1e0:	580d883a 	mov	r6,r11
 c00c1e4:	500f883a 	mov	r7,r10
 c00c1e8:	c0081240 	call	c008124 <__divdf3>
 c00c1ec:	1029883a 	mov	r20,r2
 c00c1f0:	182b883a 	mov	r21,r3
 c00c1f4:	d9800c17 	ldw	r6,48(sp)
 c00c1f8:	30000626 	beq	r6,zero,c00c214 <_dtoa_r+0x478>
 c00c1fc:	a009883a 	mov	r4,r20
 c00c200:	a80b883a 	mov	r5,r21
 c00c204:	000d883a 	mov	r6,zero
 c00c208:	01cffc34 	movhi	r7,16368
 c00c20c:	c0138c40 	call	c0138c4 <__ledf2>
 c00c210:	10043216 	blt	r2,zero,c00d2dc <_dtoa_r+0x1540>
 c00c214:	8809883a 	mov	r4,r17
 c00c218:	c008a780 	call	c008a78 <__floatsidf>
 c00c21c:	1009883a 	mov	r4,r2
 c00c220:	180b883a 	mov	r5,r3
 c00c224:	a00d883a 	mov	r6,r20
 c00c228:	a80f883a 	mov	r7,r21
 c00c22c:	c0139a40 	call	c0139a4 <__muldf3>
 c00c230:	000d883a 	mov	r6,zero
 c00c234:	1009883a 	mov	r4,r2
 c00c238:	180b883a 	mov	r5,r3
 c00c23c:	01d00734 	movhi	r7,16412
 c00c240:	c012ec40 	call	c012ec4 <__adddf3>
 c00c244:	1023883a 	mov	r17,r2
 c00c248:	d9800617 	ldw	r6,24(sp)
 c00c24c:	00bf3034 	movhi	r2,64704
 c00c250:	1885883a 	add	r2,r3,r2
 c00c254:	d8800e15 	stw	r2,56(sp)
 c00c258:	30032e26 	beq	r6,zero,c00cf14 <_dtoa_r+0x1178>
 c00c25c:	d8c00517 	ldw	r3,20(sp)
 c00c260:	da800617 	ldw	r10,24(sp)
 c00c264:	d8c01215 	stw	r3,72(sp)
 c00c268:	d9000b17 	ldw	r4,44(sp)
 c00c26c:	2003b026 	beq	r4,zero,c00d130 <_dtoa_r+0x1394>
 c00c270:	50bfffc4 	addi	r2,r10,-1
 c00c274:	100490fa 	slli	r2,r2,3
 c00c278:	00c300b4 	movhi	r3,3074
 c00c27c:	18c96c04 	addi	r3,r3,9648
 c00c280:	1885883a 	add	r2,r3,r2
 c00c284:	11800017 	ldw	r6,0(r2)
 c00c288:	11c00117 	ldw	r7,4(r2)
 c00c28c:	d8800717 	ldw	r2,28(sp)
 c00c290:	0009883a 	mov	r4,zero
 c00c294:	014ff834 	movhi	r5,16352
 c00c298:	da801615 	stw	r10,88(sp)
 c00c29c:	15c00044 	addi	r23,r2,1
 c00c2a0:	c0081240 	call	c008124 <__divdf3>
 c00c2a4:	d9c00e17 	ldw	r7,56(sp)
 c00c2a8:	880d883a 	mov	r6,r17
 c00c2ac:	1009883a 	mov	r4,r2
 c00c2b0:	180b883a 	mov	r5,r3
 c00c2b4:	c0140c80 	call	c0140c8 <__subdf3>
 c00c2b8:	a80b883a 	mov	r5,r21
 c00c2bc:	a009883a 	mov	r4,r20
 c00c2c0:	d8c01015 	stw	r3,64(sp)
 c00c2c4:	d8800e15 	stw	r2,56(sp)
 c00c2c8:	c0089f00 	call	c0089f0 <__fixdfsi>
 c00c2cc:	1009883a 	mov	r4,r2
 c00c2d0:	d8801715 	stw	r2,92(sp)
 c00c2d4:	c008a780 	call	c008a78 <__floatsidf>
 c00c2d8:	a009883a 	mov	r4,r20
 c00c2dc:	a80b883a 	mov	r5,r21
 c00c2e0:	100d883a 	mov	r6,r2
 c00c2e4:	180f883a 	mov	r7,r3
 c00c2e8:	c0140c80 	call	c0140c8 <__subdf3>
 c00c2ec:	da001717 	ldw	r8,92(sp)
 c00c2f0:	1829883a 	mov	r20,r3
 c00c2f4:	d8c00717 	ldw	r3,28(sp)
 c00c2f8:	d9000e17 	ldw	r4,56(sp)
 c00c2fc:	d9401017 	ldw	r5,64(sp)
 c00c300:	42000c04 	addi	r8,r8,48
 c00c304:	1023883a 	mov	r17,r2
 c00c308:	1a000005 	stb	r8,0(r3)
 c00c30c:	880d883a 	mov	r6,r17
 c00c310:	a00f883a 	mov	r7,r20
 c00c314:	402b883a 	mov	r21,r8
 c00c318:	c0137e40 	call	c0137e4 <__gedf2>
 c00c31c:	00844516 	blt	zero,r2,c00d434 <_dtoa_r+0x1698>
 c00c320:	0009883a 	mov	r4,zero
 c00c324:	014ffc34 	movhi	r5,16368
 c00c328:	880d883a 	mov	r6,r17
 c00c32c:	a00f883a 	mov	r7,r20
 c00c330:	c0140c80 	call	c0140c8 <__subdf3>
 c00c334:	d9000e17 	ldw	r4,56(sp)
 c00c338:	d9401017 	ldw	r5,64(sp)
 c00c33c:	100d883a 	mov	r6,r2
 c00c340:	180f883a 	mov	r7,r3
 c00c344:	c0137e40 	call	c0137e4 <__gedf2>
 c00c348:	da801617 	ldw	r10,88(sp)
 c00c34c:	00843616 	blt	zero,r2,c00d428 <_dtoa_r+0x168c>
 c00c350:	00800044 	movi	r2,1
 c00c354:	12806e0e 	bge	r2,r10,c00c510 <_dtoa_r+0x774>
 c00c358:	d9000717 	ldw	r4,28(sp)
 c00c35c:	dd801315 	stw	r22,76(sp)
 c00c360:	dc001115 	stw	r16,68(sp)
 c00c364:	2295883a 	add	r10,r4,r10
 c00c368:	dcc01415 	stw	r19,80(sp)
 c00c36c:	502d883a 	mov	r22,r10
 c00c370:	dcc01017 	ldw	r19,64(sp)
 c00c374:	b821883a 	mov	r16,r23
 c00c378:	dc801015 	stw	r18,64(sp)
 c00c37c:	dc800e17 	ldw	r18,56(sp)
 c00c380:	00000906 	br	c00c3a8 <_dtoa_r+0x60c>
 c00c384:	c0140c80 	call	c0140c8 <__subdf3>
 c00c388:	1009883a 	mov	r4,r2
 c00c38c:	180b883a 	mov	r5,r3
 c00c390:	900d883a 	mov	r6,r18
 c00c394:	980f883a 	mov	r7,r19
 c00c398:	c0138c40 	call	c0138c4 <__ledf2>
 c00c39c:	10040e16 	blt	r2,zero,c00d3d8 <_dtoa_r+0x163c>
 c00c3a0:	b821883a 	mov	r16,r23
 c00c3a4:	bd841026 	beq	r23,r22,c00d3e8 <_dtoa_r+0x164c>
 c00c3a8:	9009883a 	mov	r4,r18
 c00c3ac:	980b883a 	mov	r5,r19
 c00c3b0:	000d883a 	mov	r6,zero
 c00c3b4:	01d00934 	movhi	r7,16420
 c00c3b8:	c0139a40 	call	c0139a4 <__muldf3>
 c00c3bc:	000d883a 	mov	r6,zero
 c00c3c0:	01d00934 	movhi	r7,16420
 c00c3c4:	8809883a 	mov	r4,r17
 c00c3c8:	a00b883a 	mov	r5,r20
 c00c3cc:	1025883a 	mov	r18,r2
 c00c3d0:	1827883a 	mov	r19,r3
 c00c3d4:	c0139a40 	call	c0139a4 <__muldf3>
 c00c3d8:	180b883a 	mov	r5,r3
 c00c3dc:	1009883a 	mov	r4,r2
 c00c3e0:	1823883a 	mov	r17,r3
 c00c3e4:	1029883a 	mov	r20,r2
 c00c3e8:	c0089f00 	call	c0089f0 <__fixdfsi>
 c00c3ec:	1009883a 	mov	r4,r2
 c00c3f0:	102b883a 	mov	r21,r2
 c00c3f4:	c008a780 	call	c008a78 <__floatsidf>
 c00c3f8:	a009883a 	mov	r4,r20
 c00c3fc:	880b883a 	mov	r5,r17
 c00c400:	100d883a 	mov	r6,r2
 c00c404:	180f883a 	mov	r7,r3
 c00c408:	c0140c80 	call	c0140c8 <__subdf3>
 c00c40c:	ad400c04 	addi	r21,r21,48
 c00c410:	1009883a 	mov	r4,r2
 c00c414:	180b883a 	mov	r5,r3
 c00c418:	900d883a 	mov	r6,r18
 c00c41c:	980f883a 	mov	r7,r19
 c00c420:	85400005 	stb	r21,0(r16)
 c00c424:	1023883a 	mov	r17,r2
 c00c428:	1829883a 	mov	r20,r3
 c00c42c:	c0138c40 	call	c0138c4 <__ledf2>
 c00c430:	bdc00044 	addi	r23,r23,1
 c00c434:	0009883a 	mov	r4,zero
 c00c438:	014ffc34 	movhi	r5,16368
 c00c43c:	880d883a 	mov	r6,r17
 c00c440:	a00f883a 	mov	r7,r20
 c00c444:	103fcf0e 	bge	r2,zero,c00c384 <__alt_data_end+0xfc00c384>
 c00c448:	d9801217 	ldw	r6,72(sp)
 c00c44c:	dc001117 	ldw	r16,68(sp)
 c00c450:	d9800515 	stw	r6,20(sp)
 c00c454:	8009883a 	mov	r4,r16
 c00c458:	e00b883a 	mov	r5,fp
 c00c45c:	c00ea680 	call	c00ea68 <_Bfree>
 c00c460:	d8c00517 	ldw	r3,20(sp)
 c00c464:	d9002317 	ldw	r4,140(sp)
 c00c468:	d9802517 	ldw	r6,148(sp)
 c00c46c:	b8000005 	stb	zero,0(r23)
 c00c470:	18800044 	addi	r2,r3,1
 c00c474:	20800015 	stw	r2,0(r4)
 c00c478:	30027226 	beq	r6,zero,c00ce44 <_dtoa_r+0x10a8>
 c00c47c:	35c00015 	stw	r23,0(r6)
 c00c480:	d8800717 	ldw	r2,28(sp)
 c00c484:	003e7406 	br	c00be58 <__alt_data_end+0xfc00be58>
 c00c488:	00800434 	movhi	r2,16
 c00c48c:	10bfffc4 	addi	r2,r2,-1
 c00c490:	a8aa703a 	and	r21,r21,r2
 c00c494:	a83e801e 	bne	r21,zero,c00be98 <__alt_data_end+0xfc00be98>
 c00c498:	008300b4 	movhi	r2,3074
 c00c49c:	10894e04 	addi	r2,r2,9528
 c00c4a0:	003e7f06 	br	c00bea0 <__alt_data_end+0xfc00bea0>
 c00c4a4:	10c00204 	addi	r3,r2,8
 c00c4a8:	003e8206 	br	c00beb4 <__alt_data_end+0xfc00beb4>
 c00c4ac:	01400434 	movhi	r5,16
 c00c4b0:	297fffc4 	addi	r5,r5,-1
 c00c4b4:	994a703a 	and	r5,r19,r5
 c00c4b8:	9009883a 	mov	r4,r18
 c00c4bc:	8c7f0044 	addi	r17,r17,-1023
 c00c4c0:	294ffc34 	orhi	r5,r5,16368
 c00c4c4:	dd000217 	ldw	r20,8(sp)
 c00c4c8:	d8000f15 	stw	zero,60(sp)
 c00c4cc:	003e9f06 	br	c00bf4c <__alt_data_end+0xfc00bf4c>
 c00c4d0:	008300b4 	movhi	r2,3074
 c00c4d4:	10894504 	addi	r2,r2,9492
 c00c4d8:	003e5f06 	br	c00be58 <__alt_data_end+0xfc00be58>
 c00c4dc:	80001115 	stw	zero,68(r16)
 c00c4e0:	8009883a 	mov	r4,r16
 c00c4e4:	000b883a 	mov	r5,zero
 c00c4e8:	c00e9c00 	call	c00e9c0 <_Balloc>
 c00c4ec:	01bfffc4 	movi	r6,-1
 c00c4f0:	d8800715 	stw	r2,28(sp)
 c00c4f4:	80801015 	stw	r2,64(r16)
 c00c4f8:	00800044 	movi	r2,1
 c00c4fc:	d9800615 	stw	r6,24(sp)
 c00c500:	d8800b15 	stw	r2,44(sp)
 c00c504:	d8002215 	stw	zero,136(sp)
 c00c508:	d9800d15 	stw	r6,52(sp)
 c00c50c:	d8000315 	stw	zero,12(sp)
 c00c510:	d8800117 	ldw	r2,4(sp)
 c00c514:	10008e16 	blt	r2,zero,c00c750 <_dtoa_r+0x9b4>
 c00c518:	d9000517 	ldw	r4,20(sp)
 c00c51c:	00c00384 	movi	r3,14
 c00c520:	19008b16 	blt	r3,r4,c00c750 <_dtoa_r+0x9b4>
 c00c524:	200490fa 	slli	r2,r4,3
 c00c528:	00c300b4 	movhi	r3,3074
 c00c52c:	d9802217 	ldw	r6,136(sp)
 c00c530:	18c96c04 	addi	r3,r3,9648
 c00c534:	1885883a 	add	r2,r3,r2
 c00c538:	14400017 	ldw	r17,0(r2)
 c00c53c:	15000117 	ldw	r20,4(r2)
 c00c540:	3001c716 	blt	r6,zero,c00cc60 <_dtoa_r+0xec4>
 c00c544:	880d883a 	mov	r6,r17
 c00c548:	a00f883a 	mov	r7,r20
 c00c54c:	9009883a 	mov	r4,r18
 c00c550:	980b883a 	mov	r5,r19
 c00c554:	c0081240 	call	c008124 <__divdf3>
 c00c558:	180b883a 	mov	r5,r3
 c00c55c:	1009883a 	mov	r4,r2
 c00c560:	c0089f00 	call	c0089f0 <__fixdfsi>
 c00c564:	1009883a 	mov	r4,r2
 c00c568:	102d883a 	mov	r22,r2
 c00c56c:	c008a780 	call	c008a78 <__floatsidf>
 c00c570:	1009883a 	mov	r4,r2
 c00c574:	180b883a 	mov	r5,r3
 c00c578:	880d883a 	mov	r6,r17
 c00c57c:	a00f883a 	mov	r7,r20
 c00c580:	c0139a40 	call	c0139a4 <__muldf3>
 c00c584:	9009883a 	mov	r4,r18
 c00c588:	980b883a 	mov	r5,r19
 c00c58c:	100d883a 	mov	r6,r2
 c00c590:	180f883a 	mov	r7,r3
 c00c594:	c0140c80 	call	c0140c8 <__subdf3>
 c00c598:	d9000717 	ldw	r4,28(sp)
 c00c59c:	d9800617 	ldw	r6,24(sp)
 c00c5a0:	180b883a 	mov	r5,r3
 c00c5a4:	b0c00c04 	addi	r3,r22,48
 c00c5a8:	20c00005 	stb	r3,0(r4)
 c00c5ac:	25c00044 	addi	r23,r4,1
 c00c5b0:	01000044 	movi	r4,1
 c00c5b4:	1011883a 	mov	r8,r2
 c00c5b8:	2807883a 	mov	r3,r5
 c00c5bc:	31003d26 	beq	r6,r4,c00c6b4 <_dtoa_r+0x918>
 c00c5c0:	000d883a 	mov	r6,zero
 c00c5c4:	01d00934 	movhi	r7,16420
 c00c5c8:	1009883a 	mov	r4,r2
 c00c5cc:	c0139a40 	call	c0139a4 <__muldf3>
 c00c5d0:	1009883a 	mov	r4,r2
 c00c5d4:	180b883a 	mov	r5,r3
 c00c5d8:	000d883a 	mov	r6,zero
 c00c5dc:	000f883a 	mov	r7,zero
 c00c5e0:	1027883a 	mov	r19,r2
 c00c5e4:	182b883a 	mov	r21,r3
 c00c5e8:	c0137600 	call	c013760 <__eqdf2>
 c00c5ec:	103f9926 	beq	r2,zero,c00c454 <__alt_data_end+0xfc00c454>
 c00c5f0:	d8c00617 	ldw	r3,24(sp)
 c00c5f4:	d9000717 	ldw	r4,28(sp)
 c00c5f8:	b825883a 	mov	r18,r23
 c00c5fc:	18bfffc4 	addi	r2,r3,-1
 c00c600:	20ad883a 	add	r22,r4,r2
 c00c604:	dc000315 	stw	r16,12(sp)
 c00c608:	00000a06 	br	c00c634 <_dtoa_r+0x898>
 c00c60c:	c0139a40 	call	c0139a4 <__muldf3>
 c00c610:	1009883a 	mov	r4,r2
 c00c614:	180b883a 	mov	r5,r3
 c00c618:	000d883a 	mov	r6,zero
 c00c61c:	000f883a 	mov	r7,zero
 c00c620:	1027883a 	mov	r19,r2
 c00c624:	182b883a 	mov	r21,r3
 c00c628:	b825883a 	mov	r18,r23
 c00c62c:	c0137600 	call	c013760 <__eqdf2>
 c00c630:	10022626 	beq	r2,zero,c00cecc <_dtoa_r+0x1130>
 c00c634:	880d883a 	mov	r6,r17
 c00c638:	a00f883a 	mov	r7,r20
 c00c63c:	9809883a 	mov	r4,r19
 c00c640:	a80b883a 	mov	r5,r21
 c00c644:	c0081240 	call	c008124 <__divdf3>
 c00c648:	180b883a 	mov	r5,r3
 c00c64c:	1009883a 	mov	r4,r2
 c00c650:	c0089f00 	call	c0089f0 <__fixdfsi>
 c00c654:	1009883a 	mov	r4,r2
 c00c658:	1021883a 	mov	r16,r2
 c00c65c:	c008a780 	call	c008a78 <__floatsidf>
 c00c660:	1009883a 	mov	r4,r2
 c00c664:	180b883a 	mov	r5,r3
 c00c668:	880d883a 	mov	r6,r17
 c00c66c:	a00f883a 	mov	r7,r20
 c00c670:	c0139a40 	call	c0139a4 <__muldf3>
 c00c674:	9809883a 	mov	r4,r19
 c00c678:	a80b883a 	mov	r5,r21
 c00c67c:	100d883a 	mov	r6,r2
 c00c680:	180f883a 	mov	r7,r3
 c00c684:	c0140c80 	call	c0140c8 <__subdf3>
 c00c688:	82000c04 	addi	r8,r16,48
 c00c68c:	92000005 	stb	r8,0(r18)
 c00c690:	1009883a 	mov	r4,r2
 c00c694:	180b883a 	mov	r5,r3
 c00c698:	000d883a 	mov	r6,zero
 c00c69c:	01d00934 	movhi	r7,16420
 c00c6a0:	1011883a 	mov	r8,r2
 c00c6a4:	bdc00044 	addi	r23,r23,1
 c00c6a8:	95bfd81e 	bne	r18,r22,c00c60c <__alt_data_end+0xfc00c60c>
 c00c6ac:	802d883a 	mov	r22,r16
 c00c6b0:	dc000317 	ldw	r16,12(sp)
 c00c6b4:	4009883a 	mov	r4,r8
 c00c6b8:	180b883a 	mov	r5,r3
 c00c6bc:	400d883a 	mov	r6,r8
 c00c6c0:	180f883a 	mov	r7,r3
 c00c6c4:	c012ec40 	call	c012ec4 <__adddf3>
 c00c6c8:	8809883a 	mov	r4,r17
 c00c6cc:	a00b883a 	mov	r5,r20
 c00c6d0:	100d883a 	mov	r6,r2
 c00c6d4:	180f883a 	mov	r7,r3
 c00c6d8:	1027883a 	mov	r19,r2
 c00c6dc:	1825883a 	mov	r18,r3
 c00c6e0:	c0138c40 	call	c0138c4 <__ledf2>
 c00c6e4:	10000816 	blt	r2,zero,c00c708 <_dtoa_r+0x96c>
 c00c6e8:	8809883a 	mov	r4,r17
 c00c6ec:	a00b883a 	mov	r5,r20
 c00c6f0:	980d883a 	mov	r6,r19
 c00c6f4:	900f883a 	mov	r7,r18
 c00c6f8:	c0137600 	call	c013760 <__eqdf2>
 c00c6fc:	103f551e 	bne	r2,zero,c00c454 <__alt_data_end+0xfc00c454>
 c00c700:	b580004c 	andi	r22,r22,1
 c00c704:	b03f5326 	beq	r22,zero,c00c454 <__alt_data_end+0xfc00c454>
 c00c708:	bd7fffc3 	ldbu	r21,-1(r23)
 c00c70c:	b8bfffc4 	addi	r2,r23,-1
 c00c710:	1007883a 	mov	r3,r2
 c00c714:	01400e44 	movi	r5,57
 c00c718:	d9800717 	ldw	r6,28(sp)
 c00c71c:	00000506 	br	c00c734 <_dtoa_r+0x998>
 c00c720:	18ffffc4 	addi	r3,r3,-1
 c00c724:	30825e26 	beq	r6,r2,c00d0a0 <_dtoa_r+0x1304>
 c00c728:	1d400003 	ldbu	r21,0(r3)
 c00c72c:	102f883a 	mov	r23,r2
 c00c730:	10bfffc4 	addi	r2,r2,-1
 c00c734:	a9003fcc 	andi	r4,r21,255
 c00c738:	2100201c 	xori	r4,r4,128
 c00c73c:	213fe004 	addi	r4,r4,-128
 c00c740:	217ff726 	beq	r4,r5,c00c720 <__alt_data_end+0xfc00c720>
 c00c744:	aa000044 	addi	r8,r21,1
 c00c748:	12000005 	stb	r8,0(r2)
 c00c74c:	003f4106 	br	c00c454 <__alt_data_end+0xfc00c454>
 c00c750:	d8c00b17 	ldw	r3,44(sp)
 c00c754:	18006726 	beq	r3,zero,c00c8f4 <_dtoa_r+0xb58>
 c00c758:	d9000317 	ldw	r4,12(sp)
 c00c75c:	00c00044 	movi	r3,1
 c00c760:	19016a0e 	bge	r3,r4,c00cd0c <_dtoa_r+0xf70>
 c00c764:	d8800617 	ldw	r2,24(sp)
 c00c768:	d8c00917 	ldw	r3,36(sp)
 c00c76c:	157fffc4 	addi	r21,r2,-1
 c00c770:	1d420716 	blt	r3,r21,c00cf90 <_dtoa_r+0x11f4>
 c00c774:	1d6bc83a 	sub	r21,r3,r21
 c00c778:	d8800617 	ldw	r2,24(sp)
 c00c77c:	1002c716 	blt	r2,zero,c00d29c <_dtoa_r+0x1500>
 c00c780:	dd000817 	ldw	r20,32(sp)
 c00c784:	d8800617 	ldw	r2,24(sp)
 c00c788:	d9800817 	ldw	r6,32(sp)
 c00c78c:	8009883a 	mov	r4,r16
 c00c790:	01400044 	movi	r5,1
 c00c794:	308d883a 	add	r6,r6,r2
 c00c798:	d9800815 	stw	r6,32(sp)
 c00c79c:	b0ad883a 	add	r22,r22,r2
 c00c7a0:	c00edc00 	call	c00edc0 <__i2b>
 c00c7a4:	1023883a 	mov	r17,r2
 c00c7a8:	a0000826 	beq	r20,zero,c00c7cc <_dtoa_r+0xa30>
 c00c7ac:	0580070e 	bge	zero,r22,c00c7cc <_dtoa_r+0xa30>
 c00c7b0:	b005883a 	mov	r2,r22
 c00c7b4:	a5812016 	blt	r20,r22,c00cc38 <_dtoa_r+0xe9c>
 c00c7b8:	d8c00817 	ldw	r3,32(sp)
 c00c7bc:	a0a9c83a 	sub	r20,r20,r2
 c00c7c0:	b0adc83a 	sub	r22,r22,r2
 c00c7c4:	1887c83a 	sub	r3,r3,r2
 c00c7c8:	d8c00815 	stw	r3,32(sp)
 c00c7cc:	d9000917 	ldw	r4,36(sp)
 c00c7d0:	0100140e 	bge	zero,r4,c00c824 <_dtoa_r+0xa88>
 c00c7d4:	d9800b17 	ldw	r6,44(sp)
 c00c7d8:	3001e526 	beq	r6,zero,c00cf70 <_dtoa_r+0x11d4>
 c00c7dc:	05400e0e 	bge	zero,r21,c00c818 <_dtoa_r+0xa7c>
 c00c7e0:	880b883a 	mov	r5,r17
 c00c7e4:	8009883a 	mov	r4,r16
 c00c7e8:	a80d883a 	mov	r6,r21
 c00c7ec:	c00eff80 	call	c00eff8 <__pow5mult>
 c00c7f0:	e00d883a 	mov	r6,fp
 c00c7f4:	8009883a 	mov	r4,r16
 c00c7f8:	100b883a 	mov	r5,r2
 c00c7fc:	1023883a 	mov	r17,r2
 c00c800:	c00edfc0 	call	c00edfc <__multiply>
 c00c804:	102f883a 	mov	r23,r2
 c00c808:	e00b883a 	mov	r5,fp
 c00c80c:	8009883a 	mov	r4,r16
 c00c810:	c00ea680 	call	c00ea68 <_Bfree>
 c00c814:	b839883a 	mov	fp,r23
 c00c818:	d8800917 	ldw	r2,36(sp)
 c00c81c:	154dc83a 	sub	r6,r2,r21
 c00c820:	3001281e 	bne	r6,zero,c00ccc4 <_dtoa_r+0xf28>
 c00c824:	05c00044 	movi	r23,1
 c00c828:	8009883a 	mov	r4,r16
 c00c82c:	b80b883a 	mov	r5,r23
 c00c830:	c00edc00 	call	c00edc0 <__i2b>
 c00c834:	d8c00a17 	ldw	r3,40(sp)
 c00c838:	102b883a 	mov	r21,r2
 c00c83c:	00c0310e 	bge	zero,r3,c00c904 <_dtoa_r+0xb68>
 c00c840:	8009883a 	mov	r4,r16
 c00c844:	100b883a 	mov	r5,r2
 c00c848:	180d883a 	mov	r6,r3
 c00c84c:	c00eff80 	call	c00eff8 <__pow5mult>
 c00c850:	d9000317 	ldw	r4,12(sp)
 c00c854:	102b883a 	mov	r21,r2
 c00c858:	b9011f0e 	bge	r23,r4,c00ccd8 <_dtoa_r+0xf3c>
 c00c85c:	0027883a 	mov	r19,zero
 c00c860:	a8800417 	ldw	r2,16(r21)
 c00c864:	10800104 	addi	r2,r2,4
 c00c868:	1085883a 	add	r2,r2,r2
 c00c86c:	1085883a 	add	r2,r2,r2
 c00c870:	a885883a 	add	r2,r21,r2
 c00c874:	11000017 	ldw	r4,0(r2)
 c00c878:	c00eca80 	call	c00eca8 <__hi0bits>
 c00c87c:	00c00804 	movi	r3,32
 c00c880:	1885c83a 	sub	r2,r3,r2
 c00c884:	00002506 	br	c00c91c <_dtoa_r+0xb80>
 c00c888:	01800044 	movi	r6,1
 c00c88c:	d9800c15 	stw	r6,48(sp)
 c00c890:	003dec06 	br	c00c044 <__alt_data_end+0xfc00c044>
 c00c894:	d8c00817 	ldw	r3,32(sp)
 c00c898:	d9000517 	ldw	r4,20(sp)
 c00c89c:	d8000a15 	stw	zero,40(sp)
 c00c8a0:	1907c83a 	sub	r3,r3,r4
 c00c8a4:	010dc83a 	sub	r6,zero,r4
 c00c8a8:	d8c00815 	stw	r3,32(sp)
 c00c8ac:	d9800915 	stw	r6,36(sp)
 c00c8b0:	003ded06 	br	c00c068 <__alt_data_end+0xfc00c068>
 c00c8b4:	05adc83a 	sub	r22,zero,r22
 c00c8b8:	dd800815 	stw	r22,32(sp)
 c00c8bc:	002d883a 	mov	r22,zero
 c00c8c0:	003de406 	br	c00c054 <__alt_data_end+0xfc00c054>
 c00c8c4:	d9000517 	ldw	r4,20(sp)
 c00c8c8:	c008a780 	call	c008a78 <__floatsidf>
 c00c8cc:	1009883a 	mov	r4,r2
 c00c8d0:	180b883a 	mov	r5,r3
 c00c8d4:	b00d883a 	mov	r6,r22
 c00c8d8:	a80f883a 	mov	r7,r21
 c00c8dc:	c0137600 	call	c013760 <__eqdf2>
 c00c8e0:	103dc726 	beq	r2,zero,c00c000 <__alt_data_end+0xfc00c000>
 c00c8e4:	d8800517 	ldw	r2,20(sp)
 c00c8e8:	10bfffc4 	addi	r2,r2,-1
 c00c8ec:	d8800515 	stw	r2,20(sp)
 c00c8f0:	003dc306 	br	c00c000 <__alt_data_end+0xfc00c000>
 c00c8f4:	dd400917 	ldw	r21,36(sp)
 c00c8f8:	dd000817 	ldw	r20,32(sp)
 c00c8fc:	0023883a 	mov	r17,zero
 c00c900:	003fa906 	br	c00c7a8 <__alt_data_end+0xfc00c7a8>
 c00c904:	d9800317 	ldw	r6,12(sp)
 c00c908:	b981670e 	bge	r23,r6,c00cea8 <_dtoa_r+0x110c>
 c00c90c:	0027883a 	mov	r19,zero
 c00c910:	d8c00a17 	ldw	r3,40(sp)
 c00c914:	183fd21e 	bne	r3,zero,c00c860 <__alt_data_end+0xfc00c860>
 c00c918:	00800044 	movi	r2,1
 c00c91c:	1585883a 	add	r2,r2,r22
 c00c920:	108007cc 	andi	r2,r2,31
 c00c924:	10005f26 	beq	r2,zero,c00caa4 <_dtoa_r+0xd08>
 c00c928:	00c00804 	movi	r3,32
 c00c92c:	1887c83a 	sub	r3,r3,r2
 c00c930:	01000104 	movi	r4,4
 c00c934:	20c2dd0e 	bge	r4,r3,c00d4ac <_dtoa_r+0x1710>
 c00c938:	d9000817 	ldw	r4,32(sp)
 c00c93c:	00c00704 	movi	r3,28
 c00c940:	1885c83a 	sub	r2,r3,r2
 c00c944:	2089883a 	add	r4,r4,r2
 c00c948:	d9000815 	stw	r4,32(sp)
 c00c94c:	a0a9883a 	add	r20,r20,r2
 c00c950:	b0ad883a 	add	r22,r22,r2
 c00c954:	d8800817 	ldw	r2,32(sp)
 c00c958:	0080050e 	bge	zero,r2,c00c970 <_dtoa_r+0xbd4>
 c00c95c:	e00b883a 	mov	r5,fp
 c00c960:	8009883a 	mov	r4,r16
 c00c964:	100d883a 	mov	r6,r2
 c00c968:	c00f1380 	call	c00f138 <__lshift>
 c00c96c:	1039883a 	mov	fp,r2
 c00c970:	0580050e 	bge	zero,r22,c00c988 <_dtoa_r+0xbec>
 c00c974:	a80b883a 	mov	r5,r21
 c00c978:	8009883a 	mov	r4,r16
 c00c97c:	b00d883a 	mov	r6,r22
 c00c980:	c00f1380 	call	c00f138 <__lshift>
 c00c984:	102b883a 	mov	r21,r2
 c00c988:	d8c00c17 	ldw	r3,48(sp)
 c00c98c:	1801161e 	bne	r3,zero,c00cde8 <_dtoa_r+0x104c>
 c00c990:	d8c00617 	ldw	r3,24(sp)
 c00c994:	00c12d0e 	bge	zero,r3,c00ce4c <_dtoa_r+0x10b0>
 c00c998:	d8c00b17 	ldw	r3,44(sp)
 c00c99c:	1800571e 	bne	r3,zero,c00cafc <_dtoa_r+0xd60>
 c00c9a0:	dc800717 	ldw	r18,28(sp)
 c00c9a4:	dcc00617 	ldw	r19,24(sp)
 c00c9a8:	9029883a 	mov	r20,r18
 c00c9ac:	00000206 	br	c00c9b8 <_dtoa_r+0xc1c>
 c00c9b0:	c00ea900 	call	c00ea90 <__multadd>
 c00c9b4:	1039883a 	mov	fp,r2
 c00c9b8:	e009883a 	mov	r4,fp
 c00c9bc:	a80b883a 	mov	r5,r21
 c00c9c0:	c00bb9c0 	call	c00bb9c <quorem>
 c00c9c4:	10800c04 	addi	r2,r2,48
 c00c9c8:	90800005 	stb	r2,0(r18)
 c00c9cc:	94800044 	addi	r18,r18,1
 c00c9d0:	9507c83a 	sub	r3,r18,r20
 c00c9d4:	8009883a 	mov	r4,r16
 c00c9d8:	e00b883a 	mov	r5,fp
 c00c9dc:	01800284 	movi	r6,10
 c00c9e0:	000f883a 	mov	r7,zero
 c00c9e4:	1cfff216 	blt	r3,r19,c00c9b0 <__alt_data_end+0xfc00c9b0>
 c00c9e8:	1011883a 	mov	r8,r2
 c00c9ec:	d8800617 	ldw	r2,24(sp)
 c00c9f0:	00822e0e 	bge	zero,r2,c00d2ac <_dtoa_r+0x1510>
 c00c9f4:	d9000717 	ldw	r4,28(sp)
 c00c9f8:	0025883a 	mov	r18,zero
 c00c9fc:	20af883a 	add	r23,r4,r2
 c00ca00:	e00b883a 	mov	r5,fp
 c00ca04:	01800044 	movi	r6,1
 c00ca08:	8009883a 	mov	r4,r16
 c00ca0c:	da001715 	stw	r8,92(sp)
 c00ca10:	c00f1380 	call	c00f138 <__lshift>
 c00ca14:	1009883a 	mov	r4,r2
 c00ca18:	a80b883a 	mov	r5,r21
 c00ca1c:	1039883a 	mov	fp,r2
 c00ca20:	c00f2800 	call	c00f280 <__mcmp>
 c00ca24:	da001717 	ldw	r8,92(sp)
 c00ca28:	00816e0e 	bge	zero,r2,c00cfe4 <_dtoa_r+0x1248>
 c00ca2c:	b93fffc3 	ldbu	r4,-1(r23)
 c00ca30:	b8bfffc4 	addi	r2,r23,-1
 c00ca34:	1007883a 	mov	r3,r2
 c00ca38:	01800e44 	movi	r6,57
 c00ca3c:	d9c00717 	ldw	r7,28(sp)
 c00ca40:	00000506 	br	c00ca58 <_dtoa_r+0xcbc>
 c00ca44:	18ffffc4 	addi	r3,r3,-1
 c00ca48:	38811926 	beq	r7,r2,c00ceb0 <_dtoa_r+0x1114>
 c00ca4c:	19000003 	ldbu	r4,0(r3)
 c00ca50:	102f883a 	mov	r23,r2
 c00ca54:	10bfffc4 	addi	r2,r2,-1
 c00ca58:	21403fcc 	andi	r5,r4,255
 c00ca5c:	2940201c 	xori	r5,r5,128
 c00ca60:	297fe004 	addi	r5,r5,-128
 c00ca64:	29bff726 	beq	r5,r6,c00ca44 <__alt_data_end+0xfc00ca44>
 c00ca68:	21000044 	addi	r4,r4,1
 c00ca6c:	11000005 	stb	r4,0(r2)
 c00ca70:	8009883a 	mov	r4,r16
 c00ca74:	a80b883a 	mov	r5,r21
 c00ca78:	c00ea680 	call	c00ea68 <_Bfree>
 c00ca7c:	883e7526 	beq	r17,zero,c00c454 <__alt_data_end+0xfc00c454>
 c00ca80:	90000426 	beq	r18,zero,c00ca94 <_dtoa_r+0xcf8>
 c00ca84:	94400326 	beq	r18,r17,c00ca94 <_dtoa_r+0xcf8>
 c00ca88:	8009883a 	mov	r4,r16
 c00ca8c:	900b883a 	mov	r5,r18
 c00ca90:	c00ea680 	call	c00ea68 <_Bfree>
 c00ca94:	8009883a 	mov	r4,r16
 c00ca98:	880b883a 	mov	r5,r17
 c00ca9c:	c00ea680 	call	c00ea68 <_Bfree>
 c00caa0:	003e6c06 	br	c00c454 <__alt_data_end+0xfc00c454>
 c00caa4:	00800704 	movi	r2,28
 c00caa8:	d9800817 	ldw	r6,32(sp)
 c00caac:	a0a9883a 	add	r20,r20,r2
 c00cab0:	b0ad883a 	add	r22,r22,r2
 c00cab4:	308d883a 	add	r6,r6,r2
 c00cab8:	d9800815 	stw	r6,32(sp)
 c00cabc:	003fa506 	br	c00c954 <__alt_data_end+0xfc00c954>
 c00cac0:	013efb84 	movi	r4,-1042
 c00cac4:	246bc83a 	sub	r21,r4,r17
 c00cac8:	9548983a 	sll	r4,r18,r21
 c00cacc:	003d1806 	br	c00bf30 <__alt_data_end+0xfc00bf30>
 c00cad0:	d8000c15 	stw	zero,48(sp)
 c00cad4:	003d5b06 	br	c00c044 <__alt_data_end+0xfc00c044>
 c00cad8:	880b883a 	mov	r5,r17
 c00cadc:	8009883a 	mov	r4,r16
 c00cae0:	01800284 	movi	r6,10
 c00cae4:	000f883a 	mov	r7,zero
 c00cae8:	c00ea900 	call	c00ea90 <__multadd>
 c00caec:	1023883a 	mov	r17,r2
 c00caf0:	d8800d17 	ldw	r2,52(sp)
 c00caf4:	0082550e 	bge	zero,r2,c00d44c <_dtoa_r+0x16b0>
 c00caf8:	d8800615 	stw	r2,24(sp)
 c00cafc:	0500050e 	bge	zero,r20,c00cb14 <_dtoa_r+0xd78>
 c00cb00:	880b883a 	mov	r5,r17
 c00cb04:	8009883a 	mov	r4,r16
 c00cb08:	a00d883a 	mov	r6,r20
 c00cb0c:	c00f1380 	call	c00f138 <__lshift>
 c00cb10:	1023883a 	mov	r17,r2
 c00cb14:	98016a1e 	bne	r19,zero,c00d0c0 <_dtoa_r+0x1324>
 c00cb18:	8829883a 	mov	r20,r17
 c00cb1c:	d9000617 	ldw	r4,24(sp)
 c00cb20:	dcc00717 	ldw	r19,28(sp)
 c00cb24:	9480004c 	andi	r18,r18,1
 c00cb28:	20bfffc4 	addi	r2,r4,-1
 c00cb2c:	9885883a 	add	r2,r19,r2
 c00cb30:	d8800415 	stw	r2,16(sp)
 c00cb34:	dc800615 	stw	r18,24(sp)
 c00cb38:	e009883a 	mov	r4,fp
 c00cb3c:	a80b883a 	mov	r5,r21
 c00cb40:	c00bb9c0 	call	c00bb9c <quorem>
 c00cb44:	e009883a 	mov	r4,fp
 c00cb48:	880b883a 	mov	r5,r17
 c00cb4c:	102f883a 	mov	r23,r2
 c00cb50:	c00f2800 	call	c00f280 <__mcmp>
 c00cb54:	8009883a 	mov	r4,r16
 c00cb58:	a80b883a 	mov	r5,r21
 c00cb5c:	a00d883a 	mov	r6,r20
 c00cb60:	102d883a 	mov	r22,r2
 c00cb64:	c00f2e00 	call	c00f2e0 <__mdiff>
 c00cb68:	1007883a 	mov	r3,r2
 c00cb6c:	10800317 	ldw	r2,12(r2)
 c00cb70:	bc800c04 	addi	r18,r23,48
 c00cb74:	1000971e 	bne	r2,zero,c00cdd4 <_dtoa_r+0x1038>
 c00cb78:	180b883a 	mov	r5,r3
 c00cb7c:	e009883a 	mov	r4,fp
 c00cb80:	d8c01515 	stw	r3,84(sp)
 c00cb84:	c00f2800 	call	c00f280 <__mcmp>
 c00cb88:	d8c01517 	ldw	r3,84(sp)
 c00cb8c:	8009883a 	mov	r4,r16
 c00cb90:	d8801515 	stw	r2,84(sp)
 c00cb94:	180b883a 	mov	r5,r3
 c00cb98:	c00ea680 	call	c00ea68 <_Bfree>
 c00cb9c:	d8801517 	ldw	r2,84(sp)
 c00cba0:	1000041e 	bne	r2,zero,c00cbb4 <_dtoa_r+0xe18>
 c00cba4:	d9800317 	ldw	r6,12(sp)
 c00cba8:	3000021e 	bne	r6,zero,c00cbb4 <_dtoa_r+0xe18>
 c00cbac:	d8c00617 	ldw	r3,24(sp)
 c00cbb0:	18007626 	beq	r3,zero,c00cd8c <_dtoa_r+0xff0>
 c00cbb4:	b0005b16 	blt	r22,zero,c00cd24 <_dtoa_r+0xf88>
 c00cbb8:	b000041e 	bne	r22,zero,c00cbcc <_dtoa_r+0xe30>
 c00cbbc:	d9000317 	ldw	r4,12(sp)
 c00cbc0:	2000021e 	bne	r4,zero,c00cbcc <_dtoa_r+0xe30>
 c00cbc4:	d8c00617 	ldw	r3,24(sp)
 c00cbc8:	18005626 	beq	r3,zero,c00cd24 <_dtoa_r+0xf88>
 c00cbcc:	00814d16 	blt	zero,r2,c00d104 <_dtoa_r+0x1368>
 c00cbd0:	d8c00417 	ldw	r3,16(sp)
 c00cbd4:	9d800044 	addi	r22,r19,1
 c00cbd8:	9c800005 	stb	r18,0(r19)
 c00cbdc:	b02f883a 	mov	r23,r22
 c00cbe0:	98c14c26 	beq	r19,r3,c00d114 <_dtoa_r+0x1378>
 c00cbe4:	e00b883a 	mov	r5,fp
 c00cbe8:	8009883a 	mov	r4,r16
 c00cbec:	01800284 	movi	r6,10
 c00cbf0:	000f883a 	mov	r7,zero
 c00cbf4:	c00ea900 	call	c00ea90 <__multadd>
 c00cbf8:	1039883a 	mov	fp,r2
 c00cbfc:	8d006d26 	beq	r17,r20,c00cdb4 <_dtoa_r+0x1018>
 c00cc00:	880b883a 	mov	r5,r17
 c00cc04:	01800284 	movi	r6,10
 c00cc08:	000f883a 	mov	r7,zero
 c00cc0c:	8009883a 	mov	r4,r16
 c00cc10:	c00ea900 	call	c00ea90 <__multadd>
 c00cc14:	a00b883a 	mov	r5,r20
 c00cc18:	8009883a 	mov	r4,r16
 c00cc1c:	01800284 	movi	r6,10
 c00cc20:	000f883a 	mov	r7,zero
 c00cc24:	1023883a 	mov	r17,r2
 c00cc28:	c00ea900 	call	c00ea90 <__multadd>
 c00cc2c:	1029883a 	mov	r20,r2
 c00cc30:	b027883a 	mov	r19,r22
 c00cc34:	003fc006 	br	c00cb38 <__alt_data_end+0xfc00cb38>
 c00cc38:	a005883a 	mov	r2,r20
 c00cc3c:	003ede06 	br	c00c7b8 <__alt_data_end+0xfc00c7b8>
 c00cc40:	01000044 	movi	r4,1
 c00cc44:	d9000b15 	stw	r4,44(sp)
 c00cc48:	d9802217 	ldw	r6,136(sp)
 c00cc4c:	0180dc0e 	bge	zero,r6,c00cfc0 <_dtoa_r+0x1224>
 c00cc50:	3023883a 	mov	r17,r6
 c00cc54:	d9800d15 	stw	r6,52(sp)
 c00cc58:	d9800615 	stw	r6,24(sp)
 c00cc5c:	003d1e06 	br	c00c0d8 <__alt_data_end+0xfc00c0d8>
 c00cc60:	d8800617 	ldw	r2,24(sp)
 c00cc64:	00be3716 	blt	zero,r2,c00c544 <__alt_data_end+0xfc00c544>
 c00cc68:	1000be1e 	bne	r2,zero,c00cf64 <_dtoa_r+0x11c8>
 c00cc6c:	8809883a 	mov	r4,r17
 c00cc70:	a00b883a 	mov	r5,r20
 c00cc74:	000d883a 	mov	r6,zero
 c00cc78:	01d00534 	movhi	r7,16404
 c00cc7c:	c0139a40 	call	c0139a4 <__muldf3>
 c00cc80:	1009883a 	mov	r4,r2
 c00cc84:	180b883a 	mov	r5,r3
 c00cc88:	900d883a 	mov	r6,r18
 c00cc8c:	980f883a 	mov	r7,r19
 c00cc90:	c0137e40 	call	c0137e4 <__gedf2>
 c00cc94:	002b883a 	mov	r21,zero
 c00cc98:	0023883a 	mov	r17,zero
 c00cc9c:	10007a16 	blt	r2,zero,c00ce88 <_dtoa_r+0x10ec>
 c00cca0:	d9002217 	ldw	r4,136(sp)
 c00cca4:	ddc00717 	ldw	r23,28(sp)
 c00cca8:	0108303a 	nor	r4,zero,r4
 c00ccac:	d9000515 	stw	r4,20(sp)
 c00ccb0:	8009883a 	mov	r4,r16
 c00ccb4:	a80b883a 	mov	r5,r21
 c00ccb8:	c00ea680 	call	c00ea68 <_Bfree>
 c00ccbc:	883f751e 	bne	r17,zero,c00ca94 <__alt_data_end+0xfc00ca94>
 c00ccc0:	003de406 	br	c00c454 <__alt_data_end+0xfc00c454>
 c00ccc4:	e00b883a 	mov	r5,fp
 c00ccc8:	8009883a 	mov	r4,r16
 c00cccc:	c00eff80 	call	c00eff8 <__pow5mult>
 c00ccd0:	1039883a 	mov	fp,r2
 c00ccd4:	003ed306 	br	c00c824 <__alt_data_end+0xfc00c824>
 c00ccd8:	903ee01e 	bne	r18,zero,c00c85c <__alt_data_end+0xfc00c85c>
 c00ccdc:	00800434 	movhi	r2,16
 c00cce0:	10bfffc4 	addi	r2,r2,-1
 c00cce4:	9884703a 	and	r2,r19,r2
 c00cce8:	103f081e 	bne	r2,zero,c00c90c <__alt_data_end+0xfc00c90c>
 c00ccec:	9cdffc2c 	andhi	r19,r19,32752
 c00ccf0:	983f0626 	beq	r19,zero,c00c90c <__alt_data_end+0xfc00c90c>
 c00ccf4:	d8800817 	ldw	r2,32(sp)
 c00ccf8:	b5800044 	addi	r22,r22,1
 c00ccfc:	04c00044 	movi	r19,1
 c00cd00:	10800044 	addi	r2,r2,1
 c00cd04:	d8800815 	stw	r2,32(sp)
 c00cd08:	003f0106 	br	c00c910 <__alt_data_end+0xfc00c910>
 c00cd0c:	d9800f17 	ldw	r6,60(sp)
 c00cd10:	30016826 	beq	r6,zero,c00d2b4 <_dtoa_r+0x1518>
 c00cd14:	10810cc4 	addi	r2,r2,1075
 c00cd18:	dd400917 	ldw	r21,36(sp)
 c00cd1c:	dd000817 	ldw	r20,32(sp)
 c00cd20:	003e9906 	br	c00c788 <__alt_data_end+0xfc00c788>
 c00cd24:	9011883a 	mov	r8,r18
 c00cd28:	4007883a 	mov	r3,r8
 c00cd2c:	e02d883a 	mov	r22,fp
 c00cd30:	0080100e 	bge	zero,r2,c00cd74 <_dtoa_r+0xfd8>
 c00cd34:	01800044 	movi	r6,1
 c00cd38:	8009883a 	mov	r4,r16
 c00cd3c:	e00b883a 	mov	r5,fp
 c00cd40:	da001515 	stw	r8,84(sp)
 c00cd44:	da001715 	stw	r8,92(sp)
 c00cd48:	c00f1380 	call	c00f138 <__lshift>
 c00cd4c:	1009883a 	mov	r4,r2
 c00cd50:	a80b883a 	mov	r5,r21
 c00cd54:	102d883a 	mov	r22,r2
 c00cd58:	c00f2800 	call	c00f280 <__mcmp>
 c00cd5c:	d8c01517 	ldw	r3,84(sp)
 c00cd60:	da001717 	ldw	r8,92(sp)
 c00cd64:	0081a50e 	bge	zero,r2,c00d3fc <_dtoa_r+0x1660>
 c00cd68:	00800e44 	movi	r2,57
 c00cd6c:	40817b26 	beq	r8,r2,c00d35c <_dtoa_r+0x15c0>
 c00cd70:	40c00044 	addi	r3,r8,1
 c00cd74:	8825883a 	mov	r18,r17
 c00cd78:	9dc00044 	addi	r23,r19,1
 c00cd7c:	98c00005 	stb	r3,0(r19)
 c00cd80:	a023883a 	mov	r17,r20
 c00cd84:	b039883a 	mov	fp,r22
 c00cd88:	003f3906 	br	c00ca70 <__alt_data_end+0xfc00ca70>
 c00cd8c:	00800e44 	movi	r2,57
 c00cd90:	9011883a 	mov	r8,r18
 c00cd94:	90817226 	beq	r18,r2,c00d360 <_dtoa_r+0x15c4>
 c00cd98:	0580010e 	bge	zero,r22,c00cda0 <_dtoa_r+0x1004>
 c00cd9c:	ba000c44 	addi	r8,r23,49
 c00cda0:	8825883a 	mov	r18,r17
 c00cda4:	9dc00044 	addi	r23,r19,1
 c00cda8:	9a000005 	stb	r8,0(r19)
 c00cdac:	a023883a 	mov	r17,r20
 c00cdb0:	003f2f06 	br	c00ca70 <__alt_data_end+0xfc00ca70>
 c00cdb4:	880b883a 	mov	r5,r17
 c00cdb8:	8009883a 	mov	r4,r16
 c00cdbc:	01800284 	movi	r6,10
 c00cdc0:	000f883a 	mov	r7,zero
 c00cdc4:	c00ea900 	call	c00ea90 <__multadd>
 c00cdc8:	1023883a 	mov	r17,r2
 c00cdcc:	1029883a 	mov	r20,r2
 c00cdd0:	003f9706 	br	c00cc30 <__alt_data_end+0xfc00cc30>
 c00cdd4:	8009883a 	mov	r4,r16
 c00cdd8:	180b883a 	mov	r5,r3
 c00cddc:	c00ea680 	call	c00ea68 <_Bfree>
 c00cde0:	00800044 	movi	r2,1
 c00cde4:	003f7306 	br	c00cbb4 <__alt_data_end+0xfc00cbb4>
 c00cde8:	e009883a 	mov	r4,fp
 c00cdec:	a80b883a 	mov	r5,r21
 c00cdf0:	c00f2800 	call	c00f280 <__mcmp>
 c00cdf4:	103ee60e 	bge	r2,zero,c00c990 <__alt_data_end+0xfc00c990>
 c00cdf8:	8009883a 	mov	r4,r16
 c00cdfc:	e00b883a 	mov	r5,fp
 c00ce00:	01800284 	movi	r6,10
 c00ce04:	000f883a 	mov	r7,zero
 c00ce08:	c00ea900 	call	c00ea90 <__multadd>
 c00ce0c:	d9000517 	ldw	r4,20(sp)
 c00ce10:	d9800b17 	ldw	r6,44(sp)
 c00ce14:	1039883a 	mov	fp,r2
 c00ce18:	213fffc4 	addi	r4,r4,-1
 c00ce1c:	d9000515 	stw	r4,20(sp)
 c00ce20:	303f2d1e 	bne	r6,zero,c00cad8 <__alt_data_end+0xfc00cad8>
 c00ce24:	d9000d17 	ldw	r4,52(sp)
 c00ce28:	0101780e 	bge	zero,r4,c00d40c <_dtoa_r+0x1670>
 c00ce2c:	d9000615 	stw	r4,24(sp)
 c00ce30:	003edb06 	br	c00c9a0 <__alt_data_end+0xfc00c9a0>
 c00ce34:	00800084 	movi	r2,2
 c00ce38:	30818e1e 	bne	r6,r2,c00d474 <_dtoa_r+0x16d8>
 c00ce3c:	d8000b15 	stw	zero,44(sp)
 c00ce40:	003f8106 	br	c00cc48 <__alt_data_end+0xfc00cc48>
 c00ce44:	d8800717 	ldw	r2,28(sp)
 c00ce48:	003c0306 	br	c00be58 <__alt_data_end+0xfc00be58>
 c00ce4c:	d9000317 	ldw	r4,12(sp)
 c00ce50:	00800084 	movi	r2,2
 c00ce54:	113ed00e 	bge	r2,r4,c00c998 <__alt_data_end+0xfc00c998>
 c00ce58:	d8c00617 	ldw	r3,24(sp)
 c00ce5c:	183f901e 	bne	r3,zero,c00cca0 <__alt_data_end+0xfc00cca0>
 c00ce60:	a80b883a 	mov	r5,r21
 c00ce64:	8009883a 	mov	r4,r16
 c00ce68:	01800144 	movi	r6,5
 c00ce6c:	000f883a 	mov	r7,zero
 c00ce70:	c00ea900 	call	c00ea90 <__multadd>
 c00ce74:	e009883a 	mov	r4,fp
 c00ce78:	100b883a 	mov	r5,r2
 c00ce7c:	102b883a 	mov	r21,r2
 c00ce80:	c00f2800 	call	c00f280 <__mcmp>
 c00ce84:	00bf860e 	bge	zero,r2,c00cca0 <__alt_data_end+0xfc00cca0>
 c00ce88:	d9800717 	ldw	r6,28(sp)
 c00ce8c:	00800c44 	movi	r2,49
 c00ce90:	30800005 	stb	r2,0(r6)
 c00ce94:	d8800517 	ldw	r2,20(sp)
 c00ce98:	35c00044 	addi	r23,r6,1
 c00ce9c:	10800044 	addi	r2,r2,1
 c00cea0:	d8800515 	stw	r2,20(sp)
 c00cea4:	003f8206 	br	c00ccb0 <__alt_data_end+0xfc00ccb0>
 c00cea8:	903e981e 	bne	r18,zero,c00c90c <__alt_data_end+0xfc00c90c>
 c00ceac:	003f8b06 	br	c00ccdc <__alt_data_end+0xfc00ccdc>
 c00ceb0:	d9800517 	ldw	r6,20(sp)
 c00ceb4:	d8c00717 	ldw	r3,28(sp)
 c00ceb8:	00800c44 	movi	r2,49
 c00cebc:	31800044 	addi	r6,r6,1
 c00cec0:	d9800515 	stw	r6,20(sp)
 c00cec4:	18800005 	stb	r2,0(r3)
 c00cec8:	003ee906 	br	c00ca70 <__alt_data_end+0xfc00ca70>
 c00cecc:	dc000317 	ldw	r16,12(sp)
 c00ced0:	003d6006 	br	c00c454 <__alt_data_end+0xfc00c454>
 c00ced4:	8809883a 	mov	r4,r17
 c00ced8:	c008a780 	call	c008a78 <__floatsidf>
 c00cedc:	a009883a 	mov	r4,r20
 c00cee0:	a80b883a 	mov	r5,r21
 c00cee4:	100d883a 	mov	r6,r2
 c00cee8:	180f883a 	mov	r7,r3
 c00ceec:	c0139a40 	call	c0139a4 <__muldf3>
 c00cef0:	1009883a 	mov	r4,r2
 c00cef4:	180b883a 	mov	r5,r3
 c00cef8:	000d883a 	mov	r6,zero
 c00cefc:	01d00734 	movhi	r7,16412
 c00cf00:	c012ec40 	call	c012ec4 <__adddf3>
 c00cf04:	1023883a 	mov	r17,r2
 c00cf08:	00bf3034 	movhi	r2,64704
 c00cf0c:	1885883a 	add	r2,r3,r2
 c00cf10:	d8800e15 	stw	r2,56(sp)
 c00cf14:	a009883a 	mov	r4,r20
 c00cf18:	a80b883a 	mov	r5,r21
 c00cf1c:	000d883a 	mov	r6,zero
 c00cf20:	01d00534 	movhi	r7,16404
 c00cf24:	c0140c80 	call	c0140c8 <__subdf3>
 c00cf28:	d9c00e17 	ldw	r7,56(sp)
 c00cf2c:	1009883a 	mov	r4,r2
 c00cf30:	180b883a 	mov	r5,r3
 c00cf34:	880d883a 	mov	r6,r17
 c00cf38:	102b883a 	mov	r21,r2
 c00cf3c:	1829883a 	mov	r20,r3
 c00cf40:	c0137e40 	call	c0137e4 <__gedf2>
 c00cf44:	00807716 	blt	zero,r2,c00d124 <_dtoa_r+0x1388>
 c00cf48:	d8800e17 	ldw	r2,56(sp)
 c00cf4c:	a809883a 	mov	r4,r21
 c00cf50:	a00b883a 	mov	r5,r20
 c00cf54:	11e0003c 	xorhi	r7,r2,32768
 c00cf58:	880d883a 	mov	r6,r17
 c00cf5c:	c0138c40 	call	c0138c4 <__ledf2>
 c00cf60:	103d6b0e 	bge	r2,zero,c00c510 <__alt_data_end+0xfc00c510>
 c00cf64:	002b883a 	mov	r21,zero
 c00cf68:	0023883a 	mov	r17,zero
 c00cf6c:	003f4c06 	br	c00cca0 <__alt_data_end+0xfc00cca0>
 c00cf70:	d9800917 	ldw	r6,36(sp)
 c00cf74:	e00b883a 	mov	r5,fp
 c00cf78:	8009883a 	mov	r4,r16
 c00cf7c:	c00eff80 	call	c00eff8 <__pow5mult>
 c00cf80:	1039883a 	mov	fp,r2
 c00cf84:	003e2706 	br	c00c824 <__alt_data_end+0xfc00c824>
 c00cf88:	d8000b15 	stw	zero,44(sp)
 c00cf8c:	003c4906 	br	c00c0b4 <__alt_data_end+0xfc00c0b4>
 c00cf90:	d9000917 	ldw	r4,36(sp)
 c00cf94:	d9800a17 	ldw	r6,40(sp)
 c00cf98:	dd400915 	stw	r21,36(sp)
 c00cf9c:	a905c83a 	sub	r2,r21,r4
 c00cfa0:	308d883a 	add	r6,r6,r2
 c00cfa4:	d9800a15 	stw	r6,40(sp)
 c00cfa8:	002b883a 	mov	r21,zero
 c00cfac:	003df206 	br	c00c778 <__alt_data_end+0xfc00c778>
 c00cfb0:	dc800e15 	stw	r18,56(sp)
 c00cfb4:	982b883a 	mov	r21,r19
 c00cfb8:	04400084 	movi	r17,2
 c00cfbc:	003c7406 	br	c00c190 <__alt_data_end+0xfc00c190>
 c00cfc0:	04400044 	movi	r17,1
 c00cfc4:	dc400d15 	stw	r17,52(sp)
 c00cfc8:	dc400615 	stw	r17,24(sp)
 c00cfcc:	dc402215 	stw	r17,136(sp)
 c00cfd0:	80001115 	stw	zero,68(r16)
 c00cfd4:	000b883a 	mov	r5,zero
 c00cfd8:	003c4a06 	br	c00c104 <__alt_data_end+0xfc00c104>
 c00cfdc:	3023883a 	mov	r17,r6
 c00cfe0:	003ffb06 	br	c00cfd0 <__alt_data_end+0xfc00cfd0>
 c00cfe4:	1000021e 	bne	r2,zero,c00cff0 <_dtoa_r+0x1254>
 c00cfe8:	4200004c 	andi	r8,r8,1
 c00cfec:	403e8f1e 	bne	r8,zero,c00ca2c <__alt_data_end+0xfc00ca2c>
 c00cff0:	01000c04 	movi	r4,48
 c00cff4:	00000106 	br	c00cffc <_dtoa_r+0x1260>
 c00cff8:	102f883a 	mov	r23,r2
 c00cffc:	b8bfffc4 	addi	r2,r23,-1
 c00d000:	10c00007 	ldb	r3,0(r2)
 c00d004:	193ffc26 	beq	r3,r4,c00cff8 <__alt_data_end+0xfc00cff8>
 c00d008:	003e9906 	br	c00ca70 <__alt_data_end+0xfc00ca70>
 c00d00c:	d9000517 	ldw	r4,20(sp)
 c00d010:	012fc83a 	sub	r23,zero,r4
 c00d014:	b800ad26 	beq	r23,zero,c00d2cc <_dtoa_r+0x1530>
 c00d018:	b88003cc 	andi	r2,r23,15
 c00d01c:	100490fa 	slli	r2,r2,3
 c00d020:	00c300b4 	movhi	r3,3074
 c00d024:	18c96c04 	addi	r3,r3,9648
 c00d028:	1885883a 	add	r2,r3,r2
 c00d02c:	11800017 	ldw	r6,0(r2)
 c00d030:	11c00117 	ldw	r7,4(r2)
 c00d034:	b82fd13a 	srai	r23,r23,4
 c00d038:	9009883a 	mov	r4,r18
 c00d03c:	980b883a 	mov	r5,r19
 c00d040:	c0139a40 	call	c0139a4 <__muldf3>
 c00d044:	1029883a 	mov	r20,r2
 c00d048:	182b883a 	mov	r21,r3
 c00d04c:	b800f426 	beq	r23,zero,c00d420 <_dtoa_r+0x1684>
 c00d050:	020300b4 	movhi	r8,3074
 c00d054:	42096204 	addi	r8,r8,9608
 c00d058:	8029883a 	mov	r20,r16
 c00d05c:	04400084 	movi	r17,2
 c00d060:	4021883a 	mov	r16,r8
 c00d064:	b980004c 	andi	r6,r23,1
 c00d068:	1009883a 	mov	r4,r2
 c00d06c:	b82fd07a 	srai	r23,r23,1
 c00d070:	180b883a 	mov	r5,r3
 c00d074:	30000426 	beq	r6,zero,c00d088 <_dtoa_r+0x12ec>
 c00d078:	81800017 	ldw	r6,0(r16)
 c00d07c:	81c00117 	ldw	r7,4(r16)
 c00d080:	8c400044 	addi	r17,r17,1
 c00d084:	c0139a40 	call	c0139a4 <__muldf3>
 c00d088:	84000204 	addi	r16,r16,8
 c00d08c:	b83ff51e 	bne	r23,zero,c00d064 <__alt_data_end+0xfc00d064>
 c00d090:	a021883a 	mov	r16,r20
 c00d094:	182b883a 	mov	r21,r3
 c00d098:	1029883a 	mov	r20,r2
 c00d09c:	003c5506 	br	c00c1f4 <__alt_data_end+0xfc00c1f4>
 c00d0a0:	d9800517 	ldw	r6,20(sp)
 c00d0a4:	d9000717 	ldw	r4,28(sp)
 c00d0a8:	00c00c04 	movi	r3,48
 c00d0ac:	31800044 	addi	r6,r6,1
 c00d0b0:	d9800515 	stw	r6,20(sp)
 c00d0b4:	20c00005 	stb	r3,0(r4)
 c00d0b8:	02000c44 	movi	r8,49
 c00d0bc:	003da206 	br	c00c748 <__alt_data_end+0xfc00c748>
 c00d0c0:	89400117 	ldw	r5,4(r17)
 c00d0c4:	8009883a 	mov	r4,r16
 c00d0c8:	c00e9c00 	call	c00e9c0 <_Balloc>
 c00d0cc:	89800417 	ldw	r6,16(r17)
 c00d0d0:	11000304 	addi	r4,r2,12
 c00d0d4:	89400304 	addi	r5,r17,12
 c00d0d8:	31800084 	addi	r6,r6,2
 c00d0dc:	318d883a 	add	r6,r6,r6
 c00d0e0:	318d883a 	add	r6,r6,r6
 c00d0e4:	1027883a 	mov	r19,r2
 c00d0e8:	c00957c0 	call	c00957c <memcpy>
 c00d0ec:	8009883a 	mov	r4,r16
 c00d0f0:	980b883a 	mov	r5,r19
 c00d0f4:	01800044 	movi	r6,1
 c00d0f8:	c00f1380 	call	c00f138 <__lshift>
 c00d0fc:	1029883a 	mov	r20,r2
 c00d100:	003e8606 	br	c00cb1c <__alt_data_end+0xfc00cb1c>
 c00d104:	00800e44 	movi	r2,57
 c00d108:	90809526 	beq	r18,r2,c00d360 <_dtoa_r+0x15c4>
 c00d10c:	92000044 	addi	r8,r18,1
 c00d110:	003f2306 	br	c00cda0 <__alt_data_end+0xfc00cda0>
 c00d114:	9011883a 	mov	r8,r18
 c00d118:	8825883a 	mov	r18,r17
 c00d11c:	a023883a 	mov	r17,r20
 c00d120:	003e3706 	br	c00ca00 <__alt_data_end+0xfc00ca00>
 c00d124:	002b883a 	mov	r21,zero
 c00d128:	0023883a 	mov	r17,zero
 c00d12c:	003f5606 	br	c00ce88 <__alt_data_end+0xfc00ce88>
 c00d130:	51bfffc4 	addi	r6,r10,-1
 c00d134:	300490fa 	slli	r2,r6,3
 c00d138:	00c300b4 	movhi	r3,3074
 c00d13c:	18c96c04 	addi	r3,r3,9648
 c00d140:	1885883a 	add	r2,r3,r2
 c00d144:	d9c00e17 	ldw	r7,56(sp)
 c00d148:	11000017 	ldw	r4,0(r2)
 c00d14c:	11400117 	ldw	r5,4(r2)
 c00d150:	d8800717 	ldw	r2,28(sp)
 c00d154:	d9801015 	stw	r6,64(sp)
 c00d158:	880d883a 	mov	r6,r17
 c00d15c:	da801615 	stw	r10,88(sp)
 c00d160:	15c00044 	addi	r23,r2,1
 c00d164:	c0139a40 	call	c0139a4 <__muldf3>
 c00d168:	a80b883a 	mov	r5,r21
 c00d16c:	a009883a 	mov	r4,r20
 c00d170:	d8c01115 	stw	r3,68(sp)
 c00d174:	d8800e15 	stw	r2,56(sp)
 c00d178:	c0089f00 	call	c0089f0 <__fixdfsi>
 c00d17c:	1009883a 	mov	r4,r2
 c00d180:	1023883a 	mov	r17,r2
 c00d184:	c008a780 	call	c008a78 <__floatsidf>
 c00d188:	a009883a 	mov	r4,r20
 c00d18c:	a80b883a 	mov	r5,r21
 c00d190:	100d883a 	mov	r6,r2
 c00d194:	180f883a 	mov	r7,r3
 c00d198:	c0140c80 	call	c0140c8 <__subdf3>
 c00d19c:	1813883a 	mov	r9,r3
 c00d1a0:	d8c00717 	ldw	r3,28(sp)
 c00d1a4:	8c400c04 	addi	r17,r17,48
 c00d1a8:	1011883a 	mov	r8,r2
 c00d1ac:	1c400005 	stb	r17,0(r3)
 c00d1b0:	da801617 	ldw	r10,88(sp)
 c00d1b4:	00800044 	movi	r2,1
 c00d1b8:	50802326 	beq	r10,r2,c00d248 <_dtoa_r+0x14ac>
 c00d1bc:	d8800717 	ldw	r2,28(sp)
 c00d1c0:	b82b883a 	mov	r21,r23
 c00d1c4:	dc001315 	stw	r16,76(sp)
 c00d1c8:	12a9883a 	add	r20,r2,r10
 c00d1cc:	4807883a 	mov	r3,r9
 c00d1d0:	4005883a 	mov	r2,r8
 c00d1d4:	dc801415 	stw	r18,80(sp)
 c00d1d8:	000d883a 	mov	r6,zero
 c00d1dc:	01d00934 	movhi	r7,16420
 c00d1e0:	1009883a 	mov	r4,r2
 c00d1e4:	180b883a 	mov	r5,r3
 c00d1e8:	c0139a40 	call	c0139a4 <__muldf3>
 c00d1ec:	180b883a 	mov	r5,r3
 c00d1f0:	1009883a 	mov	r4,r2
 c00d1f4:	1821883a 	mov	r16,r3
 c00d1f8:	1025883a 	mov	r18,r2
 c00d1fc:	c0089f00 	call	c0089f0 <__fixdfsi>
 c00d200:	1009883a 	mov	r4,r2
 c00d204:	1023883a 	mov	r17,r2
 c00d208:	c008a780 	call	c008a78 <__floatsidf>
 c00d20c:	9009883a 	mov	r4,r18
 c00d210:	800b883a 	mov	r5,r16
 c00d214:	100d883a 	mov	r6,r2
 c00d218:	180f883a 	mov	r7,r3
 c00d21c:	8c400c04 	addi	r17,r17,48
 c00d220:	c0140c80 	call	c0140c8 <__subdf3>
 c00d224:	ad400044 	addi	r21,r21,1
 c00d228:	ac7fffc5 	stb	r17,-1(r21)
 c00d22c:	ad3fea1e 	bne	r21,r20,c00d1d8 <__alt_data_end+0xfc00d1d8>
 c00d230:	1813883a 	mov	r9,r3
 c00d234:	d8c01017 	ldw	r3,64(sp)
 c00d238:	dc001317 	ldw	r16,76(sp)
 c00d23c:	dc801417 	ldw	r18,80(sp)
 c00d240:	1011883a 	mov	r8,r2
 c00d244:	b8ef883a 	add	r23,r23,r3
 c00d248:	d9000e17 	ldw	r4,56(sp)
 c00d24c:	d9401117 	ldw	r5,68(sp)
 c00d250:	000d883a 	mov	r6,zero
 c00d254:	01cff834 	movhi	r7,16352
 c00d258:	da001715 	stw	r8,92(sp)
 c00d25c:	da401515 	stw	r9,84(sp)
 c00d260:	c012ec40 	call	c012ec4 <__adddf3>
 c00d264:	da001717 	ldw	r8,92(sp)
 c00d268:	da401517 	ldw	r9,84(sp)
 c00d26c:	1009883a 	mov	r4,r2
 c00d270:	400d883a 	mov	r6,r8
 c00d274:	480f883a 	mov	r7,r9
 c00d278:	180b883a 	mov	r5,r3
 c00d27c:	c0138c40 	call	c0138c4 <__ledf2>
 c00d280:	da001717 	ldw	r8,92(sp)
 c00d284:	da401517 	ldw	r9,84(sp)
 c00d288:	10003b0e 	bge	r2,zero,c00d378 <_dtoa_r+0x15dc>
 c00d28c:	d9001217 	ldw	r4,72(sp)
 c00d290:	bd7fffc3 	ldbu	r21,-1(r23)
 c00d294:	d9000515 	stw	r4,20(sp)
 c00d298:	003d1c06 	br	c00c70c <__alt_data_end+0xfc00c70c>
 c00d29c:	d8c00817 	ldw	r3,32(sp)
 c00d2a0:	18a9c83a 	sub	r20,r3,r2
 c00d2a4:	0005883a 	mov	r2,zero
 c00d2a8:	003d3706 	br	c00c788 <__alt_data_end+0xfc00c788>
 c00d2ac:	00800044 	movi	r2,1
 c00d2b0:	003dd006 	br	c00c9f4 <__alt_data_end+0xfc00c9f4>
 c00d2b4:	d8c00217 	ldw	r3,8(sp)
 c00d2b8:	00800d84 	movi	r2,54
 c00d2bc:	dd400917 	ldw	r21,36(sp)
 c00d2c0:	10c5c83a 	sub	r2,r2,r3
 c00d2c4:	dd000817 	ldw	r20,32(sp)
 c00d2c8:	003d2f06 	br	c00c788 <__alt_data_end+0xfc00c788>
 c00d2cc:	9029883a 	mov	r20,r18
 c00d2d0:	982b883a 	mov	r21,r19
 c00d2d4:	04400084 	movi	r17,2
 c00d2d8:	003bc606 	br	c00c1f4 <__alt_data_end+0xfc00c1f4>
 c00d2dc:	d8800617 	ldw	r2,24(sp)
 c00d2e0:	103efc26 	beq	r2,zero,c00ced4 <__alt_data_end+0xfc00ced4>
 c00d2e4:	d8c00d17 	ldw	r3,52(sp)
 c00d2e8:	00fc890e 	bge	zero,r3,c00c510 <__alt_data_end+0xfc00c510>
 c00d2ec:	a80b883a 	mov	r5,r21
 c00d2f0:	a009883a 	mov	r4,r20
 c00d2f4:	000d883a 	mov	r6,zero
 c00d2f8:	01d00934 	movhi	r7,16420
 c00d2fc:	c0139a40 	call	c0139a4 <__muldf3>
 c00d300:	89000044 	addi	r4,r17,1
 c00d304:	1029883a 	mov	r20,r2
 c00d308:	182b883a 	mov	r21,r3
 c00d30c:	c008a780 	call	c008a78 <__floatsidf>
 c00d310:	a009883a 	mov	r4,r20
 c00d314:	a80b883a 	mov	r5,r21
 c00d318:	100d883a 	mov	r6,r2
 c00d31c:	180f883a 	mov	r7,r3
 c00d320:	c0139a40 	call	c0139a4 <__muldf3>
 c00d324:	1009883a 	mov	r4,r2
 c00d328:	180b883a 	mov	r5,r3
 c00d32c:	000d883a 	mov	r6,zero
 c00d330:	01d00734 	movhi	r7,16412
 c00d334:	c012ec40 	call	c012ec4 <__adddf3>
 c00d338:	d9000517 	ldw	r4,20(sp)
 c00d33c:	1023883a 	mov	r17,r2
 c00d340:	00bf3034 	movhi	r2,64704
 c00d344:	213fffc4 	addi	r4,r4,-1
 c00d348:	1885883a 	add	r2,r3,r2
 c00d34c:	d9001215 	stw	r4,72(sp)
 c00d350:	d8800e15 	stw	r2,56(sp)
 c00d354:	da800d17 	ldw	r10,52(sp)
 c00d358:	003bc306 	br	c00c268 <__alt_data_end+0xfc00c268>
 c00d35c:	b039883a 	mov	fp,r22
 c00d360:	01000e44 	movi	r4,57
 c00d364:	8825883a 	mov	r18,r17
 c00d368:	9dc00044 	addi	r23,r19,1
 c00d36c:	99000005 	stb	r4,0(r19)
 c00d370:	a023883a 	mov	r17,r20
 c00d374:	003dae06 	br	c00ca30 <__alt_data_end+0xfc00ca30>
 c00d378:	d9800e17 	ldw	r6,56(sp)
 c00d37c:	d9c01117 	ldw	r7,68(sp)
 c00d380:	0009883a 	mov	r4,zero
 c00d384:	014ff834 	movhi	r5,16352
 c00d388:	da001715 	stw	r8,92(sp)
 c00d38c:	da401515 	stw	r9,84(sp)
 c00d390:	c0140c80 	call	c0140c8 <__subdf3>
 c00d394:	da001717 	ldw	r8,92(sp)
 c00d398:	da401517 	ldw	r9,84(sp)
 c00d39c:	1009883a 	mov	r4,r2
 c00d3a0:	180b883a 	mov	r5,r3
 c00d3a4:	400d883a 	mov	r6,r8
 c00d3a8:	480f883a 	mov	r7,r9
 c00d3ac:	c0137e40 	call	c0137e4 <__gedf2>
 c00d3b0:	00bc570e 	bge	zero,r2,c00c510 <__alt_data_end+0xfc00c510>
 c00d3b4:	01000c04 	movi	r4,48
 c00d3b8:	00000106 	br	c00d3c0 <_dtoa_r+0x1624>
 c00d3bc:	102f883a 	mov	r23,r2
 c00d3c0:	b8bfffc4 	addi	r2,r23,-1
 c00d3c4:	10c00007 	ldb	r3,0(r2)
 c00d3c8:	193ffc26 	beq	r3,r4,c00d3bc <__alt_data_end+0xfc00d3bc>
 c00d3cc:	d9801217 	ldw	r6,72(sp)
 c00d3d0:	d9800515 	stw	r6,20(sp)
 c00d3d4:	003c1f06 	br	c00c454 <__alt_data_end+0xfc00c454>
 c00d3d8:	d8801217 	ldw	r2,72(sp)
 c00d3dc:	dc001117 	ldw	r16,68(sp)
 c00d3e0:	d8800515 	stw	r2,20(sp)
 c00d3e4:	003cc906 	br	c00c70c <__alt_data_end+0xfc00c70c>
 c00d3e8:	dd801317 	ldw	r22,76(sp)
 c00d3ec:	dc001117 	ldw	r16,68(sp)
 c00d3f0:	dcc01417 	ldw	r19,80(sp)
 c00d3f4:	dc801017 	ldw	r18,64(sp)
 c00d3f8:	003c4506 	br	c00c510 <__alt_data_end+0xfc00c510>
 c00d3fc:	103e5d1e 	bne	r2,zero,c00cd74 <__alt_data_end+0xfc00cd74>
 c00d400:	4080004c 	andi	r2,r8,1
 c00d404:	103e5b26 	beq	r2,zero,c00cd74 <__alt_data_end+0xfc00cd74>
 c00d408:	003e5706 	br	c00cd68 <__alt_data_end+0xfc00cd68>
 c00d40c:	d8c00317 	ldw	r3,12(sp)
 c00d410:	00800084 	movi	r2,2
 c00d414:	10c00a16 	blt	r2,r3,c00d440 <_dtoa_r+0x16a4>
 c00d418:	d9000d17 	ldw	r4,52(sp)
 c00d41c:	003e8306 	br	c00ce2c <__alt_data_end+0xfc00ce2c>
 c00d420:	04400084 	movi	r17,2
 c00d424:	003b7306 	br	c00c1f4 <__alt_data_end+0xfc00c1f4>
 c00d428:	d9801217 	ldw	r6,72(sp)
 c00d42c:	d9800515 	stw	r6,20(sp)
 c00d430:	003cb606 	br	c00c70c <__alt_data_end+0xfc00c70c>
 c00d434:	d9001217 	ldw	r4,72(sp)
 c00d438:	d9000515 	stw	r4,20(sp)
 c00d43c:	003c0506 	br	c00c454 <__alt_data_end+0xfc00c454>
 c00d440:	d9800d17 	ldw	r6,52(sp)
 c00d444:	d9800615 	stw	r6,24(sp)
 c00d448:	003e8306 	br	c00ce58 <__alt_data_end+0xfc00ce58>
 c00d44c:	d9800317 	ldw	r6,12(sp)
 c00d450:	00800084 	movi	r2,2
 c00d454:	11800216 	blt	r2,r6,c00d460 <_dtoa_r+0x16c4>
 c00d458:	d8800d17 	ldw	r2,52(sp)
 c00d45c:	003da606 	br	c00caf8 <__alt_data_end+0xfc00caf8>
 c00d460:	d8800d17 	ldw	r2,52(sp)
 c00d464:	d8800615 	stw	r2,24(sp)
 c00d468:	003e7b06 	br	c00ce58 <__alt_data_end+0xfc00ce58>
 c00d46c:	05000044 	movi	r20,1
 c00d470:	003b0506 	br	c00c088 <__alt_data_end+0xfc00c088>
 c00d474:	8009883a 	mov	r4,r16
 c00d478:	80001115 	stw	zero,68(r16)
 c00d47c:	000b883a 	mov	r5,zero
 c00d480:	c00e9c00 	call	c00e9c0 <_Balloc>
 c00d484:	d8800715 	stw	r2,28(sp)
 c00d488:	d8c00717 	ldw	r3,28(sp)
 c00d48c:	00bfffc4 	movi	r2,-1
 c00d490:	01000044 	movi	r4,1
 c00d494:	d8800615 	stw	r2,24(sp)
 c00d498:	80c01015 	stw	r3,64(r16)
 c00d49c:	d9000b15 	stw	r4,44(sp)
 c00d4a0:	d8002215 	stw	zero,136(sp)
 c00d4a4:	d8800d15 	stw	r2,52(sp)
 c00d4a8:	003c1906 	br	c00c510 <__alt_data_end+0xfc00c510>
 c00d4ac:	193d2926 	beq	r3,r4,c00c954 <__alt_data_end+0xfc00c954>
 c00d4b0:	00c00f04 	movi	r3,60
 c00d4b4:	1885c83a 	sub	r2,r3,r2
 c00d4b8:	003d7b06 	br	c00caa8 <__alt_data_end+0xfc00caa8>
 c00d4bc:	000b883a 	mov	r5,zero
 c00d4c0:	003b1006 	br	c00c104 <__alt_data_end+0xfc00c104>

0c00d4c4 <_fflush_r>:
 c00d4c4:	defffb04 	addi	sp,sp,-20
 c00d4c8:	dcc00315 	stw	r19,12(sp)
 c00d4cc:	dc000015 	stw	r16,0(sp)
 c00d4d0:	dfc00415 	stw	ra,16(sp)
 c00d4d4:	dc800215 	stw	r18,8(sp)
 c00d4d8:	dc400115 	stw	r17,4(sp)
 c00d4dc:	2027883a 	mov	r19,r4
 c00d4e0:	2821883a 	mov	r16,r5
 c00d4e4:	20000226 	beq	r4,zero,c00d4f0 <_fflush_r+0x2c>
 c00d4e8:	20800e17 	ldw	r2,56(r4)
 c00d4ec:	10005326 	beq	r2,zero,c00d63c <_fflush_r+0x178>
 c00d4f0:	8080030b 	ldhu	r2,12(r16)
 c00d4f4:	10ffffcc 	andi	r3,r2,65535
 c00d4f8:	18e0001c 	xori	r3,r3,32768
 c00d4fc:	18e00004 	addi	r3,r3,-32768
 c00d500:	18002c26 	beq	r3,zero,c00d5b4 <_fflush_r+0xf0>
 c00d504:	10c0020c 	andi	r3,r2,8
 c00d508:	1800321e 	bne	r3,zero,c00d5d4 <_fflush_r+0x110>
 c00d50c:	80c00117 	ldw	r3,4(r16)
 c00d510:	10820014 	ori	r2,r2,2048
 c00d514:	8080030d 	sth	r2,12(r16)
 c00d518:	00c0570e 	bge	zero,r3,c00d678 <_fflush_r+0x1b4>
 c00d51c:	82000a17 	ldw	r8,40(r16)
 c00d520:	40002426 	beq	r8,zero,c00d5b4 <_fflush_r+0xf0>
 c00d524:	9c400017 	ldw	r17,0(r19)
 c00d528:	10c4000c 	andi	r3,r2,4096
 c00d52c:	98000015 	stw	zero,0(r19)
 c00d530:	18004626 	beq	r3,zero,c00d64c <_fflush_r+0x188>
 c00d534:	81801417 	ldw	r6,80(r16)
 c00d538:	10c0010c 	andi	r3,r2,4
 c00d53c:	18000626 	beq	r3,zero,c00d558 <_fflush_r+0x94>
 c00d540:	80c00117 	ldw	r3,4(r16)
 c00d544:	80800c17 	ldw	r2,48(r16)
 c00d548:	30cdc83a 	sub	r6,r6,r3
 c00d54c:	10000226 	beq	r2,zero,c00d558 <_fflush_r+0x94>
 c00d550:	80800f17 	ldw	r2,60(r16)
 c00d554:	308dc83a 	sub	r6,r6,r2
 c00d558:	81400717 	ldw	r5,28(r16)
 c00d55c:	9809883a 	mov	r4,r19
 c00d560:	000f883a 	mov	r7,zero
 c00d564:	403ee83a 	callr	r8
 c00d568:	00ffffc4 	movi	r3,-1
 c00d56c:	10c04526 	beq	r2,r3,c00d684 <_fflush_r+0x1c0>
 c00d570:	80c0030b 	ldhu	r3,12(r16)
 c00d574:	81000417 	ldw	r4,16(r16)
 c00d578:	80000115 	stw	zero,4(r16)
 c00d57c:	197dffcc 	andi	r5,r3,63487
 c00d580:	8140030d 	sth	r5,12(r16)
 c00d584:	81000015 	stw	r4,0(r16)
 c00d588:	18c4000c 	andi	r3,r3,4096
 c00d58c:	18000126 	beq	r3,zero,c00d594 <_fflush_r+0xd0>
 c00d590:	80801415 	stw	r2,80(r16)
 c00d594:	81400c17 	ldw	r5,48(r16)
 c00d598:	9c400015 	stw	r17,0(r19)
 c00d59c:	28000526 	beq	r5,zero,c00d5b4 <_fflush_r+0xf0>
 c00d5a0:	80801004 	addi	r2,r16,64
 c00d5a4:	28800226 	beq	r5,r2,c00d5b0 <_fflush_r+0xec>
 c00d5a8:	9809883a 	mov	r4,r19
 c00d5ac:	c00dbe00 	call	c00dbe0 <_free_r>
 c00d5b0:	80000c15 	stw	zero,48(r16)
 c00d5b4:	0005883a 	mov	r2,zero
 c00d5b8:	dfc00417 	ldw	ra,16(sp)
 c00d5bc:	dcc00317 	ldw	r19,12(sp)
 c00d5c0:	dc800217 	ldw	r18,8(sp)
 c00d5c4:	dc400117 	ldw	r17,4(sp)
 c00d5c8:	dc000017 	ldw	r16,0(sp)
 c00d5cc:	dec00504 	addi	sp,sp,20
 c00d5d0:	f800283a 	ret
 c00d5d4:	84800417 	ldw	r18,16(r16)
 c00d5d8:	903ff626 	beq	r18,zero,c00d5b4 <__alt_data_end+0xfc00d5b4>
 c00d5dc:	84400017 	ldw	r17,0(r16)
 c00d5e0:	108000cc 	andi	r2,r2,3
 c00d5e4:	84800015 	stw	r18,0(r16)
 c00d5e8:	8ca3c83a 	sub	r17,r17,r18
 c00d5ec:	10001526 	beq	r2,zero,c00d644 <_fflush_r+0x180>
 c00d5f0:	0005883a 	mov	r2,zero
 c00d5f4:	80800215 	stw	r2,8(r16)
 c00d5f8:	04400316 	blt	zero,r17,c00d608 <_fflush_r+0x144>
 c00d5fc:	003fed06 	br	c00d5b4 <__alt_data_end+0xfc00d5b4>
 c00d600:	90a5883a 	add	r18,r18,r2
 c00d604:	047feb0e 	bge	zero,r17,c00d5b4 <__alt_data_end+0xfc00d5b4>
 c00d608:	80800917 	ldw	r2,36(r16)
 c00d60c:	81400717 	ldw	r5,28(r16)
 c00d610:	880f883a 	mov	r7,r17
 c00d614:	900d883a 	mov	r6,r18
 c00d618:	9809883a 	mov	r4,r19
 c00d61c:	103ee83a 	callr	r2
 c00d620:	88a3c83a 	sub	r17,r17,r2
 c00d624:	00bff616 	blt	zero,r2,c00d600 <__alt_data_end+0xfc00d600>
 c00d628:	80c0030b 	ldhu	r3,12(r16)
 c00d62c:	00bfffc4 	movi	r2,-1
 c00d630:	18c01014 	ori	r3,r3,64
 c00d634:	80c0030d 	sth	r3,12(r16)
 c00d638:	003fdf06 	br	c00d5b8 <__alt_data_end+0xfc00d5b8>
 c00d63c:	c00da6c0 	call	c00da6c <__sinit>
 c00d640:	003fab06 	br	c00d4f0 <__alt_data_end+0xfc00d4f0>
 c00d644:	80800517 	ldw	r2,20(r16)
 c00d648:	003fea06 	br	c00d5f4 <__alt_data_end+0xfc00d5f4>
 c00d64c:	81400717 	ldw	r5,28(r16)
 c00d650:	000d883a 	mov	r6,zero
 c00d654:	9809883a 	mov	r4,r19
 c00d658:	01c00044 	movi	r7,1
 c00d65c:	403ee83a 	callr	r8
 c00d660:	100d883a 	mov	r6,r2
 c00d664:	00bfffc4 	movi	r2,-1
 c00d668:	30801326 	beq	r6,r2,c00d6b8 <_fflush_r+0x1f4>
 c00d66c:	8080030b 	ldhu	r2,12(r16)
 c00d670:	82000a17 	ldw	r8,40(r16)
 c00d674:	003fb006 	br	c00d538 <__alt_data_end+0xfc00d538>
 c00d678:	80c00f17 	ldw	r3,60(r16)
 c00d67c:	00ffa716 	blt	zero,r3,c00d51c <__alt_data_end+0xfc00d51c>
 c00d680:	003fcc06 	br	c00d5b4 <__alt_data_end+0xfc00d5b4>
 c00d684:	98c00017 	ldw	r3,0(r19)
 c00d688:	183fb926 	beq	r3,zero,c00d570 <__alt_data_end+0xfc00d570>
 c00d68c:	01000744 	movi	r4,29
 c00d690:	19000226 	beq	r3,r4,c00d69c <_fflush_r+0x1d8>
 c00d694:	01000584 	movi	r4,22
 c00d698:	1900101e 	bne	r3,r4,c00d6dc <_fflush_r+0x218>
 c00d69c:	8080030b 	ldhu	r2,12(r16)
 c00d6a0:	80c00417 	ldw	r3,16(r16)
 c00d6a4:	80000115 	stw	zero,4(r16)
 c00d6a8:	10bdffcc 	andi	r2,r2,63487
 c00d6ac:	8080030d 	sth	r2,12(r16)
 c00d6b0:	80c00015 	stw	r3,0(r16)
 c00d6b4:	003fb706 	br	c00d594 <__alt_data_end+0xfc00d594>
 c00d6b8:	98800017 	ldw	r2,0(r19)
 c00d6bc:	103feb26 	beq	r2,zero,c00d66c <__alt_data_end+0xfc00d66c>
 c00d6c0:	00c00744 	movi	r3,29
 c00d6c4:	10c00226 	beq	r2,r3,c00d6d0 <_fflush_r+0x20c>
 c00d6c8:	00c00584 	movi	r3,22
 c00d6cc:	10ffd61e 	bne	r2,r3,c00d628 <__alt_data_end+0xfc00d628>
 c00d6d0:	9c400015 	stw	r17,0(r19)
 c00d6d4:	0005883a 	mov	r2,zero
 c00d6d8:	003fb706 	br	c00d5b8 <__alt_data_end+0xfc00d5b8>
 c00d6dc:	80c0030b 	ldhu	r3,12(r16)
 c00d6e0:	18c01014 	ori	r3,r3,64
 c00d6e4:	80c0030d 	sth	r3,12(r16)
 c00d6e8:	003fb306 	br	c00d5b8 <__alt_data_end+0xfc00d5b8>

0c00d6ec <fflush>:
 c00d6ec:	20000526 	beq	r4,zero,c00d704 <fflush+0x18>
 c00d6f0:	008300b4 	movhi	r2,3074
 c00d6f4:	10907604 	addi	r2,r2,16856
 c00d6f8:	200b883a 	mov	r5,r4
 c00d6fc:	11000017 	ldw	r4,0(r2)
 c00d700:	c00d4c41 	jmpi	c00d4c4 <_fflush_r>
 c00d704:	008300b4 	movhi	r2,3074
 c00d708:	10907504 	addi	r2,r2,16852
 c00d70c:	11000017 	ldw	r4,0(r2)
 c00d710:	01430074 	movhi	r5,3073
 c00d714:	29753104 	addi	r5,r5,-11068
 c00d718:	c00e42c1 	jmpi	c00e42c <_fwalk_reent>

0c00d71c <__fp_lock>:
 c00d71c:	0005883a 	mov	r2,zero
 c00d720:	f800283a 	ret

0c00d724 <__fp_unlock>:
 c00d724:	0005883a 	mov	r2,zero
 c00d728:	f800283a 	ret

0c00d72c <_cleanup_r>:
 c00d72c:	01430074 	movhi	r5,3073
 c00d730:	29478804 	addi	r5,r5,7712
 c00d734:	c00e3741 	jmpi	c00e374 <_fwalk>

0c00d738 <__sinit.part.1>:
 c00d738:	defff604 	addi	sp,sp,-40
 c00d73c:	00c30074 	movhi	r3,3073
 c00d740:	dfc00915 	stw	ra,36(sp)
 c00d744:	df000815 	stw	fp,32(sp)
 c00d748:	ddc00715 	stw	r23,28(sp)
 c00d74c:	dd800615 	stw	r22,24(sp)
 c00d750:	dd400515 	stw	r21,20(sp)
 c00d754:	dd000415 	stw	r20,16(sp)
 c00d758:	dcc00315 	stw	r19,12(sp)
 c00d75c:	dc800215 	stw	r18,8(sp)
 c00d760:	dc400115 	stw	r17,4(sp)
 c00d764:	dc000015 	stw	r16,0(sp)
 c00d768:	18f5cb04 	addi	r3,r3,-10452
 c00d76c:	24000117 	ldw	r16,4(r4)
 c00d770:	20c00f15 	stw	r3,60(r4)
 c00d774:	07000044 	movi	fp,1
 c00d778:	00c000c4 	movi	r3,3
 c00d77c:	2080bb04 	addi	r2,r4,748
 c00d780:	20c0b915 	stw	r3,740(r4)
 c00d784:	27000e15 	stw	fp,56(r4)
 c00d788:	2080ba15 	stw	r2,744(r4)
 c00d78c:	2000b815 	stw	zero,736(r4)
 c00d790:	05c00204 	movi	r23,8
 c00d794:	00800104 	movi	r2,4
 c00d798:	2025883a 	mov	r18,r4
 c00d79c:	b80d883a 	mov	r6,r23
 c00d7a0:	81001704 	addi	r4,r16,92
 c00d7a4:	000b883a 	mov	r5,zero
 c00d7a8:	80000015 	stw	zero,0(r16)
 c00d7ac:	80000115 	stw	zero,4(r16)
 c00d7b0:	80000215 	stw	zero,8(r16)
 c00d7b4:	8080030d 	sth	r2,12(r16)
 c00d7b8:	80001915 	stw	zero,100(r16)
 c00d7bc:	8000038d 	sth	zero,14(r16)
 c00d7c0:	80000415 	stw	zero,16(r16)
 c00d7c4:	80000515 	stw	zero,20(r16)
 c00d7c8:	80000615 	stw	zero,24(r16)
 c00d7cc:	c0096b40 	call	c0096b4 <memset>
 c00d7d0:	05830074 	movhi	r22,3073
 c00d7d4:	94400217 	ldw	r17,8(r18)
 c00d7d8:	05430074 	movhi	r21,3073
 c00d7dc:	05030074 	movhi	r20,3073
 c00d7e0:	04c30074 	movhi	r19,3073
 c00d7e4:	b580f204 	addi	r22,r22,968
 c00d7e8:	ad410904 	addi	r21,r21,1060
 c00d7ec:	a5012804 	addi	r20,r20,1184
 c00d7f0:	9cc13f04 	addi	r19,r19,1276
 c00d7f4:	85800815 	stw	r22,32(r16)
 c00d7f8:	85400915 	stw	r21,36(r16)
 c00d7fc:	85000a15 	stw	r20,40(r16)
 c00d800:	84c00b15 	stw	r19,44(r16)
 c00d804:	84000715 	stw	r16,28(r16)
 c00d808:	00800284 	movi	r2,10
 c00d80c:	89001704 	addi	r4,r17,92
 c00d810:	b80d883a 	mov	r6,r23
 c00d814:	000b883a 	mov	r5,zero
 c00d818:	88000015 	stw	zero,0(r17)
 c00d81c:	88000115 	stw	zero,4(r17)
 c00d820:	88000215 	stw	zero,8(r17)
 c00d824:	8880030d 	sth	r2,12(r17)
 c00d828:	88001915 	stw	zero,100(r17)
 c00d82c:	8f00038d 	sth	fp,14(r17)
 c00d830:	88000415 	stw	zero,16(r17)
 c00d834:	88000515 	stw	zero,20(r17)
 c00d838:	88000615 	stw	zero,24(r17)
 c00d83c:	c0096b40 	call	c0096b4 <memset>
 c00d840:	94000317 	ldw	r16,12(r18)
 c00d844:	00800484 	movi	r2,18
 c00d848:	8c400715 	stw	r17,28(r17)
 c00d84c:	8d800815 	stw	r22,32(r17)
 c00d850:	8d400915 	stw	r21,36(r17)
 c00d854:	8d000a15 	stw	r20,40(r17)
 c00d858:	8cc00b15 	stw	r19,44(r17)
 c00d85c:	8080030d 	sth	r2,12(r16)
 c00d860:	00800084 	movi	r2,2
 c00d864:	80000015 	stw	zero,0(r16)
 c00d868:	80000115 	stw	zero,4(r16)
 c00d86c:	80000215 	stw	zero,8(r16)
 c00d870:	80001915 	stw	zero,100(r16)
 c00d874:	8080038d 	sth	r2,14(r16)
 c00d878:	80000415 	stw	zero,16(r16)
 c00d87c:	80000515 	stw	zero,20(r16)
 c00d880:	80000615 	stw	zero,24(r16)
 c00d884:	81001704 	addi	r4,r16,92
 c00d888:	000b883a 	mov	r5,zero
 c00d88c:	b80d883a 	mov	r6,r23
 c00d890:	c0096b40 	call	c0096b4 <memset>
 c00d894:	84000715 	stw	r16,28(r16)
 c00d898:	85800815 	stw	r22,32(r16)
 c00d89c:	85400915 	stw	r21,36(r16)
 c00d8a0:	85000a15 	stw	r20,40(r16)
 c00d8a4:	84c00b15 	stw	r19,44(r16)
 c00d8a8:	dfc00917 	ldw	ra,36(sp)
 c00d8ac:	df000817 	ldw	fp,32(sp)
 c00d8b0:	ddc00717 	ldw	r23,28(sp)
 c00d8b4:	dd800617 	ldw	r22,24(sp)
 c00d8b8:	dd400517 	ldw	r21,20(sp)
 c00d8bc:	dd000417 	ldw	r20,16(sp)
 c00d8c0:	dcc00317 	ldw	r19,12(sp)
 c00d8c4:	dc800217 	ldw	r18,8(sp)
 c00d8c8:	dc400117 	ldw	r17,4(sp)
 c00d8cc:	dc000017 	ldw	r16,0(sp)
 c00d8d0:	dec00a04 	addi	sp,sp,40
 c00d8d4:	f800283a 	ret

0c00d8d8 <__sfmoreglue>:
 c00d8d8:	defffc04 	addi	sp,sp,-16
 c00d8dc:	dc400115 	stw	r17,4(sp)
 c00d8e0:	2c401a24 	muli	r17,r5,104
 c00d8e4:	dc800215 	stw	r18,8(sp)
 c00d8e8:	2825883a 	mov	r18,r5
 c00d8ec:	89400304 	addi	r5,r17,12
 c00d8f0:	dc000015 	stw	r16,0(sp)
 c00d8f4:	dfc00315 	stw	ra,12(sp)
 c00d8f8:	c008dd40 	call	c008dd4 <_malloc_r>
 c00d8fc:	1021883a 	mov	r16,r2
 c00d900:	10000726 	beq	r2,zero,c00d920 <__sfmoreglue+0x48>
 c00d904:	11000304 	addi	r4,r2,12
 c00d908:	10000015 	stw	zero,0(r2)
 c00d90c:	14800115 	stw	r18,4(r2)
 c00d910:	11000215 	stw	r4,8(r2)
 c00d914:	000b883a 	mov	r5,zero
 c00d918:	880d883a 	mov	r6,r17
 c00d91c:	c0096b40 	call	c0096b4 <memset>
 c00d920:	8005883a 	mov	r2,r16
 c00d924:	dfc00317 	ldw	ra,12(sp)
 c00d928:	dc800217 	ldw	r18,8(sp)
 c00d92c:	dc400117 	ldw	r17,4(sp)
 c00d930:	dc000017 	ldw	r16,0(sp)
 c00d934:	dec00404 	addi	sp,sp,16
 c00d938:	f800283a 	ret

0c00d93c <__sfp>:
 c00d93c:	008300b4 	movhi	r2,3074
 c00d940:	defffb04 	addi	sp,sp,-20
 c00d944:	10907504 	addi	r2,r2,16852
 c00d948:	dc800215 	stw	r18,8(sp)
 c00d94c:	14800017 	ldw	r18,0(r2)
 c00d950:	dcc00315 	stw	r19,12(sp)
 c00d954:	dfc00415 	stw	ra,16(sp)
 c00d958:	90800e17 	ldw	r2,56(r18)
 c00d95c:	dc400115 	stw	r17,4(sp)
 c00d960:	dc000015 	stw	r16,0(sp)
 c00d964:	2027883a 	mov	r19,r4
 c00d968:	1000021e 	bne	r2,zero,c00d974 <__sfp+0x38>
 c00d96c:	9009883a 	mov	r4,r18
 c00d970:	c00d7380 	call	c00d738 <__sinit.part.1>
 c00d974:	9480b804 	addi	r18,r18,736
 c00d978:	047fffc4 	movi	r17,-1
 c00d97c:	91400117 	ldw	r5,4(r18)
 c00d980:	94000217 	ldw	r16,8(r18)
 c00d984:	297fffc4 	addi	r5,r5,-1
 c00d988:	28000a16 	blt	r5,zero,c00d9b4 <__sfp+0x78>
 c00d98c:	8080030f 	ldh	r2,12(r16)
 c00d990:	10000c26 	beq	r2,zero,c00d9c4 <__sfp+0x88>
 c00d994:	80c01d04 	addi	r3,r16,116
 c00d998:	00000206 	br	c00d9a4 <__sfp+0x68>
 c00d99c:	18bfe60f 	ldh	r2,-104(r3)
 c00d9a0:	10000826 	beq	r2,zero,c00d9c4 <__sfp+0x88>
 c00d9a4:	297fffc4 	addi	r5,r5,-1
 c00d9a8:	1c3ffd04 	addi	r16,r3,-12
 c00d9ac:	18c01a04 	addi	r3,r3,104
 c00d9b0:	2c7ffa1e 	bne	r5,r17,c00d99c <__alt_data_end+0xfc00d99c>
 c00d9b4:	90800017 	ldw	r2,0(r18)
 c00d9b8:	10001d26 	beq	r2,zero,c00da30 <__sfp+0xf4>
 c00d9bc:	1025883a 	mov	r18,r2
 c00d9c0:	003fee06 	br	c00d97c <__alt_data_end+0xfc00d97c>
 c00d9c4:	00bfffc4 	movi	r2,-1
 c00d9c8:	8080038d 	sth	r2,14(r16)
 c00d9cc:	00800044 	movi	r2,1
 c00d9d0:	8080030d 	sth	r2,12(r16)
 c00d9d4:	80001915 	stw	zero,100(r16)
 c00d9d8:	80000015 	stw	zero,0(r16)
 c00d9dc:	80000215 	stw	zero,8(r16)
 c00d9e0:	80000115 	stw	zero,4(r16)
 c00d9e4:	80000415 	stw	zero,16(r16)
 c00d9e8:	80000515 	stw	zero,20(r16)
 c00d9ec:	80000615 	stw	zero,24(r16)
 c00d9f0:	81001704 	addi	r4,r16,92
 c00d9f4:	000b883a 	mov	r5,zero
 c00d9f8:	01800204 	movi	r6,8
 c00d9fc:	c0096b40 	call	c0096b4 <memset>
 c00da00:	8005883a 	mov	r2,r16
 c00da04:	80000c15 	stw	zero,48(r16)
 c00da08:	80000d15 	stw	zero,52(r16)
 c00da0c:	80001115 	stw	zero,68(r16)
 c00da10:	80001215 	stw	zero,72(r16)
 c00da14:	dfc00417 	ldw	ra,16(sp)
 c00da18:	dcc00317 	ldw	r19,12(sp)
 c00da1c:	dc800217 	ldw	r18,8(sp)
 c00da20:	dc400117 	ldw	r17,4(sp)
 c00da24:	dc000017 	ldw	r16,0(sp)
 c00da28:	dec00504 	addi	sp,sp,20
 c00da2c:	f800283a 	ret
 c00da30:	9809883a 	mov	r4,r19
 c00da34:	01400104 	movi	r5,4
 c00da38:	c00d8d80 	call	c00d8d8 <__sfmoreglue>
 c00da3c:	90800015 	stw	r2,0(r18)
 c00da40:	103fde1e 	bne	r2,zero,c00d9bc <__alt_data_end+0xfc00d9bc>
 c00da44:	00800304 	movi	r2,12
 c00da48:	98800015 	stw	r2,0(r19)
 c00da4c:	0005883a 	mov	r2,zero
 c00da50:	003ff006 	br	c00da14 <__alt_data_end+0xfc00da14>

0c00da54 <_cleanup>:
 c00da54:	008300b4 	movhi	r2,3074
 c00da58:	10907504 	addi	r2,r2,16852
 c00da5c:	11000017 	ldw	r4,0(r2)
 c00da60:	01430074 	movhi	r5,3073
 c00da64:	29478804 	addi	r5,r5,7712
 c00da68:	c00e3741 	jmpi	c00e374 <_fwalk>

0c00da6c <__sinit>:
 c00da6c:	20800e17 	ldw	r2,56(r4)
 c00da70:	10000126 	beq	r2,zero,c00da78 <__sinit+0xc>
 c00da74:	f800283a 	ret
 c00da78:	c00d7381 	jmpi	c00d738 <__sinit.part.1>

0c00da7c <__sfp_lock_acquire>:
 c00da7c:	f800283a 	ret

0c00da80 <__sfp_lock_release>:
 c00da80:	f800283a 	ret

0c00da84 <__sinit_lock_acquire>:
 c00da84:	f800283a 	ret

0c00da88 <__sinit_lock_release>:
 c00da88:	f800283a 	ret

0c00da8c <__fp_lock_all>:
 c00da8c:	008300b4 	movhi	r2,3074
 c00da90:	10907604 	addi	r2,r2,16856
 c00da94:	11000017 	ldw	r4,0(r2)
 c00da98:	01430074 	movhi	r5,3073
 c00da9c:	2975c704 	addi	r5,r5,-10468
 c00daa0:	c00e3741 	jmpi	c00e374 <_fwalk>

0c00daa4 <__fp_unlock_all>:
 c00daa4:	008300b4 	movhi	r2,3074
 c00daa8:	10907604 	addi	r2,r2,16856
 c00daac:	11000017 	ldw	r4,0(r2)
 c00dab0:	01430074 	movhi	r5,3073
 c00dab4:	2975c904 	addi	r5,r5,-10460
 c00dab8:	c00e3741 	jmpi	c00e374 <_fwalk>

0c00dabc <_malloc_trim_r>:
 c00dabc:	defffb04 	addi	sp,sp,-20
 c00dac0:	dcc00315 	stw	r19,12(sp)
 c00dac4:	04c300b4 	movhi	r19,3074
 c00dac8:	dc800215 	stw	r18,8(sp)
 c00dacc:	dc400115 	stw	r17,4(sp)
 c00dad0:	dc000015 	stw	r16,0(sp)
 c00dad4:	dfc00415 	stw	ra,16(sp)
 c00dad8:	2821883a 	mov	r16,r5
 c00dadc:	9ccac204 	addi	r19,r19,11016
 c00dae0:	2025883a 	mov	r18,r4
 c00dae4:	c0153800 	call	c015380 <__malloc_lock>
 c00dae8:	98800217 	ldw	r2,8(r19)
 c00daec:	14400117 	ldw	r17,4(r2)
 c00daf0:	00bfff04 	movi	r2,-4
 c00daf4:	88a2703a 	and	r17,r17,r2
 c00daf8:	8c21c83a 	sub	r16,r17,r16
 c00dafc:	8403fbc4 	addi	r16,r16,4079
 c00db00:	8020d33a 	srli	r16,r16,12
 c00db04:	0083ffc4 	movi	r2,4095
 c00db08:	843fffc4 	addi	r16,r16,-1
 c00db0c:	8020933a 	slli	r16,r16,12
 c00db10:	1400060e 	bge	r2,r16,c00db2c <_malloc_trim_r+0x70>
 c00db14:	9009883a 	mov	r4,r18
 c00db18:	000b883a 	mov	r5,zero
 c00db1c:	c00992c0 	call	c00992c <_sbrk_r>
 c00db20:	98c00217 	ldw	r3,8(r19)
 c00db24:	1c47883a 	add	r3,r3,r17
 c00db28:	10c00a26 	beq	r2,r3,c00db54 <_malloc_trim_r+0x98>
 c00db2c:	9009883a 	mov	r4,r18
 c00db30:	c0153a00 	call	c0153a0 <__malloc_unlock>
 c00db34:	0005883a 	mov	r2,zero
 c00db38:	dfc00417 	ldw	ra,16(sp)
 c00db3c:	dcc00317 	ldw	r19,12(sp)
 c00db40:	dc800217 	ldw	r18,8(sp)
 c00db44:	dc400117 	ldw	r17,4(sp)
 c00db48:	dc000017 	ldw	r16,0(sp)
 c00db4c:	dec00504 	addi	sp,sp,20
 c00db50:	f800283a 	ret
 c00db54:	9009883a 	mov	r4,r18
 c00db58:	040bc83a 	sub	r5,zero,r16
 c00db5c:	c00992c0 	call	c00992c <_sbrk_r>
 c00db60:	00ffffc4 	movi	r3,-1
 c00db64:	10c00d26 	beq	r2,r3,c00db9c <_malloc_trim_r+0xe0>
 c00db68:	00c302b4 	movhi	r3,3082
 c00db6c:	18d81604 	addi	r3,r3,24664
 c00db70:	18800017 	ldw	r2,0(r3)
 c00db74:	99000217 	ldw	r4,8(r19)
 c00db78:	8c23c83a 	sub	r17,r17,r16
 c00db7c:	8c400054 	ori	r17,r17,1
 c00db80:	1421c83a 	sub	r16,r2,r16
 c00db84:	24400115 	stw	r17,4(r4)
 c00db88:	9009883a 	mov	r4,r18
 c00db8c:	1c000015 	stw	r16,0(r3)
 c00db90:	c0153a00 	call	c0153a0 <__malloc_unlock>
 c00db94:	00800044 	movi	r2,1
 c00db98:	003fe706 	br	c00db38 <__alt_data_end+0xfc00db38>
 c00db9c:	9009883a 	mov	r4,r18
 c00dba0:	000b883a 	mov	r5,zero
 c00dba4:	c00992c0 	call	c00992c <_sbrk_r>
 c00dba8:	99000217 	ldw	r4,8(r19)
 c00dbac:	014003c4 	movi	r5,15
 c00dbb0:	1107c83a 	sub	r3,r2,r4
 c00dbb4:	28ffdd0e 	bge	r5,r3,c00db2c <__alt_data_end+0xfc00db2c>
 c00dbb8:	014300b4 	movhi	r5,3074
 c00dbbc:	29507704 	addi	r5,r5,16860
 c00dbc0:	29400017 	ldw	r5,0(r5)
 c00dbc4:	18c00054 	ori	r3,r3,1
 c00dbc8:	20c00115 	stw	r3,4(r4)
 c00dbcc:	00c302b4 	movhi	r3,3082
 c00dbd0:	1145c83a 	sub	r2,r2,r5
 c00dbd4:	18d81604 	addi	r3,r3,24664
 c00dbd8:	18800015 	stw	r2,0(r3)
 c00dbdc:	003fd306 	br	c00db2c <__alt_data_end+0xfc00db2c>

0c00dbe0 <_free_r>:
 c00dbe0:	28004c26 	beq	r5,zero,c00dd14 <_free_r+0x134>
 c00dbe4:	defffd04 	addi	sp,sp,-12
 c00dbe8:	dc400115 	stw	r17,4(sp)
 c00dbec:	dc000015 	stw	r16,0(sp)
 c00dbf0:	2023883a 	mov	r17,r4
 c00dbf4:	2821883a 	mov	r16,r5
 c00dbf8:	dfc00215 	stw	ra,8(sp)
 c00dbfc:	c0153800 	call	c015380 <__malloc_lock>
 c00dc00:	813fff17 	ldw	r4,-4(r16)
 c00dc04:	00bfff84 	movi	r2,-2
 c00dc08:	024300b4 	movhi	r9,3074
 c00dc0c:	81bffe04 	addi	r6,r16,-8
 c00dc10:	2084703a 	and	r2,r4,r2
 c00dc14:	4a4ac204 	addi	r9,r9,11016
 c00dc18:	308b883a 	add	r5,r6,r2
 c00dc1c:	2a000117 	ldw	r8,4(r5)
 c00dc20:	49c00217 	ldw	r7,8(r9)
 c00dc24:	00ffff04 	movi	r3,-4
 c00dc28:	40c6703a 	and	r3,r8,r3
 c00dc2c:	39405326 	beq	r7,r5,c00dd7c <_free_r+0x19c>
 c00dc30:	28c00115 	stw	r3,4(r5)
 c00dc34:	2100004c 	andi	r4,r4,1
 c00dc38:	2000091e 	bne	r4,zero,c00dc60 <_free_r+0x80>
 c00dc3c:	81fffe17 	ldw	r7,-8(r16)
 c00dc40:	4a000204 	addi	r8,r9,8
 c00dc44:	31cdc83a 	sub	r6,r6,r7
 c00dc48:	31000217 	ldw	r4,8(r6)
 c00dc4c:	11c5883a 	add	r2,r2,r7
 c00dc50:	22006126 	beq	r4,r8,c00ddd8 <_free_r+0x1f8>
 c00dc54:	31c00317 	ldw	r7,12(r6)
 c00dc58:	21c00315 	stw	r7,12(r4)
 c00dc5c:	39000215 	stw	r4,8(r7)
 c00dc60:	28c9883a 	add	r4,r5,r3
 c00dc64:	21c00117 	ldw	r7,4(r4)
 c00dc68:	39c0004c 	andi	r7,r7,1
 c00dc6c:	38000d1e 	bne	r7,zero,c00dca4 <_free_r+0xc4>
 c00dc70:	29000217 	ldw	r4,8(r5)
 c00dc74:	10c5883a 	add	r2,r2,r3
 c00dc78:	00c300b4 	movhi	r3,3074
 c00dc7c:	18cac404 	addi	r3,r3,11024
 c00dc80:	20c07526 	beq	r4,r3,c00de58 <_free_r+0x278>
 c00dc84:	29c00317 	ldw	r7,12(r5)
 c00dc88:	11400054 	ori	r5,r2,1
 c00dc8c:	3087883a 	add	r3,r6,r2
 c00dc90:	21c00315 	stw	r7,12(r4)
 c00dc94:	39000215 	stw	r4,8(r7)
 c00dc98:	31400115 	stw	r5,4(r6)
 c00dc9c:	18800015 	stw	r2,0(r3)
 c00dca0:	00000406 	br	c00dcb4 <_free_r+0xd4>
 c00dca4:	10c00054 	ori	r3,r2,1
 c00dca8:	30c00115 	stw	r3,4(r6)
 c00dcac:	3087883a 	add	r3,r6,r2
 c00dcb0:	18800015 	stw	r2,0(r3)
 c00dcb4:	00c07fc4 	movi	r3,511
 c00dcb8:	18801736 	bltu	r3,r2,c00dd18 <_free_r+0x138>
 c00dcbc:	1004d0fa 	srli	r2,r2,3
 c00dcc0:	01400044 	movi	r5,1
 c00dcc4:	49000117 	ldw	r4,4(r9)
 c00dcc8:	1087883a 	add	r3,r2,r2
 c00dccc:	18c7883a 	add	r3,r3,r3
 c00dcd0:	1005d0ba 	srai	r2,r2,2
 c00dcd4:	18c7883a 	add	r3,r3,r3
 c00dcd8:	1a47883a 	add	r3,r3,r9
 c00dcdc:	19c00217 	ldw	r7,8(r3)
 c00dce0:	2884983a 	sll	r2,r5,r2
 c00dce4:	30c00315 	stw	r3,12(r6)
 c00dce8:	31c00215 	stw	r7,8(r6)
 c00dcec:	1104b03a 	or	r2,r2,r4
 c00dcf0:	19800215 	stw	r6,8(r3)
 c00dcf4:	48800115 	stw	r2,4(r9)
 c00dcf8:	39800315 	stw	r6,12(r7)
 c00dcfc:	8809883a 	mov	r4,r17
 c00dd00:	dfc00217 	ldw	ra,8(sp)
 c00dd04:	dc400117 	ldw	r17,4(sp)
 c00dd08:	dc000017 	ldw	r16,0(sp)
 c00dd0c:	dec00304 	addi	sp,sp,12
 c00dd10:	c0153a01 	jmpi	c0153a0 <__malloc_unlock>
 c00dd14:	f800283a 	ret
 c00dd18:	1006d27a 	srli	r3,r2,9
 c00dd1c:	01000104 	movi	r4,4
 c00dd20:	20c04036 	bltu	r4,r3,c00de24 <_free_r+0x244>
 c00dd24:	1006d1ba 	srli	r3,r2,6
 c00dd28:	19400e04 	addi	r5,r3,56
 c00dd2c:	2947883a 	add	r3,r5,r5
 c00dd30:	18c7883a 	add	r3,r3,r3
 c00dd34:	18c7883a 	add	r3,r3,r3
 c00dd38:	1a49883a 	add	r4,r3,r9
 c00dd3c:	20c00217 	ldw	r3,8(r4)
 c00dd40:	01c300b4 	movhi	r7,3074
 c00dd44:	39cac204 	addi	r7,r7,11016
 c00dd48:	19003b26 	beq	r3,r4,c00de38 <_free_r+0x258>
 c00dd4c:	01ffff04 	movi	r7,-4
 c00dd50:	19400117 	ldw	r5,4(r3)
 c00dd54:	29ca703a 	and	r5,r5,r7
 c00dd58:	1140022e 	bgeu	r2,r5,c00dd64 <_free_r+0x184>
 c00dd5c:	18c00217 	ldw	r3,8(r3)
 c00dd60:	20fffb1e 	bne	r4,r3,c00dd50 <__alt_data_end+0xfc00dd50>
 c00dd64:	18800317 	ldw	r2,12(r3)
 c00dd68:	30800315 	stw	r2,12(r6)
 c00dd6c:	30c00215 	stw	r3,8(r6)
 c00dd70:	11800215 	stw	r6,8(r2)
 c00dd74:	19800315 	stw	r6,12(r3)
 c00dd78:	003fe006 	br	c00dcfc <__alt_data_end+0xfc00dcfc>
 c00dd7c:	2100004c 	andi	r4,r4,1
 c00dd80:	1885883a 	add	r2,r3,r2
 c00dd84:	2000071e 	bne	r4,zero,c00dda4 <_free_r+0x1c4>
 c00dd88:	817ffe17 	ldw	r5,-8(r16)
 c00dd8c:	314dc83a 	sub	r6,r6,r5
 c00dd90:	30c00317 	ldw	r3,12(r6)
 c00dd94:	31000217 	ldw	r4,8(r6)
 c00dd98:	1145883a 	add	r2,r2,r5
 c00dd9c:	20c00315 	stw	r3,12(r4)
 c00dda0:	19000215 	stw	r4,8(r3)
 c00dda4:	10c00054 	ori	r3,r2,1
 c00dda8:	30c00115 	stw	r3,4(r6)
 c00ddac:	00c300b4 	movhi	r3,3074
 c00ddb0:	18d07804 	addi	r3,r3,16864
 c00ddb4:	18c00017 	ldw	r3,0(r3)
 c00ddb8:	49800215 	stw	r6,8(r9)
 c00ddbc:	10ffcf36 	bltu	r2,r3,c00dcfc <__alt_data_end+0xfc00dcfc>
 c00ddc0:	008300b4 	movhi	r2,3074
 c00ddc4:	10975504 	addi	r2,r2,23892
 c00ddc8:	11400017 	ldw	r5,0(r2)
 c00ddcc:	8809883a 	mov	r4,r17
 c00ddd0:	c00dabc0 	call	c00dabc <_malloc_trim_r>
 c00ddd4:	003fc906 	br	c00dcfc <__alt_data_end+0xfc00dcfc>
 c00ddd8:	28c9883a 	add	r4,r5,r3
 c00dddc:	21000117 	ldw	r4,4(r4)
 c00dde0:	2100004c 	andi	r4,r4,1
 c00dde4:	20000a1e 	bne	r4,zero,c00de10 <_free_r+0x230>
 c00dde8:	29000317 	ldw	r4,12(r5)
 c00ddec:	29400217 	ldw	r5,8(r5)
 c00ddf0:	10c5883a 	add	r2,r2,r3
 c00ddf4:	10c00054 	ori	r3,r2,1
 c00ddf8:	29000315 	stw	r4,12(r5)
 c00ddfc:	21400215 	stw	r5,8(r4)
 c00de00:	30c00115 	stw	r3,4(r6)
 c00de04:	308d883a 	add	r6,r6,r2
 c00de08:	30800015 	stw	r2,0(r6)
 c00de0c:	003fbb06 	br	c00dcfc <__alt_data_end+0xfc00dcfc>
 c00de10:	10c00054 	ori	r3,r2,1
 c00de14:	30c00115 	stw	r3,4(r6)
 c00de18:	308d883a 	add	r6,r6,r2
 c00de1c:	30800015 	stw	r2,0(r6)
 c00de20:	003fb606 	br	c00dcfc <__alt_data_end+0xfc00dcfc>
 c00de24:	01000504 	movi	r4,20
 c00de28:	20c01436 	bltu	r4,r3,c00de7c <_free_r+0x29c>
 c00de2c:	194016c4 	addi	r5,r3,91
 c00de30:	2947883a 	add	r3,r5,r5
 c00de34:	003fbe06 	br	c00dd30 <__alt_data_end+0xfc00dd30>
 c00de38:	280bd0ba 	srai	r5,r5,2
 c00de3c:	00800044 	movi	r2,1
 c00de40:	39000117 	ldw	r4,4(r7)
 c00de44:	114a983a 	sll	r5,r2,r5
 c00de48:	1805883a 	mov	r2,r3
 c00de4c:	2908b03a 	or	r4,r5,r4
 c00de50:	39000115 	stw	r4,4(r7)
 c00de54:	003fc406 	br	c00dd68 <__alt_data_end+0xfc00dd68>
 c00de58:	49800515 	stw	r6,20(r9)
 c00de5c:	49800415 	stw	r6,16(r9)
 c00de60:	10c00054 	ori	r3,r2,1
 c00de64:	31000315 	stw	r4,12(r6)
 c00de68:	31000215 	stw	r4,8(r6)
 c00de6c:	30c00115 	stw	r3,4(r6)
 c00de70:	308d883a 	add	r6,r6,r2
 c00de74:	30800015 	stw	r2,0(r6)
 c00de78:	003fa006 	br	c00dcfc <__alt_data_end+0xfc00dcfc>
 c00de7c:	01001504 	movi	r4,84
 c00de80:	20c00436 	bltu	r4,r3,c00de94 <_free_r+0x2b4>
 c00de84:	1006d33a 	srli	r3,r2,12
 c00de88:	19401b84 	addi	r5,r3,110
 c00de8c:	2947883a 	add	r3,r5,r5
 c00de90:	003fa706 	br	c00dd30 <__alt_data_end+0xfc00dd30>
 c00de94:	01005504 	movi	r4,340
 c00de98:	20c00436 	bltu	r4,r3,c00deac <_free_r+0x2cc>
 c00de9c:	1006d3fa 	srli	r3,r2,15
 c00dea0:	19401dc4 	addi	r5,r3,119
 c00dea4:	2947883a 	add	r3,r5,r5
 c00dea8:	003fa106 	br	c00dd30 <__alt_data_end+0xfc00dd30>
 c00deac:	01015504 	movi	r4,1364
 c00deb0:	20c00436 	bltu	r4,r3,c00dec4 <_free_r+0x2e4>
 c00deb4:	1006d4ba 	srli	r3,r2,18
 c00deb8:	19401f04 	addi	r5,r3,124
 c00debc:	2947883a 	add	r3,r5,r5
 c00dec0:	003f9b06 	br	c00dd30 <__alt_data_end+0xfc00dd30>
 c00dec4:	00c03f04 	movi	r3,252
 c00dec8:	01401f84 	movi	r5,126
 c00decc:	003f9806 	br	c00dd30 <__alt_data_end+0xfc00dd30>

0c00ded0 <__sfvwrite_r>:
 c00ded0:	30800217 	ldw	r2,8(r6)
 c00ded4:	10004526 	beq	r2,zero,c00dfec <__sfvwrite_r+0x11c>
 c00ded8:	28c0030b 	ldhu	r3,12(r5)
 c00dedc:	defff404 	addi	sp,sp,-48
 c00dee0:	dd400715 	stw	r21,28(sp)
 c00dee4:	dcc00515 	stw	r19,20(sp)
 c00dee8:	dc000215 	stw	r16,8(sp)
 c00deec:	dfc00b15 	stw	ra,44(sp)
 c00def0:	df000a15 	stw	fp,40(sp)
 c00def4:	ddc00915 	stw	r23,36(sp)
 c00def8:	dd800815 	stw	r22,32(sp)
 c00defc:	dd000615 	stw	r20,24(sp)
 c00df00:	dc800415 	stw	r18,16(sp)
 c00df04:	dc400315 	stw	r17,12(sp)
 c00df08:	1880020c 	andi	r2,r3,8
 c00df0c:	2821883a 	mov	r16,r5
 c00df10:	202b883a 	mov	r21,r4
 c00df14:	3027883a 	mov	r19,r6
 c00df18:	10002526 	beq	r2,zero,c00dfb0 <__sfvwrite_r+0xe0>
 c00df1c:	28800417 	ldw	r2,16(r5)
 c00df20:	10002326 	beq	r2,zero,c00dfb0 <__sfvwrite_r+0xe0>
 c00df24:	1880008c 	andi	r2,r3,2
 c00df28:	9c400017 	ldw	r17,0(r19)
 c00df2c:	10003126 	beq	r2,zero,c00dff4 <__sfvwrite_r+0x124>
 c00df30:	0029883a 	mov	r20,zero
 c00df34:	0025883a 	mov	r18,zero
 c00df38:	05810004 	movi	r22,1024
 c00df3c:	a00d883a 	mov	r6,r20
 c00df40:	a809883a 	mov	r4,r21
 c00df44:	90002526 	beq	r18,zero,c00dfdc <__sfvwrite_r+0x10c>
 c00df48:	900f883a 	mov	r7,r18
 c00df4c:	81400717 	ldw	r5,28(r16)
 c00df50:	b480012e 	bgeu	r22,r18,c00df58 <__sfvwrite_r+0x88>
 c00df54:	01c10004 	movi	r7,1024
 c00df58:	80800917 	ldw	r2,36(r16)
 c00df5c:	103ee83a 	callr	r2
 c00df60:	0080510e 	bge	zero,r2,c00e0a8 <__sfvwrite_r+0x1d8>
 c00df64:	98c00217 	ldw	r3,8(r19)
 c00df68:	a0a9883a 	add	r20,r20,r2
 c00df6c:	90a5c83a 	sub	r18,r18,r2
 c00df70:	1885c83a 	sub	r2,r3,r2
 c00df74:	98800215 	stw	r2,8(r19)
 c00df78:	103ff01e 	bne	r2,zero,c00df3c <__alt_data_end+0xfc00df3c>
 c00df7c:	0005883a 	mov	r2,zero
 c00df80:	dfc00b17 	ldw	ra,44(sp)
 c00df84:	df000a17 	ldw	fp,40(sp)
 c00df88:	ddc00917 	ldw	r23,36(sp)
 c00df8c:	dd800817 	ldw	r22,32(sp)
 c00df90:	dd400717 	ldw	r21,28(sp)
 c00df94:	dd000617 	ldw	r20,24(sp)
 c00df98:	dcc00517 	ldw	r19,20(sp)
 c00df9c:	dc800417 	ldw	r18,16(sp)
 c00dfa0:	dc400317 	ldw	r17,12(sp)
 c00dfa4:	dc000217 	ldw	r16,8(sp)
 c00dfa8:	dec00c04 	addi	sp,sp,48
 c00dfac:	f800283a 	ret
 c00dfb0:	a809883a 	mov	r4,r21
 c00dfb4:	800b883a 	mov	r5,r16
 c00dfb8:	c00ba540 	call	c00ba54 <__swsetup_r>
 c00dfbc:	80c0030b 	ldhu	r3,12(r16)
 c00dfc0:	103fd826 	beq	r2,zero,c00df24 <__alt_data_end+0xfc00df24>
 c00dfc4:	18c01014 	ori	r3,r3,64
 c00dfc8:	80c0030d 	sth	r3,12(r16)
 c00dfcc:	00c00244 	movi	r3,9
 c00dfd0:	00bfffc4 	movi	r2,-1
 c00dfd4:	a8c00015 	stw	r3,0(r21)
 c00dfd8:	003fe906 	br	c00df80 <__alt_data_end+0xfc00df80>
 c00dfdc:	8d000017 	ldw	r20,0(r17)
 c00dfe0:	8c800117 	ldw	r18,4(r17)
 c00dfe4:	8c400204 	addi	r17,r17,8
 c00dfe8:	003fd406 	br	c00df3c <__alt_data_end+0xfc00df3c>
 c00dfec:	0005883a 	mov	r2,zero
 c00dff0:	f800283a 	ret
 c00dff4:	1880004c 	andi	r2,r3,1
 c00dff8:	1000301e 	bne	r2,zero,c00e0bc <__sfvwrite_r+0x1ec>
 c00dffc:	002f883a 	mov	r23,zero
 c00e000:	0025883a 	mov	r18,zero
 c00e004:	90001c26 	beq	r18,zero,c00e078 <__sfvwrite_r+0x1a8>
 c00e008:	1880800c 	andi	r2,r3,512
 c00e00c:	85000217 	ldw	r20,8(r16)
 c00e010:	10006c26 	beq	r2,zero,c00e1c4 <__sfvwrite_r+0x2f4>
 c00e014:	a02d883a 	mov	r22,r20
 c00e018:	95008536 	bltu	r18,r20,c00e230 <__sfvwrite_r+0x360>
 c00e01c:	1881200c 	andi	r2,r3,1152
 c00e020:	10009d1e 	bne	r2,zero,c00e298 <__sfvwrite_r+0x3c8>
 c00e024:	81000017 	ldw	r4,0(r16)
 c00e028:	a039883a 	mov	fp,r20
 c00e02c:	9029883a 	mov	r20,r18
 c00e030:	b80b883a 	mov	r5,r23
 c00e034:	b00d883a 	mov	r6,r22
 c00e038:	c00e8640 	call	c00e864 <memmove>
 c00e03c:	80c00217 	ldw	r3,8(r16)
 c00e040:	81000017 	ldw	r4,0(r16)
 c00e044:	9005883a 	mov	r2,r18
 c00e048:	1f39c83a 	sub	fp,r3,fp
 c00e04c:	258f883a 	add	r7,r4,r22
 c00e050:	87000215 	stw	fp,8(r16)
 c00e054:	81c00015 	stw	r7,0(r16)
 c00e058:	98c00217 	ldw	r3,8(r19)
 c00e05c:	b8af883a 	add	r23,r23,r2
 c00e060:	90a5c83a 	sub	r18,r18,r2
 c00e064:	1d05c83a 	sub	r2,r3,r20
 c00e068:	98800215 	stw	r2,8(r19)
 c00e06c:	103fc326 	beq	r2,zero,c00df7c <__alt_data_end+0xfc00df7c>
 c00e070:	80c0030b 	ldhu	r3,12(r16)
 c00e074:	903fe41e 	bne	r18,zero,c00e008 <__alt_data_end+0xfc00e008>
 c00e078:	8dc00017 	ldw	r23,0(r17)
 c00e07c:	8c800117 	ldw	r18,4(r17)
 c00e080:	8c400204 	addi	r17,r17,8
 c00e084:	003fdf06 	br	c00e004 <__alt_data_end+0xfc00e004>
 c00e088:	c00fab40 	call	c00fab4 <_realloc_r>
 c00e08c:	102d883a 	mov	r22,r2
 c00e090:	1000a01e 	bne	r2,zero,c00e314 <__sfvwrite_r+0x444>
 c00e094:	81400417 	ldw	r5,16(r16)
 c00e098:	a809883a 	mov	r4,r21
 c00e09c:	c00dbe00 	call	c00dbe0 <_free_r>
 c00e0a0:	00800304 	movi	r2,12
 c00e0a4:	a8800015 	stw	r2,0(r21)
 c00e0a8:	80c0030b 	ldhu	r3,12(r16)
 c00e0ac:	00bfffc4 	movi	r2,-1
 c00e0b0:	18c01014 	ori	r3,r3,64
 c00e0b4:	80c0030d 	sth	r3,12(r16)
 c00e0b8:	003fb106 	br	c00df80 <__alt_data_end+0xfc00df80>
 c00e0bc:	0029883a 	mov	r20,zero
 c00e0c0:	0011883a 	mov	r8,zero
 c00e0c4:	0039883a 	mov	fp,zero
 c00e0c8:	0025883a 	mov	r18,zero
 c00e0cc:	90001f26 	beq	r18,zero,c00e14c <__sfvwrite_r+0x27c>
 c00e0d0:	40006826 	beq	r8,zero,c00e274 <__sfvwrite_r+0x3a4>
 c00e0d4:	a02f883a 	mov	r23,r20
 c00e0d8:	9500012e 	bgeu	r18,r20,c00e0e0 <__sfvwrite_r+0x210>
 c00e0dc:	902f883a 	mov	r23,r18
 c00e0e0:	81000017 	ldw	r4,0(r16)
 c00e0e4:	80800417 	ldw	r2,16(r16)
 c00e0e8:	b82d883a 	mov	r22,r23
 c00e0ec:	81800217 	ldw	r6,8(r16)
 c00e0f0:	81c00517 	ldw	r7,20(r16)
 c00e0f4:	1100022e 	bgeu	r2,r4,c00e100 <__sfvwrite_r+0x230>
 c00e0f8:	31c7883a 	add	r3,r6,r7
 c00e0fc:	1dc01816 	blt	r3,r23,c00e160 <__sfvwrite_r+0x290>
 c00e100:	b9c03f16 	blt	r23,r7,c00e200 <__sfvwrite_r+0x330>
 c00e104:	80800917 	ldw	r2,36(r16)
 c00e108:	81400717 	ldw	r5,28(r16)
 c00e10c:	a809883a 	mov	r4,r21
 c00e110:	da000115 	stw	r8,4(sp)
 c00e114:	e00d883a 	mov	r6,fp
 c00e118:	103ee83a 	callr	r2
 c00e11c:	102d883a 	mov	r22,r2
 c00e120:	da000117 	ldw	r8,4(sp)
 c00e124:	00bfe00e 	bge	zero,r2,c00e0a8 <__alt_data_end+0xfc00e0a8>
 c00e128:	a5a9c83a 	sub	r20,r20,r22
 c00e12c:	a0001f26 	beq	r20,zero,c00e1ac <__sfvwrite_r+0x2dc>
 c00e130:	98800217 	ldw	r2,8(r19)
 c00e134:	e5b9883a 	add	fp,fp,r22
 c00e138:	95a5c83a 	sub	r18,r18,r22
 c00e13c:	15adc83a 	sub	r22,r2,r22
 c00e140:	9d800215 	stw	r22,8(r19)
 c00e144:	b03f8d26 	beq	r22,zero,c00df7c <__alt_data_end+0xfc00df7c>
 c00e148:	903fe11e 	bne	r18,zero,c00e0d0 <__alt_data_end+0xfc00e0d0>
 c00e14c:	8f000017 	ldw	fp,0(r17)
 c00e150:	8c800117 	ldw	r18,4(r17)
 c00e154:	0011883a 	mov	r8,zero
 c00e158:	8c400204 	addi	r17,r17,8
 c00e15c:	003fdb06 	br	c00e0cc <__alt_data_end+0xfc00e0cc>
 c00e160:	180d883a 	mov	r6,r3
 c00e164:	e00b883a 	mov	r5,fp
 c00e168:	da000115 	stw	r8,4(sp)
 c00e16c:	d8c00015 	stw	r3,0(sp)
 c00e170:	c00e8640 	call	c00e864 <memmove>
 c00e174:	d8c00017 	ldw	r3,0(sp)
 c00e178:	80800017 	ldw	r2,0(r16)
 c00e17c:	a809883a 	mov	r4,r21
 c00e180:	800b883a 	mov	r5,r16
 c00e184:	10c5883a 	add	r2,r2,r3
 c00e188:	80800015 	stw	r2,0(r16)
 c00e18c:	d8c00015 	stw	r3,0(sp)
 c00e190:	c00d4c40 	call	c00d4c4 <_fflush_r>
 c00e194:	d8c00017 	ldw	r3,0(sp)
 c00e198:	da000117 	ldw	r8,4(sp)
 c00e19c:	103fc21e 	bne	r2,zero,c00e0a8 <__alt_data_end+0xfc00e0a8>
 c00e1a0:	182d883a 	mov	r22,r3
 c00e1a4:	a5a9c83a 	sub	r20,r20,r22
 c00e1a8:	a03fe11e 	bne	r20,zero,c00e130 <__alt_data_end+0xfc00e130>
 c00e1ac:	a809883a 	mov	r4,r21
 c00e1b0:	800b883a 	mov	r5,r16
 c00e1b4:	c00d4c40 	call	c00d4c4 <_fflush_r>
 c00e1b8:	103fbb1e 	bne	r2,zero,c00e0a8 <__alt_data_end+0xfc00e0a8>
 c00e1bc:	0011883a 	mov	r8,zero
 c00e1c0:	003fdb06 	br	c00e130 <__alt_data_end+0xfc00e130>
 c00e1c4:	81000017 	ldw	r4,0(r16)
 c00e1c8:	80800417 	ldw	r2,16(r16)
 c00e1cc:	1100012e 	bgeu	r2,r4,c00e1d4 <__sfvwrite_r+0x304>
 c00e1d0:	a4805a36 	bltu	r20,r18,c00e33c <__sfvwrite_r+0x46c>
 c00e1d4:	81c00517 	ldw	r7,20(r16)
 c00e1d8:	91c01a36 	bltu	r18,r7,c00e244 <__sfvwrite_r+0x374>
 c00e1dc:	80800917 	ldw	r2,36(r16)
 c00e1e0:	81400717 	ldw	r5,28(r16)
 c00e1e4:	a809883a 	mov	r4,r21
 c00e1e8:	b80d883a 	mov	r6,r23
 c00e1ec:	103ee83a 	callr	r2
 c00e1f0:	1029883a 	mov	r20,r2
 c00e1f4:	00bfac0e 	bge	zero,r2,c00e0a8 <__alt_data_end+0xfc00e0a8>
 c00e1f8:	a005883a 	mov	r2,r20
 c00e1fc:	003f9606 	br	c00e058 <__alt_data_end+0xfc00e058>
 c00e200:	b80d883a 	mov	r6,r23
 c00e204:	e00b883a 	mov	r5,fp
 c00e208:	da000115 	stw	r8,4(sp)
 c00e20c:	c00e8640 	call	c00e864 <memmove>
 c00e210:	80800217 	ldw	r2,8(r16)
 c00e214:	80c00017 	ldw	r3,0(r16)
 c00e218:	da000117 	ldw	r8,4(sp)
 c00e21c:	15c5c83a 	sub	r2,r2,r23
 c00e220:	1def883a 	add	r23,r3,r23
 c00e224:	80800215 	stw	r2,8(r16)
 c00e228:	85c00015 	stw	r23,0(r16)
 c00e22c:	003fbe06 	br	c00e128 <__alt_data_end+0xfc00e128>
 c00e230:	81000017 	ldw	r4,0(r16)
 c00e234:	9039883a 	mov	fp,r18
 c00e238:	9029883a 	mov	r20,r18
 c00e23c:	902d883a 	mov	r22,r18
 c00e240:	003f7b06 	br	c00e030 <__alt_data_end+0xfc00e030>
 c00e244:	b80b883a 	mov	r5,r23
 c00e248:	900d883a 	mov	r6,r18
 c00e24c:	c00e8640 	call	c00e864 <memmove>
 c00e250:	80c00217 	ldw	r3,8(r16)
 c00e254:	80800017 	ldw	r2,0(r16)
 c00e258:	9029883a 	mov	r20,r18
 c00e25c:	1c87c83a 	sub	r3,r3,r18
 c00e260:	1485883a 	add	r2,r2,r18
 c00e264:	80800015 	stw	r2,0(r16)
 c00e268:	80c00215 	stw	r3,8(r16)
 c00e26c:	9005883a 	mov	r2,r18
 c00e270:	003f7906 	br	c00e058 <__alt_data_end+0xfc00e058>
 c00e274:	e009883a 	mov	r4,fp
 c00e278:	01400284 	movi	r5,10
 c00e27c:	900d883a 	mov	r6,r18
 c00e280:	c00e77c0 	call	c00e77c <memchr>
 c00e284:	10003826 	beq	r2,zero,c00e368 <__sfvwrite_r+0x498>
 c00e288:	10800044 	addi	r2,r2,1
 c00e28c:	1729c83a 	sub	r20,r2,fp
 c00e290:	02000044 	movi	r8,1
 c00e294:	003f8f06 	br	c00e0d4 <__alt_data_end+0xfc00e0d4>
 c00e298:	80800517 	ldw	r2,20(r16)
 c00e29c:	81400417 	ldw	r5,16(r16)
 c00e2a0:	87000017 	ldw	fp,0(r16)
 c00e2a4:	10a9883a 	add	r20,r2,r2
 c00e2a8:	a085883a 	add	r2,r20,r2
 c00e2ac:	1028d7fa 	srli	r20,r2,31
 c00e2b0:	e179c83a 	sub	fp,fp,r5
 c00e2b4:	e1000044 	addi	r4,fp,1
 c00e2b8:	a085883a 	add	r2,r20,r2
 c00e2bc:	1029d07a 	srai	r20,r2,1
 c00e2c0:	2485883a 	add	r2,r4,r18
 c00e2c4:	a00d883a 	mov	r6,r20
 c00e2c8:	a080022e 	bgeu	r20,r2,c00e2d4 <__sfvwrite_r+0x404>
 c00e2cc:	1029883a 	mov	r20,r2
 c00e2d0:	100d883a 	mov	r6,r2
 c00e2d4:	18c1000c 	andi	r3,r3,1024
 c00e2d8:	a809883a 	mov	r4,r21
 c00e2dc:	183f6a26 	beq	r3,zero,c00e088 <__alt_data_end+0xfc00e088>
 c00e2e0:	300b883a 	mov	r5,r6
 c00e2e4:	c008dd40 	call	c008dd4 <_malloc_r>
 c00e2e8:	102d883a 	mov	r22,r2
 c00e2ec:	103f6c26 	beq	r2,zero,c00e0a0 <__alt_data_end+0xfc00e0a0>
 c00e2f0:	81400417 	ldw	r5,16(r16)
 c00e2f4:	1009883a 	mov	r4,r2
 c00e2f8:	e00d883a 	mov	r6,fp
 c00e2fc:	c00957c0 	call	c00957c <memcpy>
 c00e300:	8080030b 	ldhu	r2,12(r16)
 c00e304:	00fedfc4 	movi	r3,-1153
 c00e308:	10c4703a 	and	r2,r2,r3
 c00e30c:	10802014 	ori	r2,r2,128
 c00e310:	8080030d 	sth	r2,12(r16)
 c00e314:	b709883a 	add	r4,r22,fp
 c00e318:	a707c83a 	sub	r3,r20,fp
 c00e31c:	85800415 	stw	r22,16(r16)
 c00e320:	85000515 	stw	r20,20(r16)
 c00e324:	81000015 	stw	r4,0(r16)
 c00e328:	9039883a 	mov	fp,r18
 c00e32c:	80c00215 	stw	r3,8(r16)
 c00e330:	9029883a 	mov	r20,r18
 c00e334:	902d883a 	mov	r22,r18
 c00e338:	003f3d06 	br	c00e030 <__alt_data_end+0xfc00e030>
 c00e33c:	b80b883a 	mov	r5,r23
 c00e340:	a00d883a 	mov	r6,r20
 c00e344:	c00e8640 	call	c00e864 <memmove>
 c00e348:	80800017 	ldw	r2,0(r16)
 c00e34c:	a809883a 	mov	r4,r21
 c00e350:	800b883a 	mov	r5,r16
 c00e354:	1505883a 	add	r2,r2,r20
 c00e358:	80800015 	stw	r2,0(r16)
 c00e35c:	c00d4c40 	call	c00d4c4 <_fflush_r>
 c00e360:	103fa526 	beq	r2,zero,c00e1f8 <__alt_data_end+0xfc00e1f8>
 c00e364:	003f5006 	br	c00e0a8 <__alt_data_end+0xfc00e0a8>
 c00e368:	95000044 	addi	r20,r18,1
 c00e36c:	02000044 	movi	r8,1
 c00e370:	003f5806 	br	c00e0d4 <__alt_data_end+0xfc00e0d4>

0c00e374 <_fwalk>:
 c00e374:	defff804 	addi	sp,sp,-32
 c00e378:	dd400515 	stw	r21,20(sp)
 c00e37c:	2540b804 	addi	r21,r4,736
 c00e380:	dd800615 	stw	r22,24(sp)
 c00e384:	dd000415 	stw	r20,16(sp)
 c00e388:	dfc00715 	stw	ra,28(sp)
 c00e38c:	dcc00315 	stw	r19,12(sp)
 c00e390:	dc800215 	stw	r18,8(sp)
 c00e394:	dc400115 	stw	r17,4(sp)
 c00e398:	dc000015 	stw	r16,0(sp)
 c00e39c:	2829883a 	mov	r20,r5
 c00e3a0:	002d883a 	mov	r22,zero
 c00e3a4:	c00da7c0 	call	c00da7c <__sfp_lock_acquire>
 c00e3a8:	a8001426 	beq	r21,zero,c00e3fc <_fwalk+0x88>
 c00e3ac:	04ffffc4 	movi	r19,-1
 c00e3b0:	ac400117 	ldw	r17,4(r21)
 c00e3b4:	ac800217 	ldw	r18,8(r21)
 c00e3b8:	8c7fffc4 	addi	r17,r17,-1
 c00e3bc:	88000d16 	blt	r17,zero,c00e3f4 <_fwalk+0x80>
 c00e3c0:	94000304 	addi	r16,r18,12
 c00e3c4:	94800384 	addi	r18,r18,14
 c00e3c8:	80c0000f 	ldh	r3,0(r16)
 c00e3cc:	8c7fffc4 	addi	r17,r17,-1
 c00e3d0:	813ffd04 	addi	r4,r16,-12
 c00e3d4:	18000426 	beq	r3,zero,c00e3e8 <_fwalk+0x74>
 c00e3d8:	90c0000f 	ldh	r3,0(r18)
 c00e3dc:	1cc00226 	beq	r3,r19,c00e3e8 <_fwalk+0x74>
 c00e3e0:	a03ee83a 	callr	r20
 c00e3e4:	b0acb03a 	or	r22,r22,r2
 c00e3e8:	84001a04 	addi	r16,r16,104
 c00e3ec:	94801a04 	addi	r18,r18,104
 c00e3f0:	8cfff51e 	bne	r17,r19,c00e3c8 <__alt_data_end+0xfc00e3c8>
 c00e3f4:	ad400017 	ldw	r21,0(r21)
 c00e3f8:	a83fed1e 	bne	r21,zero,c00e3b0 <__alt_data_end+0xfc00e3b0>
 c00e3fc:	c00da800 	call	c00da80 <__sfp_lock_release>
 c00e400:	b005883a 	mov	r2,r22
 c00e404:	dfc00717 	ldw	ra,28(sp)
 c00e408:	dd800617 	ldw	r22,24(sp)
 c00e40c:	dd400517 	ldw	r21,20(sp)
 c00e410:	dd000417 	ldw	r20,16(sp)
 c00e414:	dcc00317 	ldw	r19,12(sp)
 c00e418:	dc800217 	ldw	r18,8(sp)
 c00e41c:	dc400117 	ldw	r17,4(sp)
 c00e420:	dc000017 	ldw	r16,0(sp)
 c00e424:	dec00804 	addi	sp,sp,32
 c00e428:	f800283a 	ret

0c00e42c <_fwalk_reent>:
 c00e42c:	defff804 	addi	sp,sp,-32
 c00e430:	dd400515 	stw	r21,20(sp)
 c00e434:	2540b804 	addi	r21,r4,736
 c00e438:	dd800615 	stw	r22,24(sp)
 c00e43c:	dd000415 	stw	r20,16(sp)
 c00e440:	dcc00315 	stw	r19,12(sp)
 c00e444:	dfc00715 	stw	ra,28(sp)
 c00e448:	dc800215 	stw	r18,8(sp)
 c00e44c:	dc400115 	stw	r17,4(sp)
 c00e450:	dc000015 	stw	r16,0(sp)
 c00e454:	2027883a 	mov	r19,r4
 c00e458:	2829883a 	mov	r20,r5
 c00e45c:	002d883a 	mov	r22,zero
 c00e460:	c00da7c0 	call	c00da7c <__sfp_lock_acquire>
 c00e464:	a8001326 	beq	r21,zero,c00e4b4 <_fwalk_reent+0x88>
 c00e468:	04bfffc4 	movi	r18,-1
 c00e46c:	ac400117 	ldw	r17,4(r21)
 c00e470:	ac000217 	ldw	r16,8(r21)
 c00e474:	8c7fffc4 	addi	r17,r17,-1
 c00e478:	88000c16 	blt	r17,zero,c00e4ac <_fwalk_reent+0x80>
 c00e47c:	84000304 	addi	r16,r16,12
 c00e480:	80c0000f 	ldh	r3,0(r16)
 c00e484:	8c7fffc4 	addi	r17,r17,-1
 c00e488:	817ffd04 	addi	r5,r16,-12
 c00e48c:	18000526 	beq	r3,zero,c00e4a4 <_fwalk_reent+0x78>
 c00e490:	80c0008f 	ldh	r3,2(r16)
 c00e494:	9809883a 	mov	r4,r19
 c00e498:	1c800226 	beq	r3,r18,c00e4a4 <_fwalk_reent+0x78>
 c00e49c:	a03ee83a 	callr	r20
 c00e4a0:	b0acb03a 	or	r22,r22,r2
 c00e4a4:	84001a04 	addi	r16,r16,104
 c00e4a8:	8cbff51e 	bne	r17,r18,c00e480 <__alt_data_end+0xfc00e480>
 c00e4ac:	ad400017 	ldw	r21,0(r21)
 c00e4b0:	a83fee1e 	bne	r21,zero,c00e46c <__alt_data_end+0xfc00e46c>
 c00e4b4:	c00da800 	call	c00da80 <__sfp_lock_release>
 c00e4b8:	b005883a 	mov	r2,r22
 c00e4bc:	dfc00717 	ldw	ra,28(sp)
 c00e4c0:	dd800617 	ldw	r22,24(sp)
 c00e4c4:	dd400517 	ldw	r21,20(sp)
 c00e4c8:	dd000417 	ldw	r20,16(sp)
 c00e4cc:	dcc00317 	ldw	r19,12(sp)
 c00e4d0:	dc800217 	ldw	r18,8(sp)
 c00e4d4:	dc400117 	ldw	r17,4(sp)
 c00e4d8:	dc000017 	ldw	r16,0(sp)
 c00e4dc:	dec00804 	addi	sp,sp,32
 c00e4e0:	f800283a 	ret

0c00e4e4 <_setlocale_r>:
 c00e4e4:	30001b26 	beq	r6,zero,c00e554 <_setlocale_r+0x70>
 c00e4e8:	014300b4 	movhi	r5,3074
 c00e4ec:	defffe04 	addi	sp,sp,-8
 c00e4f0:	29495204 	addi	r5,r5,9544
 c00e4f4:	3009883a 	mov	r4,r6
 c00e4f8:	dc000015 	stw	r16,0(sp)
 c00e4fc:	dfc00115 	stw	ra,4(sp)
 c00e500:	3021883a 	mov	r16,r6
 c00e504:	c0105040 	call	c010504 <strcmp>
 c00e508:	1000061e 	bne	r2,zero,c00e524 <_setlocale_r+0x40>
 c00e50c:	008300b4 	movhi	r2,3074
 c00e510:	10893304 	addi	r2,r2,9420
 c00e514:	dfc00117 	ldw	ra,4(sp)
 c00e518:	dc000017 	ldw	r16,0(sp)
 c00e51c:	dec00204 	addi	sp,sp,8
 c00e520:	f800283a 	ret
 c00e524:	014300b4 	movhi	r5,3074
 c00e528:	29493304 	addi	r5,r5,9420
 c00e52c:	8009883a 	mov	r4,r16
 c00e530:	c0105040 	call	c010504 <strcmp>
 c00e534:	103ff526 	beq	r2,zero,c00e50c <__alt_data_end+0xfc00e50c>
 c00e538:	014300b4 	movhi	r5,3074
 c00e53c:	29492604 	addi	r5,r5,9368
 c00e540:	8009883a 	mov	r4,r16
 c00e544:	c0105040 	call	c010504 <strcmp>
 c00e548:	103ff026 	beq	r2,zero,c00e50c <__alt_data_end+0xfc00e50c>
 c00e54c:	0005883a 	mov	r2,zero
 c00e550:	003ff006 	br	c00e514 <__alt_data_end+0xfc00e514>
 c00e554:	008300b4 	movhi	r2,3074
 c00e558:	10893304 	addi	r2,r2,9420
 c00e55c:	f800283a 	ret

0c00e560 <__locale_charset>:
 c00e560:	008300b4 	movhi	r2,3074
 c00e564:	108bcc04 	addi	r2,r2,12080
 c00e568:	f800283a 	ret

0c00e56c <__locale_mb_cur_max>:
 c00e56c:	008300b4 	movhi	r2,3074
 c00e570:	10907904 	addi	r2,r2,16868
 c00e574:	10800017 	ldw	r2,0(r2)
 c00e578:	f800283a 	ret

0c00e57c <__locale_msgcharset>:
 c00e57c:	008300b4 	movhi	r2,3074
 c00e580:	108bc404 	addi	r2,r2,12048
 c00e584:	f800283a 	ret

0c00e588 <__locale_cjk_lang>:
 c00e588:	0005883a 	mov	r2,zero
 c00e58c:	f800283a 	ret

0c00e590 <_localeconv_r>:
 c00e590:	008300b4 	movhi	r2,3074
 c00e594:	108bd404 	addi	r2,r2,12112
 c00e598:	f800283a 	ret

0c00e59c <setlocale>:
 c00e59c:	00c300b4 	movhi	r3,3074
 c00e5a0:	18d07604 	addi	r3,r3,16856
 c00e5a4:	2005883a 	mov	r2,r4
 c00e5a8:	19000017 	ldw	r4,0(r3)
 c00e5ac:	280d883a 	mov	r6,r5
 c00e5b0:	100b883a 	mov	r5,r2
 c00e5b4:	c00e4e41 	jmpi	c00e4e4 <_setlocale_r>

0c00e5b8 <localeconv>:
 c00e5b8:	008300b4 	movhi	r2,3074
 c00e5bc:	108bd404 	addi	r2,r2,12112
 c00e5c0:	f800283a 	ret

0c00e5c4 <__smakebuf_r>:
 c00e5c4:	2880030b 	ldhu	r2,12(r5)
 c00e5c8:	10c0008c 	andi	r3,r2,2
 c00e5cc:	1800401e 	bne	r3,zero,c00e6d0 <__smakebuf_r+0x10c>
 c00e5d0:	deffec04 	addi	sp,sp,-80
 c00e5d4:	dc000f15 	stw	r16,60(sp)
 c00e5d8:	2821883a 	mov	r16,r5
 c00e5dc:	2940038f 	ldh	r5,14(r5)
 c00e5e0:	dc401015 	stw	r17,64(sp)
 c00e5e4:	dfc01315 	stw	ra,76(sp)
 c00e5e8:	dcc01215 	stw	r19,72(sp)
 c00e5ec:	dc801115 	stw	r18,68(sp)
 c00e5f0:	2023883a 	mov	r17,r4
 c00e5f4:	28001b16 	blt	r5,zero,c00e664 <__smakebuf_r+0xa0>
 c00e5f8:	d80d883a 	mov	r6,sp
 c00e5fc:	c0120100 	call	c012010 <_fstat_r>
 c00e600:	10001716 	blt	r2,zero,c00e660 <__smakebuf_r+0x9c>
 c00e604:	d8800117 	ldw	r2,4(sp)
 c00e608:	00e00014 	movui	r3,32768
 c00e60c:	10bc000c 	andi	r2,r2,61440
 c00e610:	10c03726 	beq	r2,r3,c00e6f0 <__smakebuf_r+0x12c>
 c00e614:	80c0030b 	ldhu	r3,12(r16)
 c00e618:	18c20014 	ori	r3,r3,2048
 c00e61c:	80c0030d 	sth	r3,12(r16)
 c00e620:	00c80004 	movi	r3,8192
 c00e624:	10c03c1e 	bne	r2,r3,c00e718 <__smakebuf_r+0x154>
 c00e628:	8140038f 	ldh	r5,14(r16)
 c00e62c:	8809883a 	mov	r4,r17
 c00e630:	c0120680 	call	c012068 <_isatty_r>
 c00e634:	10004e26 	beq	r2,zero,c00e770 <__smakebuf_r+0x1ac>
 c00e638:	8080030b 	ldhu	r2,12(r16)
 c00e63c:	04c00044 	movi	r19,1
 c00e640:	80c010c4 	addi	r3,r16,67
 c00e644:	14c4b03a 	or	r2,r2,r19
 c00e648:	8080030d 	sth	r2,12(r16)
 c00e64c:	80c00015 	stw	r3,0(r16)
 c00e650:	80c00415 	stw	r3,16(r16)
 c00e654:	84c00515 	stw	r19,20(r16)
 c00e658:	04810004 	movi	r18,1024
 c00e65c:	00000706 	br	c00e67c <__smakebuf_r+0xb8>
 c00e660:	8080030b 	ldhu	r2,12(r16)
 c00e664:	10c0200c 	andi	r3,r2,128
 c00e668:	18001f1e 	bne	r3,zero,c00e6e8 <__smakebuf_r+0x124>
 c00e66c:	04810004 	movi	r18,1024
 c00e670:	10820014 	ori	r2,r2,2048
 c00e674:	8080030d 	sth	r2,12(r16)
 c00e678:	0027883a 	mov	r19,zero
 c00e67c:	8809883a 	mov	r4,r17
 c00e680:	900b883a 	mov	r5,r18
 c00e684:	c008dd40 	call	c008dd4 <_malloc_r>
 c00e688:	10002e26 	beq	r2,zero,c00e744 <__smakebuf_r+0x180>
 c00e68c:	80c0030b 	ldhu	r3,12(r16)
 c00e690:	01030074 	movhi	r4,3073
 c00e694:	2135cb04 	addi	r4,r4,-10452
 c00e698:	89000f15 	stw	r4,60(r17)
 c00e69c:	18c02014 	ori	r3,r3,128
 c00e6a0:	80c0030d 	sth	r3,12(r16)
 c00e6a4:	80800015 	stw	r2,0(r16)
 c00e6a8:	80800415 	stw	r2,16(r16)
 c00e6ac:	84800515 	stw	r18,20(r16)
 c00e6b0:	98001c1e 	bne	r19,zero,c00e724 <__smakebuf_r+0x160>
 c00e6b4:	dfc01317 	ldw	ra,76(sp)
 c00e6b8:	dcc01217 	ldw	r19,72(sp)
 c00e6bc:	dc801117 	ldw	r18,68(sp)
 c00e6c0:	dc401017 	ldw	r17,64(sp)
 c00e6c4:	dc000f17 	ldw	r16,60(sp)
 c00e6c8:	dec01404 	addi	sp,sp,80
 c00e6cc:	f800283a 	ret
 c00e6d0:	288010c4 	addi	r2,r5,67
 c00e6d4:	28800015 	stw	r2,0(r5)
 c00e6d8:	28800415 	stw	r2,16(r5)
 c00e6dc:	00800044 	movi	r2,1
 c00e6e0:	28800515 	stw	r2,20(r5)
 c00e6e4:	f800283a 	ret
 c00e6e8:	04801004 	movi	r18,64
 c00e6ec:	003fe006 	br	c00e670 <__alt_data_end+0xfc00e670>
 c00e6f0:	81000a17 	ldw	r4,40(r16)
 c00e6f4:	00c30074 	movhi	r3,3073
 c00e6f8:	18c12804 	addi	r3,r3,1184
 c00e6fc:	20ffc51e 	bne	r4,r3,c00e614 <__alt_data_end+0xfc00e614>
 c00e700:	80c0030b 	ldhu	r3,12(r16)
 c00e704:	01010004 	movi	r4,1024
 c00e708:	81001315 	stw	r4,76(r16)
 c00e70c:	1906b03a 	or	r3,r3,r4
 c00e710:	80c0030d 	sth	r3,12(r16)
 c00e714:	003fc206 	br	c00e620 <__alt_data_end+0xfc00e620>
 c00e718:	0027883a 	mov	r19,zero
 c00e71c:	04810004 	movi	r18,1024
 c00e720:	003fd606 	br	c00e67c <__alt_data_end+0xfc00e67c>
 c00e724:	8140038f 	ldh	r5,14(r16)
 c00e728:	8809883a 	mov	r4,r17
 c00e72c:	c0120680 	call	c012068 <_isatty_r>
 c00e730:	103fe026 	beq	r2,zero,c00e6b4 <__alt_data_end+0xfc00e6b4>
 c00e734:	8080030b 	ldhu	r2,12(r16)
 c00e738:	10800054 	ori	r2,r2,1
 c00e73c:	8080030d 	sth	r2,12(r16)
 c00e740:	003fdc06 	br	c00e6b4 <__alt_data_end+0xfc00e6b4>
 c00e744:	8080030b 	ldhu	r2,12(r16)
 c00e748:	10c0800c 	andi	r3,r2,512
 c00e74c:	183fd91e 	bne	r3,zero,c00e6b4 <__alt_data_end+0xfc00e6b4>
 c00e750:	10800094 	ori	r2,r2,2
 c00e754:	80c010c4 	addi	r3,r16,67
 c00e758:	8080030d 	sth	r2,12(r16)
 c00e75c:	00800044 	movi	r2,1
 c00e760:	80c00015 	stw	r3,0(r16)
 c00e764:	80c00415 	stw	r3,16(r16)
 c00e768:	80800515 	stw	r2,20(r16)
 c00e76c:	003fd106 	br	c00e6b4 <__alt_data_end+0xfc00e6b4>
 c00e770:	04c00044 	movi	r19,1
 c00e774:	04810004 	movi	r18,1024
 c00e778:	003fc006 	br	c00e67c <__alt_data_end+0xfc00e67c>

0c00e77c <memchr>:
 c00e77c:	208000cc 	andi	r2,r4,3
 c00e780:	280f883a 	mov	r7,r5
 c00e784:	10003526 	beq	r2,zero,c00e85c <memchr+0xe0>
 c00e788:	30bfffc4 	addi	r2,r6,-1
 c00e78c:	30001b26 	beq	r6,zero,c00e7fc <memchr+0x80>
 c00e790:	21800003 	ldbu	r6,0(r4)
 c00e794:	28c03fcc 	andi	r3,r5,255
 c00e798:	30c01a26 	beq	r6,r3,c00e804 <memchr+0x88>
 c00e79c:	180d883a 	mov	r6,r3
 c00e7a0:	00000406 	br	c00e7b4 <memchr+0x38>
 c00e7a4:	10001526 	beq	r2,zero,c00e7fc <memchr+0x80>
 c00e7a8:	20c00003 	ldbu	r3,0(r4)
 c00e7ac:	10bfffc4 	addi	r2,r2,-1
 c00e7b0:	19801426 	beq	r3,r6,c00e804 <memchr+0x88>
 c00e7b4:	21000044 	addi	r4,r4,1
 c00e7b8:	20c000cc 	andi	r3,r4,3
 c00e7bc:	183ff91e 	bne	r3,zero,c00e7a4 <__alt_data_end+0xfc00e7a4>
 c00e7c0:	024000c4 	movi	r9,3
 c00e7c4:	48801136 	bltu	r9,r2,c00e80c <memchr+0x90>
 c00e7c8:	10000c26 	beq	r2,zero,c00e7fc <memchr+0x80>
 c00e7cc:	20c00003 	ldbu	r3,0(r4)
 c00e7d0:	29403fcc 	andi	r5,r5,255
 c00e7d4:	19400b26 	beq	r3,r5,c00e804 <memchr+0x88>
 c00e7d8:	20c00044 	addi	r3,r4,1
 c00e7dc:	2085883a 	add	r2,r4,r2
 c00e7e0:	39803fcc 	andi	r6,r7,255
 c00e7e4:	00000306 	br	c00e7f4 <memchr+0x78>
 c00e7e8:	18c00044 	addi	r3,r3,1
 c00e7ec:	197fffc3 	ldbu	r5,-1(r3)
 c00e7f0:	29800426 	beq	r5,r6,c00e804 <memchr+0x88>
 c00e7f4:	1809883a 	mov	r4,r3
 c00e7f8:	18bffb1e 	bne	r3,r2,c00e7e8 <__alt_data_end+0xfc00e7e8>
 c00e7fc:	0005883a 	mov	r2,zero
 c00e800:	f800283a 	ret
 c00e804:	2005883a 	mov	r2,r4
 c00e808:	f800283a 	ret
 c00e80c:	28c03fcc 	andi	r3,r5,255
 c00e810:	1810923a 	slli	r8,r3,8
 c00e814:	02ffbff4 	movhi	r11,65279
 c00e818:	02a02074 	movhi	r10,32897
 c00e81c:	40c6b03a 	or	r3,r8,r3
 c00e820:	1810943a 	slli	r8,r3,16
 c00e824:	5affbfc4 	addi	r11,r11,-257
 c00e828:	52a02004 	addi	r10,r10,-32640
 c00e82c:	40d0b03a 	or	r8,r8,r3
 c00e830:	20c00017 	ldw	r3,0(r4)
 c00e834:	40c6f03a 	xor	r3,r8,r3
 c00e838:	1acd883a 	add	r6,r3,r11
 c00e83c:	00c6303a 	nor	r3,zero,r3
 c00e840:	30c6703a 	and	r3,r6,r3
 c00e844:	1a86703a 	and	r3,r3,r10
 c00e848:	183fdf1e 	bne	r3,zero,c00e7c8 <__alt_data_end+0xfc00e7c8>
 c00e84c:	10bfff04 	addi	r2,r2,-4
 c00e850:	21000104 	addi	r4,r4,4
 c00e854:	48bff636 	bltu	r9,r2,c00e830 <__alt_data_end+0xfc00e830>
 c00e858:	003fdb06 	br	c00e7c8 <__alt_data_end+0xfc00e7c8>
 c00e85c:	3005883a 	mov	r2,r6
 c00e860:	003fd706 	br	c00e7c0 <__alt_data_end+0xfc00e7c0>

0c00e864 <memmove>:
 c00e864:	2005883a 	mov	r2,r4
 c00e868:	29000b2e 	bgeu	r5,r4,c00e898 <memmove+0x34>
 c00e86c:	298f883a 	add	r7,r5,r6
 c00e870:	21c0092e 	bgeu	r4,r7,c00e898 <memmove+0x34>
 c00e874:	2187883a 	add	r3,r4,r6
 c00e878:	198bc83a 	sub	r5,r3,r6
 c00e87c:	30004b26 	beq	r6,zero,c00e9ac <memmove+0x148>
 c00e880:	39ffffc4 	addi	r7,r7,-1
 c00e884:	39000003 	ldbu	r4,0(r7)
 c00e888:	18ffffc4 	addi	r3,r3,-1
 c00e88c:	19000005 	stb	r4,0(r3)
 c00e890:	197ffb1e 	bne	r3,r5,c00e880 <__alt_data_end+0xfc00e880>
 c00e894:	f800283a 	ret
 c00e898:	00c003c4 	movi	r3,15
 c00e89c:	1980412e 	bgeu	r3,r6,c00e9a4 <memmove+0x140>
 c00e8a0:	1146b03a 	or	r3,r2,r5
 c00e8a4:	18c000cc 	andi	r3,r3,3
 c00e8a8:	1800411e 	bne	r3,zero,c00e9b0 <memmove+0x14c>
 c00e8ac:	33fffc04 	addi	r15,r6,-16
 c00e8b0:	781ed13a 	srli	r15,r15,4
 c00e8b4:	28c00104 	addi	r3,r5,4
 c00e8b8:	13400104 	addi	r13,r2,4
 c00e8bc:	781c913a 	slli	r14,r15,4
 c00e8c0:	2b000204 	addi	r12,r5,8
 c00e8c4:	12c00204 	addi	r11,r2,8
 c00e8c8:	73800504 	addi	r14,r14,20
 c00e8cc:	2a800304 	addi	r10,r5,12
 c00e8d0:	12400304 	addi	r9,r2,12
 c00e8d4:	2b9d883a 	add	r14,r5,r14
 c00e8d8:	2811883a 	mov	r8,r5
 c00e8dc:	100f883a 	mov	r7,r2
 c00e8e0:	41000017 	ldw	r4,0(r8)
 c00e8e4:	39c00404 	addi	r7,r7,16
 c00e8e8:	18c00404 	addi	r3,r3,16
 c00e8ec:	393ffc15 	stw	r4,-16(r7)
 c00e8f0:	193ffc17 	ldw	r4,-16(r3)
 c00e8f4:	6b400404 	addi	r13,r13,16
 c00e8f8:	5ac00404 	addi	r11,r11,16
 c00e8fc:	693ffc15 	stw	r4,-16(r13)
 c00e900:	61000017 	ldw	r4,0(r12)
 c00e904:	4a400404 	addi	r9,r9,16
 c00e908:	42000404 	addi	r8,r8,16
 c00e90c:	593ffc15 	stw	r4,-16(r11)
 c00e910:	51000017 	ldw	r4,0(r10)
 c00e914:	63000404 	addi	r12,r12,16
 c00e918:	52800404 	addi	r10,r10,16
 c00e91c:	493ffc15 	stw	r4,-16(r9)
 c00e920:	1bbfef1e 	bne	r3,r14,c00e8e0 <__alt_data_end+0xfc00e8e0>
 c00e924:	79000044 	addi	r4,r15,1
 c00e928:	2008913a 	slli	r4,r4,4
 c00e92c:	328003cc 	andi	r10,r6,15
 c00e930:	02c000c4 	movi	r11,3
 c00e934:	1107883a 	add	r3,r2,r4
 c00e938:	290b883a 	add	r5,r5,r4
 c00e93c:	5a801e2e 	bgeu	r11,r10,c00e9b8 <memmove+0x154>
 c00e940:	1813883a 	mov	r9,r3
 c00e944:	2811883a 	mov	r8,r5
 c00e948:	500f883a 	mov	r7,r10
 c00e94c:	41000017 	ldw	r4,0(r8)
 c00e950:	4a400104 	addi	r9,r9,4
 c00e954:	39ffff04 	addi	r7,r7,-4
 c00e958:	493fff15 	stw	r4,-4(r9)
 c00e95c:	42000104 	addi	r8,r8,4
 c00e960:	59fffa36 	bltu	r11,r7,c00e94c <__alt_data_end+0xfc00e94c>
 c00e964:	513fff04 	addi	r4,r10,-4
 c00e968:	2008d0ba 	srli	r4,r4,2
 c00e96c:	318000cc 	andi	r6,r6,3
 c00e970:	21000044 	addi	r4,r4,1
 c00e974:	2109883a 	add	r4,r4,r4
 c00e978:	2109883a 	add	r4,r4,r4
 c00e97c:	1907883a 	add	r3,r3,r4
 c00e980:	290b883a 	add	r5,r5,r4
 c00e984:	30000926 	beq	r6,zero,c00e9ac <memmove+0x148>
 c00e988:	198d883a 	add	r6,r3,r6
 c00e98c:	29c00003 	ldbu	r7,0(r5)
 c00e990:	18c00044 	addi	r3,r3,1
 c00e994:	29400044 	addi	r5,r5,1
 c00e998:	19ffffc5 	stb	r7,-1(r3)
 c00e99c:	19bffb1e 	bne	r3,r6,c00e98c <__alt_data_end+0xfc00e98c>
 c00e9a0:	f800283a 	ret
 c00e9a4:	1007883a 	mov	r3,r2
 c00e9a8:	003ff606 	br	c00e984 <__alt_data_end+0xfc00e984>
 c00e9ac:	f800283a 	ret
 c00e9b0:	1007883a 	mov	r3,r2
 c00e9b4:	003ff406 	br	c00e988 <__alt_data_end+0xfc00e988>
 c00e9b8:	500d883a 	mov	r6,r10
 c00e9bc:	003ff106 	br	c00e984 <__alt_data_end+0xfc00e984>

0c00e9c0 <_Balloc>:
 c00e9c0:	20801317 	ldw	r2,76(r4)
 c00e9c4:	defffc04 	addi	sp,sp,-16
 c00e9c8:	dc400115 	stw	r17,4(sp)
 c00e9cc:	dc000015 	stw	r16,0(sp)
 c00e9d0:	dfc00315 	stw	ra,12(sp)
 c00e9d4:	dc800215 	stw	r18,8(sp)
 c00e9d8:	2023883a 	mov	r17,r4
 c00e9dc:	2821883a 	mov	r16,r5
 c00e9e0:	10000f26 	beq	r2,zero,c00ea20 <_Balloc+0x60>
 c00e9e4:	8407883a 	add	r3,r16,r16
 c00e9e8:	18c7883a 	add	r3,r3,r3
 c00e9ec:	10c7883a 	add	r3,r2,r3
 c00e9f0:	18800017 	ldw	r2,0(r3)
 c00e9f4:	10001126 	beq	r2,zero,c00ea3c <_Balloc+0x7c>
 c00e9f8:	11000017 	ldw	r4,0(r2)
 c00e9fc:	19000015 	stw	r4,0(r3)
 c00ea00:	10000415 	stw	zero,16(r2)
 c00ea04:	10000315 	stw	zero,12(r2)
 c00ea08:	dfc00317 	ldw	ra,12(sp)
 c00ea0c:	dc800217 	ldw	r18,8(sp)
 c00ea10:	dc400117 	ldw	r17,4(sp)
 c00ea14:	dc000017 	ldw	r16,0(sp)
 c00ea18:	dec00404 	addi	sp,sp,16
 c00ea1c:	f800283a 	ret
 c00ea20:	01400104 	movi	r5,4
 c00ea24:	01800844 	movi	r6,33
 c00ea28:	c011c5c0 	call	c011c5c <_calloc_r>
 c00ea2c:	88801315 	stw	r2,76(r17)
 c00ea30:	103fec1e 	bne	r2,zero,c00e9e4 <__alt_data_end+0xfc00e9e4>
 c00ea34:	0005883a 	mov	r2,zero
 c00ea38:	003ff306 	br	c00ea08 <__alt_data_end+0xfc00ea08>
 c00ea3c:	01400044 	movi	r5,1
 c00ea40:	2c24983a 	sll	r18,r5,r16
 c00ea44:	8809883a 	mov	r4,r17
 c00ea48:	91800144 	addi	r6,r18,5
 c00ea4c:	318d883a 	add	r6,r6,r6
 c00ea50:	318d883a 	add	r6,r6,r6
 c00ea54:	c011c5c0 	call	c011c5c <_calloc_r>
 c00ea58:	103ff626 	beq	r2,zero,c00ea34 <__alt_data_end+0xfc00ea34>
 c00ea5c:	14000115 	stw	r16,4(r2)
 c00ea60:	14800215 	stw	r18,8(r2)
 c00ea64:	003fe606 	br	c00ea00 <__alt_data_end+0xfc00ea00>

0c00ea68 <_Bfree>:
 c00ea68:	28000826 	beq	r5,zero,c00ea8c <_Bfree+0x24>
 c00ea6c:	28c00117 	ldw	r3,4(r5)
 c00ea70:	20801317 	ldw	r2,76(r4)
 c00ea74:	18c7883a 	add	r3,r3,r3
 c00ea78:	18c7883a 	add	r3,r3,r3
 c00ea7c:	10c5883a 	add	r2,r2,r3
 c00ea80:	10c00017 	ldw	r3,0(r2)
 c00ea84:	28c00015 	stw	r3,0(r5)
 c00ea88:	11400015 	stw	r5,0(r2)
 c00ea8c:	f800283a 	ret

0c00ea90 <__multadd>:
 c00ea90:	defffa04 	addi	sp,sp,-24
 c00ea94:	dc000115 	stw	r16,4(sp)
 c00ea98:	2c000417 	ldw	r16,16(r5)
 c00ea9c:	dc800315 	stw	r18,12(sp)
 c00eaa0:	dc400215 	stw	r17,8(sp)
 c00eaa4:	dfc00515 	stw	ra,20(sp)
 c00eaa8:	dcc00415 	stw	r19,16(sp)
 c00eaac:	2823883a 	mov	r17,r5
 c00eab0:	2025883a 	mov	r18,r4
 c00eab4:	2a400504 	addi	r9,r5,20
 c00eab8:	0015883a 	mov	r10,zero
 c00eabc:	4a000017 	ldw	r8,0(r9)
 c00eac0:	4a400104 	addi	r9,r9,4
 c00eac4:	52800044 	addi	r10,r10,1
 c00eac8:	40ffffcc 	andi	r3,r8,65535
 c00eacc:	1987383a 	mul	r3,r3,r6
 c00ead0:	4010d43a 	srli	r8,r8,16
 c00ead4:	19cf883a 	add	r7,r3,r7
 c00ead8:	4191383a 	mul	r8,r8,r6
 c00eadc:	3816d43a 	srli	r11,r7,16
 c00eae0:	38ffffcc 	andi	r3,r7,65535
 c00eae4:	5a0f883a 	add	r7,r11,r8
 c00eae8:	3810943a 	slli	r8,r7,16
 c00eaec:	380ed43a 	srli	r7,r7,16
 c00eaf0:	40c7883a 	add	r3,r8,r3
 c00eaf4:	48ffff15 	stw	r3,-4(r9)
 c00eaf8:	543ff016 	blt	r10,r16,c00eabc <__alt_data_end+0xfc00eabc>
 c00eafc:	38000926 	beq	r7,zero,c00eb24 <__multadd+0x94>
 c00eb00:	88800217 	ldw	r2,8(r17)
 c00eb04:	80800f0e 	bge	r16,r2,c00eb44 <__multadd+0xb4>
 c00eb08:	80800144 	addi	r2,r16,5
 c00eb0c:	1085883a 	add	r2,r2,r2
 c00eb10:	1085883a 	add	r2,r2,r2
 c00eb14:	8885883a 	add	r2,r17,r2
 c00eb18:	11c00015 	stw	r7,0(r2)
 c00eb1c:	84000044 	addi	r16,r16,1
 c00eb20:	8c000415 	stw	r16,16(r17)
 c00eb24:	8805883a 	mov	r2,r17
 c00eb28:	dfc00517 	ldw	ra,20(sp)
 c00eb2c:	dcc00417 	ldw	r19,16(sp)
 c00eb30:	dc800317 	ldw	r18,12(sp)
 c00eb34:	dc400217 	ldw	r17,8(sp)
 c00eb38:	dc000117 	ldw	r16,4(sp)
 c00eb3c:	dec00604 	addi	sp,sp,24
 c00eb40:	f800283a 	ret
 c00eb44:	89400117 	ldw	r5,4(r17)
 c00eb48:	9009883a 	mov	r4,r18
 c00eb4c:	d9c00015 	stw	r7,0(sp)
 c00eb50:	29400044 	addi	r5,r5,1
 c00eb54:	c00e9c00 	call	c00e9c0 <_Balloc>
 c00eb58:	89800417 	ldw	r6,16(r17)
 c00eb5c:	89400304 	addi	r5,r17,12
 c00eb60:	11000304 	addi	r4,r2,12
 c00eb64:	31800084 	addi	r6,r6,2
 c00eb68:	318d883a 	add	r6,r6,r6
 c00eb6c:	318d883a 	add	r6,r6,r6
 c00eb70:	1027883a 	mov	r19,r2
 c00eb74:	c00957c0 	call	c00957c <memcpy>
 c00eb78:	89000117 	ldw	r4,4(r17)
 c00eb7c:	90c01317 	ldw	r3,76(r18)
 c00eb80:	d9c00017 	ldw	r7,0(sp)
 c00eb84:	2109883a 	add	r4,r4,r4
 c00eb88:	2109883a 	add	r4,r4,r4
 c00eb8c:	1907883a 	add	r3,r3,r4
 c00eb90:	18800017 	ldw	r2,0(r3)
 c00eb94:	88800015 	stw	r2,0(r17)
 c00eb98:	1c400015 	stw	r17,0(r3)
 c00eb9c:	9823883a 	mov	r17,r19
 c00eba0:	003fd906 	br	c00eb08 <__alt_data_end+0xfc00eb08>

0c00eba4 <__s2b>:
 c00eba4:	defff904 	addi	sp,sp,-28
 c00eba8:	dc400115 	stw	r17,4(sp)
 c00ebac:	dc000015 	stw	r16,0(sp)
 c00ebb0:	2023883a 	mov	r17,r4
 c00ebb4:	2821883a 	mov	r16,r5
 c00ebb8:	39000204 	addi	r4,r7,8
 c00ebbc:	01400244 	movi	r5,9
 c00ebc0:	dcc00315 	stw	r19,12(sp)
 c00ebc4:	dc800215 	stw	r18,8(sp)
 c00ebc8:	dfc00615 	stw	ra,24(sp)
 c00ebcc:	dd400515 	stw	r21,20(sp)
 c00ebd0:	dd000415 	stw	r20,16(sp)
 c00ebd4:	3825883a 	mov	r18,r7
 c00ebd8:	3027883a 	mov	r19,r6
 c00ebdc:	c008c180 	call	c008c18 <__divsi3>
 c00ebe0:	00c00044 	movi	r3,1
 c00ebe4:	000b883a 	mov	r5,zero
 c00ebe8:	1880030e 	bge	r3,r2,c00ebf8 <__s2b+0x54>
 c00ebec:	18c7883a 	add	r3,r3,r3
 c00ebf0:	29400044 	addi	r5,r5,1
 c00ebf4:	18bffd16 	blt	r3,r2,c00ebec <__alt_data_end+0xfc00ebec>
 c00ebf8:	8809883a 	mov	r4,r17
 c00ebfc:	c00e9c00 	call	c00e9c0 <_Balloc>
 c00ec00:	d8c00717 	ldw	r3,28(sp)
 c00ec04:	10c00515 	stw	r3,20(r2)
 c00ec08:	00c00044 	movi	r3,1
 c00ec0c:	10c00415 	stw	r3,16(r2)
 c00ec10:	00c00244 	movi	r3,9
 c00ec14:	1cc0210e 	bge	r3,r19,c00ec9c <__s2b+0xf8>
 c00ec18:	80eb883a 	add	r21,r16,r3
 c00ec1c:	a829883a 	mov	r20,r21
 c00ec20:	84e1883a 	add	r16,r16,r19
 c00ec24:	a1c00007 	ldb	r7,0(r20)
 c00ec28:	8809883a 	mov	r4,r17
 c00ec2c:	a5000044 	addi	r20,r20,1
 c00ec30:	100b883a 	mov	r5,r2
 c00ec34:	01800284 	movi	r6,10
 c00ec38:	39fff404 	addi	r7,r7,-48
 c00ec3c:	c00ea900 	call	c00ea90 <__multadd>
 c00ec40:	a43ff81e 	bne	r20,r16,c00ec24 <__alt_data_end+0xfc00ec24>
 c00ec44:	ace1883a 	add	r16,r21,r19
 c00ec48:	843ffe04 	addi	r16,r16,-8
 c00ec4c:	9c800a0e 	bge	r19,r18,c00ec78 <__s2b+0xd4>
 c00ec50:	94e5c83a 	sub	r18,r18,r19
 c00ec54:	84a5883a 	add	r18,r16,r18
 c00ec58:	81c00007 	ldb	r7,0(r16)
 c00ec5c:	8809883a 	mov	r4,r17
 c00ec60:	84000044 	addi	r16,r16,1
 c00ec64:	100b883a 	mov	r5,r2
 c00ec68:	01800284 	movi	r6,10
 c00ec6c:	39fff404 	addi	r7,r7,-48
 c00ec70:	c00ea900 	call	c00ea90 <__multadd>
 c00ec74:	84bff81e 	bne	r16,r18,c00ec58 <__alt_data_end+0xfc00ec58>
 c00ec78:	dfc00617 	ldw	ra,24(sp)
 c00ec7c:	dd400517 	ldw	r21,20(sp)
 c00ec80:	dd000417 	ldw	r20,16(sp)
 c00ec84:	dcc00317 	ldw	r19,12(sp)
 c00ec88:	dc800217 	ldw	r18,8(sp)
 c00ec8c:	dc400117 	ldw	r17,4(sp)
 c00ec90:	dc000017 	ldw	r16,0(sp)
 c00ec94:	dec00704 	addi	sp,sp,28
 c00ec98:	f800283a 	ret
 c00ec9c:	84000284 	addi	r16,r16,10
 c00eca0:	1827883a 	mov	r19,r3
 c00eca4:	003fe906 	br	c00ec4c <__alt_data_end+0xfc00ec4c>

0c00eca8 <__hi0bits>:
 c00eca8:	20bfffec 	andhi	r2,r4,65535
 c00ecac:	1000141e 	bne	r2,zero,c00ed00 <__hi0bits+0x58>
 c00ecb0:	2008943a 	slli	r4,r4,16
 c00ecb4:	00800404 	movi	r2,16
 c00ecb8:	20ffc02c 	andhi	r3,r4,65280
 c00ecbc:	1800021e 	bne	r3,zero,c00ecc8 <__hi0bits+0x20>
 c00ecc0:	2008923a 	slli	r4,r4,8
 c00ecc4:	10800204 	addi	r2,r2,8
 c00ecc8:	20fc002c 	andhi	r3,r4,61440
 c00eccc:	1800021e 	bne	r3,zero,c00ecd8 <__hi0bits+0x30>
 c00ecd0:	2008913a 	slli	r4,r4,4
 c00ecd4:	10800104 	addi	r2,r2,4
 c00ecd8:	20f0002c 	andhi	r3,r4,49152
 c00ecdc:	1800031e 	bne	r3,zero,c00ecec <__hi0bits+0x44>
 c00ece0:	2109883a 	add	r4,r4,r4
 c00ece4:	10800084 	addi	r2,r2,2
 c00ece8:	2109883a 	add	r4,r4,r4
 c00ecec:	20000316 	blt	r4,zero,c00ecfc <__hi0bits+0x54>
 c00ecf0:	2110002c 	andhi	r4,r4,16384
 c00ecf4:	2000041e 	bne	r4,zero,c00ed08 <__hi0bits+0x60>
 c00ecf8:	00800804 	movi	r2,32
 c00ecfc:	f800283a 	ret
 c00ed00:	0005883a 	mov	r2,zero
 c00ed04:	003fec06 	br	c00ecb8 <__alt_data_end+0xfc00ecb8>
 c00ed08:	10800044 	addi	r2,r2,1
 c00ed0c:	f800283a 	ret

0c00ed10 <__lo0bits>:
 c00ed10:	20c00017 	ldw	r3,0(r4)
 c00ed14:	188001cc 	andi	r2,r3,7
 c00ed18:	10000826 	beq	r2,zero,c00ed3c <__lo0bits+0x2c>
 c00ed1c:	1880004c 	andi	r2,r3,1
 c00ed20:	1000211e 	bne	r2,zero,c00eda8 <__lo0bits+0x98>
 c00ed24:	1880008c 	andi	r2,r3,2
 c00ed28:	1000211e 	bne	r2,zero,c00edb0 <__lo0bits+0xa0>
 c00ed2c:	1806d0ba 	srli	r3,r3,2
 c00ed30:	00800084 	movi	r2,2
 c00ed34:	20c00015 	stw	r3,0(r4)
 c00ed38:	f800283a 	ret
 c00ed3c:	18bfffcc 	andi	r2,r3,65535
 c00ed40:	10001326 	beq	r2,zero,c00ed90 <__lo0bits+0x80>
 c00ed44:	0005883a 	mov	r2,zero
 c00ed48:	19403fcc 	andi	r5,r3,255
 c00ed4c:	2800021e 	bne	r5,zero,c00ed58 <__lo0bits+0x48>
 c00ed50:	1806d23a 	srli	r3,r3,8
 c00ed54:	10800204 	addi	r2,r2,8
 c00ed58:	194003cc 	andi	r5,r3,15
 c00ed5c:	2800021e 	bne	r5,zero,c00ed68 <__lo0bits+0x58>
 c00ed60:	1806d13a 	srli	r3,r3,4
 c00ed64:	10800104 	addi	r2,r2,4
 c00ed68:	194000cc 	andi	r5,r3,3
 c00ed6c:	2800021e 	bne	r5,zero,c00ed78 <__lo0bits+0x68>
 c00ed70:	1806d0ba 	srli	r3,r3,2
 c00ed74:	10800084 	addi	r2,r2,2
 c00ed78:	1940004c 	andi	r5,r3,1
 c00ed7c:	2800081e 	bne	r5,zero,c00eda0 <__lo0bits+0x90>
 c00ed80:	1806d07a 	srli	r3,r3,1
 c00ed84:	1800051e 	bne	r3,zero,c00ed9c <__lo0bits+0x8c>
 c00ed88:	00800804 	movi	r2,32
 c00ed8c:	f800283a 	ret
 c00ed90:	1806d43a 	srli	r3,r3,16
 c00ed94:	00800404 	movi	r2,16
 c00ed98:	003feb06 	br	c00ed48 <__alt_data_end+0xfc00ed48>
 c00ed9c:	10800044 	addi	r2,r2,1
 c00eda0:	20c00015 	stw	r3,0(r4)
 c00eda4:	f800283a 	ret
 c00eda8:	0005883a 	mov	r2,zero
 c00edac:	f800283a 	ret
 c00edb0:	1806d07a 	srli	r3,r3,1
 c00edb4:	00800044 	movi	r2,1
 c00edb8:	20c00015 	stw	r3,0(r4)
 c00edbc:	f800283a 	ret

0c00edc0 <__i2b>:
 c00edc0:	defffd04 	addi	sp,sp,-12
 c00edc4:	dc000015 	stw	r16,0(sp)
 c00edc8:	04000044 	movi	r16,1
 c00edcc:	dc400115 	stw	r17,4(sp)
 c00edd0:	2823883a 	mov	r17,r5
 c00edd4:	800b883a 	mov	r5,r16
 c00edd8:	dfc00215 	stw	ra,8(sp)
 c00eddc:	c00e9c00 	call	c00e9c0 <_Balloc>
 c00ede0:	14400515 	stw	r17,20(r2)
 c00ede4:	14000415 	stw	r16,16(r2)
 c00ede8:	dfc00217 	ldw	ra,8(sp)
 c00edec:	dc400117 	ldw	r17,4(sp)
 c00edf0:	dc000017 	ldw	r16,0(sp)
 c00edf4:	dec00304 	addi	sp,sp,12
 c00edf8:	f800283a 	ret

0c00edfc <__multiply>:
 c00edfc:	defffa04 	addi	sp,sp,-24
 c00ee00:	dcc00315 	stw	r19,12(sp)
 c00ee04:	dc800215 	stw	r18,8(sp)
 c00ee08:	2cc00417 	ldw	r19,16(r5)
 c00ee0c:	34800417 	ldw	r18,16(r6)
 c00ee10:	dd000415 	stw	r20,16(sp)
 c00ee14:	dc400115 	stw	r17,4(sp)
 c00ee18:	dfc00515 	stw	ra,20(sp)
 c00ee1c:	dc000015 	stw	r16,0(sp)
 c00ee20:	2829883a 	mov	r20,r5
 c00ee24:	3023883a 	mov	r17,r6
 c00ee28:	9c807016 	blt	r19,r18,c00efec <__multiply+0x1f0>
 c00ee2c:	9005883a 	mov	r2,r18
 c00ee30:	9825883a 	mov	r18,r19
 c00ee34:	1027883a 	mov	r19,r2
 c00ee38:	a0800217 	ldw	r2,8(r20)
 c00ee3c:	94e1883a 	add	r16,r18,r19
 c00ee40:	a1400117 	ldw	r5,4(r20)
 c00ee44:	1400010e 	bge	r2,r16,c00ee4c <__multiply+0x50>
 c00ee48:	29400044 	addi	r5,r5,1
 c00ee4c:	c00e9c00 	call	c00e9c0 <_Balloc>
 c00ee50:	8417883a 	add	r11,r16,r16
 c00ee54:	13000504 	addi	r12,r2,20
 c00ee58:	5ad7883a 	add	r11,r11,r11
 c00ee5c:	62d7883a 	add	r11,r12,r11
 c00ee60:	6007883a 	mov	r3,r12
 c00ee64:	62c0032e 	bgeu	r12,r11,c00ee74 <__multiply+0x78>
 c00ee68:	18000015 	stw	zero,0(r3)
 c00ee6c:	18c00104 	addi	r3,r3,4
 c00ee70:	1afffd36 	bltu	r3,r11,c00ee68 <__alt_data_end+0xfc00ee68>
 c00ee74:	9ce7883a 	add	r19,r19,r19
 c00ee78:	94a5883a 	add	r18,r18,r18
 c00ee7c:	89800504 	addi	r6,r17,20
 c00ee80:	9ce7883a 	add	r19,r19,r19
 c00ee84:	a3800504 	addi	r14,r20,20
 c00ee88:	94a5883a 	add	r18,r18,r18
 c00ee8c:	34db883a 	add	r13,r6,r19
 c00ee90:	7495883a 	add	r10,r14,r18
 c00ee94:	3340422e 	bgeu	r6,r13,c00efa0 <__multiply+0x1a4>
 c00ee98:	34400017 	ldw	r17,0(r6)
 c00ee9c:	8cbfffcc 	andi	r18,r17,65535
 c00eea0:	90001b26 	beq	r18,zero,c00ef10 <__multiply+0x114>
 c00eea4:	6013883a 	mov	r9,r12
 c00eea8:	7023883a 	mov	r17,r14
 c00eeac:	0011883a 	mov	r8,zero
 c00eeb0:	88c00017 	ldw	r3,0(r17)
 c00eeb4:	4bc00017 	ldw	r15,0(r9)
 c00eeb8:	8c400104 	addi	r17,r17,4
 c00eebc:	19ffffcc 	andi	r7,r3,65535
 c00eec0:	3c8f383a 	mul	r7,r7,r18
 c00eec4:	1808d43a 	srli	r4,r3,16
 c00eec8:	797fffcc 	andi	r5,r15,65535
 c00eecc:	29cb883a 	add	r5,r5,r7
 c00eed0:	2a0b883a 	add	r5,r5,r8
 c00eed4:	2489383a 	mul	r4,r4,r18
 c00eed8:	7806d43a 	srli	r3,r15,16
 c00eedc:	2810d43a 	srli	r8,r5,16
 c00eee0:	297fffcc 	andi	r5,r5,65535
 c00eee4:	1907883a 	add	r3,r3,r4
 c00eee8:	1a07883a 	add	r3,r3,r8
 c00eeec:	1808943a 	slli	r4,r3,16
 c00eef0:	480f883a 	mov	r7,r9
 c00eef4:	1810d43a 	srli	r8,r3,16
 c00eef8:	214ab03a 	or	r5,r4,r5
 c00eefc:	49400015 	stw	r5,0(r9)
 c00ef00:	4a400104 	addi	r9,r9,4
 c00ef04:	8abfea36 	bltu	r17,r10,c00eeb0 <__alt_data_end+0xfc00eeb0>
 c00ef08:	3a000115 	stw	r8,4(r7)
 c00ef0c:	34400017 	ldw	r17,0(r6)
 c00ef10:	8822d43a 	srli	r17,r17,16
 c00ef14:	88001f26 	beq	r17,zero,c00ef94 <__multiply+0x198>
 c00ef18:	60c00017 	ldw	r3,0(r12)
 c00ef1c:	7013883a 	mov	r9,r14
 c00ef20:	601f883a 	mov	r15,r12
 c00ef24:	1811883a 	mov	r8,r3
 c00ef28:	6027883a 	mov	r19,r12
 c00ef2c:	000f883a 	mov	r7,zero
 c00ef30:	00000106 	br	c00ef38 <__multiply+0x13c>
 c00ef34:	9027883a 	mov	r19,r18
 c00ef38:	4940000b 	ldhu	r5,0(r9)
 c00ef3c:	4010d43a 	srli	r8,r8,16
 c00ef40:	193fffcc 	andi	r4,r3,65535
 c00ef44:	2c4b383a 	mul	r5,r5,r17
 c00ef48:	7bc00104 	addi	r15,r15,4
 c00ef4c:	4a400104 	addi	r9,r9,4
 c00ef50:	2a0b883a 	add	r5,r5,r8
 c00ef54:	29cb883a 	add	r5,r5,r7
 c00ef58:	2806943a 	slli	r3,r5,16
 c00ef5c:	9c800104 	addi	r18,r19,4
 c00ef60:	280ad43a 	srli	r5,r5,16
 c00ef64:	1908b03a 	or	r4,r3,r4
 c00ef68:	793fff15 	stw	r4,-4(r15)
 c00ef6c:	48ffff17 	ldw	r3,-4(r9)
 c00ef70:	92000017 	ldw	r8,0(r18)
 c00ef74:	1806d43a 	srli	r3,r3,16
 c00ef78:	413fffcc 	andi	r4,r8,65535
 c00ef7c:	1c47383a 	mul	r3,r3,r17
 c00ef80:	1907883a 	add	r3,r3,r4
 c00ef84:	1947883a 	add	r3,r3,r5
 c00ef88:	180ed43a 	srli	r7,r3,16
 c00ef8c:	4abfe936 	bltu	r9,r10,c00ef34 <__alt_data_end+0xfc00ef34>
 c00ef90:	98c00115 	stw	r3,4(r19)
 c00ef94:	31800104 	addi	r6,r6,4
 c00ef98:	63000104 	addi	r12,r12,4
 c00ef9c:	337fbe36 	bltu	r6,r13,c00ee98 <__alt_data_end+0xfc00ee98>
 c00efa0:	0400090e 	bge	zero,r16,c00efc8 <__multiply+0x1cc>
 c00efa4:	58ffff17 	ldw	r3,-4(r11)
 c00efa8:	5affff04 	addi	r11,r11,-4
 c00efac:	18000326 	beq	r3,zero,c00efbc <__multiply+0x1c0>
 c00efb0:	00000506 	br	c00efc8 <__multiply+0x1cc>
 c00efb4:	58c00017 	ldw	r3,0(r11)
 c00efb8:	1800031e 	bne	r3,zero,c00efc8 <__multiply+0x1cc>
 c00efbc:	843fffc4 	addi	r16,r16,-1
 c00efc0:	5affff04 	addi	r11,r11,-4
 c00efc4:	803ffb1e 	bne	r16,zero,c00efb4 <__alt_data_end+0xfc00efb4>
 c00efc8:	14000415 	stw	r16,16(r2)
 c00efcc:	dfc00517 	ldw	ra,20(sp)
 c00efd0:	dd000417 	ldw	r20,16(sp)
 c00efd4:	dcc00317 	ldw	r19,12(sp)
 c00efd8:	dc800217 	ldw	r18,8(sp)
 c00efdc:	dc400117 	ldw	r17,4(sp)
 c00efe0:	dc000017 	ldw	r16,0(sp)
 c00efe4:	dec00604 	addi	sp,sp,24
 c00efe8:	f800283a 	ret
 c00efec:	3029883a 	mov	r20,r6
 c00eff0:	2823883a 	mov	r17,r5
 c00eff4:	003f9006 	br	c00ee38 <__alt_data_end+0xfc00ee38>

0c00eff8 <__pow5mult>:
 c00eff8:	defffa04 	addi	sp,sp,-24
 c00effc:	dcc00315 	stw	r19,12(sp)
 c00f000:	dc800215 	stw	r18,8(sp)
 c00f004:	dc000015 	stw	r16,0(sp)
 c00f008:	dfc00515 	stw	ra,20(sp)
 c00f00c:	dd000415 	stw	r20,16(sp)
 c00f010:	dc400115 	stw	r17,4(sp)
 c00f014:	308000cc 	andi	r2,r6,3
 c00f018:	3021883a 	mov	r16,r6
 c00f01c:	2027883a 	mov	r19,r4
 c00f020:	2825883a 	mov	r18,r5
 c00f024:	10002e1e 	bne	r2,zero,c00f0e0 <__pow5mult+0xe8>
 c00f028:	8021d0ba 	srai	r16,r16,2
 c00f02c:	80001a26 	beq	r16,zero,c00f098 <__pow5mult+0xa0>
 c00f030:	9c401217 	ldw	r17,72(r19)
 c00f034:	8800061e 	bne	r17,zero,c00f050 <__pow5mult+0x58>
 c00f038:	00003406 	br	c00f10c <__pow5mult+0x114>
 c00f03c:	8021d07a 	srai	r16,r16,1
 c00f040:	80001526 	beq	r16,zero,c00f098 <__pow5mult+0xa0>
 c00f044:	88800017 	ldw	r2,0(r17)
 c00f048:	10001c26 	beq	r2,zero,c00f0bc <__pow5mult+0xc4>
 c00f04c:	1023883a 	mov	r17,r2
 c00f050:	80c0004c 	andi	r3,r16,1
 c00f054:	183ff926 	beq	r3,zero,c00f03c <__alt_data_end+0xfc00f03c>
 c00f058:	900b883a 	mov	r5,r18
 c00f05c:	880d883a 	mov	r6,r17
 c00f060:	9809883a 	mov	r4,r19
 c00f064:	c00edfc0 	call	c00edfc <__multiply>
 c00f068:	90001b26 	beq	r18,zero,c00f0d8 <__pow5mult+0xe0>
 c00f06c:	91c00117 	ldw	r7,4(r18)
 c00f070:	98c01317 	ldw	r3,76(r19)
 c00f074:	8021d07a 	srai	r16,r16,1
 c00f078:	39cf883a 	add	r7,r7,r7
 c00f07c:	39cf883a 	add	r7,r7,r7
 c00f080:	19c7883a 	add	r3,r3,r7
 c00f084:	19000017 	ldw	r4,0(r3)
 c00f088:	91000015 	stw	r4,0(r18)
 c00f08c:	1c800015 	stw	r18,0(r3)
 c00f090:	1025883a 	mov	r18,r2
 c00f094:	803feb1e 	bne	r16,zero,c00f044 <__alt_data_end+0xfc00f044>
 c00f098:	9005883a 	mov	r2,r18
 c00f09c:	dfc00517 	ldw	ra,20(sp)
 c00f0a0:	dd000417 	ldw	r20,16(sp)
 c00f0a4:	dcc00317 	ldw	r19,12(sp)
 c00f0a8:	dc800217 	ldw	r18,8(sp)
 c00f0ac:	dc400117 	ldw	r17,4(sp)
 c00f0b0:	dc000017 	ldw	r16,0(sp)
 c00f0b4:	dec00604 	addi	sp,sp,24
 c00f0b8:	f800283a 	ret
 c00f0bc:	9809883a 	mov	r4,r19
 c00f0c0:	880b883a 	mov	r5,r17
 c00f0c4:	880d883a 	mov	r6,r17
 c00f0c8:	c00edfc0 	call	c00edfc <__multiply>
 c00f0cc:	88800015 	stw	r2,0(r17)
 c00f0d0:	10000015 	stw	zero,0(r2)
 c00f0d4:	003fdd06 	br	c00f04c <__alt_data_end+0xfc00f04c>
 c00f0d8:	1025883a 	mov	r18,r2
 c00f0dc:	003fd706 	br	c00f03c <__alt_data_end+0xfc00f03c>
 c00f0e0:	10bfffc4 	addi	r2,r2,-1
 c00f0e4:	1085883a 	add	r2,r2,r2
 c00f0e8:	00c300b4 	movhi	r3,3074
 c00f0ec:	18c95504 	addi	r3,r3,9556
 c00f0f0:	1085883a 	add	r2,r2,r2
 c00f0f4:	1885883a 	add	r2,r3,r2
 c00f0f8:	11800017 	ldw	r6,0(r2)
 c00f0fc:	000f883a 	mov	r7,zero
 c00f100:	c00ea900 	call	c00ea90 <__multadd>
 c00f104:	1025883a 	mov	r18,r2
 c00f108:	003fc706 	br	c00f028 <__alt_data_end+0xfc00f028>
 c00f10c:	05000044 	movi	r20,1
 c00f110:	9809883a 	mov	r4,r19
 c00f114:	a00b883a 	mov	r5,r20
 c00f118:	c00e9c00 	call	c00e9c0 <_Balloc>
 c00f11c:	1023883a 	mov	r17,r2
 c00f120:	00809c44 	movi	r2,625
 c00f124:	88800515 	stw	r2,20(r17)
 c00f128:	8d000415 	stw	r20,16(r17)
 c00f12c:	9c401215 	stw	r17,72(r19)
 c00f130:	88000015 	stw	zero,0(r17)
 c00f134:	003fc606 	br	c00f050 <__alt_data_end+0xfc00f050>

0c00f138 <__lshift>:
 c00f138:	defff904 	addi	sp,sp,-28
 c00f13c:	dd000415 	stw	r20,16(sp)
 c00f140:	dcc00315 	stw	r19,12(sp)
 c00f144:	3029d17a 	srai	r20,r6,5
 c00f148:	2cc00417 	ldw	r19,16(r5)
 c00f14c:	28800217 	ldw	r2,8(r5)
 c00f150:	dd400515 	stw	r21,20(sp)
 c00f154:	a4e7883a 	add	r19,r20,r19
 c00f158:	dc800215 	stw	r18,8(sp)
 c00f15c:	dc400115 	stw	r17,4(sp)
 c00f160:	dc000015 	stw	r16,0(sp)
 c00f164:	dfc00615 	stw	ra,24(sp)
 c00f168:	9c000044 	addi	r16,r19,1
 c00f16c:	2823883a 	mov	r17,r5
 c00f170:	302b883a 	mov	r21,r6
 c00f174:	2025883a 	mov	r18,r4
 c00f178:	29400117 	ldw	r5,4(r5)
 c00f17c:	1400030e 	bge	r2,r16,c00f18c <__lshift+0x54>
 c00f180:	1085883a 	add	r2,r2,r2
 c00f184:	29400044 	addi	r5,r5,1
 c00f188:	143ffd16 	blt	r2,r16,c00f180 <__alt_data_end+0xfc00f180>
 c00f18c:	9009883a 	mov	r4,r18
 c00f190:	c00e9c00 	call	c00e9c0 <_Balloc>
 c00f194:	11c00504 	addi	r7,r2,20
 c00f198:	0500090e 	bge	zero,r20,c00f1c0 <__lshift+0x88>
 c00f19c:	3811883a 	mov	r8,r7
 c00f1a0:	0007883a 	mov	r3,zero
 c00f1a4:	40000015 	stw	zero,0(r8)
 c00f1a8:	18c00044 	addi	r3,r3,1
 c00f1ac:	42000104 	addi	r8,r8,4
 c00f1b0:	1d3ffc1e 	bne	r3,r20,c00f1a4 <__alt_data_end+0xfc00f1a4>
 c00f1b4:	18c7883a 	add	r3,r3,r3
 c00f1b8:	18c7883a 	add	r3,r3,r3
 c00f1bc:	38cf883a 	add	r7,r7,r3
 c00f1c0:	89000417 	ldw	r4,16(r17)
 c00f1c4:	88c00504 	addi	r3,r17,20
 c00f1c8:	a98007cc 	andi	r6,r21,31
 c00f1cc:	2109883a 	add	r4,r4,r4
 c00f1d0:	2109883a 	add	r4,r4,r4
 c00f1d4:	1909883a 	add	r4,r3,r4
 c00f1d8:	30002326 	beq	r6,zero,c00f268 <__lshift+0x130>
 c00f1dc:	01400804 	movi	r5,32
 c00f1e0:	298bc83a 	sub	r5,r5,r6
 c00f1e4:	0013883a 	mov	r9,zero
 c00f1e8:	1a000017 	ldw	r8,0(r3)
 c00f1ec:	3815883a 	mov	r10,r7
 c00f1f0:	39c00104 	addi	r7,r7,4
 c00f1f4:	4190983a 	sll	r8,r8,r6
 c00f1f8:	18c00104 	addi	r3,r3,4
 c00f1fc:	4a10b03a 	or	r8,r9,r8
 c00f200:	3a3fff15 	stw	r8,-4(r7)
 c00f204:	1a3fff17 	ldw	r8,-4(r3)
 c00f208:	4152d83a 	srl	r9,r8,r5
 c00f20c:	193ff636 	bltu	r3,r4,c00f1e8 <__alt_data_end+0xfc00f1e8>
 c00f210:	52400115 	stw	r9,4(r10)
 c00f214:	48000126 	beq	r9,zero,c00f21c <__lshift+0xe4>
 c00f218:	9c000084 	addi	r16,r19,2
 c00f21c:	89000117 	ldw	r4,4(r17)
 c00f220:	90c01317 	ldw	r3,76(r18)
 c00f224:	843fffc4 	addi	r16,r16,-1
 c00f228:	2109883a 	add	r4,r4,r4
 c00f22c:	2109883a 	add	r4,r4,r4
 c00f230:	1907883a 	add	r3,r3,r4
 c00f234:	19000017 	ldw	r4,0(r3)
 c00f238:	14000415 	stw	r16,16(r2)
 c00f23c:	89000015 	stw	r4,0(r17)
 c00f240:	1c400015 	stw	r17,0(r3)
 c00f244:	dfc00617 	ldw	ra,24(sp)
 c00f248:	dd400517 	ldw	r21,20(sp)
 c00f24c:	dd000417 	ldw	r20,16(sp)
 c00f250:	dcc00317 	ldw	r19,12(sp)
 c00f254:	dc800217 	ldw	r18,8(sp)
 c00f258:	dc400117 	ldw	r17,4(sp)
 c00f25c:	dc000017 	ldw	r16,0(sp)
 c00f260:	dec00704 	addi	sp,sp,28
 c00f264:	f800283a 	ret
 c00f268:	19400017 	ldw	r5,0(r3)
 c00f26c:	39c00104 	addi	r7,r7,4
 c00f270:	18c00104 	addi	r3,r3,4
 c00f274:	397fff15 	stw	r5,-4(r7)
 c00f278:	193ffb36 	bltu	r3,r4,c00f268 <__alt_data_end+0xfc00f268>
 c00f27c:	003fe706 	br	c00f21c <__alt_data_end+0xfc00f21c>

0c00f280 <__mcmp>:
 c00f280:	20800417 	ldw	r2,16(r4)
 c00f284:	28c00417 	ldw	r3,16(r5)
 c00f288:	10c5c83a 	sub	r2,r2,r3
 c00f28c:	1000111e 	bne	r2,zero,c00f2d4 <__mcmp+0x54>
 c00f290:	18c7883a 	add	r3,r3,r3
 c00f294:	18c7883a 	add	r3,r3,r3
 c00f298:	21000504 	addi	r4,r4,20
 c00f29c:	29400504 	addi	r5,r5,20
 c00f2a0:	20c5883a 	add	r2,r4,r3
 c00f2a4:	28cb883a 	add	r5,r5,r3
 c00f2a8:	00000106 	br	c00f2b0 <__mcmp+0x30>
 c00f2ac:	20800a2e 	bgeu	r4,r2,c00f2d8 <__mcmp+0x58>
 c00f2b0:	10bfff04 	addi	r2,r2,-4
 c00f2b4:	297fff04 	addi	r5,r5,-4
 c00f2b8:	11800017 	ldw	r6,0(r2)
 c00f2bc:	28c00017 	ldw	r3,0(r5)
 c00f2c0:	30fffa26 	beq	r6,r3,c00f2ac <__alt_data_end+0xfc00f2ac>
 c00f2c4:	30c00236 	bltu	r6,r3,c00f2d0 <__mcmp+0x50>
 c00f2c8:	00800044 	movi	r2,1
 c00f2cc:	f800283a 	ret
 c00f2d0:	00bfffc4 	movi	r2,-1
 c00f2d4:	f800283a 	ret
 c00f2d8:	0005883a 	mov	r2,zero
 c00f2dc:	f800283a 	ret

0c00f2e0 <__mdiff>:
 c00f2e0:	defffb04 	addi	sp,sp,-20
 c00f2e4:	dc000015 	stw	r16,0(sp)
 c00f2e8:	2821883a 	mov	r16,r5
 c00f2ec:	dcc00315 	stw	r19,12(sp)
 c00f2f0:	300b883a 	mov	r5,r6
 c00f2f4:	2027883a 	mov	r19,r4
 c00f2f8:	8009883a 	mov	r4,r16
 c00f2fc:	dc800215 	stw	r18,8(sp)
 c00f300:	dfc00415 	stw	ra,16(sp)
 c00f304:	dc400115 	stw	r17,4(sp)
 c00f308:	3025883a 	mov	r18,r6
 c00f30c:	c00f2800 	call	c00f280 <__mcmp>
 c00f310:	10005226 	beq	r2,zero,c00f45c <__mdiff+0x17c>
 c00f314:	10004c16 	blt	r2,zero,c00f448 <__mdiff+0x168>
 c00f318:	0023883a 	mov	r17,zero
 c00f31c:	81400117 	ldw	r5,4(r16)
 c00f320:	9809883a 	mov	r4,r19
 c00f324:	c00e9c00 	call	c00e9c0 <_Balloc>
 c00f328:	83400417 	ldw	r13,16(r16)
 c00f32c:	93800417 	ldw	r14,16(r18)
 c00f330:	81000504 	addi	r4,r16,20
 c00f334:	6b59883a 	add	r12,r13,r13
 c00f338:	739d883a 	add	r14,r14,r14
 c00f33c:	6319883a 	add	r12,r12,r12
 c00f340:	91800504 	addi	r6,r18,20
 c00f344:	739d883a 	add	r14,r14,r14
 c00f348:	14400315 	stw	r17,12(r2)
 c00f34c:	2319883a 	add	r12,r4,r12
 c00f350:	339d883a 	add	r14,r6,r14
 c00f354:	12400504 	addi	r9,r2,20
 c00f358:	0007883a 	mov	r3,zero
 c00f35c:	22000017 	ldw	r8,0(r4)
 c00f360:	32800017 	ldw	r10,0(r6)
 c00f364:	4ac00104 	addi	r11,r9,4
 c00f368:	41ffffcc 	andi	r7,r8,65535
 c00f36c:	38c7883a 	add	r3,r7,r3
 c00f370:	51ffffcc 	andi	r7,r10,65535
 c00f374:	19cfc83a 	sub	r7,r3,r7
 c00f378:	4010d43a 	srli	r8,r8,16
 c00f37c:	5014d43a 	srli	r10,r10,16
 c00f380:	3807d43a 	srai	r3,r7,16
 c00f384:	39ffffcc 	andi	r7,r7,65535
 c00f388:	4291c83a 	sub	r8,r8,r10
 c00f38c:	40c7883a 	add	r3,r8,r3
 c00f390:	1810943a 	slli	r8,r3,16
 c00f394:	31800104 	addi	r6,r6,4
 c00f398:	21000104 	addi	r4,r4,4
 c00f39c:	41ceb03a 	or	r7,r8,r7
 c00f3a0:	49c00015 	stw	r7,0(r9)
 c00f3a4:	1807d43a 	srai	r3,r3,16
 c00f3a8:	580b883a 	mov	r5,r11
 c00f3ac:	5813883a 	mov	r9,r11
 c00f3b0:	33bfea36 	bltu	r6,r14,c00f35c <__alt_data_end+0xfc00f35c>
 c00f3b4:	2011883a 	mov	r8,r4
 c00f3b8:	2300152e 	bgeu	r4,r12,c00f410 <__mdiff+0x130>
 c00f3bc:	21400017 	ldw	r5,0(r4)
 c00f3c0:	4a400104 	addi	r9,r9,4
 c00f3c4:	21000104 	addi	r4,r4,4
 c00f3c8:	29ffffcc 	andi	r7,r5,65535
 c00f3cc:	38c7883a 	add	r3,r7,r3
 c00f3d0:	280ad43a 	srli	r5,r5,16
 c00f3d4:	180dd43a 	srai	r6,r3,16
 c00f3d8:	19ffffcc 	andi	r7,r3,65535
 c00f3dc:	3147883a 	add	r3,r6,r5
 c00f3e0:	180a943a 	slli	r5,r3,16
 c00f3e4:	1807d43a 	srai	r3,r3,16
 c00f3e8:	29ceb03a 	or	r7,r5,r7
 c00f3ec:	49ffff15 	stw	r7,-4(r9)
 c00f3f0:	233ff236 	bltu	r4,r12,c00f3bc <__alt_data_end+0xfc00f3bc>
 c00f3f4:	0206303a 	nor	r3,zero,r8
 c00f3f8:	1b07883a 	add	r3,r3,r12
 c00f3fc:	1806d0ba 	srli	r3,r3,2
 c00f400:	18c00044 	addi	r3,r3,1
 c00f404:	18c7883a 	add	r3,r3,r3
 c00f408:	18c7883a 	add	r3,r3,r3
 c00f40c:	58cb883a 	add	r5,r11,r3
 c00f410:	28ffff04 	addi	r3,r5,-4
 c00f414:	3800041e 	bne	r7,zero,c00f428 <__mdiff+0x148>
 c00f418:	18ffff04 	addi	r3,r3,-4
 c00f41c:	19000017 	ldw	r4,0(r3)
 c00f420:	6b7fffc4 	addi	r13,r13,-1
 c00f424:	203ffc26 	beq	r4,zero,c00f418 <__alt_data_end+0xfc00f418>
 c00f428:	13400415 	stw	r13,16(r2)
 c00f42c:	dfc00417 	ldw	ra,16(sp)
 c00f430:	dcc00317 	ldw	r19,12(sp)
 c00f434:	dc800217 	ldw	r18,8(sp)
 c00f438:	dc400117 	ldw	r17,4(sp)
 c00f43c:	dc000017 	ldw	r16,0(sp)
 c00f440:	dec00504 	addi	sp,sp,20
 c00f444:	f800283a 	ret
 c00f448:	8005883a 	mov	r2,r16
 c00f44c:	04400044 	movi	r17,1
 c00f450:	9021883a 	mov	r16,r18
 c00f454:	1025883a 	mov	r18,r2
 c00f458:	003fb006 	br	c00f31c <__alt_data_end+0xfc00f31c>
 c00f45c:	9809883a 	mov	r4,r19
 c00f460:	000b883a 	mov	r5,zero
 c00f464:	c00e9c00 	call	c00e9c0 <_Balloc>
 c00f468:	00c00044 	movi	r3,1
 c00f46c:	10c00415 	stw	r3,16(r2)
 c00f470:	10000515 	stw	zero,20(r2)
 c00f474:	003fed06 	br	c00f42c <__alt_data_end+0xfc00f42c>

0c00f478 <__ulp>:
 c00f478:	295ffc2c 	andhi	r5,r5,32752
 c00f47c:	00bf3034 	movhi	r2,64704
 c00f480:	2887883a 	add	r3,r5,r2
 c00f484:	00c0020e 	bge	zero,r3,c00f490 <__ulp+0x18>
 c00f488:	0005883a 	mov	r2,zero
 c00f48c:	f800283a 	ret
 c00f490:	00c7c83a 	sub	r3,zero,r3
 c00f494:	180bd53a 	srai	r5,r3,20
 c00f498:	008004c4 	movi	r2,19
 c00f49c:	11400a0e 	bge	r2,r5,c00f4c8 <__ulp+0x50>
 c00f4a0:	00800c84 	movi	r2,50
 c00f4a4:	0007883a 	mov	r3,zero
 c00f4a8:	11400516 	blt	r2,r5,c00f4c0 <__ulp+0x48>
 c00f4ac:	00800cc4 	movi	r2,51
 c00f4b0:	114bc83a 	sub	r5,r2,r5
 c00f4b4:	00800044 	movi	r2,1
 c00f4b8:	1144983a 	sll	r2,r2,r5
 c00f4bc:	f800283a 	ret
 c00f4c0:	00800044 	movi	r2,1
 c00f4c4:	f800283a 	ret
 c00f4c8:	00800234 	movhi	r2,8
 c00f4cc:	1147d83a 	sra	r3,r2,r5
 c00f4d0:	0005883a 	mov	r2,zero
 c00f4d4:	f800283a 	ret

0c00f4d8 <__b2d>:
 c00f4d8:	defffa04 	addi	sp,sp,-24
 c00f4dc:	dc000015 	stw	r16,0(sp)
 c00f4e0:	24000417 	ldw	r16,16(r4)
 c00f4e4:	dc400115 	stw	r17,4(sp)
 c00f4e8:	24400504 	addi	r17,r4,20
 c00f4ec:	8421883a 	add	r16,r16,r16
 c00f4f0:	8421883a 	add	r16,r16,r16
 c00f4f4:	8c21883a 	add	r16,r17,r16
 c00f4f8:	dc800215 	stw	r18,8(sp)
 c00f4fc:	84bfff17 	ldw	r18,-4(r16)
 c00f500:	dd000415 	stw	r20,16(sp)
 c00f504:	dcc00315 	stw	r19,12(sp)
 c00f508:	9009883a 	mov	r4,r18
 c00f50c:	2829883a 	mov	r20,r5
 c00f510:	dfc00515 	stw	ra,20(sp)
 c00f514:	c00eca80 	call	c00eca8 <__hi0bits>
 c00f518:	00c00804 	movi	r3,32
 c00f51c:	1887c83a 	sub	r3,r3,r2
 c00f520:	a0c00015 	stw	r3,0(r20)
 c00f524:	00c00284 	movi	r3,10
 c00f528:	84ffff04 	addi	r19,r16,-4
 c00f52c:	18801216 	blt	r3,r2,c00f578 <__b2d+0xa0>
 c00f530:	014002c4 	movi	r5,11
 c00f534:	2889c83a 	sub	r4,r5,r2
 c00f538:	9106d83a 	srl	r3,r18,r4
 c00f53c:	18cffc34 	orhi	r3,r3,16368
 c00f540:	8cc0282e 	bgeu	r17,r19,c00f5e4 <__b2d+0x10c>
 c00f544:	817ffe17 	ldw	r5,-8(r16)
 c00f548:	290ad83a 	srl	r5,r5,r4
 c00f54c:	10800544 	addi	r2,r2,21
 c00f550:	9084983a 	sll	r2,r18,r2
 c00f554:	2884b03a 	or	r2,r5,r2
 c00f558:	dfc00517 	ldw	ra,20(sp)
 c00f55c:	dd000417 	ldw	r20,16(sp)
 c00f560:	dcc00317 	ldw	r19,12(sp)
 c00f564:	dc800217 	ldw	r18,8(sp)
 c00f568:	dc400117 	ldw	r17,4(sp)
 c00f56c:	dc000017 	ldw	r16,0(sp)
 c00f570:	dec00604 	addi	sp,sp,24
 c00f574:	f800283a 	ret
 c00f578:	113ffd44 	addi	r4,r2,-11
 c00f57c:	8cc00f2e 	bgeu	r17,r19,c00f5bc <__b2d+0xe4>
 c00f580:	81bffe04 	addi	r6,r16,-8
 c00f584:	817ffe17 	ldw	r5,-8(r16)
 c00f588:	20001326 	beq	r4,zero,c00f5d8 <__b2d+0x100>
 c00f58c:	00c00ac4 	movi	r3,43
 c00f590:	1885c83a 	sub	r2,r3,r2
 c00f594:	2886d83a 	srl	r3,r5,r2
 c00f598:	9124983a 	sll	r18,r18,r4
 c00f59c:	90e4b03a 	or	r18,r18,r3
 c00f5a0:	90cffc34 	orhi	r3,r18,16368
 c00f5a4:	8980112e 	bgeu	r17,r6,c00f5ec <__b2d+0x114>
 c00f5a8:	81bffd17 	ldw	r6,-12(r16)
 c00f5ac:	308cd83a 	srl	r6,r6,r2
 c00f5b0:	2904983a 	sll	r2,r5,r4
 c00f5b4:	1184b03a 	or	r2,r2,r6
 c00f5b8:	003fe706 	br	c00f558 <__alt_data_end+0xfc00f558>
 c00f5bc:	20000526 	beq	r4,zero,c00f5d4 <__b2d+0xfc>
 c00f5c0:	9124983a 	sll	r18,r18,r4
 c00f5c4:	000d883a 	mov	r6,zero
 c00f5c8:	000b883a 	mov	r5,zero
 c00f5cc:	90cffc34 	orhi	r3,r18,16368
 c00f5d0:	003ff706 	br	c00f5b0 <__alt_data_end+0xfc00f5b0>
 c00f5d4:	000b883a 	mov	r5,zero
 c00f5d8:	90cffc34 	orhi	r3,r18,16368
 c00f5dc:	2805883a 	mov	r2,r5
 c00f5e0:	003fdd06 	br	c00f558 <__alt_data_end+0xfc00f558>
 c00f5e4:	000b883a 	mov	r5,zero
 c00f5e8:	003fd806 	br	c00f54c <__alt_data_end+0xfc00f54c>
 c00f5ec:	000d883a 	mov	r6,zero
 c00f5f0:	003fef06 	br	c00f5b0 <__alt_data_end+0xfc00f5b0>

0c00f5f4 <__d2b>:
 c00f5f4:	defff704 	addi	sp,sp,-36
 c00f5f8:	dc000215 	stw	r16,8(sp)
 c00f5fc:	3021883a 	mov	r16,r6
 c00f600:	dc400315 	stw	r17,12(sp)
 c00f604:	8022907a 	slli	r17,r16,1
 c00f608:	dd400715 	stw	r21,28(sp)
 c00f60c:	282b883a 	mov	r21,r5
 c00f610:	01400044 	movi	r5,1
 c00f614:	dd000615 	stw	r20,24(sp)
 c00f618:	dcc00515 	stw	r19,20(sp)
 c00f61c:	dc800415 	stw	r18,16(sp)
 c00f620:	dfc00815 	stw	ra,32(sp)
 c00f624:	3829883a 	mov	r20,r7
 c00f628:	dc800917 	ldw	r18,36(sp)
 c00f62c:	8822d57a 	srli	r17,r17,21
 c00f630:	c00e9c00 	call	c00e9c0 <_Balloc>
 c00f634:	1027883a 	mov	r19,r2
 c00f638:	00800434 	movhi	r2,16
 c00f63c:	10bfffc4 	addi	r2,r2,-1
 c00f640:	808c703a 	and	r6,r16,r2
 c00f644:	88000126 	beq	r17,zero,c00f64c <__d2b+0x58>
 c00f648:	31800434 	orhi	r6,r6,16
 c00f64c:	d9800015 	stw	r6,0(sp)
 c00f650:	a8001f26 	beq	r21,zero,c00f6d0 <__d2b+0xdc>
 c00f654:	d9000104 	addi	r4,sp,4
 c00f658:	dd400115 	stw	r21,4(sp)
 c00f65c:	c00ed100 	call	c00ed10 <__lo0bits>
 c00f660:	d8c00017 	ldw	r3,0(sp)
 c00f664:	1000291e 	bne	r2,zero,c00f70c <__d2b+0x118>
 c00f668:	d9000117 	ldw	r4,4(sp)
 c00f66c:	99000515 	stw	r4,20(r19)
 c00f670:	1820c03a 	cmpne	r16,r3,zero
 c00f674:	84000044 	addi	r16,r16,1
 c00f678:	98c00615 	stw	r3,24(r19)
 c00f67c:	9c000415 	stw	r16,16(r19)
 c00f680:	88001b1e 	bne	r17,zero,c00f6f0 <__d2b+0xfc>
 c00f684:	800690ba 	slli	r3,r16,2
 c00f688:	10bef384 	addi	r2,r2,-1074
 c00f68c:	a0800015 	stw	r2,0(r20)
 c00f690:	98c5883a 	add	r2,r19,r3
 c00f694:	11000417 	ldw	r4,16(r2)
 c00f698:	8020917a 	slli	r16,r16,5
 c00f69c:	c00eca80 	call	c00eca8 <__hi0bits>
 c00f6a0:	8085c83a 	sub	r2,r16,r2
 c00f6a4:	90800015 	stw	r2,0(r18)
 c00f6a8:	9805883a 	mov	r2,r19
 c00f6ac:	dfc00817 	ldw	ra,32(sp)
 c00f6b0:	dd400717 	ldw	r21,28(sp)
 c00f6b4:	dd000617 	ldw	r20,24(sp)
 c00f6b8:	dcc00517 	ldw	r19,20(sp)
 c00f6bc:	dc800417 	ldw	r18,16(sp)
 c00f6c0:	dc400317 	ldw	r17,12(sp)
 c00f6c4:	dc000217 	ldw	r16,8(sp)
 c00f6c8:	dec00904 	addi	sp,sp,36
 c00f6cc:	f800283a 	ret
 c00f6d0:	d809883a 	mov	r4,sp
 c00f6d4:	c00ed100 	call	c00ed10 <__lo0bits>
 c00f6d8:	d8c00017 	ldw	r3,0(sp)
 c00f6dc:	04000044 	movi	r16,1
 c00f6e0:	9c000415 	stw	r16,16(r19)
 c00f6e4:	98c00515 	stw	r3,20(r19)
 c00f6e8:	10800804 	addi	r2,r2,32
 c00f6ec:	883fe526 	beq	r17,zero,c00f684 <__alt_data_end+0xfc00f684>
 c00f6f0:	8c7ef344 	addi	r17,r17,-1075
 c00f6f4:	88a3883a 	add	r17,r17,r2
 c00f6f8:	00c00d44 	movi	r3,53
 c00f6fc:	a4400015 	stw	r17,0(r20)
 c00f700:	1885c83a 	sub	r2,r3,r2
 c00f704:	90800015 	stw	r2,0(r18)
 c00f708:	003fe706 	br	c00f6a8 <__alt_data_end+0xfc00f6a8>
 c00f70c:	01000804 	movi	r4,32
 c00f710:	2089c83a 	sub	r4,r4,r2
 c00f714:	1908983a 	sll	r4,r3,r4
 c00f718:	d9400117 	ldw	r5,4(sp)
 c00f71c:	1886d83a 	srl	r3,r3,r2
 c00f720:	2148b03a 	or	r4,r4,r5
 c00f724:	99000515 	stw	r4,20(r19)
 c00f728:	d8c00015 	stw	r3,0(sp)
 c00f72c:	003fd006 	br	c00f670 <__alt_data_end+0xfc00f670>

0c00f730 <__ratio>:
 c00f730:	defff904 	addi	sp,sp,-28
 c00f734:	dc400315 	stw	r17,12(sp)
 c00f738:	2823883a 	mov	r17,r5
 c00f73c:	d9400104 	addi	r5,sp,4
 c00f740:	dfc00615 	stw	ra,24(sp)
 c00f744:	dcc00515 	stw	r19,20(sp)
 c00f748:	dc800415 	stw	r18,16(sp)
 c00f74c:	2027883a 	mov	r19,r4
 c00f750:	dc000215 	stw	r16,8(sp)
 c00f754:	c00f4d80 	call	c00f4d8 <__b2d>
 c00f758:	8809883a 	mov	r4,r17
 c00f75c:	d80b883a 	mov	r5,sp
 c00f760:	1025883a 	mov	r18,r2
 c00f764:	1821883a 	mov	r16,r3
 c00f768:	c00f4d80 	call	c00f4d8 <__b2d>
 c00f76c:	8a400417 	ldw	r9,16(r17)
 c00f770:	9a000417 	ldw	r8,16(r19)
 c00f774:	100d883a 	mov	r6,r2
 c00f778:	d8800017 	ldw	r2,0(sp)
 c00f77c:	4251c83a 	sub	r8,r8,r9
 c00f780:	4012917a 	slli	r9,r8,5
 c00f784:	da000117 	ldw	r8,4(sp)
 c00f788:	4091c83a 	sub	r8,r8,r2
 c00f78c:	4251883a 	add	r8,r8,r9
 c00f790:	02000d0e 	bge	zero,r8,c00f7c8 <__ratio+0x98>
 c00f794:	4010953a 	slli	r8,r8,20
 c00f798:	4421883a 	add	r16,r8,r16
 c00f79c:	9009883a 	mov	r4,r18
 c00f7a0:	800b883a 	mov	r5,r16
 c00f7a4:	180f883a 	mov	r7,r3
 c00f7a8:	c0081240 	call	c008124 <__divdf3>
 c00f7ac:	dfc00617 	ldw	ra,24(sp)
 c00f7b0:	dcc00517 	ldw	r19,20(sp)
 c00f7b4:	dc800417 	ldw	r18,16(sp)
 c00f7b8:	dc400317 	ldw	r17,12(sp)
 c00f7bc:	dc000217 	ldw	r16,8(sp)
 c00f7c0:	dec00704 	addi	sp,sp,28
 c00f7c4:	f800283a 	ret
 c00f7c8:	4010953a 	slli	r8,r8,20
 c00f7cc:	1a07c83a 	sub	r3,r3,r8
 c00f7d0:	003ff206 	br	c00f79c <__alt_data_end+0xfc00f79c>

0c00f7d4 <_mprec_log10>:
 c00f7d4:	defffe04 	addi	sp,sp,-8
 c00f7d8:	dc000015 	stw	r16,0(sp)
 c00f7dc:	dfc00115 	stw	ra,4(sp)
 c00f7e0:	008005c4 	movi	r2,23
 c00f7e4:	2021883a 	mov	r16,r4
 c00f7e8:	11000d0e 	bge	r2,r4,c00f820 <_mprec_log10+0x4c>
 c00f7ec:	0005883a 	mov	r2,zero
 c00f7f0:	00cffc34 	movhi	r3,16368
 c00f7f4:	843fffc4 	addi	r16,r16,-1
 c00f7f8:	1009883a 	mov	r4,r2
 c00f7fc:	180b883a 	mov	r5,r3
 c00f800:	000d883a 	mov	r6,zero
 c00f804:	01d00934 	movhi	r7,16420
 c00f808:	c0139a40 	call	c0139a4 <__muldf3>
 c00f80c:	803ff91e 	bne	r16,zero,c00f7f4 <__alt_data_end+0xfc00f7f4>
 c00f810:	dfc00117 	ldw	ra,4(sp)
 c00f814:	dc000017 	ldw	r16,0(sp)
 c00f818:	dec00204 	addi	sp,sp,8
 c00f81c:	f800283a 	ret
 c00f820:	202090fa 	slli	r16,r4,3
 c00f824:	008300b4 	movhi	r2,3074
 c00f828:	10896c04 	addi	r2,r2,9648
 c00f82c:	1421883a 	add	r16,r2,r16
 c00f830:	80800017 	ldw	r2,0(r16)
 c00f834:	80c00117 	ldw	r3,4(r16)
 c00f838:	dfc00117 	ldw	ra,4(sp)
 c00f83c:	dc000017 	ldw	r16,0(sp)
 c00f840:	dec00204 	addi	sp,sp,8
 c00f844:	f800283a 	ret

0c00f848 <__copybits>:
 c00f848:	297fffc4 	addi	r5,r5,-1
 c00f84c:	280fd17a 	srai	r7,r5,5
 c00f850:	30c00417 	ldw	r3,16(r6)
 c00f854:	30800504 	addi	r2,r6,20
 c00f858:	39c00044 	addi	r7,r7,1
 c00f85c:	18c7883a 	add	r3,r3,r3
 c00f860:	39cf883a 	add	r7,r7,r7
 c00f864:	18c7883a 	add	r3,r3,r3
 c00f868:	39cf883a 	add	r7,r7,r7
 c00f86c:	10c7883a 	add	r3,r2,r3
 c00f870:	21cf883a 	add	r7,r4,r7
 c00f874:	10c00d2e 	bgeu	r2,r3,c00f8ac <__copybits+0x64>
 c00f878:	200b883a 	mov	r5,r4
 c00f87c:	12000017 	ldw	r8,0(r2)
 c00f880:	29400104 	addi	r5,r5,4
 c00f884:	10800104 	addi	r2,r2,4
 c00f888:	2a3fff15 	stw	r8,-4(r5)
 c00f88c:	10fffb36 	bltu	r2,r3,c00f87c <__alt_data_end+0xfc00f87c>
 c00f890:	1985c83a 	sub	r2,r3,r6
 c00f894:	10bffac4 	addi	r2,r2,-21
 c00f898:	1004d0ba 	srli	r2,r2,2
 c00f89c:	10800044 	addi	r2,r2,1
 c00f8a0:	1085883a 	add	r2,r2,r2
 c00f8a4:	1085883a 	add	r2,r2,r2
 c00f8a8:	2089883a 	add	r4,r4,r2
 c00f8ac:	21c0032e 	bgeu	r4,r7,c00f8bc <__copybits+0x74>
 c00f8b0:	20000015 	stw	zero,0(r4)
 c00f8b4:	21000104 	addi	r4,r4,4
 c00f8b8:	21fffd36 	bltu	r4,r7,c00f8b0 <__alt_data_end+0xfc00f8b0>
 c00f8bc:	f800283a 	ret

0c00f8c0 <__any_on>:
 c00f8c0:	20c00417 	ldw	r3,16(r4)
 c00f8c4:	2805d17a 	srai	r2,r5,5
 c00f8c8:	21000504 	addi	r4,r4,20
 c00f8cc:	18800d0e 	bge	r3,r2,c00f904 <__any_on+0x44>
 c00f8d0:	18c7883a 	add	r3,r3,r3
 c00f8d4:	18c7883a 	add	r3,r3,r3
 c00f8d8:	20c7883a 	add	r3,r4,r3
 c00f8dc:	20c0192e 	bgeu	r4,r3,c00f944 <__any_on+0x84>
 c00f8e0:	18bfff17 	ldw	r2,-4(r3)
 c00f8e4:	18ffff04 	addi	r3,r3,-4
 c00f8e8:	1000041e 	bne	r2,zero,c00f8fc <__any_on+0x3c>
 c00f8ec:	20c0142e 	bgeu	r4,r3,c00f940 <__any_on+0x80>
 c00f8f0:	18ffff04 	addi	r3,r3,-4
 c00f8f4:	19400017 	ldw	r5,0(r3)
 c00f8f8:	283ffc26 	beq	r5,zero,c00f8ec <__alt_data_end+0xfc00f8ec>
 c00f8fc:	00800044 	movi	r2,1
 c00f900:	f800283a 	ret
 c00f904:	10c00a0e 	bge	r2,r3,c00f930 <__any_on+0x70>
 c00f908:	1085883a 	add	r2,r2,r2
 c00f90c:	1085883a 	add	r2,r2,r2
 c00f910:	294007cc 	andi	r5,r5,31
 c00f914:	2087883a 	add	r3,r4,r2
 c00f918:	283ff026 	beq	r5,zero,c00f8dc <__alt_data_end+0xfc00f8dc>
 c00f91c:	19800017 	ldw	r6,0(r3)
 c00f920:	3144d83a 	srl	r2,r6,r5
 c00f924:	114a983a 	sll	r5,r2,r5
 c00f928:	29bff41e 	bne	r5,r6,c00f8fc <__alt_data_end+0xfc00f8fc>
 c00f92c:	003feb06 	br	c00f8dc <__alt_data_end+0xfc00f8dc>
 c00f930:	1085883a 	add	r2,r2,r2
 c00f934:	1085883a 	add	r2,r2,r2
 c00f938:	2087883a 	add	r3,r4,r2
 c00f93c:	003fe706 	br	c00f8dc <__alt_data_end+0xfc00f8dc>
 c00f940:	f800283a 	ret
 c00f944:	0005883a 	mov	r2,zero
 c00f948:	f800283a 	ret

0c00f94c <_putc_r>:
 c00f94c:	defffc04 	addi	sp,sp,-16
 c00f950:	dc000215 	stw	r16,8(sp)
 c00f954:	dfc00315 	stw	ra,12(sp)
 c00f958:	2021883a 	mov	r16,r4
 c00f95c:	20000226 	beq	r4,zero,c00f968 <_putc_r+0x1c>
 c00f960:	20800e17 	ldw	r2,56(r4)
 c00f964:	10001b26 	beq	r2,zero,c00f9d4 <_putc_r+0x88>
 c00f968:	30800217 	ldw	r2,8(r6)
 c00f96c:	10bfffc4 	addi	r2,r2,-1
 c00f970:	30800215 	stw	r2,8(r6)
 c00f974:	10000a16 	blt	r2,zero,c00f9a0 <_putc_r+0x54>
 c00f978:	30800017 	ldw	r2,0(r6)
 c00f97c:	11400005 	stb	r5,0(r2)
 c00f980:	30800017 	ldw	r2,0(r6)
 c00f984:	10c00044 	addi	r3,r2,1
 c00f988:	30c00015 	stw	r3,0(r6)
 c00f98c:	10800003 	ldbu	r2,0(r2)
 c00f990:	dfc00317 	ldw	ra,12(sp)
 c00f994:	dc000217 	ldw	r16,8(sp)
 c00f998:	dec00404 	addi	sp,sp,16
 c00f99c:	f800283a 	ret
 c00f9a0:	30c00617 	ldw	r3,24(r6)
 c00f9a4:	10c00616 	blt	r2,r3,c00f9c0 <_putc_r+0x74>
 c00f9a8:	30800017 	ldw	r2,0(r6)
 c00f9ac:	00c00284 	movi	r3,10
 c00f9b0:	11400005 	stb	r5,0(r2)
 c00f9b4:	30800017 	ldw	r2,0(r6)
 c00f9b8:	11400003 	ldbu	r5,0(r2)
 c00f9bc:	28fff11e 	bne	r5,r3,c00f984 <__alt_data_end+0xfc00f984>
 c00f9c0:	8009883a 	mov	r4,r16
 c00f9c4:	dfc00317 	ldw	ra,12(sp)
 c00f9c8:	dc000217 	ldw	r16,8(sp)
 c00f9cc:	dec00404 	addi	sp,sp,16
 c00f9d0:	c011a3c1 	jmpi	c011a3c <__swbuf_r>
 c00f9d4:	d9400015 	stw	r5,0(sp)
 c00f9d8:	d9800115 	stw	r6,4(sp)
 c00f9dc:	c00da6c0 	call	c00da6c <__sinit>
 c00f9e0:	d9800117 	ldw	r6,4(sp)
 c00f9e4:	d9400017 	ldw	r5,0(sp)
 c00f9e8:	003fdf06 	br	c00f968 <__alt_data_end+0xfc00f968>

0c00f9ec <putc>:
 c00f9ec:	defffc04 	addi	sp,sp,-16
 c00f9f0:	dc400115 	stw	r17,4(sp)
 c00f9f4:	044300b4 	movhi	r17,3074
 c00f9f8:	8c507604 	addi	r17,r17,16856
 c00f9fc:	dc800215 	stw	r18,8(sp)
 c00fa00:	2025883a 	mov	r18,r4
 c00fa04:	89000017 	ldw	r4,0(r17)
 c00fa08:	dc000015 	stw	r16,0(sp)
 c00fa0c:	dfc00315 	stw	ra,12(sp)
 c00fa10:	2821883a 	mov	r16,r5
 c00fa14:	20000226 	beq	r4,zero,c00fa20 <putc+0x34>
 c00fa18:	20c00e17 	ldw	r3,56(r4)
 c00fa1c:	18001a26 	beq	r3,zero,c00fa88 <putc+0x9c>
 c00fa20:	80800217 	ldw	r2,8(r16)
 c00fa24:	10bfffc4 	addi	r2,r2,-1
 c00fa28:	80800215 	stw	r2,8(r16)
 c00fa2c:	10000c16 	blt	r2,zero,c00fa60 <putc+0x74>
 c00fa30:	80800017 	ldw	r2,0(r16)
 c00fa34:	14800005 	stb	r18,0(r2)
 c00fa38:	80800017 	ldw	r2,0(r16)
 c00fa3c:	10c00044 	addi	r3,r2,1
 c00fa40:	80c00015 	stw	r3,0(r16)
 c00fa44:	10800003 	ldbu	r2,0(r2)
 c00fa48:	dfc00317 	ldw	ra,12(sp)
 c00fa4c:	dc800217 	ldw	r18,8(sp)
 c00fa50:	dc400117 	ldw	r17,4(sp)
 c00fa54:	dc000017 	ldw	r16,0(sp)
 c00fa58:	dec00404 	addi	sp,sp,16
 c00fa5c:	f800283a 	ret
 c00fa60:	80c00617 	ldw	r3,24(r16)
 c00fa64:	10c00a16 	blt	r2,r3,c00fa90 <putc+0xa4>
 c00fa68:	80800017 	ldw	r2,0(r16)
 c00fa6c:	00c00284 	movi	r3,10
 c00fa70:	14800005 	stb	r18,0(r2)
 c00fa74:	80800017 	ldw	r2,0(r16)
 c00fa78:	11400003 	ldbu	r5,0(r2)
 c00fa7c:	28ffef1e 	bne	r5,r3,c00fa3c <__alt_data_end+0xfc00fa3c>
 c00fa80:	89000017 	ldw	r4,0(r17)
 c00fa84:	00000406 	br	c00fa98 <putc+0xac>
 c00fa88:	c00da6c0 	call	c00da6c <__sinit>
 c00fa8c:	003fe406 	br	c00fa20 <__alt_data_end+0xfc00fa20>
 c00fa90:	89000017 	ldw	r4,0(r17)
 c00fa94:	900b883a 	mov	r5,r18
 c00fa98:	800d883a 	mov	r6,r16
 c00fa9c:	dfc00317 	ldw	ra,12(sp)
 c00faa0:	dc800217 	ldw	r18,8(sp)
 c00faa4:	dc400117 	ldw	r17,4(sp)
 c00faa8:	dc000017 	ldw	r16,0(sp)
 c00faac:	dec00404 	addi	sp,sp,16
 c00fab0:	c011a3c1 	jmpi	c011a3c <__swbuf_r>

0c00fab4 <_realloc_r>:
 c00fab4:	defff604 	addi	sp,sp,-40
 c00fab8:	dcc00315 	stw	r19,12(sp)
 c00fabc:	dc400115 	stw	r17,4(sp)
 c00fac0:	dfc00915 	stw	ra,36(sp)
 c00fac4:	df000815 	stw	fp,32(sp)
 c00fac8:	ddc00715 	stw	r23,28(sp)
 c00facc:	dd800615 	stw	r22,24(sp)
 c00fad0:	dd400515 	stw	r21,20(sp)
 c00fad4:	dd000415 	stw	r20,16(sp)
 c00fad8:	dc800215 	stw	r18,8(sp)
 c00fadc:	dc000015 	stw	r16,0(sp)
 c00fae0:	2827883a 	mov	r19,r5
 c00fae4:	3023883a 	mov	r17,r6
 c00fae8:	2800bf26 	beq	r5,zero,c00fde8 <_realloc_r+0x334>
 c00faec:	2025883a 	mov	r18,r4
 c00faf0:	c0153800 	call	c015380 <__malloc_lock>
 c00faf4:	98ffff17 	ldw	r3,-4(r19)
 c00faf8:	01bfff04 	movi	r6,-4
 c00fafc:	890002c4 	addi	r4,r17,11
 c00fb00:	01c00584 	movi	r7,22
 c00fb04:	9d7ffe04 	addi	r21,r19,-8
 c00fb08:	19a0703a 	and	r16,r3,r6
 c00fb0c:	39003f2e 	bgeu	r7,r4,c00fc0c <_realloc_r+0x158>
 c00fb10:	053ffe04 	movi	r20,-8
 c00fb14:	2528703a 	and	r20,r4,r20
 c00fb18:	a00f883a 	mov	r7,r20
 c00fb1c:	a0008216 	blt	r20,zero,c00fd28 <_realloc_r+0x274>
 c00fb20:	a4408136 	bltu	r20,r17,c00fd28 <_realloc_r+0x274>
 c00fb24:	81c03c0e 	bge	r16,r7,c00fc18 <_realloc_r+0x164>
 c00fb28:	070300b4 	movhi	fp,3074
 c00fb2c:	e70ac204 	addi	fp,fp,11016
 c00fb30:	e1000217 	ldw	r4,8(fp)
 c00fb34:	ac05883a 	add	r2,r21,r16
 c00fb38:	2080bf26 	beq	r4,r2,c00fe38 <_realloc_r+0x384>
 c00fb3c:	11000117 	ldw	r4,4(r2)
 c00fb40:	023fff84 	movi	r8,-2
 c00fb44:	2210703a 	and	r8,r4,r8
 c00fb48:	1211883a 	add	r8,r2,r8
 c00fb4c:	41400117 	ldw	r5,4(r8)
 c00fb50:	2940004c 	andi	r5,r5,1
 c00fb54:	28004a1e 	bne	r5,zero,c00fc80 <_realloc_r+0x1cc>
 c00fb58:	017fff04 	movi	r5,-4
 c00fb5c:	2148703a 	and	r4,r4,r5
 c00fb60:	2409883a 	add	r4,r4,r16
 c00fb64:	21c0ad0e 	bge	r4,r7,c00fe1c <_realloc_r+0x368>
 c00fb68:	18c0004c 	andi	r3,r3,1
 c00fb6c:	18007f1e 	bne	r3,zero,c00fd6c <_realloc_r+0x2b8>
 c00fb70:	9dfffe17 	ldw	r23,-8(r19)
 c00fb74:	adefc83a 	sub	r23,r21,r23
 c00fb78:	bd800117 	ldw	r22,4(r23)
 c00fb7c:	b14a703a 	and	r5,r22,r5
 c00fb80:	216d883a 	add	r22,r4,r5
 c00fb84:	b1c04516 	blt	r22,r7,c00fc9c <_realloc_r+0x1e8>
 c00fb88:	10c00317 	ldw	r3,12(r2)
 c00fb8c:	10800217 	ldw	r2,8(r2)
 c00fb90:	81bfff04 	addi	r6,r16,-4
 c00fb94:	bc400204 	addi	r17,r23,8
 c00fb98:	10c00315 	stw	r3,12(r2)
 c00fb9c:	18800215 	stw	r2,8(r3)
 c00fba0:	b9400217 	ldw	r5,8(r23)
 c00fba4:	b8c00317 	ldw	r3,12(r23)
 c00fba8:	00800904 	movi	r2,36
 c00fbac:	28c00315 	stw	r3,12(r5)
 c00fbb0:	19400215 	stw	r5,8(r3)
 c00fbb4:	1180ef36 	bltu	r2,r6,c00ff74 <_realloc_r+0x4c0>
 c00fbb8:	008004c4 	movi	r2,19
 c00fbbc:	1180da2e 	bgeu	r2,r6,c00ff28 <_realloc_r+0x474>
 c00fbc0:	98800017 	ldw	r2,0(r19)
 c00fbc4:	b8800215 	stw	r2,8(r23)
 c00fbc8:	98800117 	ldw	r2,4(r19)
 c00fbcc:	b8800315 	stw	r2,12(r23)
 c00fbd0:	008006c4 	movi	r2,27
 c00fbd4:	1180fc2e 	bgeu	r2,r6,c00ffc8 <_realloc_r+0x514>
 c00fbd8:	98800217 	ldw	r2,8(r19)
 c00fbdc:	b8800415 	stw	r2,16(r23)
 c00fbe0:	98800317 	ldw	r2,12(r19)
 c00fbe4:	b8800515 	stw	r2,20(r23)
 c00fbe8:	00800904 	movi	r2,36
 c00fbec:	3080421e 	bne	r6,r2,c00fcf8 <_realloc_r+0x244>
 c00fbf0:	98800417 	ldw	r2,16(r19)
 c00fbf4:	9cc00604 	addi	r19,r19,24
 c00fbf8:	b8c00804 	addi	r3,r23,32
 c00fbfc:	b8800615 	stw	r2,24(r23)
 c00fc00:	98bfff17 	ldw	r2,-4(r19)
 c00fc04:	b8800715 	stw	r2,28(r23)
 c00fc08:	00003d06 	br	c00fd00 <_realloc_r+0x24c>
 c00fc0c:	01c00404 	movi	r7,16
 c00fc10:	3829883a 	mov	r20,r7
 c00fc14:	003fc206 	br	c00fb20 <__alt_data_end+0xfc00fb20>
 c00fc18:	9823883a 	mov	r17,r19
 c00fc1c:	850fc83a 	sub	r7,r16,r20
 c00fc20:	008003c4 	movi	r2,15
 c00fc24:	18c0004c 	andi	r3,r3,1
 c00fc28:	11c04336 	bltu	r2,r7,c00fd38 <_realloc_r+0x284>
 c00fc2c:	1c06b03a 	or	r3,r3,r16
 c00fc30:	a8c00115 	stw	r3,4(r21)
 c00fc34:	ac21883a 	add	r16,r21,r16
 c00fc38:	80c00117 	ldw	r3,4(r16)
 c00fc3c:	18c00054 	ori	r3,r3,1
 c00fc40:	80c00115 	stw	r3,4(r16)
 c00fc44:	9009883a 	mov	r4,r18
 c00fc48:	c0153a00 	call	c0153a0 <__malloc_unlock>
 c00fc4c:	8805883a 	mov	r2,r17
 c00fc50:	dfc00917 	ldw	ra,36(sp)
 c00fc54:	df000817 	ldw	fp,32(sp)
 c00fc58:	ddc00717 	ldw	r23,28(sp)
 c00fc5c:	dd800617 	ldw	r22,24(sp)
 c00fc60:	dd400517 	ldw	r21,20(sp)
 c00fc64:	dd000417 	ldw	r20,16(sp)
 c00fc68:	dcc00317 	ldw	r19,12(sp)
 c00fc6c:	dc800217 	ldw	r18,8(sp)
 c00fc70:	dc400117 	ldw	r17,4(sp)
 c00fc74:	dc000017 	ldw	r16,0(sp)
 c00fc78:	dec00a04 	addi	sp,sp,40
 c00fc7c:	f800283a 	ret
 c00fc80:	18c0004c 	andi	r3,r3,1
 c00fc84:	1800391e 	bne	r3,zero,c00fd6c <_realloc_r+0x2b8>
 c00fc88:	9dfffe17 	ldw	r23,-8(r19)
 c00fc8c:	00bfff04 	movi	r2,-4
 c00fc90:	adefc83a 	sub	r23,r21,r23
 c00fc94:	b9400117 	ldw	r5,4(r23)
 c00fc98:	288a703a 	and	r5,r5,r2
 c00fc9c:	2c2d883a 	add	r22,r5,r16
 c00fca0:	b1c03216 	blt	r22,r7,c00fd6c <_realloc_r+0x2b8>
 c00fca4:	b8800317 	ldw	r2,12(r23)
 c00fca8:	b8c00217 	ldw	r3,8(r23)
 c00fcac:	81bfff04 	addi	r6,r16,-4
 c00fcb0:	01000904 	movi	r4,36
 c00fcb4:	18800315 	stw	r2,12(r3)
 c00fcb8:	10c00215 	stw	r3,8(r2)
 c00fcbc:	bc400204 	addi	r17,r23,8
 c00fcc0:	2180ac36 	bltu	r4,r6,c00ff74 <_realloc_r+0x4c0>
 c00fcc4:	008004c4 	movi	r2,19
 c00fcc8:	1180972e 	bgeu	r2,r6,c00ff28 <_realloc_r+0x474>
 c00fccc:	98800017 	ldw	r2,0(r19)
 c00fcd0:	b8800215 	stw	r2,8(r23)
 c00fcd4:	98800117 	ldw	r2,4(r19)
 c00fcd8:	b8800315 	stw	r2,12(r23)
 c00fcdc:	008006c4 	movi	r2,27
 c00fce0:	1180b92e 	bgeu	r2,r6,c00ffc8 <_realloc_r+0x514>
 c00fce4:	98800217 	ldw	r2,8(r19)
 c00fce8:	b8800415 	stw	r2,16(r23)
 c00fcec:	98800317 	ldw	r2,12(r19)
 c00fcf0:	b8800515 	stw	r2,20(r23)
 c00fcf4:	313fbe26 	beq	r6,r4,c00fbf0 <__alt_data_end+0xfc00fbf0>
 c00fcf8:	b8c00604 	addi	r3,r23,24
 c00fcfc:	9cc00404 	addi	r19,r19,16
 c00fd00:	98800017 	ldw	r2,0(r19)
 c00fd04:	b021883a 	mov	r16,r22
 c00fd08:	b82b883a 	mov	r21,r23
 c00fd0c:	18800015 	stw	r2,0(r3)
 c00fd10:	98800117 	ldw	r2,4(r19)
 c00fd14:	18800115 	stw	r2,4(r3)
 c00fd18:	98800217 	ldw	r2,8(r19)
 c00fd1c:	18800215 	stw	r2,8(r3)
 c00fd20:	b8c00117 	ldw	r3,4(r23)
 c00fd24:	003fbd06 	br	c00fc1c <__alt_data_end+0xfc00fc1c>
 c00fd28:	00800304 	movi	r2,12
 c00fd2c:	90800015 	stw	r2,0(r18)
 c00fd30:	0005883a 	mov	r2,zero
 c00fd34:	003fc606 	br	c00fc50 <__alt_data_end+0xfc00fc50>
 c00fd38:	1d06b03a 	or	r3,r3,r20
 c00fd3c:	ad0b883a 	add	r5,r21,r20
 c00fd40:	a8c00115 	stw	r3,4(r21)
 c00fd44:	38800054 	ori	r2,r7,1
 c00fd48:	28800115 	stw	r2,4(r5)
 c00fd4c:	29cf883a 	add	r7,r5,r7
 c00fd50:	38800117 	ldw	r2,4(r7)
 c00fd54:	9009883a 	mov	r4,r18
 c00fd58:	29400204 	addi	r5,r5,8
 c00fd5c:	10800054 	ori	r2,r2,1
 c00fd60:	38800115 	stw	r2,4(r7)
 c00fd64:	c00dbe00 	call	c00dbe0 <_free_r>
 c00fd68:	003fb606 	br	c00fc44 <__alt_data_end+0xfc00fc44>
 c00fd6c:	880b883a 	mov	r5,r17
 c00fd70:	9009883a 	mov	r4,r18
 c00fd74:	c008dd40 	call	c008dd4 <_malloc_r>
 c00fd78:	1023883a 	mov	r17,r2
 c00fd7c:	1000aa26 	beq	r2,zero,c010028 <_realloc_r+0x574>
 c00fd80:	98ffff17 	ldw	r3,-4(r19)
 c00fd84:	113ffe04 	addi	r4,r2,-8
 c00fd88:	00bfff84 	movi	r2,-2
 c00fd8c:	1884703a 	and	r2,r3,r2
 c00fd90:	a885883a 	add	r2,r21,r2
 c00fd94:	20808626 	beq	r4,r2,c00ffb0 <_realloc_r+0x4fc>
 c00fd98:	81bfff04 	addi	r6,r16,-4
 c00fd9c:	00800904 	movi	r2,36
 c00fda0:	11807036 	bltu	r2,r6,c00ff64 <_realloc_r+0x4b0>
 c00fda4:	00c004c4 	movi	r3,19
 c00fda8:	19805636 	bltu	r3,r6,c00ff04 <_realloc_r+0x450>
 c00fdac:	8805883a 	mov	r2,r17
 c00fdb0:	9807883a 	mov	r3,r19
 c00fdb4:	19000017 	ldw	r4,0(r3)
 c00fdb8:	11000015 	stw	r4,0(r2)
 c00fdbc:	19000117 	ldw	r4,4(r3)
 c00fdc0:	11000115 	stw	r4,4(r2)
 c00fdc4:	18c00217 	ldw	r3,8(r3)
 c00fdc8:	10c00215 	stw	r3,8(r2)
 c00fdcc:	980b883a 	mov	r5,r19
 c00fdd0:	9009883a 	mov	r4,r18
 c00fdd4:	c00dbe00 	call	c00dbe0 <_free_r>
 c00fdd8:	9009883a 	mov	r4,r18
 c00fddc:	c0153a00 	call	c0153a0 <__malloc_unlock>
 c00fde0:	8805883a 	mov	r2,r17
 c00fde4:	003f9a06 	br	c00fc50 <__alt_data_end+0xfc00fc50>
 c00fde8:	300b883a 	mov	r5,r6
 c00fdec:	dfc00917 	ldw	ra,36(sp)
 c00fdf0:	df000817 	ldw	fp,32(sp)
 c00fdf4:	ddc00717 	ldw	r23,28(sp)
 c00fdf8:	dd800617 	ldw	r22,24(sp)
 c00fdfc:	dd400517 	ldw	r21,20(sp)
 c00fe00:	dd000417 	ldw	r20,16(sp)
 c00fe04:	dcc00317 	ldw	r19,12(sp)
 c00fe08:	dc800217 	ldw	r18,8(sp)
 c00fe0c:	dc400117 	ldw	r17,4(sp)
 c00fe10:	dc000017 	ldw	r16,0(sp)
 c00fe14:	dec00a04 	addi	sp,sp,40
 c00fe18:	c008dd41 	jmpi	c008dd4 <_malloc_r>
 c00fe1c:	11400317 	ldw	r5,12(r2)
 c00fe20:	10800217 	ldw	r2,8(r2)
 c00fe24:	9823883a 	mov	r17,r19
 c00fe28:	2021883a 	mov	r16,r4
 c00fe2c:	11400315 	stw	r5,12(r2)
 c00fe30:	28800215 	stw	r2,8(r5)
 c00fe34:	003f7906 	br	c00fc1c <__alt_data_end+0xfc00fc1c>
 c00fe38:	21000117 	ldw	r4,4(r4)
 c00fe3c:	00bfff04 	movi	r2,-4
 c00fe40:	a1800404 	addi	r6,r20,16
 c00fe44:	2088703a 	and	r4,r4,r2
 c00fe48:	2409883a 	add	r4,r4,r16
 c00fe4c:	2180380e 	bge	r4,r6,c00ff30 <_realloc_r+0x47c>
 c00fe50:	18c0004c 	andi	r3,r3,1
 c00fe54:	183fc51e 	bne	r3,zero,c00fd6c <__alt_data_end+0xfc00fd6c>
 c00fe58:	9dfffe17 	ldw	r23,-8(r19)
 c00fe5c:	adefc83a 	sub	r23,r21,r23
 c00fe60:	b9400117 	ldw	r5,4(r23)
 c00fe64:	288a703a 	and	r5,r5,r2
 c00fe68:	216d883a 	add	r22,r4,r5
 c00fe6c:	b1bf8b16 	blt	r22,r6,c00fc9c <__alt_data_end+0xfc00fc9c>
 c00fe70:	b8800317 	ldw	r2,12(r23)
 c00fe74:	b8c00217 	ldw	r3,8(r23)
 c00fe78:	81bfff04 	addi	r6,r16,-4
 c00fe7c:	01000904 	movi	r4,36
 c00fe80:	18800315 	stw	r2,12(r3)
 c00fe84:	10c00215 	stw	r3,8(r2)
 c00fe88:	bc400204 	addi	r17,r23,8
 c00fe8c:	21805a36 	bltu	r4,r6,c00fff8 <_realloc_r+0x544>
 c00fe90:	008004c4 	movi	r2,19
 c00fe94:	1180562e 	bgeu	r2,r6,c00fff0 <_realloc_r+0x53c>
 c00fe98:	98800017 	ldw	r2,0(r19)
 c00fe9c:	b8800215 	stw	r2,8(r23)
 c00fea0:	98800117 	ldw	r2,4(r19)
 c00fea4:	b8800315 	stw	r2,12(r23)
 c00fea8:	008006c4 	movi	r2,27
 c00feac:	11805636 	bltu	r2,r6,c010008 <_realloc_r+0x554>
 c00feb0:	b8800404 	addi	r2,r23,16
 c00feb4:	9cc00204 	addi	r19,r19,8
 c00feb8:	98c00017 	ldw	r3,0(r19)
 c00febc:	10c00015 	stw	r3,0(r2)
 c00fec0:	98c00117 	ldw	r3,4(r19)
 c00fec4:	10c00115 	stw	r3,4(r2)
 c00fec8:	98c00217 	ldw	r3,8(r19)
 c00fecc:	10c00215 	stw	r3,8(r2)
 c00fed0:	bd07883a 	add	r3,r23,r20
 c00fed4:	b505c83a 	sub	r2,r22,r20
 c00fed8:	e0c00215 	stw	r3,8(fp)
 c00fedc:	10800054 	ori	r2,r2,1
 c00fee0:	18800115 	stw	r2,4(r3)
 c00fee4:	b8800117 	ldw	r2,4(r23)
 c00fee8:	9009883a 	mov	r4,r18
 c00feec:	1080004c 	andi	r2,r2,1
 c00fef0:	a0a8b03a 	or	r20,r20,r2
 c00fef4:	bd000115 	stw	r20,4(r23)
 c00fef8:	c0153a00 	call	c0153a0 <__malloc_unlock>
 c00fefc:	8805883a 	mov	r2,r17
 c00ff00:	003f5306 	br	c00fc50 <__alt_data_end+0xfc00fc50>
 c00ff04:	98c00017 	ldw	r3,0(r19)
 c00ff08:	88c00015 	stw	r3,0(r17)
 c00ff0c:	98c00117 	ldw	r3,4(r19)
 c00ff10:	88c00115 	stw	r3,4(r17)
 c00ff14:	00c006c4 	movi	r3,27
 c00ff18:	19801d36 	bltu	r3,r6,c00ff90 <_realloc_r+0x4dc>
 c00ff1c:	88800204 	addi	r2,r17,8
 c00ff20:	98c00204 	addi	r3,r19,8
 c00ff24:	003fa306 	br	c00fdb4 <__alt_data_end+0xfc00fdb4>
 c00ff28:	8807883a 	mov	r3,r17
 c00ff2c:	003f7406 	br	c00fd00 <__alt_data_end+0xfc00fd00>
 c00ff30:	ad2b883a 	add	r21,r21,r20
 c00ff34:	2505c83a 	sub	r2,r4,r20
 c00ff38:	e5400215 	stw	r21,8(fp)
 c00ff3c:	10800054 	ori	r2,r2,1
 c00ff40:	a8800115 	stw	r2,4(r21)
 c00ff44:	98bfff17 	ldw	r2,-4(r19)
 c00ff48:	9009883a 	mov	r4,r18
 c00ff4c:	1080004c 	andi	r2,r2,1
 c00ff50:	a0a8b03a 	or	r20,r20,r2
 c00ff54:	9d3fff15 	stw	r20,-4(r19)
 c00ff58:	c0153a00 	call	c0153a0 <__malloc_unlock>
 c00ff5c:	9805883a 	mov	r2,r19
 c00ff60:	003f3b06 	br	c00fc50 <__alt_data_end+0xfc00fc50>
 c00ff64:	8809883a 	mov	r4,r17
 c00ff68:	980b883a 	mov	r5,r19
 c00ff6c:	c00e8640 	call	c00e864 <memmove>
 c00ff70:	003f9606 	br	c00fdcc <__alt_data_end+0xfc00fdcc>
 c00ff74:	8809883a 	mov	r4,r17
 c00ff78:	980b883a 	mov	r5,r19
 c00ff7c:	c00e8640 	call	c00e864 <memmove>
 c00ff80:	b8c00117 	ldw	r3,4(r23)
 c00ff84:	b021883a 	mov	r16,r22
 c00ff88:	b82b883a 	mov	r21,r23
 c00ff8c:	003f2306 	br	c00fc1c <__alt_data_end+0xfc00fc1c>
 c00ff90:	98c00217 	ldw	r3,8(r19)
 c00ff94:	88c00215 	stw	r3,8(r17)
 c00ff98:	98c00317 	ldw	r3,12(r19)
 c00ff9c:	88c00315 	stw	r3,12(r17)
 c00ffa0:	30800c26 	beq	r6,r2,c00ffd4 <_realloc_r+0x520>
 c00ffa4:	88800404 	addi	r2,r17,16
 c00ffa8:	98c00404 	addi	r3,r19,16
 c00ffac:	003f8106 	br	c00fdb4 <__alt_data_end+0xfc00fdb4>
 c00ffb0:	893fff17 	ldw	r4,-4(r17)
 c00ffb4:	00bfff04 	movi	r2,-4
 c00ffb8:	9823883a 	mov	r17,r19
 c00ffbc:	2084703a 	and	r2,r4,r2
 c00ffc0:	80a1883a 	add	r16,r16,r2
 c00ffc4:	003f1506 	br	c00fc1c <__alt_data_end+0xfc00fc1c>
 c00ffc8:	b8c00404 	addi	r3,r23,16
 c00ffcc:	9cc00204 	addi	r19,r19,8
 c00ffd0:	003f4b06 	br	c00fd00 <__alt_data_end+0xfc00fd00>
 c00ffd4:	99000417 	ldw	r4,16(r19)
 c00ffd8:	88800604 	addi	r2,r17,24
 c00ffdc:	98c00604 	addi	r3,r19,24
 c00ffe0:	89000415 	stw	r4,16(r17)
 c00ffe4:	99000517 	ldw	r4,20(r19)
 c00ffe8:	89000515 	stw	r4,20(r17)
 c00ffec:	003f7106 	br	c00fdb4 <__alt_data_end+0xfc00fdb4>
 c00fff0:	8805883a 	mov	r2,r17
 c00fff4:	003fb006 	br	c00feb8 <__alt_data_end+0xfc00feb8>
 c00fff8:	8809883a 	mov	r4,r17
 c00fffc:	980b883a 	mov	r5,r19
 c010000:	c00e8640 	call	c00e864 <memmove>
 c010004:	003fb206 	br	c00fed0 <__alt_data_end+0xfc00fed0>
 c010008:	98800217 	ldw	r2,8(r19)
 c01000c:	b8800415 	stw	r2,16(r23)
 c010010:	98800317 	ldw	r2,12(r19)
 c010014:	b8800515 	stw	r2,20(r23)
 c010018:	31000726 	beq	r6,r4,c010038 <_realloc_r+0x584>
 c01001c:	b8800604 	addi	r2,r23,24
 c010020:	9cc00404 	addi	r19,r19,16
 c010024:	003fa406 	br	c00feb8 <__alt_data_end+0xfc00feb8>
 c010028:	9009883a 	mov	r4,r18
 c01002c:	c0153a00 	call	c0153a0 <__malloc_unlock>
 c010030:	0005883a 	mov	r2,zero
 c010034:	003f0606 	br	c00fc50 <__alt_data_end+0xfc00fc50>
 c010038:	98c00417 	ldw	r3,16(r19)
 c01003c:	9cc00604 	addi	r19,r19,24
 c010040:	b8800804 	addi	r2,r23,32
 c010044:	b8c00615 	stw	r3,24(r23)
 c010048:	98ffff17 	ldw	r3,-4(r19)
 c01004c:	b8c00715 	stw	r3,28(r23)
 c010050:	003f9906 	br	c00feb8 <__alt_data_end+0xfc00feb8>

0c010054 <__fpclassifyd>:
 c010054:	00a00034 	movhi	r2,32768
 c010058:	10bfffc4 	addi	r2,r2,-1
 c01005c:	2884703a 	and	r2,r5,r2
 c010060:	10000726 	beq	r2,zero,c010080 <__fpclassifyd+0x2c>
 c010064:	00fffc34 	movhi	r3,65520
 c010068:	019ff834 	movhi	r6,32736
 c01006c:	28c7883a 	add	r3,r5,r3
 c010070:	31bfffc4 	addi	r6,r6,-1
 c010074:	30c00536 	bltu	r6,r3,c01008c <__fpclassifyd+0x38>
 c010078:	00800104 	movi	r2,4
 c01007c:	f800283a 	ret
 c010080:	2000021e 	bne	r4,zero,c01008c <__fpclassifyd+0x38>
 c010084:	00800084 	movi	r2,2
 c010088:	f800283a 	ret
 c01008c:	00dffc34 	movhi	r3,32752
 c010090:	019ff834 	movhi	r6,32736
 c010094:	28cb883a 	add	r5,r5,r3
 c010098:	31bfffc4 	addi	r6,r6,-1
 c01009c:	317ff62e 	bgeu	r6,r5,c010078 <__alt_data_end+0xfc010078>
 c0100a0:	01400434 	movhi	r5,16
 c0100a4:	297fffc4 	addi	r5,r5,-1
 c0100a8:	28800236 	bltu	r5,r2,c0100b4 <__fpclassifyd+0x60>
 c0100ac:	008000c4 	movi	r2,3
 c0100b0:	f800283a 	ret
 c0100b4:	10c00226 	beq	r2,r3,c0100c0 <__fpclassifyd+0x6c>
 c0100b8:	0005883a 	mov	r2,zero
 c0100bc:	f800283a 	ret
 c0100c0:	2005003a 	cmpeq	r2,r4,zero
 c0100c4:	f800283a 	ret

0c0100c8 <_init_signal_r>:
 c0100c8:	2080b717 	ldw	r2,732(r4)
 c0100cc:	defffe04 	addi	sp,sp,-8
 c0100d0:	dc000015 	stw	r16,0(sp)
 c0100d4:	dfc00115 	stw	ra,4(sp)
 c0100d8:	2021883a 	mov	r16,r4
 c0100dc:	10000526 	beq	r2,zero,c0100f4 <_init_signal_r+0x2c>
 c0100e0:	0005883a 	mov	r2,zero
 c0100e4:	dfc00117 	ldw	ra,4(sp)
 c0100e8:	dc000017 	ldw	r16,0(sp)
 c0100ec:	dec00204 	addi	sp,sp,8
 c0100f0:	f800283a 	ret
 c0100f4:	01402004 	movi	r5,128
 c0100f8:	c008dd40 	call	c008dd4 <_malloc_r>
 c0100fc:	8080b715 	stw	r2,732(r16)
 c010100:	10000926 	beq	r2,zero,c010128 <_init_signal_r+0x60>
 c010104:	0007883a 	mov	r3,zero
 c010108:	01002004 	movi	r4,128
 c01010c:	00000106 	br	c010114 <_init_signal_r+0x4c>
 c010110:	8080b717 	ldw	r2,732(r16)
 c010114:	10c5883a 	add	r2,r2,r3
 c010118:	10000015 	stw	zero,0(r2)
 c01011c:	18c00104 	addi	r3,r3,4
 c010120:	193ffb1e 	bne	r3,r4,c010110 <__alt_data_end+0xfc010110>
 c010124:	003fee06 	br	c0100e0 <__alt_data_end+0xfc0100e0>
 c010128:	00bfffc4 	movi	r2,-1
 c01012c:	003fed06 	br	c0100e4 <__alt_data_end+0xfc0100e4>

0c010130 <_signal_r>:
 c010130:	00c007c4 	movi	r3,31
 c010134:	19401536 	bltu	r3,r5,c01018c <_signal_r+0x5c>
 c010138:	2080b717 	ldw	r2,732(r4)
 c01013c:	defffc04 	addi	sp,sp,-16
 c010140:	dc800215 	stw	r18,8(sp)
 c010144:	dc400115 	stw	r17,4(sp)
 c010148:	dc000015 	stw	r16,0(sp)
 c01014c:	dfc00315 	stw	ra,12(sp)
 c010150:	3023883a 	mov	r17,r6
 c010154:	2021883a 	mov	r16,r4
 c010158:	2825883a 	mov	r18,r5
 c01015c:	10000f26 	beq	r2,zero,c01019c <_signal_r+0x6c>
 c010160:	948b883a 	add	r5,r18,r18
 c010164:	294b883a 	add	r5,r5,r5
 c010168:	114b883a 	add	r5,r2,r5
 c01016c:	28800017 	ldw	r2,0(r5)
 c010170:	2c400015 	stw	r17,0(r5)
 c010174:	dfc00317 	ldw	ra,12(sp)
 c010178:	dc800217 	ldw	r18,8(sp)
 c01017c:	dc400117 	ldw	r17,4(sp)
 c010180:	dc000017 	ldw	r16,0(sp)
 c010184:	dec00404 	addi	sp,sp,16
 c010188:	f800283a 	ret
 c01018c:	00c00584 	movi	r3,22
 c010190:	20c00015 	stw	r3,0(r4)
 c010194:	00bfffc4 	movi	r2,-1
 c010198:	f800283a 	ret
 c01019c:	c0100c80 	call	c0100c8 <_init_signal_r>
 c0101a0:	1000021e 	bne	r2,zero,c0101ac <_signal_r+0x7c>
 c0101a4:	8080b717 	ldw	r2,732(r16)
 c0101a8:	003fed06 	br	c010160 <__alt_data_end+0xfc010160>
 c0101ac:	00bfffc4 	movi	r2,-1
 c0101b0:	003ff006 	br	c010174 <__alt_data_end+0xfc010174>

0c0101b4 <_raise_r>:
 c0101b4:	008007c4 	movi	r2,31
 c0101b8:	11402936 	bltu	r2,r5,c010260 <_raise_r+0xac>
 c0101bc:	20c0b717 	ldw	r3,732(r4)
 c0101c0:	defffd04 	addi	sp,sp,-12
 c0101c4:	dc400115 	stw	r17,4(sp)
 c0101c8:	dc000015 	stw	r16,0(sp)
 c0101cc:	dfc00215 	stw	ra,8(sp)
 c0101d0:	2023883a 	mov	r17,r4
 c0101d4:	2821883a 	mov	r16,r5
 c0101d8:	18001726 	beq	r3,zero,c010238 <_raise_r+0x84>
 c0101dc:	2945883a 	add	r2,r5,r5
 c0101e0:	1085883a 	add	r2,r2,r2
 c0101e4:	1887883a 	add	r3,r3,r2
 c0101e8:	19400017 	ldw	r5,0(r3)
 c0101ec:	28001226 	beq	r5,zero,c010238 <_raise_r+0x84>
 c0101f0:	00800044 	movi	r2,1
 c0101f4:	28800e26 	beq	r5,r2,c010230 <_raise_r+0x7c>
 c0101f8:	013fffc4 	movi	r4,-1
 c0101fc:	29000926 	beq	r5,r4,c010224 <_raise_r+0x70>
 c010200:	18000015 	stw	zero,0(r3)
 c010204:	8009883a 	mov	r4,r16
 c010208:	283ee83a 	callr	r5
 c01020c:	0005883a 	mov	r2,zero
 c010210:	dfc00217 	ldw	ra,8(sp)
 c010214:	dc400117 	ldw	r17,4(sp)
 c010218:	dc000017 	ldw	r16,0(sp)
 c01021c:	dec00304 	addi	sp,sp,12
 c010220:	f800283a 	ret
 c010224:	00c00584 	movi	r3,22
 c010228:	88c00015 	stw	r3,0(r17)
 c01022c:	003ff806 	br	c010210 <__alt_data_end+0xfc010210>
 c010230:	0005883a 	mov	r2,zero
 c010234:	003ff606 	br	c010210 <__alt_data_end+0xfc010210>
 c010238:	8809883a 	mov	r4,r17
 c01023c:	c0103c40 	call	c0103c4 <_getpid_r>
 c010240:	8809883a 	mov	r4,r17
 c010244:	100b883a 	mov	r5,r2
 c010248:	800d883a 	mov	r6,r16
 c01024c:	dfc00217 	ldw	ra,8(sp)
 c010250:	dc400117 	ldw	r17,4(sp)
 c010254:	dc000017 	ldw	r16,0(sp)
 c010258:	dec00304 	addi	sp,sp,12
 c01025c:	c01036c1 	jmpi	c01036c <_kill_r>
 c010260:	00800584 	movi	r2,22
 c010264:	20800015 	stw	r2,0(r4)
 c010268:	00bfffc4 	movi	r2,-1
 c01026c:	f800283a 	ret

0c010270 <__sigtramp_r>:
 c010270:	008007c4 	movi	r2,31
 c010274:	11402436 	bltu	r2,r5,c010308 <__sigtramp_r+0x98>
 c010278:	20c0b717 	ldw	r3,732(r4)
 c01027c:	defffd04 	addi	sp,sp,-12
 c010280:	dc400115 	stw	r17,4(sp)
 c010284:	dc000015 	stw	r16,0(sp)
 c010288:	dfc00215 	stw	ra,8(sp)
 c01028c:	2021883a 	mov	r16,r4
 c010290:	2823883a 	mov	r17,r5
 c010294:	18001826 	beq	r3,zero,c0102f8 <__sigtramp_r+0x88>
 c010298:	8c45883a 	add	r2,r17,r17
 c01029c:	1085883a 	add	r2,r2,r2
 c0102a0:	1885883a 	add	r2,r3,r2
 c0102a4:	10c00017 	ldw	r3,0(r2)
 c0102a8:	18001126 	beq	r3,zero,c0102f0 <__sigtramp_r+0x80>
 c0102ac:	013fffc4 	movi	r4,-1
 c0102b0:	19000d26 	beq	r3,r4,c0102e8 <__sigtramp_r+0x78>
 c0102b4:	01000044 	movi	r4,1
 c0102b8:	19000926 	beq	r3,r4,c0102e0 <__sigtramp_r+0x70>
 c0102bc:	10000015 	stw	zero,0(r2)
 c0102c0:	8809883a 	mov	r4,r17
 c0102c4:	183ee83a 	callr	r3
 c0102c8:	0005883a 	mov	r2,zero
 c0102cc:	dfc00217 	ldw	ra,8(sp)
 c0102d0:	dc400117 	ldw	r17,4(sp)
 c0102d4:	dc000017 	ldw	r16,0(sp)
 c0102d8:	dec00304 	addi	sp,sp,12
 c0102dc:	f800283a 	ret
 c0102e0:	008000c4 	movi	r2,3
 c0102e4:	003ff906 	br	c0102cc <__alt_data_end+0xfc0102cc>
 c0102e8:	00800084 	movi	r2,2
 c0102ec:	003ff706 	br	c0102cc <__alt_data_end+0xfc0102cc>
 c0102f0:	00800044 	movi	r2,1
 c0102f4:	003ff506 	br	c0102cc <__alt_data_end+0xfc0102cc>
 c0102f8:	c0100c80 	call	c0100c8 <_init_signal_r>
 c0102fc:	1000041e 	bne	r2,zero,c010310 <__sigtramp_r+0xa0>
 c010300:	80c0b717 	ldw	r3,732(r16)
 c010304:	003fe406 	br	c010298 <__alt_data_end+0xfc010298>
 c010308:	00bfffc4 	movi	r2,-1
 c01030c:	f800283a 	ret
 c010310:	00bfffc4 	movi	r2,-1
 c010314:	003fed06 	br	c0102cc <__alt_data_end+0xfc0102cc>

0c010318 <raise>:
 c010318:	008300b4 	movhi	r2,3074
 c01031c:	10907604 	addi	r2,r2,16856
 c010320:	200b883a 	mov	r5,r4
 c010324:	11000017 	ldw	r4,0(r2)
 c010328:	c0101b41 	jmpi	c0101b4 <_raise_r>

0c01032c <signal>:
 c01032c:	00c300b4 	movhi	r3,3074
 c010330:	18d07604 	addi	r3,r3,16856
 c010334:	2005883a 	mov	r2,r4
 c010338:	19000017 	ldw	r4,0(r3)
 c01033c:	280d883a 	mov	r6,r5
 c010340:	100b883a 	mov	r5,r2
 c010344:	c0101301 	jmpi	c010130 <_signal_r>

0c010348 <_init_signal>:
 c010348:	008300b4 	movhi	r2,3074
 c01034c:	10907604 	addi	r2,r2,16856
 c010350:	11000017 	ldw	r4,0(r2)
 c010354:	c0100c81 	jmpi	c0100c8 <_init_signal_r>

0c010358 <__sigtramp>:
 c010358:	008300b4 	movhi	r2,3074
 c01035c:	10907604 	addi	r2,r2,16856
 c010360:	200b883a 	mov	r5,r4
 c010364:	11000017 	ldw	r4,0(r2)
 c010368:	c0102701 	jmpi	c010270 <__sigtramp_r>

0c01036c <_kill_r>:
 c01036c:	defffd04 	addi	sp,sp,-12
 c010370:	dc000015 	stw	r16,0(sp)
 c010374:	040300b4 	movhi	r16,3074
 c010378:	dc400115 	stw	r17,4(sp)
 c01037c:	84175604 	addi	r16,r16,23896
 c010380:	2023883a 	mov	r17,r4
 c010384:	2809883a 	mov	r4,r5
 c010388:	300b883a 	mov	r5,r6
 c01038c:	dfc00215 	stw	ra,8(sp)
 c010390:	80000015 	stw	zero,0(r16)
 c010394:	c014fd00 	call	c014fd0 <kill>
 c010398:	00ffffc4 	movi	r3,-1
 c01039c:	10c00526 	beq	r2,r3,c0103b4 <_kill_r+0x48>
 c0103a0:	dfc00217 	ldw	ra,8(sp)
 c0103a4:	dc400117 	ldw	r17,4(sp)
 c0103a8:	dc000017 	ldw	r16,0(sp)
 c0103ac:	dec00304 	addi	sp,sp,12
 c0103b0:	f800283a 	ret
 c0103b4:	80c00017 	ldw	r3,0(r16)
 c0103b8:	183ff926 	beq	r3,zero,c0103a0 <__alt_data_end+0xfc0103a0>
 c0103bc:	88c00015 	stw	r3,0(r17)
 c0103c0:	003ff706 	br	c0103a0 <__alt_data_end+0xfc0103a0>

0c0103c4 <_getpid_r>:
 c0103c4:	c014cbc1 	jmpi	c014cbc <getpid>

0c0103c8 <__sread>:
 c0103c8:	defffe04 	addi	sp,sp,-8
 c0103cc:	dc000015 	stw	r16,0(sp)
 c0103d0:	2821883a 	mov	r16,r5
 c0103d4:	2940038f 	ldh	r5,14(r5)
 c0103d8:	dfc00115 	stw	ra,4(sp)
 c0103dc:	c0121180 	call	c012118 <_read_r>
 c0103e0:	10000716 	blt	r2,zero,c010400 <__sread+0x38>
 c0103e4:	80c01417 	ldw	r3,80(r16)
 c0103e8:	1887883a 	add	r3,r3,r2
 c0103ec:	80c01415 	stw	r3,80(r16)
 c0103f0:	dfc00117 	ldw	ra,4(sp)
 c0103f4:	dc000017 	ldw	r16,0(sp)
 c0103f8:	dec00204 	addi	sp,sp,8
 c0103fc:	f800283a 	ret
 c010400:	80c0030b 	ldhu	r3,12(r16)
 c010404:	18fbffcc 	andi	r3,r3,61439
 c010408:	80c0030d 	sth	r3,12(r16)
 c01040c:	dfc00117 	ldw	ra,4(sp)
 c010410:	dc000017 	ldw	r16,0(sp)
 c010414:	dec00204 	addi	sp,sp,8
 c010418:	f800283a 	ret

0c01041c <__seofread>:
 c01041c:	0005883a 	mov	r2,zero
 c010420:	f800283a 	ret

0c010424 <__swrite>:
 c010424:	2880030b 	ldhu	r2,12(r5)
 c010428:	defffb04 	addi	sp,sp,-20
 c01042c:	dcc00315 	stw	r19,12(sp)
 c010430:	dc800215 	stw	r18,8(sp)
 c010434:	dc400115 	stw	r17,4(sp)
 c010438:	dc000015 	stw	r16,0(sp)
 c01043c:	dfc00415 	stw	ra,16(sp)
 c010440:	10c0400c 	andi	r3,r2,256
 c010444:	2821883a 	mov	r16,r5
 c010448:	2027883a 	mov	r19,r4
 c01044c:	3025883a 	mov	r18,r6
 c010450:	3823883a 	mov	r17,r7
 c010454:	18000526 	beq	r3,zero,c01046c <__swrite+0x48>
 c010458:	2940038f 	ldh	r5,14(r5)
 c01045c:	000d883a 	mov	r6,zero
 c010460:	01c00084 	movi	r7,2
 c010464:	c0120bc0 	call	c0120bc <_lseek_r>
 c010468:	8080030b 	ldhu	r2,12(r16)
 c01046c:	8140038f 	ldh	r5,14(r16)
 c010470:	10bbffcc 	andi	r2,r2,61439
 c010474:	9809883a 	mov	r4,r19
 c010478:	900d883a 	mov	r6,r18
 c01047c:	880f883a 	mov	r7,r17
 c010480:	8080030d 	sth	r2,12(r16)
 c010484:	dfc00417 	ldw	ra,16(sp)
 c010488:	dcc00317 	ldw	r19,12(sp)
 c01048c:	dc800217 	ldw	r18,8(sp)
 c010490:	dc400117 	ldw	r17,4(sp)
 c010494:	dc000017 	ldw	r16,0(sp)
 c010498:	dec00504 	addi	sp,sp,20
 c01049c:	c011bac1 	jmpi	c011bac <_write_r>

0c0104a0 <__sseek>:
 c0104a0:	defffe04 	addi	sp,sp,-8
 c0104a4:	dc000015 	stw	r16,0(sp)
 c0104a8:	2821883a 	mov	r16,r5
 c0104ac:	2940038f 	ldh	r5,14(r5)
 c0104b0:	dfc00115 	stw	ra,4(sp)
 c0104b4:	c0120bc0 	call	c0120bc <_lseek_r>
 c0104b8:	00ffffc4 	movi	r3,-1
 c0104bc:	10c00826 	beq	r2,r3,c0104e0 <__sseek+0x40>
 c0104c0:	80c0030b 	ldhu	r3,12(r16)
 c0104c4:	80801415 	stw	r2,80(r16)
 c0104c8:	18c40014 	ori	r3,r3,4096
 c0104cc:	80c0030d 	sth	r3,12(r16)
 c0104d0:	dfc00117 	ldw	ra,4(sp)
 c0104d4:	dc000017 	ldw	r16,0(sp)
 c0104d8:	dec00204 	addi	sp,sp,8
 c0104dc:	f800283a 	ret
 c0104e0:	80c0030b 	ldhu	r3,12(r16)
 c0104e4:	18fbffcc 	andi	r3,r3,61439
 c0104e8:	80c0030d 	sth	r3,12(r16)
 c0104ec:	dfc00117 	ldw	ra,4(sp)
 c0104f0:	dc000017 	ldw	r16,0(sp)
 c0104f4:	dec00204 	addi	sp,sp,8
 c0104f8:	f800283a 	ret

0c0104fc <__sclose>:
 c0104fc:	2940038f 	ldh	r5,14(r5)
 c010500:	c011c081 	jmpi	c011c08 <_close_r>

0c010504 <strcmp>:
 c010504:	2144b03a 	or	r2,r4,r5
 c010508:	108000cc 	andi	r2,r2,3
 c01050c:	1000171e 	bne	r2,zero,c01056c <strcmp+0x68>
 c010510:	20800017 	ldw	r2,0(r4)
 c010514:	28c00017 	ldw	r3,0(r5)
 c010518:	10c0141e 	bne	r2,r3,c01056c <strcmp+0x68>
 c01051c:	027fbff4 	movhi	r9,65279
 c010520:	4a7fbfc4 	addi	r9,r9,-257
 c010524:	0086303a 	nor	r3,zero,r2
 c010528:	02202074 	movhi	r8,32897
 c01052c:	1245883a 	add	r2,r2,r9
 c010530:	42202004 	addi	r8,r8,-32640
 c010534:	10c4703a 	and	r2,r2,r3
 c010538:	1204703a 	and	r2,r2,r8
 c01053c:	10000226 	beq	r2,zero,c010548 <strcmp+0x44>
 c010540:	00001706 	br	c0105a0 <strcmp+0x9c>
 c010544:	1000161e 	bne	r2,zero,c0105a0 <strcmp+0x9c>
 c010548:	21000104 	addi	r4,r4,4
 c01054c:	20c00017 	ldw	r3,0(r4)
 c010550:	29400104 	addi	r5,r5,4
 c010554:	29800017 	ldw	r6,0(r5)
 c010558:	1a4f883a 	add	r7,r3,r9
 c01055c:	00c4303a 	nor	r2,zero,r3
 c010560:	3884703a 	and	r2,r7,r2
 c010564:	1204703a 	and	r2,r2,r8
 c010568:	19bff626 	beq	r3,r6,c010544 <__alt_data_end+0xfc010544>
 c01056c:	20800007 	ldb	r2,0(r4)
 c010570:	1000051e 	bne	r2,zero,c010588 <strcmp+0x84>
 c010574:	00000606 	br	c010590 <strcmp+0x8c>
 c010578:	21000044 	addi	r4,r4,1
 c01057c:	20800007 	ldb	r2,0(r4)
 c010580:	29400044 	addi	r5,r5,1
 c010584:	10000226 	beq	r2,zero,c010590 <strcmp+0x8c>
 c010588:	28c00007 	ldb	r3,0(r5)
 c01058c:	10fffa26 	beq	r2,r3,c010578 <__alt_data_end+0xfc010578>
 c010590:	20800003 	ldbu	r2,0(r4)
 c010594:	28c00003 	ldbu	r3,0(r5)
 c010598:	10c5c83a 	sub	r2,r2,r3
 c01059c:	f800283a 	ret
 c0105a0:	0005883a 	mov	r2,zero
 c0105a4:	f800283a 	ret

0c0105a8 <__sprint_r.part.0>:
 c0105a8:	28801917 	ldw	r2,100(r5)
 c0105ac:	defff604 	addi	sp,sp,-40
 c0105b0:	dd400515 	stw	r21,20(sp)
 c0105b4:	dcc00315 	stw	r19,12(sp)
 c0105b8:	dfc00915 	stw	ra,36(sp)
 c0105bc:	df000815 	stw	fp,32(sp)
 c0105c0:	ddc00715 	stw	r23,28(sp)
 c0105c4:	dd800615 	stw	r22,24(sp)
 c0105c8:	dd000415 	stw	r20,16(sp)
 c0105cc:	dc800215 	stw	r18,8(sp)
 c0105d0:	dc400115 	stw	r17,4(sp)
 c0105d4:	dc000015 	stw	r16,0(sp)
 c0105d8:	1088000c 	andi	r2,r2,8192
 c0105dc:	2827883a 	mov	r19,r5
 c0105e0:	302b883a 	mov	r21,r6
 c0105e4:	10002d26 	beq	r2,zero,c01069c <__sprint_r.part.0+0xf4>
 c0105e8:	30800217 	ldw	r2,8(r6)
 c0105ec:	35800017 	ldw	r22,0(r6)
 c0105f0:	10002826 	beq	r2,zero,c010694 <__sprint_r.part.0+0xec>
 c0105f4:	2029883a 	mov	r20,r4
 c0105f8:	b5c00104 	addi	r23,r22,4
 c0105fc:	04bfffc4 	movi	r18,-1
 c010600:	bc400017 	ldw	r17,0(r23)
 c010604:	b4000017 	ldw	r16,0(r22)
 c010608:	0039883a 	mov	fp,zero
 c01060c:	8822d0ba 	srli	r17,r17,2
 c010610:	04400316 	blt	zero,r17,c010620 <__sprint_r.part.0+0x78>
 c010614:	00001706 	br	c010674 <__sprint_r.part.0+0xcc>
 c010618:	84000104 	addi	r16,r16,4
 c01061c:	8f001526 	beq	r17,fp,c010674 <__sprint_r.part.0+0xcc>
 c010620:	81400017 	ldw	r5,0(r16)
 c010624:	a009883a 	mov	r4,r20
 c010628:	980d883a 	mov	r6,r19
 c01062c:	c011e340 	call	c011e34 <_fputwc_r>
 c010630:	e7000044 	addi	fp,fp,1
 c010634:	14bff81e 	bne	r2,r18,c010618 <__alt_data_end+0xfc010618>
 c010638:	9005883a 	mov	r2,r18
 c01063c:	a8000215 	stw	zero,8(r21)
 c010640:	a8000115 	stw	zero,4(r21)
 c010644:	dfc00917 	ldw	ra,36(sp)
 c010648:	df000817 	ldw	fp,32(sp)
 c01064c:	ddc00717 	ldw	r23,28(sp)
 c010650:	dd800617 	ldw	r22,24(sp)
 c010654:	dd400517 	ldw	r21,20(sp)
 c010658:	dd000417 	ldw	r20,16(sp)
 c01065c:	dcc00317 	ldw	r19,12(sp)
 c010660:	dc800217 	ldw	r18,8(sp)
 c010664:	dc400117 	ldw	r17,4(sp)
 c010668:	dc000017 	ldw	r16,0(sp)
 c01066c:	dec00a04 	addi	sp,sp,40
 c010670:	f800283a 	ret
 c010674:	a8c00217 	ldw	r3,8(r21)
 c010678:	8c63883a 	add	r17,r17,r17
 c01067c:	8c63883a 	add	r17,r17,r17
 c010680:	1c45c83a 	sub	r2,r3,r17
 c010684:	a8800215 	stw	r2,8(r21)
 c010688:	b5800204 	addi	r22,r22,8
 c01068c:	bdc00204 	addi	r23,r23,8
 c010690:	103fdb1e 	bne	r2,zero,c010600 <__alt_data_end+0xfc010600>
 c010694:	0005883a 	mov	r2,zero
 c010698:	003fe806 	br	c01063c <__alt_data_end+0xfc01063c>
 c01069c:	c00ded00 	call	c00ded0 <__sfvwrite_r>
 c0106a0:	003fe606 	br	c01063c <__alt_data_end+0xfc01063c>

0c0106a4 <__sprint_r>:
 c0106a4:	30c00217 	ldw	r3,8(r6)
 c0106a8:	18000126 	beq	r3,zero,c0106b0 <__sprint_r+0xc>
 c0106ac:	c0105a81 	jmpi	c0105a8 <__sprint_r.part.0>
 c0106b0:	30000115 	stw	zero,4(r6)
 c0106b4:	0005883a 	mov	r2,zero
 c0106b8:	f800283a 	ret

0c0106bc <___vfiprintf_internal_r>:
 c0106bc:	defeca04 	addi	sp,sp,-1240
 c0106c0:	dd813215 	stw	r22,1224(sp)
 c0106c4:	dd013015 	stw	r20,1216(sp)
 c0106c8:	dfc13515 	stw	ra,1236(sp)
 c0106cc:	df013415 	stw	fp,1232(sp)
 c0106d0:	ddc13315 	stw	r23,1228(sp)
 c0106d4:	dd413115 	stw	r21,1220(sp)
 c0106d8:	dcc12f15 	stw	r19,1212(sp)
 c0106dc:	dc812e15 	stw	r18,1208(sp)
 c0106e0:	dc412d15 	stw	r17,1204(sp)
 c0106e4:	dc012c15 	stw	r16,1200(sp)
 c0106e8:	d9012015 	stw	r4,1152(sp)
 c0106ec:	d9c12115 	stw	r7,1156(sp)
 c0106f0:	2829883a 	mov	r20,r5
 c0106f4:	302d883a 	mov	r22,r6
 c0106f8:	20000226 	beq	r4,zero,c010704 <___vfiprintf_internal_r+0x48>
 c0106fc:	20800e17 	ldw	r2,56(r4)
 c010700:	1001d326 	beq	r2,zero,c010e50 <___vfiprintf_internal_r+0x794>
 c010704:	a0c0030b 	ldhu	r3,12(r20)
 c010708:	1908000c 	andi	r4,r3,8192
 c01070c:	1805883a 	mov	r2,r3
 c010710:	2000071e 	bne	r4,zero,c010730 <___vfiprintf_internal_r+0x74>
 c010714:	a1001917 	ldw	r4,100(r20)
 c010718:	18880014 	ori	r2,r3,8192
 c01071c:	00f7ffc4 	movi	r3,-8193
 c010720:	20c8703a 	and	r4,r4,r3
 c010724:	a080030d 	sth	r2,12(r20)
 c010728:	1007883a 	mov	r3,r2
 c01072c:	a1001915 	stw	r4,100(r20)
 c010730:	1100020c 	andi	r4,r2,8
 c010734:	20018926 	beq	r4,zero,c010d5c <___vfiprintf_internal_r+0x6a0>
 c010738:	a1000417 	ldw	r4,16(r20)
 c01073c:	20018726 	beq	r4,zero,c010d5c <___vfiprintf_internal_r+0x6a0>
 c010740:	1080068c 	andi	r2,r2,26
 c010744:	01000284 	movi	r4,10
 c010748:	11018d26 	beq	r2,r4,c010d80 <___vfiprintf_internal_r+0x6c4>
 c01074c:	da810a04 	addi	r10,sp,1064
 c010750:	dac109c4 	addi	r11,sp,1063
 c010754:	070300b4 	movhi	fp,3074
 c010758:	05c300b4 	movhi	r23,3074
 c01075c:	da811e15 	stw	r10,1144(sp)
 c010760:	52d5c83a 	sub	r10,r10,r11
 c010764:	e709a204 	addi	fp,fp,9864
 c010768:	bdc99e04 	addi	r23,r23,9848
 c01076c:	dac11f15 	stw	r11,1148(sp)
 c010770:	dec11a15 	stw	sp,1128(sp)
 c010774:	d8011c15 	stw	zero,1136(sp)
 c010778:	d8011b15 	stw	zero,1132(sp)
 c01077c:	d8012615 	stw	zero,1176(sp)
 c010780:	d8012215 	stw	zero,1160(sp)
 c010784:	da812715 	stw	r10,1180(sp)
 c010788:	d811883a 	mov	r8,sp
 c01078c:	b021883a 	mov	r16,r22
 c010790:	80800007 	ldb	r2,0(r16)
 c010794:	10039c26 	beq	r2,zero,c011608 <___vfiprintf_internal_r+0xf4c>
 c010798:	01000944 	movi	r4,37
 c01079c:	11039a26 	beq	r2,r4,c011608 <___vfiprintf_internal_r+0xf4c>
 c0107a0:	8005883a 	mov	r2,r16
 c0107a4:	00000106 	br	c0107ac <___vfiprintf_internal_r+0xf0>
 c0107a8:	19000326 	beq	r3,r4,c0107b8 <___vfiprintf_internal_r+0xfc>
 c0107ac:	10800044 	addi	r2,r2,1
 c0107b0:	10c00007 	ldb	r3,0(r2)
 c0107b4:	183ffc1e 	bne	r3,zero,c0107a8 <__alt_data_end+0xfc0107a8>
 c0107b8:	1425c83a 	sub	r18,r2,r16
 c0107bc:	1023883a 	mov	r17,r2
 c0107c0:	90001026 	beq	r18,zero,c010804 <___vfiprintf_internal_r+0x148>
 c0107c4:	d8c11c17 	ldw	r3,1136(sp)
 c0107c8:	d8811b17 	ldw	r2,1132(sp)
 c0107cc:	44000015 	stw	r16,0(r8)
 c0107d0:	90c7883a 	add	r3,r18,r3
 c0107d4:	10800044 	addi	r2,r2,1
 c0107d8:	44800115 	stw	r18,4(r8)
 c0107dc:	d8c11c15 	stw	r3,1136(sp)
 c0107e0:	d8811b15 	stw	r2,1132(sp)
 c0107e4:	010001c4 	movi	r4,7
 c0107e8:	2080750e 	bge	r4,r2,c0109c0 <___vfiprintf_internal_r+0x304>
 c0107ec:	18039d1e 	bne	r3,zero,c011664 <___vfiprintf_internal_r+0xfa8>
 c0107f0:	dac12217 	ldw	r11,1160(sp)
 c0107f4:	d8011b15 	stw	zero,1132(sp)
 c0107f8:	d811883a 	mov	r8,sp
 c0107fc:	5c97883a 	add	r11,r11,r18
 c010800:	dac12215 	stw	r11,1160(sp)
 c010804:	88800007 	ldb	r2,0(r17)
 c010808:	1002e026 	beq	r2,zero,c01138c <___vfiprintf_internal_r+0xcd0>
 c01080c:	88c00047 	ldb	r3,1(r17)
 c010810:	8c000044 	addi	r16,r17,1
 c010814:	d8011d85 	stb	zero,1142(sp)
 c010818:	000d883a 	mov	r6,zero
 c01081c:	027fffc4 	movi	r9,-1
 c010820:	0027883a 	mov	r19,zero
 c010824:	002b883a 	mov	r21,zero
 c010828:	01001604 	movi	r4,88
 c01082c:	01400244 	movi	r5,9
 c010830:	03000a84 	movi	r12,42
 c010834:	01c01b04 	movi	r7,108
 c010838:	84000044 	addi	r16,r16,1
 c01083c:	18bff804 	addi	r2,r3,-32
 c010840:	20825f36 	bltu	r4,r2,c0111c0 <___vfiprintf_internal_r+0xb04>
 c010844:	100490ba 	slli	r2,r2,2
 c010848:	02830074 	movhi	r10,3073
 c01084c:	52821704 	addi	r10,r10,2140
 c010850:	1285883a 	add	r2,r2,r10
 c010854:	10800017 	ldw	r2,0(r2)
 c010858:	1000683a 	jmp	r2
 c01085c:	0c011030 	cmpltui	r16,at,1088
 c010860:	0c0111c0 	call	c0111c <__alt_mem_sdram-0xb3feee4>
 c010864:	0c0111c0 	call	c0111c <__alt_mem_sdram-0xb3feee4>
 c010868:	0c0111b4 	orhi	r16,at,1094
 c01086c:	0c0111c0 	call	c0111c <__alt_mem_sdram-0xb3feee4>
 c010870:	0c0111c0 	call	c0111c <__alt_mem_sdram-0xb3feee4>
 c010874:	0c0111c0 	call	c0111c <__alt_mem_sdram-0xb3feee4>
 c010878:	0c0111c0 	call	c0111c <__alt_mem_sdram-0xb3feee4>
 c01087c:	0c0111c0 	call	c0111c <__alt_mem_sdram-0xb3feee4>
 c010880:	0c0111c0 	call	c0111c <__alt_mem_sdram-0xb3feee4>
 c010884:	0c01118c 	andi	r16,at,1094
 c010888:	0c0111a8 	cmpgeui	r16,at,1094
 c01088c:	0c0111c0 	call	c0111c <__alt_mem_sdram-0xb3feee4>
 c010890:	0c010e60 	cmpeqi	r16,at,1081
 c010894:	0c010fc0 	call	c010fc <__alt_mem_sdram-0xb3fef04>
 c010898:	0c0111c0 	call	c0111c <__alt_mem_sdram-0xb3feee4>
 c01089c:	0c010f44 	addi	r16,at,1085
 c0108a0:	0c010f50 	cmplti	r16,at,1085
 c0108a4:	0c010f50 	cmplti	r16,at,1085
 c0108a8:	0c010f50 	cmplti	r16,at,1085
 c0108ac:	0c010f50 	cmplti	r16,at,1085
 c0108b0:	0c010f50 	cmplti	r16,at,1085
 c0108b4:	0c010f50 	cmplti	r16,at,1085
 c0108b8:	0c010f50 	cmplti	r16,at,1085
 c0108bc:	0c010f50 	cmplti	r16,at,1085
 c0108c0:	0c010f50 	cmplti	r16,at,1085
 c0108c4:	0c0111c0 	call	c0111c <__alt_mem_sdram-0xb3feee4>
 c0108c8:	0c0111c0 	call	c0111c <__alt_mem_sdram-0xb3feee4>
 c0108cc:	0c0111c0 	call	c0111c <__alt_mem_sdram-0xb3feee4>
 c0108d0:	0c0111c0 	call	c0111c <__alt_mem_sdram-0xb3feee4>
 c0108d4:	0c0111c0 	call	c0111c <__alt_mem_sdram-0xb3feee4>
 c0108d8:	0c0111c0 	call	c0111c <__alt_mem_sdram-0xb3feee4>
 c0108dc:	0c0111c0 	call	c0111c <__alt_mem_sdram-0xb3feee4>
 c0108e0:	0c0111c0 	call	c0111c <__alt_mem_sdram-0xb3feee4>
 c0108e4:	0c0111c0 	call	c0111c <__alt_mem_sdram-0xb3feee4>
 c0108e8:	0c0111c0 	call	c0111c <__alt_mem_sdram-0xb3feee4>
 c0108ec:	0c010f7c 	xorhi	r16,at,1085
 c0108f0:	0c0111c0 	call	c0111c <__alt_mem_sdram-0xb3feee4>
 c0108f4:	0c0111c0 	call	c0111c <__alt_mem_sdram-0xb3feee4>
 c0108f8:	0c0111c0 	call	c0111c <__alt_mem_sdram-0xb3feee4>
 c0108fc:	0c0111c0 	call	c0111c <__alt_mem_sdram-0xb3feee4>
 c010900:	0c0111c0 	call	c0111c <__alt_mem_sdram-0xb3feee4>
 c010904:	0c0111c0 	call	c0111c <__alt_mem_sdram-0xb3feee4>
 c010908:	0c0111c0 	call	c0111c <__alt_mem_sdram-0xb3feee4>
 c01090c:	0c0111c0 	call	c0111c <__alt_mem_sdram-0xb3feee4>
 c010910:	0c0111c0 	call	c0111c <__alt_mem_sdram-0xb3feee4>
 c010914:	0c0111c0 	call	c0111c <__alt_mem_sdram-0xb3feee4>
 c010918:	0c010a10 	cmplti	r16,at,1064
 c01091c:	0c0111c0 	call	c0111c <__alt_mem_sdram-0xb3feee4>
 c010920:	0c0111c0 	call	c0111c <__alt_mem_sdram-0xb3feee4>
 c010924:	0c0111c0 	call	c0111c <__alt_mem_sdram-0xb3feee4>
 c010928:	0c0111c0 	call	c0111c <__alt_mem_sdram-0xb3feee4>
 c01092c:	0c0111c0 	call	c0111c <__alt_mem_sdram-0xb3feee4>
 c010930:	0c0109d4 	ori	r16,at,1063
 c010934:	0c0111c0 	call	c0111c <__alt_mem_sdram-0xb3feee4>
 c010938:	0c0111c0 	call	c0111c <__alt_mem_sdram-0xb3feee4>
 c01093c:	0c010ebc 	xorhi	r16,at,1082
 c010940:	0c0111c0 	call	c0111c <__alt_mem_sdram-0xb3feee4>
 c010944:	0c0111c0 	call	c0111c <__alt_mem_sdram-0xb3feee4>
 c010948:	0c0111c0 	call	c0111c <__alt_mem_sdram-0xb3feee4>
 c01094c:	0c0111c0 	call	c0111c <__alt_mem_sdram-0xb3feee4>
 c010950:	0c0111c0 	call	c0111c <__alt_mem_sdram-0xb3feee4>
 c010954:	0c0111c0 	call	c0111c <__alt_mem_sdram-0xb3feee4>
 c010958:	0c0111c0 	call	c0111c <__alt_mem_sdram-0xb3feee4>
 c01095c:	0c0111c0 	call	c0111c <__alt_mem_sdram-0xb3feee4>
 c010960:	0c0111c0 	call	c0111c <__alt_mem_sdram-0xb3feee4>
 c010964:	0c0111c0 	call	c0111c <__alt_mem_sdram-0xb3feee4>
 c010968:	0c010f14 	ori	r16,at,1084
 c01096c:	0c0110ac 	andhi	r16,at,1090
 c010970:	0c0111c0 	call	c0111c <__alt_mem_sdram-0xb3feee4>
 c010974:	0c0111c0 	call	c0111c <__alt_mem_sdram-0xb3feee4>
 c010978:	0c0111c0 	call	c0111c <__alt_mem_sdram-0xb3feee4>
 c01097c:	0c011134 	orhi	r16,at,1092
 c010980:	0c0110ac 	andhi	r16,at,1090
 c010984:	0c0111c0 	call	c0111c <__alt_mem_sdram-0xb3feee4>
 c010988:	0c0111c0 	call	c0111c <__alt_mem_sdram-0xb3feee4>
 c01098c:	0c011140 	call	c01114 <__alt_mem_sdram-0xb3feeec>
 c010990:	0c0111c0 	call	c0111c <__alt_mem_sdram-0xb3feee4>
 c010994:	0c011000 	call	c01100 <__alt_mem_sdram-0xb3fef00>
 c010998:	0c010a14 	ori	r16,at,1064
 c01099c:	0c0110e8 	cmpgeui	r16,at,1091
 c0109a0:	0c011128 	cmpgeui	r16,at,1092
 c0109a4:	0c0111c0 	call	c0111c <__alt_mem_sdram-0xb3feee4>
 c0109a8:	0c01104c 	andi	r16,at,1089
 c0109ac:	0c0111c0 	call	c0111c <__alt_mem_sdram-0xb3feee4>
 c0109b0:	0c0109d8 	cmpnei	r16,at,1063
 c0109b4:	0c0111c0 	call	c0111c <__alt_mem_sdram-0xb3feee4>
 c0109b8:	0c0111c0 	call	c0111c <__alt_mem_sdram-0xb3feee4>
 c0109bc:	0c011150 	cmplti	r16,at,1093
 c0109c0:	42000204 	addi	r8,r8,8
 c0109c4:	dac12217 	ldw	r11,1160(sp)
 c0109c8:	5c97883a 	add	r11,r11,r18
 c0109cc:	dac12215 	stw	r11,1160(sp)
 c0109d0:	003f8c06 	br	c010804 <__alt_data_end+0xfc010804>
 c0109d4:	ad400414 	ori	r21,r21,16
 c0109d8:	a880080c 	andi	r2,r21,32
 c0109dc:	10012f1e 	bne	r2,zero,c010e9c <___vfiprintf_internal_r+0x7e0>
 c0109e0:	a880040c 	andi	r2,r21,16
 c0109e4:	1001ff1e 	bne	r2,zero,c0111e4 <___vfiprintf_internal_r+0xb28>
 c0109e8:	a880100c 	andi	r2,r21,64
 c0109ec:	1001fd26 	beq	r2,zero,c0111e4 <___vfiprintf_internal_r+0xb28>
 c0109f0:	da812117 	ldw	r10,1156(sp)
 c0109f4:	002d883a 	mov	r22,zero
 c0109f8:	00800044 	movi	r2,1
 c0109fc:	5480000b 	ldhu	r18,0(r10)
 c010a00:	52800104 	addi	r10,r10,4
 c010a04:	da812115 	stw	r10,1156(sp)
 c010a08:	9009883a 	mov	r4,r18
 c010a0c:	00000a06 	br	c010a38 <___vfiprintf_internal_r+0x37c>
 c010a10:	ad400414 	ori	r21,r21,16
 c010a14:	a880080c 	andi	r2,r21,32
 c010a18:	10011426 	beq	r2,zero,c010e6c <___vfiprintf_internal_r+0x7b0>
 c010a1c:	da812117 	ldw	r10,1156(sp)
 c010a20:	0005883a 	mov	r2,zero
 c010a24:	54800017 	ldw	r18,0(r10)
 c010a28:	55800117 	ldw	r22,4(r10)
 c010a2c:	52800204 	addi	r10,r10,8
 c010a30:	da812115 	stw	r10,1156(sp)
 c010a34:	9588b03a 	or	r4,r18,r22
 c010a38:	d8011d85 	stb	zero,1142(sp)
 c010a3c:	4823883a 	mov	r17,r9
 c010a40:	0019883a 	mov	r12,zero
 c010a44:	48000216 	blt	r9,zero,c010a50 <___vfiprintf_internal_r+0x394>
 c010a48:	00ffdfc4 	movi	r3,-129
 c010a4c:	a8ea703a 	and	r21,r21,r3
 c010a50:	2002221e 	bne	r4,zero,c0112dc <___vfiprintf_internal_r+0xc20>
 c010a54:	4802c726 	beq	r9,zero,c011574 <___vfiprintf_internal_r+0xeb8>
 c010a58:	10803fcc 	andi	r2,r2,255
 c010a5c:	00c00044 	movi	r3,1
 c010a60:	10c24426 	beq	r2,r3,c011374 <___vfiprintf_internal_r+0xcb8>
 c010a64:	00c00084 	movi	r3,2
 c010a68:	10c2cc26 	beq	r2,r3,c01159c <___vfiprintf_internal_r+0xee0>
 c010a6c:	d8c10a04 	addi	r3,sp,1064
 c010a70:	9008d0fa 	srli	r4,r18,3
 c010a74:	b00a977a 	slli	r5,r22,29
 c010a78:	b02cd0fa 	srli	r22,r22,3
 c010a7c:	948001cc 	andi	r18,r18,7
 c010a80:	90800c04 	addi	r2,r18,48
 c010a84:	18ffffc4 	addi	r3,r3,-1
 c010a88:	2924b03a 	or	r18,r5,r4
 c010a8c:	18800005 	stb	r2,0(r3)
 c010a90:	9588b03a 	or	r4,r18,r22
 c010a94:	203ff61e 	bne	r4,zero,c010a70 <__alt_data_end+0xfc010a70>
 c010a98:	a900004c 	andi	r4,r21,1
 c010a9c:	d8c12415 	stw	r3,1168(sp)
 c010aa0:	2002fb1e 	bne	r4,zero,c011690 <___vfiprintf_internal_r+0xfd4>
 c010aa4:	da811e17 	ldw	r10,1144(sp)
 c010aa8:	50e3c83a 	sub	r17,r10,r3
 c010aac:	8825883a 	mov	r18,r17
 c010ab0:	8a40010e 	bge	r17,r9,c010ab8 <___vfiprintf_internal_r+0x3fc>
 c010ab4:	4825883a 	mov	r18,r9
 c010ab8:	63003fcc 	andi	r12,r12,255
 c010abc:	6300201c 	xori	r12,r12,128
 c010ac0:	633fe004 	addi	r12,r12,-128
 c010ac4:	60000126 	beq	r12,zero,c010acc <___vfiprintf_internal_r+0x410>
 c010ac8:	94800044 	addi	r18,r18,1
 c010acc:	ab80008c 	andi	r14,r21,2
 c010ad0:	70000126 	beq	r14,zero,c010ad8 <___vfiprintf_internal_r+0x41c>
 c010ad4:	94800084 	addi	r18,r18,2
 c010ad8:	ad80210c 	andi	r22,r21,132
 c010adc:	b001df1e 	bne	r22,zero,c01125c <___vfiprintf_internal_r+0xba0>
 c010ae0:	9c8fc83a 	sub	r7,r19,r18
 c010ae4:	01c1dd0e 	bge	zero,r7,c01125c <___vfiprintf_internal_r+0xba0>
 c010ae8:	03000404 	movi	r12,16
 c010aec:	d8811c17 	ldw	r2,1136(sp)
 c010af0:	61c3920e 	bge	r12,r7,c01193c <___vfiprintf_internal_r+0x1280>
 c010af4:	028300b4 	movhi	r10,3074
 c010af8:	5289a204 	addi	r10,r10,9864
 c010afc:	dc012915 	stw	r16,1188(sp)
 c010b00:	d9811b17 	ldw	r6,1132(sp)
 c010b04:	da812315 	stw	r10,1164(sp)
 c010b08:	00c001c4 	movi	r3,7
 c010b0c:	da412515 	stw	r9,1172(sp)
 c010b10:	db812815 	stw	r14,1184(sp)
 c010b14:	3821883a 	mov	r16,r7
 c010b18:	00000506 	br	c010b30 <___vfiprintf_internal_r+0x474>
 c010b1c:	31400084 	addi	r5,r6,2
 c010b20:	42000204 	addi	r8,r8,8
 c010b24:	200d883a 	mov	r6,r4
 c010b28:	843ffc04 	addi	r16,r16,-16
 c010b2c:	64000d0e 	bge	r12,r16,c010b64 <___vfiprintf_internal_r+0x4a8>
 c010b30:	10800404 	addi	r2,r2,16
 c010b34:	31000044 	addi	r4,r6,1
 c010b38:	47000015 	stw	fp,0(r8)
 c010b3c:	43000115 	stw	r12,4(r8)
 c010b40:	d8811c15 	stw	r2,1136(sp)
 c010b44:	d9011b15 	stw	r4,1132(sp)
 c010b48:	193ff40e 	bge	r3,r4,c010b1c <__alt_data_end+0xfc010b1c>
 c010b4c:	1001b51e 	bne	r2,zero,c011224 <___vfiprintf_internal_r+0xb68>
 c010b50:	843ffc04 	addi	r16,r16,-16
 c010b54:	000d883a 	mov	r6,zero
 c010b58:	01400044 	movi	r5,1
 c010b5c:	d811883a 	mov	r8,sp
 c010b60:	643ff316 	blt	r12,r16,c010b30 <__alt_data_end+0xfc010b30>
 c010b64:	800f883a 	mov	r7,r16
 c010b68:	da412517 	ldw	r9,1172(sp)
 c010b6c:	db812817 	ldw	r14,1184(sp)
 c010b70:	dc012917 	ldw	r16,1188(sp)
 c010b74:	dac12317 	ldw	r11,1164(sp)
 c010b78:	3887883a 	add	r3,r7,r2
 c010b7c:	41c00115 	stw	r7,4(r8)
 c010b80:	42c00015 	stw	r11,0(r8)
 c010b84:	d8c11c15 	stw	r3,1136(sp)
 c010b88:	d9411b15 	stw	r5,1132(sp)
 c010b8c:	008001c4 	movi	r2,7
 c010b90:	11429316 	blt	r2,r5,c0115e0 <___vfiprintf_internal_r+0xf24>
 c010b94:	d9011d87 	ldb	r4,1142(sp)
 c010b98:	42000204 	addi	r8,r8,8
 c010b9c:	28800044 	addi	r2,r5,1
 c010ba0:	2001b31e 	bne	r4,zero,c011270 <___vfiprintf_internal_r+0xbb4>
 c010ba4:	70000c26 	beq	r14,zero,c010bd8 <___vfiprintf_internal_r+0x51c>
 c010ba8:	d9011d04 	addi	r4,sp,1140
 c010bac:	18c00084 	addi	r3,r3,2
 c010bb0:	41000015 	stw	r4,0(r8)
 c010bb4:	01000084 	movi	r4,2
 c010bb8:	41000115 	stw	r4,4(r8)
 c010bbc:	d8c11c15 	stw	r3,1136(sp)
 c010bc0:	d8811b15 	stw	r2,1132(sp)
 c010bc4:	010001c4 	movi	r4,7
 c010bc8:	20826516 	blt	r4,r2,c011560 <___vfiprintf_internal_r+0xea4>
 c010bcc:	100b883a 	mov	r5,r2
 c010bd0:	42000204 	addi	r8,r8,8
 c010bd4:	10800044 	addi	r2,r2,1
 c010bd8:	01002004 	movi	r4,128
 c010bdc:	b1021a26 	beq	r22,r4,c011448 <___vfiprintf_internal_r+0xd8c>
 c010be0:	4c6dc83a 	sub	r22,r9,r17
 c010be4:	0580230e 	bge	zero,r22,c010c74 <___vfiprintf_internal_r+0x5b8>
 c010be8:	01c00404 	movi	r7,16
 c010bec:	3d83300e 	bge	r7,r22,c0118b0 <___vfiprintf_internal_r+0x11f4>
 c010bf0:	008300b4 	movhi	r2,3074
 c010bf4:	10899e04 	addi	r2,r2,9848
 c010bf8:	d8812315 	stw	r2,1164(sp)
 c010bfc:	030001c4 	movi	r12,7
 c010c00:	00000506 	br	c010c18 <___vfiprintf_internal_r+0x55c>
 c010c04:	28800084 	addi	r2,r5,2
 c010c08:	42000204 	addi	r8,r8,8
 c010c0c:	200b883a 	mov	r5,r4
 c010c10:	b5bffc04 	addi	r22,r22,-16
 c010c14:	3d800d0e 	bge	r7,r22,c010c4c <___vfiprintf_internal_r+0x590>
 c010c18:	18c00404 	addi	r3,r3,16
 c010c1c:	29000044 	addi	r4,r5,1
 c010c20:	45c00015 	stw	r23,0(r8)
 c010c24:	41c00115 	stw	r7,4(r8)
 c010c28:	d8c11c15 	stw	r3,1136(sp)
 c010c2c:	d9011b15 	stw	r4,1132(sp)
 c010c30:	613ff40e 	bge	r12,r4,c010c04 <__alt_data_end+0xfc010c04>
 c010c34:	18019b1e 	bne	r3,zero,c0112a4 <___vfiprintf_internal_r+0xbe8>
 c010c38:	b5bffc04 	addi	r22,r22,-16
 c010c3c:	000b883a 	mov	r5,zero
 c010c40:	00800044 	movi	r2,1
 c010c44:	d811883a 	mov	r8,sp
 c010c48:	3dbff316 	blt	r7,r22,c010c18 <__alt_data_end+0xfc010c18>
 c010c4c:	da812317 	ldw	r10,1164(sp)
 c010c50:	1d87883a 	add	r3,r3,r22
 c010c54:	45800115 	stw	r22,4(r8)
 c010c58:	42800015 	stw	r10,0(r8)
 c010c5c:	d8c11c15 	stw	r3,1136(sp)
 c010c60:	d8811b15 	stw	r2,1132(sp)
 c010c64:	010001c4 	movi	r4,7
 c010c68:	2081dd16 	blt	r4,r2,c0113e0 <___vfiprintf_internal_r+0xd24>
 c010c6c:	42000204 	addi	r8,r8,8
 c010c70:	10800044 	addi	r2,r2,1
 c010c74:	da812417 	ldw	r10,1168(sp)
 c010c78:	1c47883a 	add	r3,r3,r17
 c010c7c:	44400115 	stw	r17,4(r8)
 c010c80:	42800015 	stw	r10,0(r8)
 c010c84:	d8c11c15 	stw	r3,1136(sp)
 c010c88:	d8811b15 	stw	r2,1132(sp)
 c010c8c:	010001c4 	movi	r4,7
 c010c90:	2081dc0e 	bge	r4,r2,c011404 <___vfiprintf_internal_r+0xd48>
 c010c94:	1802611e 	bne	r3,zero,c01161c <___vfiprintf_internal_r+0xf60>
 c010c98:	d8011b15 	stw	zero,1132(sp)
 c010c9c:	aac0010c 	andi	r11,r21,4
 c010ca0:	58002726 	beq	r11,zero,c010d40 <___vfiprintf_internal_r+0x684>
 c010ca4:	9ca3c83a 	sub	r17,r19,r18
 c010ca8:	d811883a 	mov	r8,sp
 c010cac:	0443510e 	bge	zero,r17,c0119f4 <___vfiprintf_internal_r+0x1338>
 c010cb0:	01c00404 	movi	r7,16
 c010cb4:	3c43320e 	bge	r7,r17,c011980 <___vfiprintf_internal_r+0x12c4>
 c010cb8:	008300b4 	movhi	r2,3074
 c010cbc:	1089a204 	addi	r2,r2,9864
 c010cc0:	d9011b17 	ldw	r4,1132(sp)
 c010cc4:	d8812315 	stw	r2,1164(sp)
 c010cc8:	382d883a 	mov	r22,r7
 c010ccc:	054001c4 	movi	r21,7
 c010cd0:	00000506 	br	c010ce8 <___vfiprintf_internal_r+0x62c>
 c010cd4:	21400084 	addi	r5,r4,2
 c010cd8:	42000204 	addi	r8,r8,8
 c010cdc:	1009883a 	mov	r4,r2
 c010ce0:	8c7ffc04 	addi	r17,r17,-16
 c010ce4:	b4400d0e 	bge	r22,r17,c010d1c <___vfiprintf_internal_r+0x660>
 c010ce8:	18c00404 	addi	r3,r3,16
 c010cec:	20800044 	addi	r2,r4,1
 c010cf0:	47000015 	stw	fp,0(r8)
 c010cf4:	45800115 	stw	r22,4(r8)
 c010cf8:	d8c11c15 	stw	r3,1136(sp)
 c010cfc:	d8811b15 	stw	r2,1132(sp)
 c010d00:	a8bff40e 	bge	r21,r2,c010cd4 <__alt_data_end+0xfc010cd4>
 c010d04:	1801ac1e 	bne	r3,zero,c0113b8 <___vfiprintf_internal_r+0xcfc>
 c010d08:	8c7ffc04 	addi	r17,r17,-16
 c010d0c:	0009883a 	mov	r4,zero
 c010d10:	01400044 	movi	r5,1
 c010d14:	d811883a 	mov	r8,sp
 c010d18:	b47ff316 	blt	r22,r17,c010ce8 <__alt_data_end+0xfc010ce8>
 c010d1c:	da812317 	ldw	r10,1164(sp)
 c010d20:	1c47883a 	add	r3,r3,r17
 c010d24:	44400115 	stw	r17,4(r8)
 c010d28:	42800015 	stw	r10,0(r8)
 c010d2c:	d8c11c15 	stw	r3,1136(sp)
 c010d30:	d9411b15 	stw	r5,1132(sp)
 c010d34:	008001c4 	movi	r2,7
 c010d38:	1141b70e 	bge	r2,r5,c011418 <___vfiprintf_internal_r+0xd5c>
 c010d3c:	1802cf1e 	bne	r3,zero,c01187c <___vfiprintf_internal_r+0x11c0>
 c010d40:	94c2ca16 	blt	r18,r19,c01186c <___vfiprintf_internal_r+0x11b0>
 c010d44:	dac12217 	ldw	r11,1160(sp)
 c010d48:	5c97883a 	add	r11,r11,r18
 c010d4c:	dac12215 	stw	r11,1160(sp)
 c010d50:	d8011b15 	stw	zero,1132(sp)
 c010d54:	d811883a 	mov	r8,sp
 c010d58:	003e8d06 	br	c010790 <__alt_data_end+0xfc010790>
 c010d5c:	d9012017 	ldw	r4,1152(sp)
 c010d60:	a00b883a 	mov	r5,r20
 c010d64:	c00ba540 	call	c00ba54 <__swsetup_r>
 c010d68:	10002c1e 	bne	r2,zero,c010e1c <___vfiprintf_internal_r+0x760>
 c010d6c:	a0c0030b 	ldhu	r3,12(r20)
 c010d70:	01000284 	movi	r4,10
 c010d74:	1805883a 	mov	r2,r3
 c010d78:	1080068c 	andi	r2,r2,26
 c010d7c:	113e731e 	bne	r2,r4,c01074c <__alt_data_end+0xfc01074c>
 c010d80:	a080038b 	ldhu	r2,14(r20)
 c010d84:	113fffcc 	andi	r4,r2,65535
 c010d88:	2120001c 	xori	r4,r4,32768
 c010d8c:	21200004 	addi	r4,r4,-32768
 c010d90:	203e6e16 	blt	r4,zero,c01074c <__alt_data_end+0xfc01074c>
 c010d94:	a3001917 	ldw	r12,100(r20)
 c010d98:	a2c00717 	ldw	r11,28(r20)
 c010d9c:	a2800917 	ldw	r10,36(r20)
 c010da0:	d9012017 	ldw	r4,1152(sp)
 c010da4:	d9c12117 	ldw	r7,1156(sp)
 c010da8:	02410004 	movi	r9,1024
 c010dac:	18ffff4c 	andi	r3,r3,65533
 c010db0:	da4b883a 	add	r5,sp,r9
 c010db4:	b00d883a 	mov	r6,r22
 c010db8:	d8c1030d 	sth	r3,1036(sp)
 c010dbc:	db011915 	stw	r12,1124(sp)
 c010dc0:	d881038d 	sth	r2,1038(sp)
 c010dc4:	dac10715 	stw	r11,1052(sp)
 c010dc8:	da810915 	stw	r10,1060(sp)
 c010dcc:	dec10015 	stw	sp,1024(sp)
 c010dd0:	dec10415 	stw	sp,1040(sp)
 c010dd4:	da410215 	stw	r9,1032(sp)
 c010dd8:	da410515 	stw	r9,1044(sp)
 c010ddc:	d8010615 	stw	zero,1048(sp)
 c010de0:	c0106bc0 	call	c0106bc <___vfiprintf_internal_r>
 c010de4:	1021883a 	mov	r16,r2
 c010de8:	10000416 	blt	r2,zero,c010dfc <___vfiprintf_internal_r+0x740>
 c010dec:	d9012017 	ldw	r4,1152(sp)
 c010df0:	d9410004 	addi	r5,sp,1024
 c010df4:	c00d4c40 	call	c00d4c4 <_fflush_r>
 c010df8:	1002fc1e 	bne	r2,zero,c0119ec <___vfiprintf_internal_r+0x1330>
 c010dfc:	d881030b 	ldhu	r2,1036(sp)
 c010e00:	1080100c 	andi	r2,r2,64
 c010e04:	10000326 	beq	r2,zero,c010e14 <___vfiprintf_internal_r+0x758>
 c010e08:	a080030b 	ldhu	r2,12(r20)
 c010e0c:	10801014 	ori	r2,r2,64
 c010e10:	a080030d 	sth	r2,12(r20)
 c010e14:	8005883a 	mov	r2,r16
 c010e18:	00000106 	br	c010e20 <___vfiprintf_internal_r+0x764>
 c010e1c:	00bfffc4 	movi	r2,-1
 c010e20:	dfc13517 	ldw	ra,1236(sp)
 c010e24:	df013417 	ldw	fp,1232(sp)
 c010e28:	ddc13317 	ldw	r23,1228(sp)
 c010e2c:	dd813217 	ldw	r22,1224(sp)
 c010e30:	dd413117 	ldw	r21,1220(sp)
 c010e34:	dd013017 	ldw	r20,1216(sp)
 c010e38:	dcc12f17 	ldw	r19,1212(sp)
 c010e3c:	dc812e17 	ldw	r18,1208(sp)
 c010e40:	dc412d17 	ldw	r17,1204(sp)
 c010e44:	dc012c17 	ldw	r16,1200(sp)
 c010e48:	dec13604 	addi	sp,sp,1240
 c010e4c:	f800283a 	ret
 c010e50:	c00da6c0 	call	c00da6c <__sinit>
 c010e54:	003e2b06 	br	c010704 <__alt_data_end+0xfc010704>
 c010e58:	04e7c83a 	sub	r19,zero,r19
 c010e5c:	d8812115 	stw	r2,1156(sp)
 c010e60:	ad400114 	ori	r21,r21,4
 c010e64:	80c00007 	ldb	r3,0(r16)
 c010e68:	003e7306 	br	c010838 <__alt_data_end+0xfc010838>
 c010e6c:	a880040c 	andi	r2,r21,16
 c010e70:	1000e41e 	bne	r2,zero,c011204 <___vfiprintf_internal_r+0xb48>
 c010e74:	a880100c 	andi	r2,r21,64
 c010e78:	1000e226 	beq	r2,zero,c011204 <___vfiprintf_internal_r+0xb48>
 c010e7c:	da812117 	ldw	r10,1156(sp)
 c010e80:	002d883a 	mov	r22,zero
 c010e84:	0005883a 	mov	r2,zero
 c010e88:	5480000b 	ldhu	r18,0(r10)
 c010e8c:	52800104 	addi	r10,r10,4
 c010e90:	da812115 	stw	r10,1156(sp)
 c010e94:	9009883a 	mov	r4,r18
 c010e98:	003ee706 	br	c010a38 <__alt_data_end+0xfc010a38>
 c010e9c:	da812117 	ldw	r10,1156(sp)
 c010ea0:	00800044 	movi	r2,1
 c010ea4:	54800017 	ldw	r18,0(r10)
 c010ea8:	55800117 	ldw	r22,4(r10)
 c010eac:	52800204 	addi	r10,r10,8
 c010eb0:	da812115 	stw	r10,1156(sp)
 c010eb4:	9588b03a 	or	r4,r18,r22
 c010eb8:	003edf06 	br	c010a38 <__alt_data_end+0xfc010a38>
 c010ebc:	02c300b4 	movhi	r11,3074
 c010ec0:	5ac93904 	addi	r11,r11,9444
 c010ec4:	d9811d85 	stb	r6,1142(sp)
 c010ec8:	dac12615 	stw	r11,1176(sp)
 c010ecc:	a900080c 	andi	r4,r21,32
 c010ed0:	d8812117 	ldw	r2,1156(sp)
 c010ed4:	2000a526 	beq	r4,zero,c01116c <___vfiprintf_internal_r+0xab0>
 c010ed8:	da812117 	ldw	r10,1156(sp)
 c010edc:	14800017 	ldw	r18,0(r2)
 c010ee0:	15800117 	ldw	r22,4(r2)
 c010ee4:	52800204 	addi	r10,r10,8
 c010ee8:	da812115 	stw	r10,1156(sp)
 c010eec:	a880004c 	andi	r2,r21,1
 c010ef0:	1001d926 	beq	r2,zero,c011658 <___vfiprintf_internal_r+0xf9c>
 c010ef4:	9588b03a 	or	r4,r18,r22
 c010ef8:	20024426 	beq	r4,zero,c01180c <___vfiprintf_internal_r+0x1150>
 c010efc:	00800c04 	movi	r2,48
 c010f00:	d8811d05 	stb	r2,1140(sp)
 c010f04:	d8c11d45 	stb	r3,1141(sp)
 c010f08:	ad400094 	ori	r21,r21,2
 c010f0c:	00800084 	movi	r2,2
 c010f10:	003ec906 	br	c010a38 <__alt_data_end+0xfc010a38>
 c010f14:	da812117 	ldw	r10,1156(sp)
 c010f18:	04800044 	movi	r18,1
 c010f1c:	dac10004 	addi	r11,sp,1024
 c010f20:	50800017 	ldw	r2,0(r10)
 c010f24:	52800104 	addi	r10,r10,4
 c010f28:	d8011d85 	stb	zero,1142(sp)
 c010f2c:	d8810005 	stb	r2,1024(sp)
 c010f30:	da812115 	stw	r10,1156(sp)
 c010f34:	9023883a 	mov	r17,r18
 c010f38:	dac12415 	stw	r11,1168(sp)
 c010f3c:	0013883a 	mov	r9,zero
 c010f40:	003ee206 	br	c010acc <__alt_data_end+0xfc010acc>
 c010f44:	ad402014 	ori	r21,r21,128
 c010f48:	80c00007 	ldb	r3,0(r16)
 c010f4c:	003e3a06 	br	c010838 <__alt_data_end+0xfc010838>
 c010f50:	8015883a 	mov	r10,r16
 c010f54:	0027883a 	mov	r19,zero
 c010f58:	18bff404 	addi	r2,r3,-48
 c010f5c:	50c00007 	ldb	r3,0(r10)
 c010f60:	9cc002a4 	muli	r19,r19,10
 c010f64:	84000044 	addi	r16,r16,1
 c010f68:	8015883a 	mov	r10,r16
 c010f6c:	98a7883a 	add	r19,r19,r2
 c010f70:	18bff404 	addi	r2,r3,-48
 c010f74:	28bff92e 	bgeu	r5,r2,c010f5c <__alt_data_end+0xfc010f5c>
 c010f78:	003e3006 	br	c01083c <__alt_data_end+0xfc01083c>
 c010f7c:	ad400414 	ori	r21,r21,16
 c010f80:	d9811d85 	stb	r6,1142(sp)
 c010f84:	a880080c 	andi	r2,r21,32
 c010f88:	d8c12117 	ldw	r3,1156(sp)
 c010f8c:	10004b26 	beq	r2,zero,c0110bc <___vfiprintf_internal_r+0xa00>
 c010f90:	da812117 	ldw	r10,1156(sp)
 c010f94:	18800117 	ldw	r2,4(r3)
 c010f98:	1c800017 	ldw	r18,0(r3)
 c010f9c:	52800204 	addi	r10,r10,8
 c010fa0:	da812115 	stw	r10,1156(sp)
 c010fa4:	102d883a 	mov	r22,r2
 c010fa8:	1001f116 	blt	r2,zero,c011770 <___vfiprintf_internal_r+0x10b4>
 c010fac:	db011d83 	ldbu	r12,1142(sp)
 c010fb0:	4823883a 	mov	r17,r9
 c010fb4:	00800044 	movi	r2,1
 c010fb8:	9588b03a 	or	r4,r18,r22
 c010fbc:	003ea106 	br	c010a44 <__alt_data_end+0xfc010a44>
 c010fc0:	80c00007 	ldb	r3,0(r16)
 c010fc4:	82800044 	addi	r10,r16,1
 c010fc8:	1b027f26 	beq	r3,r12,c0119c8 <___vfiprintf_internal_r+0x130c>
 c010fcc:	18bff404 	addi	r2,r3,-48
 c010fd0:	5021883a 	mov	r16,r10
 c010fd4:	0013883a 	mov	r9,zero
 c010fd8:	28be1836 	bltu	r5,r2,c01083c <__alt_data_end+0xfc01083c>
 c010fdc:	80c00007 	ldb	r3,0(r16)
 c010fe0:	4a4002a4 	muli	r9,r9,10
 c010fe4:	84000044 	addi	r16,r16,1
 c010fe8:	1253883a 	add	r9,r2,r9
 c010fec:	18bff404 	addi	r2,r3,-48
 c010ff0:	28bffa2e 	bgeu	r5,r2,c010fdc <__alt_data_end+0xfc010fdc>
 c010ff4:	483e110e 	bge	r9,zero,c01083c <__alt_data_end+0xfc01083c>
 c010ff8:	027fffc4 	movi	r9,-1
 c010ffc:	003e0f06 	br	c01083c <__alt_data_end+0xfc01083c>
 c011000:	d9811d85 	stb	r6,1142(sp)
 c011004:	a880080c 	andi	r2,r21,32
 c011008:	1001ee26 	beq	r2,zero,c0117c4 <___vfiprintf_internal_r+0x1108>
 c01100c:	da812117 	ldw	r10,1156(sp)
 c011010:	dac12217 	ldw	r11,1160(sp)
 c011014:	50800017 	ldw	r2,0(r10)
 c011018:	5807d7fa 	srai	r3,r11,31
 c01101c:	52800104 	addi	r10,r10,4
 c011020:	da812115 	stw	r10,1156(sp)
 c011024:	12c00015 	stw	r11,0(r2)
 c011028:	10c00115 	stw	r3,4(r2)
 c01102c:	003dd806 	br	c010790 <__alt_data_end+0xfc010790>
 c011030:	30803fcc 	andi	r2,r6,255
 c011034:	1080201c 	xori	r2,r2,128
 c011038:	10bfe004 	addi	r2,r2,-128
 c01103c:	1001df1e 	bne	r2,zero,c0117bc <___vfiprintf_internal_r+0x1100>
 c011040:	01800804 	movi	r6,32
 c011044:	80c00007 	ldb	r3,0(r16)
 c011048:	003dfb06 	br	c010838 <__alt_data_end+0xfc010838>
 c01104c:	da812117 	ldw	r10,1156(sp)
 c011050:	dac12117 	ldw	r11,1156(sp)
 c011054:	d8011d85 	stb	zero,1142(sp)
 c011058:	52800017 	ldw	r10,0(r10)
 c01105c:	5d800104 	addi	r22,r11,4
 c011060:	da812415 	stw	r10,1168(sp)
 c011064:	50023b26 	beq	r10,zero,c011954 <___vfiprintf_internal_r+0x1298>
 c011068:	d9012417 	ldw	r4,1168(sp)
 c01106c:	48021f16 	blt	r9,zero,c0118ec <___vfiprintf_internal_r+0x1230>
 c011070:	480d883a 	mov	r6,r9
 c011074:	000b883a 	mov	r5,zero
 c011078:	da012a15 	stw	r8,1192(sp)
 c01107c:	da412b15 	stw	r9,1196(sp)
 c011080:	c00e77c0 	call	c00e77c <memchr>
 c011084:	da012a17 	ldw	r8,1192(sp)
 c011088:	da412b17 	ldw	r9,1196(sp)
 c01108c:	10024726 	beq	r2,zero,c0119ac <___vfiprintf_internal_r+0x12f0>
 c011090:	d8c12417 	ldw	r3,1168(sp)
 c011094:	10e3c83a 	sub	r17,r2,r3
 c011098:	4c41f616 	blt	r9,r17,c011874 <___vfiprintf_internal_r+0x11b8>
 c01109c:	db011d83 	ldbu	r12,1142(sp)
 c0110a0:	dd812115 	stw	r22,1156(sp)
 c0110a4:	0013883a 	mov	r9,zero
 c0110a8:	003e8006 	br	c010aac <__alt_data_end+0xfc010aac>
 c0110ac:	d9811d85 	stb	r6,1142(sp)
 c0110b0:	a880080c 	andi	r2,r21,32
 c0110b4:	d8c12117 	ldw	r3,1156(sp)
 c0110b8:	103fb51e 	bne	r2,zero,c010f90 <__alt_data_end+0xfc010f90>
 c0110bc:	a880040c 	andi	r2,r21,16
 c0110c0:	10015e1e 	bne	r2,zero,c01163c <___vfiprintf_internal_r+0xf80>
 c0110c4:	a880100c 	andi	r2,r21,64
 c0110c8:	10015c26 	beq	r2,zero,c01163c <___vfiprintf_internal_r+0xf80>
 c0110cc:	1c80000f 	ldh	r18,0(r3)
 c0110d0:	da812117 	ldw	r10,1156(sp)
 c0110d4:	902dd7fa 	srai	r22,r18,31
 c0110d8:	52800104 	addi	r10,r10,4
 c0110dc:	da812115 	stw	r10,1156(sp)
 c0110e0:	b005883a 	mov	r2,r22
 c0110e4:	003fb006 	br	c010fa8 <__alt_data_end+0xfc010fa8>
 c0110e8:	da812117 	ldw	r10,1156(sp)
 c0110ec:	00800c04 	movi	r2,48
 c0110f0:	02c300b4 	movhi	r11,3074
 c0110f4:	54800017 	ldw	r18,0(r10)
 c0110f8:	d8811d05 	stb	r2,1140(sp)
 c0110fc:	52800104 	addi	r10,r10,4
 c011100:	00801e04 	movi	r2,120
 c011104:	5ac93e04 	addi	r11,r11,9464
 c011108:	d8811d45 	stb	r2,1141(sp)
 c01110c:	002d883a 	mov	r22,zero
 c011110:	ad400094 	ori	r21,r21,2
 c011114:	da812115 	stw	r10,1156(sp)
 c011118:	dac12615 	stw	r11,1176(sp)
 c01111c:	00800084 	movi	r2,2
 c011120:	9009883a 	mov	r4,r18
 c011124:	003e4406 	br	c010a38 <__alt_data_end+0xfc010a38>
 c011128:	ad400814 	ori	r21,r21,32
 c01112c:	80c00007 	ldb	r3,0(r16)
 c011130:	003dc106 	br	c010838 <__alt_data_end+0xfc010838>
 c011134:	ad401014 	ori	r21,r21,64
 c011138:	80c00007 	ldb	r3,0(r16)
 c01113c:	003dbe06 	br	c010838 <__alt_data_end+0xfc010838>
 c011140:	80c00007 	ldb	r3,0(r16)
 c011144:	19c1de26 	beq	r3,r7,c0118c0 <___vfiprintf_internal_r+0x1204>
 c011148:	ad400414 	ori	r21,r21,16
 c01114c:	003dba06 	br	c010838 <__alt_data_end+0xfc010838>
 c011150:	008300b4 	movhi	r2,3074
 c011154:	10893e04 	addi	r2,r2,9464
 c011158:	d8812615 	stw	r2,1176(sp)
 c01115c:	d9811d85 	stb	r6,1142(sp)
 c011160:	a900080c 	andi	r4,r21,32
 c011164:	d8812117 	ldw	r2,1156(sp)
 c011168:	203f5b1e 	bne	r4,zero,c010ed8 <__alt_data_end+0xfc010ed8>
 c01116c:	a900040c 	andi	r4,r21,16
 c011170:	2001a826 	beq	r4,zero,c011814 <___vfiprintf_internal_r+0x1158>
 c011174:	dac12117 	ldw	r11,1156(sp)
 c011178:	14800017 	ldw	r18,0(r2)
 c01117c:	002d883a 	mov	r22,zero
 c011180:	5ac00104 	addi	r11,r11,4
 c011184:	dac12115 	stw	r11,1156(sp)
 c011188:	003f5806 	br	c010eec <__alt_data_end+0xfc010eec>
 c01118c:	da812117 	ldw	r10,1156(sp)
 c011190:	54c00017 	ldw	r19,0(r10)
 c011194:	50800104 	addi	r2,r10,4
 c011198:	983f2f16 	blt	r19,zero,c010e58 <__alt_data_end+0xfc010e58>
 c01119c:	d8812115 	stw	r2,1156(sp)
 c0111a0:	80c00007 	ldb	r3,0(r16)
 c0111a4:	003da406 	br	c010838 <__alt_data_end+0xfc010838>
 c0111a8:	01800ac4 	movi	r6,43
 c0111ac:	80c00007 	ldb	r3,0(r16)
 c0111b0:	003da106 	br	c010838 <__alt_data_end+0xfc010838>
 c0111b4:	ad400054 	ori	r21,r21,1
 c0111b8:	80c00007 	ldb	r3,0(r16)
 c0111bc:	003d9e06 	br	c010838 <__alt_data_end+0xfc010838>
 c0111c0:	d9811d85 	stb	r6,1142(sp)
 c0111c4:	18007126 	beq	r3,zero,c01138c <___vfiprintf_internal_r+0xcd0>
 c0111c8:	04800044 	movi	r18,1
 c0111cc:	d8c10005 	stb	r3,1024(sp)
 c0111d0:	d8c10004 	addi	r3,sp,1024
 c0111d4:	d8011d85 	stb	zero,1142(sp)
 c0111d8:	9023883a 	mov	r17,r18
 c0111dc:	d8c12415 	stw	r3,1168(sp)
 c0111e0:	003f5606 	br	c010f3c <__alt_data_end+0xfc010f3c>
 c0111e4:	dac12117 	ldw	r11,1156(sp)
 c0111e8:	002d883a 	mov	r22,zero
 c0111ec:	00800044 	movi	r2,1
 c0111f0:	5c800017 	ldw	r18,0(r11)
 c0111f4:	5ac00104 	addi	r11,r11,4
 c0111f8:	dac12115 	stw	r11,1156(sp)
 c0111fc:	9009883a 	mov	r4,r18
 c011200:	003e0d06 	br	c010a38 <__alt_data_end+0xfc010a38>
 c011204:	dac12117 	ldw	r11,1156(sp)
 c011208:	002d883a 	mov	r22,zero
 c01120c:	0005883a 	mov	r2,zero
 c011210:	5c800017 	ldw	r18,0(r11)
 c011214:	5ac00104 	addi	r11,r11,4
 c011218:	dac12115 	stw	r11,1156(sp)
 c01121c:	9009883a 	mov	r4,r18
 c011220:	003e0506 	br	c010a38 <__alt_data_end+0xfc010a38>
 c011224:	d9012017 	ldw	r4,1152(sp)
 c011228:	a00b883a 	mov	r5,r20
 c01122c:	d9811a04 	addi	r6,sp,1128
 c011230:	d8c12a15 	stw	r3,1192(sp)
 c011234:	db012b15 	stw	r12,1196(sp)
 c011238:	c0105a80 	call	c0105a8 <__sprint_r.part.0>
 c01123c:	d8c12a17 	ldw	r3,1192(sp)
 c011240:	db012b17 	ldw	r12,1196(sp)
 c011244:	1000571e 	bne	r2,zero,c0113a4 <___vfiprintf_internal_r+0xce8>
 c011248:	d9811b17 	ldw	r6,1132(sp)
 c01124c:	d8811c17 	ldw	r2,1136(sp)
 c011250:	d811883a 	mov	r8,sp
 c011254:	31400044 	addi	r5,r6,1
 c011258:	003e3306 	br	c010b28 <__alt_data_end+0xfc010b28>
 c01125c:	d9411b17 	ldw	r5,1132(sp)
 c011260:	d8c11c17 	ldw	r3,1136(sp)
 c011264:	28800044 	addi	r2,r5,1
 c011268:	d9011d87 	ldb	r4,1142(sp)
 c01126c:	203e4d26 	beq	r4,zero,c010ba4 <__alt_data_end+0xfc010ba4>
 c011270:	01000044 	movi	r4,1
 c011274:	d9411d84 	addi	r5,sp,1142
 c011278:	1907883a 	add	r3,r3,r4
 c01127c:	41400015 	stw	r5,0(r8)
 c011280:	41000115 	stw	r4,4(r8)
 c011284:	d8c11c15 	stw	r3,1136(sp)
 c011288:	d8811b15 	stw	r2,1132(sp)
 c01128c:	014001c4 	movi	r5,7
 c011290:	2880aa16 	blt	r5,r2,c01153c <___vfiprintf_internal_r+0xe80>
 c011294:	100b883a 	mov	r5,r2
 c011298:	42000204 	addi	r8,r8,8
 c01129c:	10800044 	addi	r2,r2,1
 c0112a0:	003e4006 	br	c010ba4 <__alt_data_end+0xfc010ba4>
 c0112a4:	d9012017 	ldw	r4,1152(sp)
 c0112a8:	a00b883a 	mov	r5,r20
 c0112ac:	d9811a04 	addi	r6,sp,1128
 c0112b0:	d9c12a15 	stw	r7,1192(sp)
 c0112b4:	db012b15 	stw	r12,1196(sp)
 c0112b8:	c0105a80 	call	c0105a8 <__sprint_r.part.0>
 c0112bc:	d9c12a17 	ldw	r7,1192(sp)
 c0112c0:	db012b17 	ldw	r12,1196(sp)
 c0112c4:	1000371e 	bne	r2,zero,c0113a4 <___vfiprintf_internal_r+0xce8>
 c0112c8:	d9411b17 	ldw	r5,1132(sp)
 c0112cc:	d8c11c17 	ldw	r3,1136(sp)
 c0112d0:	d811883a 	mov	r8,sp
 c0112d4:	28800044 	addi	r2,r5,1
 c0112d8:	003e4d06 	br	c010c10 <__alt_data_end+0xfc010c10>
 c0112dc:	10803fcc 	andi	r2,r2,255
 c0112e0:	00c00044 	movi	r3,1
 c0112e4:	10fddf1e 	bne	r2,r3,c010a64 <__alt_data_end+0xfc010a64>
 c0112e8:	b000021e 	bne	r22,zero,c0112f4 <___vfiprintf_internal_r+0xc38>
 c0112ec:	00800244 	movi	r2,9
 c0112f0:	1480202e 	bgeu	r2,r18,c011374 <___vfiprintf_internal_r+0xcb8>
 c0112f4:	dc012515 	stw	r16,1172(sp)
 c0112f8:	dc410a04 	addi	r17,sp,1064
 c0112fc:	9021883a 	mov	r16,r18
 c011300:	da012415 	stw	r8,1168(sp)
 c011304:	b025883a 	mov	r18,r22
 c011308:	da412315 	stw	r9,1164(sp)
 c01130c:	602d883a 	mov	r22,r12
 c011310:	8009883a 	mov	r4,r16
 c011314:	900b883a 	mov	r5,r18
 c011318:	01800284 	movi	r6,10
 c01131c:	000f883a 	mov	r7,zero
 c011320:	c0129340 	call	c012934 <__umoddi3>
 c011324:	10800c04 	addi	r2,r2,48
 c011328:	8c7fffc4 	addi	r17,r17,-1
 c01132c:	8009883a 	mov	r4,r16
 c011330:	900b883a 	mov	r5,r18
 c011334:	01800284 	movi	r6,10
 c011338:	000f883a 	mov	r7,zero
 c01133c:	88800005 	stb	r2,0(r17)
 c011340:	c0123740 	call	c012374 <__udivdi3>
 c011344:	1021883a 	mov	r16,r2
 c011348:	10c4b03a 	or	r2,r2,r3
 c01134c:	1825883a 	mov	r18,r3
 c011350:	103fef1e 	bne	r2,zero,c011310 <__alt_data_end+0xfc011310>
 c011354:	da811e17 	ldw	r10,1144(sp)
 c011358:	da012417 	ldw	r8,1168(sp)
 c01135c:	da412317 	ldw	r9,1164(sp)
 c011360:	dc412415 	stw	r17,1168(sp)
 c011364:	b019883a 	mov	r12,r22
 c011368:	dc012517 	ldw	r16,1172(sp)
 c01136c:	5463c83a 	sub	r17,r10,r17
 c011370:	003dce06 	br	c010aac <__alt_data_end+0xfc010aac>
 c011374:	94800c04 	addi	r18,r18,48
 c011378:	d8c109c4 	addi	r3,sp,1063
 c01137c:	dc8109c5 	stb	r18,1063(sp)
 c011380:	dc412717 	ldw	r17,1180(sp)
 c011384:	d8c12415 	stw	r3,1168(sp)
 c011388:	003dc806 	br	c010aac <__alt_data_end+0xfc010aac>
 c01138c:	d8811c17 	ldw	r2,1136(sp)
 c011390:	10000426 	beq	r2,zero,c0113a4 <___vfiprintf_internal_r+0xce8>
 c011394:	d9012017 	ldw	r4,1152(sp)
 c011398:	a00b883a 	mov	r5,r20
 c01139c:	d9811a04 	addi	r6,sp,1128
 c0113a0:	c0105a80 	call	c0105a8 <__sprint_r.part.0>
 c0113a4:	a080030b 	ldhu	r2,12(r20)
 c0113a8:	1080100c 	andi	r2,r2,64
 c0113ac:	103e9b1e 	bne	r2,zero,c010e1c <__alt_data_end+0xfc010e1c>
 c0113b0:	d8812217 	ldw	r2,1160(sp)
 c0113b4:	003e9a06 	br	c010e20 <__alt_data_end+0xfc010e20>
 c0113b8:	d9012017 	ldw	r4,1152(sp)
 c0113bc:	a00b883a 	mov	r5,r20
 c0113c0:	d9811a04 	addi	r6,sp,1128
 c0113c4:	c0105a80 	call	c0105a8 <__sprint_r.part.0>
 c0113c8:	103ff61e 	bne	r2,zero,c0113a4 <__alt_data_end+0xfc0113a4>
 c0113cc:	d9011b17 	ldw	r4,1132(sp)
 c0113d0:	d8c11c17 	ldw	r3,1136(sp)
 c0113d4:	d811883a 	mov	r8,sp
 c0113d8:	21400044 	addi	r5,r4,1
 c0113dc:	003e4006 	br	c010ce0 <__alt_data_end+0xfc010ce0>
 c0113e0:	1800d61e 	bne	r3,zero,c01173c <___vfiprintf_internal_r+0x1080>
 c0113e4:	dac12417 	ldw	r11,1168(sp)
 c0113e8:	00800044 	movi	r2,1
 c0113ec:	dc400115 	stw	r17,4(sp)
 c0113f0:	dac00015 	stw	r11,0(sp)
 c0113f4:	dc411c15 	stw	r17,1136(sp)
 c0113f8:	d8811b15 	stw	r2,1132(sp)
 c0113fc:	8807883a 	mov	r3,r17
 c011400:	d811883a 	mov	r8,sp
 c011404:	42000204 	addi	r8,r8,8
 c011408:	aac0010c 	andi	r11,r21,4
 c01140c:	58000226 	beq	r11,zero,c011418 <___vfiprintf_internal_r+0xd5c>
 c011410:	9ca3c83a 	sub	r17,r19,r18
 c011414:	047e2616 	blt	zero,r17,c010cb0 <__alt_data_end+0xfc010cb0>
 c011418:	94c0010e 	bge	r18,r19,c011420 <___vfiprintf_internal_r+0xd64>
 c01141c:	9825883a 	mov	r18,r19
 c011420:	da812217 	ldw	r10,1160(sp)
 c011424:	5495883a 	add	r10,r10,r18
 c011428:	da812215 	stw	r10,1160(sp)
 c01142c:	183e4826 	beq	r3,zero,c010d50 <__alt_data_end+0xfc010d50>
 c011430:	d9012017 	ldw	r4,1152(sp)
 c011434:	a00b883a 	mov	r5,r20
 c011438:	d9811a04 	addi	r6,sp,1128
 c01143c:	c0105a80 	call	c0105a8 <__sprint_r.part.0>
 c011440:	103e4326 	beq	r2,zero,c010d50 <__alt_data_end+0xfc010d50>
 c011444:	003fd706 	br	c0113a4 <__alt_data_end+0xfc0113a4>
 c011448:	9cadc83a 	sub	r22,r19,r18
 c01144c:	05bde40e 	bge	zero,r22,c010be0 <__alt_data_end+0xfc010be0>
 c011450:	03000404 	movi	r12,16
 c011454:	6581500e 	bge	r12,r22,c011998 <___vfiprintf_internal_r+0x12dc>
 c011458:	008300b4 	movhi	r2,3074
 c01145c:	10899e04 	addi	r2,r2,9848
 c011460:	d8812315 	stw	r2,1164(sp)
 c011464:	8005883a 	mov	r2,r16
 c011468:	038001c4 	movi	r14,7
 c01146c:	b021883a 	mov	r16,r22
 c011470:	da412515 	stw	r9,1172(sp)
 c011474:	102d883a 	mov	r22,r2
 c011478:	00000506 	br	c011490 <___vfiprintf_internal_r+0xdd4>
 c01147c:	29000084 	addi	r4,r5,2
 c011480:	42000204 	addi	r8,r8,8
 c011484:	100b883a 	mov	r5,r2
 c011488:	843ffc04 	addi	r16,r16,-16
 c01148c:	64000d0e 	bge	r12,r16,c0114c4 <___vfiprintf_internal_r+0xe08>
 c011490:	18c00404 	addi	r3,r3,16
 c011494:	28800044 	addi	r2,r5,1
 c011498:	45c00015 	stw	r23,0(r8)
 c01149c:	43000115 	stw	r12,4(r8)
 c0114a0:	d8c11c15 	stw	r3,1136(sp)
 c0114a4:	d8811b15 	stw	r2,1132(sp)
 c0114a8:	70bff40e 	bge	r14,r2,c01147c <__alt_data_end+0xfc01147c>
 c0114ac:	1800151e 	bne	r3,zero,c011504 <___vfiprintf_internal_r+0xe48>
 c0114b0:	843ffc04 	addi	r16,r16,-16
 c0114b4:	000b883a 	mov	r5,zero
 c0114b8:	01000044 	movi	r4,1
 c0114bc:	d811883a 	mov	r8,sp
 c0114c0:	643ff316 	blt	r12,r16,c011490 <__alt_data_end+0xfc011490>
 c0114c4:	da412517 	ldw	r9,1172(sp)
 c0114c8:	b005883a 	mov	r2,r22
 c0114cc:	802d883a 	mov	r22,r16
 c0114d0:	1021883a 	mov	r16,r2
 c0114d4:	da812317 	ldw	r10,1164(sp)
 c0114d8:	1d87883a 	add	r3,r3,r22
 c0114dc:	45800115 	stw	r22,4(r8)
 c0114e0:	42800015 	stw	r10,0(r8)
 c0114e4:	d8c11c15 	stw	r3,1136(sp)
 c0114e8:	d9011b15 	stw	r4,1132(sp)
 c0114ec:	008001c4 	movi	r2,7
 c0114f0:	11008d16 	blt	r2,r4,c011728 <___vfiprintf_internal_r+0x106c>
 c0114f4:	42000204 	addi	r8,r8,8
 c0114f8:	20800044 	addi	r2,r4,1
 c0114fc:	200b883a 	mov	r5,r4
 c011500:	003db706 	br	c010be0 <__alt_data_end+0xfc010be0>
 c011504:	d9012017 	ldw	r4,1152(sp)
 c011508:	a00b883a 	mov	r5,r20
 c01150c:	d9811a04 	addi	r6,sp,1128
 c011510:	db012b15 	stw	r12,1196(sp)
 c011514:	db812a15 	stw	r14,1192(sp)
 c011518:	c0105a80 	call	c0105a8 <__sprint_r.part.0>
 c01151c:	db012b17 	ldw	r12,1196(sp)
 c011520:	db812a17 	ldw	r14,1192(sp)
 c011524:	103f9f1e 	bne	r2,zero,c0113a4 <__alt_data_end+0xfc0113a4>
 c011528:	d9411b17 	ldw	r5,1132(sp)
 c01152c:	d8c11c17 	ldw	r3,1136(sp)
 c011530:	d811883a 	mov	r8,sp
 c011534:	29000044 	addi	r4,r5,1
 c011538:	003fd306 	br	c011488 <__alt_data_end+0xfc011488>
 c01153c:	18006c1e 	bne	r3,zero,c0116f0 <___vfiprintf_internal_r+0x1034>
 c011540:	70004f26 	beq	r14,zero,c011680 <___vfiprintf_internal_r+0xfc4>
 c011544:	d8811d04 	addi	r2,sp,1140
 c011548:	00c00084 	movi	r3,2
 c01154c:	d8800015 	stw	r2,0(sp)
 c011550:	d8c00115 	stw	r3,4(sp)
 c011554:	2005883a 	mov	r2,r4
 c011558:	d811883a 	mov	r8,sp
 c01155c:	003d9b06 	br	c010bcc <__alt_data_end+0xfc010bcc>
 c011560:	1800571e 	bne	r3,zero,c0116c0 <___vfiprintf_internal_r+0x1004>
 c011564:	000b883a 	mov	r5,zero
 c011568:	00800044 	movi	r2,1
 c01156c:	d811883a 	mov	r8,sp
 c011570:	003d9906 	br	c010bd8 <__alt_data_end+0xfc010bd8>
 c011574:	10803fcc 	andi	r2,r2,255
 c011578:	1000251e 	bne	r2,zero,c011610 <___vfiprintf_internal_r+0xf54>
 c01157c:	a880004c 	andi	r2,r21,1
 c011580:	10007826 	beq	r2,zero,c011764 <___vfiprintf_internal_r+0x10a8>
 c011584:	00800c04 	movi	r2,48
 c011588:	d8c109c4 	addi	r3,sp,1063
 c01158c:	d88109c5 	stb	r2,1063(sp)
 c011590:	dc412717 	ldw	r17,1180(sp)
 c011594:	d8c12415 	stw	r3,1168(sp)
 c011598:	003d4406 	br	c010aac <__alt_data_end+0xfc010aac>
 c01159c:	d9012617 	ldw	r4,1176(sp)
 c0115a0:	dc410a04 	addi	r17,sp,1064
 c0115a4:	908003cc 	andi	r2,r18,15
 c0115a8:	b006973a 	slli	r3,r22,28
 c0115ac:	2085883a 	add	r2,r4,r2
 c0115b0:	9024d13a 	srli	r18,r18,4
 c0115b4:	10800003 	ldbu	r2,0(r2)
 c0115b8:	b02cd13a 	srli	r22,r22,4
 c0115bc:	8c7fffc4 	addi	r17,r17,-1
 c0115c0:	1ca4b03a 	or	r18,r3,r18
 c0115c4:	88800005 	stb	r2,0(r17)
 c0115c8:	9584b03a 	or	r2,r18,r22
 c0115cc:	103ff51e 	bne	r2,zero,c0115a4 <__alt_data_end+0xfc0115a4>
 c0115d0:	dac11e17 	ldw	r11,1144(sp)
 c0115d4:	dc412415 	stw	r17,1168(sp)
 c0115d8:	5c63c83a 	sub	r17,r11,r17
 c0115dc:	003d3306 	br	c010aac <__alt_data_end+0xfc010aac>
 c0115e0:	1800941e 	bne	r3,zero,c011834 <___vfiprintf_internal_r+0x1178>
 c0115e4:	d8811d87 	ldb	r2,1142(sp)
 c0115e8:	10006b26 	beq	r2,zero,c011798 <___vfiprintf_internal_r+0x10dc>
 c0115ec:	00c00044 	movi	r3,1
 c0115f0:	d9011d84 	addi	r4,sp,1142
 c0115f4:	1805883a 	mov	r2,r3
 c0115f8:	d9000015 	stw	r4,0(sp)
 c0115fc:	d8c00115 	stw	r3,4(sp)
 c011600:	d811883a 	mov	r8,sp
 c011604:	003f2306 	br	c011294 <__alt_data_end+0xfc011294>
 c011608:	8023883a 	mov	r17,r16
 c01160c:	003c7d06 	br	c010804 <__alt_data_end+0xfc010804>
 c011610:	da810a04 	addi	r10,sp,1064
 c011614:	da812415 	stw	r10,1168(sp)
 c011618:	003d2406 	br	c010aac <__alt_data_end+0xfc010aac>
 c01161c:	d9012017 	ldw	r4,1152(sp)
 c011620:	a00b883a 	mov	r5,r20
 c011624:	d9811a04 	addi	r6,sp,1128
 c011628:	c0105a80 	call	c0105a8 <__sprint_r.part.0>
 c01162c:	103f5d1e 	bne	r2,zero,c0113a4 <__alt_data_end+0xfc0113a4>
 c011630:	d8c11c17 	ldw	r3,1136(sp)
 c011634:	d811883a 	mov	r8,sp
 c011638:	003f7306 	br	c011408 <__alt_data_end+0xfc011408>
 c01163c:	1c800017 	ldw	r18,0(r3)
 c011640:	dac12117 	ldw	r11,1156(sp)
 c011644:	902dd7fa 	srai	r22,r18,31
 c011648:	5ac00104 	addi	r11,r11,4
 c01164c:	dac12115 	stw	r11,1156(sp)
 c011650:	b005883a 	mov	r2,r22
 c011654:	003e5406 	br	c010fa8 <__alt_data_end+0xfc010fa8>
 c011658:	00800084 	movi	r2,2
 c01165c:	9588b03a 	or	r4,r18,r22
 c011660:	003cf506 	br	c010a38 <__alt_data_end+0xfc010a38>
 c011664:	d9012017 	ldw	r4,1152(sp)
 c011668:	a00b883a 	mov	r5,r20
 c01166c:	d9811a04 	addi	r6,sp,1128
 c011670:	c0105a80 	call	c0105a8 <__sprint_r.part.0>
 c011674:	103f4b1e 	bne	r2,zero,c0113a4 <__alt_data_end+0xfc0113a4>
 c011678:	d811883a 	mov	r8,sp
 c01167c:	003cd106 	br	c0109c4 <__alt_data_end+0xfc0109c4>
 c011680:	000b883a 	mov	r5,zero
 c011684:	2005883a 	mov	r2,r4
 c011688:	d811883a 	mov	r8,sp
 c01168c:	003d5206 	br	c010bd8 <__alt_data_end+0xfc010bd8>
 c011690:	10803fcc 	andi	r2,r2,255
 c011694:	1080201c 	xori	r2,r2,128
 c011698:	10bfe004 	addi	r2,r2,-128
 c01169c:	01000c04 	movi	r4,48
 c0116a0:	11008e26 	beq	r2,r4,c0118dc <___vfiprintf_internal_r+0x1220>
 c0116a4:	da812417 	ldw	r10,1168(sp)
 c0116a8:	dac11e17 	ldw	r11,1144(sp)
 c0116ac:	193fffc5 	stb	r4,-1(r3)
 c0116b0:	52bfffc4 	addi	r10,r10,-1
 c0116b4:	da812415 	stw	r10,1168(sp)
 c0116b8:	5aa3c83a 	sub	r17,r11,r10
 c0116bc:	003cfb06 	br	c010aac <__alt_data_end+0xfc010aac>
 c0116c0:	d9012017 	ldw	r4,1152(sp)
 c0116c4:	a00b883a 	mov	r5,r20
 c0116c8:	d9811a04 	addi	r6,sp,1128
 c0116cc:	da412b15 	stw	r9,1196(sp)
 c0116d0:	c0105a80 	call	c0105a8 <__sprint_r.part.0>
 c0116d4:	da412b17 	ldw	r9,1196(sp)
 c0116d8:	103f321e 	bne	r2,zero,c0113a4 <__alt_data_end+0xfc0113a4>
 c0116dc:	d9411b17 	ldw	r5,1132(sp)
 c0116e0:	d8c11c17 	ldw	r3,1136(sp)
 c0116e4:	d811883a 	mov	r8,sp
 c0116e8:	28800044 	addi	r2,r5,1
 c0116ec:	003d3a06 	br	c010bd8 <__alt_data_end+0xfc010bd8>
 c0116f0:	d9012017 	ldw	r4,1152(sp)
 c0116f4:	a00b883a 	mov	r5,r20
 c0116f8:	d9811a04 	addi	r6,sp,1128
 c0116fc:	da412b15 	stw	r9,1196(sp)
 c011700:	db812a15 	stw	r14,1192(sp)
 c011704:	c0105a80 	call	c0105a8 <__sprint_r.part.0>
 c011708:	da412b17 	ldw	r9,1196(sp)
 c01170c:	db812a17 	ldw	r14,1192(sp)
 c011710:	103f241e 	bne	r2,zero,c0113a4 <__alt_data_end+0xfc0113a4>
 c011714:	d9411b17 	ldw	r5,1132(sp)
 c011718:	d8c11c17 	ldw	r3,1136(sp)
 c01171c:	d811883a 	mov	r8,sp
 c011720:	28800044 	addi	r2,r5,1
 c011724:	003d1f06 	br	c010ba4 <__alt_data_end+0xfc010ba4>
 c011728:	1800781e 	bne	r3,zero,c01190c <___vfiprintf_internal_r+0x1250>
 c01172c:	000b883a 	mov	r5,zero
 c011730:	00800044 	movi	r2,1
 c011734:	d811883a 	mov	r8,sp
 c011738:	003d2906 	br	c010be0 <__alt_data_end+0xfc010be0>
 c01173c:	d9012017 	ldw	r4,1152(sp)
 c011740:	a00b883a 	mov	r5,r20
 c011744:	d9811a04 	addi	r6,sp,1128
 c011748:	c0105a80 	call	c0105a8 <__sprint_r.part.0>
 c01174c:	103f151e 	bne	r2,zero,c0113a4 <__alt_data_end+0xfc0113a4>
 c011750:	d8811b17 	ldw	r2,1132(sp)
 c011754:	d8c11c17 	ldw	r3,1136(sp)
 c011758:	d811883a 	mov	r8,sp
 c01175c:	10800044 	addi	r2,r2,1
 c011760:	003d4406 	br	c010c74 <__alt_data_end+0xfc010c74>
 c011764:	dac10a04 	addi	r11,sp,1064
 c011768:	dac12415 	stw	r11,1168(sp)
 c01176c:	003ccf06 	br	c010aac <__alt_data_end+0xfc010aac>
 c011770:	04a5c83a 	sub	r18,zero,r18
 c011774:	9004c03a 	cmpne	r2,r18,zero
 c011778:	05adc83a 	sub	r22,zero,r22
 c01177c:	b0adc83a 	sub	r22,r22,r2
 c011780:	03000b44 	movi	r12,45
 c011784:	db011d85 	stb	r12,1142(sp)
 c011788:	4823883a 	mov	r17,r9
 c01178c:	00800044 	movi	r2,1
 c011790:	9588b03a 	or	r4,r18,r22
 c011794:	003cab06 	br	c010a44 <__alt_data_end+0xfc010a44>
 c011798:	000b883a 	mov	r5,zero
 c01179c:	00800044 	movi	r2,1
 c0117a0:	d811883a 	mov	r8,sp
 c0117a4:	703d0c26 	beq	r14,zero,c010bd8 <__alt_data_end+0xfc010bd8>
 c0117a8:	00c00084 	movi	r3,2
 c0117ac:	d9011d04 	addi	r4,sp,1140
 c0117b0:	d9000015 	stw	r4,0(sp)
 c0117b4:	d8c00115 	stw	r3,4(sp)
 c0117b8:	003d0406 	br	c010bcc <__alt_data_end+0xfc010bcc>
 c0117bc:	80c00007 	ldb	r3,0(r16)
 c0117c0:	003c1d06 	br	c010838 <__alt_data_end+0xfc010838>
 c0117c4:	a880040c 	andi	r2,r21,16
 c0117c8:	1000091e 	bne	r2,zero,c0117f0 <___vfiprintf_internal_r+0x1134>
 c0117cc:	aac0100c 	andi	r11,r21,64
 c0117d0:	58000726 	beq	r11,zero,c0117f0 <___vfiprintf_internal_r+0x1134>
 c0117d4:	da812117 	ldw	r10,1156(sp)
 c0117d8:	dac12217 	ldw	r11,1160(sp)
 c0117dc:	50800017 	ldw	r2,0(r10)
 c0117e0:	52800104 	addi	r10,r10,4
 c0117e4:	da812115 	stw	r10,1156(sp)
 c0117e8:	12c0000d 	sth	r11,0(r2)
 c0117ec:	003be806 	br	c010790 <__alt_data_end+0xfc010790>
 c0117f0:	da812117 	ldw	r10,1156(sp)
 c0117f4:	dac12217 	ldw	r11,1160(sp)
 c0117f8:	50800017 	ldw	r2,0(r10)
 c0117fc:	52800104 	addi	r10,r10,4
 c011800:	da812115 	stw	r10,1156(sp)
 c011804:	12c00015 	stw	r11,0(r2)
 c011808:	003be106 	br	c010790 <__alt_data_end+0xfc010790>
 c01180c:	00800084 	movi	r2,2
 c011810:	003c8906 	br	c010a38 <__alt_data_end+0xfc010a38>
 c011814:	a900100c 	andi	r4,r21,64
 c011818:	20001f26 	beq	r4,zero,c011898 <___vfiprintf_internal_r+0x11dc>
 c01181c:	da812117 	ldw	r10,1156(sp)
 c011820:	1480000b 	ldhu	r18,0(r2)
 c011824:	002d883a 	mov	r22,zero
 c011828:	52800104 	addi	r10,r10,4
 c01182c:	da812115 	stw	r10,1156(sp)
 c011830:	003dae06 	br	c010eec <__alt_data_end+0xfc010eec>
 c011834:	d9012017 	ldw	r4,1152(sp)
 c011838:	a00b883a 	mov	r5,r20
 c01183c:	d9811a04 	addi	r6,sp,1128
 c011840:	da412b15 	stw	r9,1196(sp)
 c011844:	db812a15 	stw	r14,1192(sp)
 c011848:	c0105a80 	call	c0105a8 <__sprint_r.part.0>
 c01184c:	da412b17 	ldw	r9,1196(sp)
 c011850:	db812a17 	ldw	r14,1192(sp)
 c011854:	103ed31e 	bne	r2,zero,c0113a4 <__alt_data_end+0xfc0113a4>
 c011858:	d9411b17 	ldw	r5,1132(sp)
 c01185c:	d8c11c17 	ldw	r3,1136(sp)
 c011860:	d811883a 	mov	r8,sp
 c011864:	28800044 	addi	r2,r5,1
 c011868:	003e7f06 	br	c011268 <__alt_data_end+0xfc011268>
 c01186c:	9825883a 	mov	r18,r19
 c011870:	003d3406 	br	c010d44 <__alt_data_end+0xfc010d44>
 c011874:	4823883a 	mov	r17,r9
 c011878:	003e0806 	br	c01109c <__alt_data_end+0xfc01109c>
 c01187c:	d9012017 	ldw	r4,1152(sp)
 c011880:	a00b883a 	mov	r5,r20
 c011884:	d9811a04 	addi	r6,sp,1128
 c011888:	c0105a80 	call	c0105a8 <__sprint_r.part.0>
 c01188c:	103ec51e 	bne	r2,zero,c0113a4 <__alt_data_end+0xfc0113a4>
 c011890:	d8c11c17 	ldw	r3,1136(sp)
 c011894:	003ee006 	br	c011418 <__alt_data_end+0xfc011418>
 c011898:	dac12117 	ldw	r11,1156(sp)
 c01189c:	14800017 	ldw	r18,0(r2)
 c0118a0:	002d883a 	mov	r22,zero
 c0118a4:	5ac00104 	addi	r11,r11,4
 c0118a8:	dac12115 	stw	r11,1156(sp)
 c0118ac:	003d8f06 	br	c010eec <__alt_data_end+0xfc010eec>
 c0118b0:	02c300b4 	movhi	r11,3074
 c0118b4:	5ac99e04 	addi	r11,r11,9848
 c0118b8:	dac12315 	stw	r11,1164(sp)
 c0118bc:	003ce306 	br	c010c4c <__alt_data_end+0xfc010c4c>
 c0118c0:	80c00043 	ldbu	r3,1(r16)
 c0118c4:	ad400814 	ori	r21,r21,32
 c0118c8:	84000044 	addi	r16,r16,1
 c0118cc:	18c03fcc 	andi	r3,r3,255
 c0118d0:	18c0201c 	xori	r3,r3,128
 c0118d4:	18ffe004 	addi	r3,r3,-128
 c0118d8:	003bd706 	br	c010838 <__alt_data_end+0xfc010838>
 c0118dc:	dac11e17 	ldw	r11,1144(sp)
 c0118e0:	d8c12417 	ldw	r3,1168(sp)
 c0118e4:	58e3c83a 	sub	r17,r11,r3
 c0118e8:	003c7006 	br	c010aac <__alt_data_end+0xfc010aac>
 c0118ec:	da012a15 	stw	r8,1192(sp)
 c0118f0:	c0099800 	call	c009980 <strlen>
 c0118f4:	1023883a 	mov	r17,r2
 c0118f8:	db011d83 	ldbu	r12,1142(sp)
 c0118fc:	dd812115 	stw	r22,1156(sp)
 c011900:	0013883a 	mov	r9,zero
 c011904:	da012a17 	ldw	r8,1192(sp)
 c011908:	003c6806 	br	c010aac <__alt_data_end+0xfc010aac>
 c01190c:	d9012017 	ldw	r4,1152(sp)
 c011910:	a00b883a 	mov	r5,r20
 c011914:	d9811a04 	addi	r6,sp,1128
 c011918:	da412b15 	stw	r9,1196(sp)
 c01191c:	c0105a80 	call	c0105a8 <__sprint_r.part.0>
 c011920:	da412b17 	ldw	r9,1196(sp)
 c011924:	103e9f1e 	bne	r2,zero,c0113a4 <__alt_data_end+0xfc0113a4>
 c011928:	d9411b17 	ldw	r5,1132(sp)
 c01192c:	d8c11c17 	ldw	r3,1136(sp)
 c011930:	d811883a 	mov	r8,sp
 c011934:	28800044 	addi	r2,r5,1
 c011938:	003ca906 	br	c010be0 <__alt_data_end+0xfc010be0>
 c01193c:	d9411b17 	ldw	r5,1132(sp)
 c011940:	010300b4 	movhi	r4,3074
 c011944:	2109a204 	addi	r4,r4,9864
 c011948:	d9012315 	stw	r4,1164(sp)
 c01194c:	29400044 	addi	r5,r5,1
 c011950:	003c8806 	br	c010b74 <__alt_data_end+0xfc010b74>
 c011954:	00800184 	movi	r2,6
 c011958:	1240012e 	bgeu	r2,r9,c011960 <___vfiprintf_internal_r+0x12a4>
 c01195c:	1013883a 	mov	r9,r2
 c011960:	4823883a 	mov	r17,r9
 c011964:	4825883a 	mov	r18,r9
 c011968:	48001516 	blt	r9,zero,c0119c0 <___vfiprintf_internal_r+0x1304>
 c01196c:	008300b4 	movhi	r2,3074
 c011970:	10894304 	addi	r2,r2,9484
 c011974:	dd812115 	stw	r22,1156(sp)
 c011978:	d8812415 	stw	r2,1168(sp)
 c01197c:	003d6f06 	br	c010f3c <__alt_data_end+0xfc010f3c>
 c011980:	d9411b17 	ldw	r5,1132(sp)
 c011984:	02c300b4 	movhi	r11,3074
 c011988:	5ac9a204 	addi	r11,r11,9864
 c01198c:	dac12315 	stw	r11,1164(sp)
 c011990:	29400044 	addi	r5,r5,1
 c011994:	003ce106 	br	c010d1c <__alt_data_end+0xfc010d1c>
 c011998:	010300b4 	movhi	r4,3074
 c01199c:	21099e04 	addi	r4,r4,9848
 c0119a0:	d9012315 	stw	r4,1164(sp)
 c0119a4:	1009883a 	mov	r4,r2
 c0119a8:	003eca06 	br	c0114d4 <__alt_data_end+0xfc0114d4>
 c0119ac:	4823883a 	mov	r17,r9
 c0119b0:	db011d83 	ldbu	r12,1142(sp)
 c0119b4:	dd812115 	stw	r22,1156(sp)
 c0119b8:	0013883a 	mov	r9,zero
 c0119bc:	003c3b06 	br	c010aac <__alt_data_end+0xfc010aac>
 c0119c0:	0025883a 	mov	r18,zero
 c0119c4:	003fe906 	br	c01196c <__alt_data_end+0xfc01196c>
 c0119c8:	dac12117 	ldw	r11,1156(sp)
 c0119cc:	8005883a 	mov	r2,r16
 c0119d0:	5021883a 	mov	r16,r10
 c0119d4:	5a400017 	ldw	r9,0(r11)
 c0119d8:	58c00104 	addi	r3,r11,4
 c0119dc:	d8c12115 	stw	r3,1156(sp)
 c0119e0:	48000a16 	blt	r9,zero,c011a0c <___vfiprintf_internal_r+0x1350>
 c0119e4:	10c00047 	ldb	r3,1(r2)
 c0119e8:	003b9306 	br	c010838 <__alt_data_end+0xfc010838>
 c0119ec:	043fffc4 	movi	r16,-1
 c0119f0:	003d0206 	br	c010dfc <__alt_data_end+0xfc010dfc>
 c0119f4:	94c0010e 	bge	r18,r19,c0119fc <___vfiprintf_internal_r+0x1340>
 c0119f8:	9825883a 	mov	r18,r19
 c0119fc:	da812217 	ldw	r10,1160(sp)
 c011a00:	5495883a 	add	r10,r10,r18
 c011a04:	da812215 	stw	r10,1160(sp)
 c011a08:	003cd106 	br	c010d50 <__alt_data_end+0xfc010d50>
 c011a0c:	027fffc4 	movi	r9,-1
 c011a10:	10c00047 	ldb	r3,1(r2)
 c011a14:	003b8806 	br	c010838 <__alt_data_end+0xfc010838>

0c011a18 <__vfiprintf_internal>:
 c011a18:	2007883a 	mov	r3,r4
 c011a1c:	010300b4 	movhi	r4,3074
 c011a20:	21107604 	addi	r4,r4,16856
 c011a24:	21000017 	ldw	r4,0(r4)
 c011a28:	2805883a 	mov	r2,r5
 c011a2c:	300f883a 	mov	r7,r6
 c011a30:	180b883a 	mov	r5,r3
 c011a34:	100d883a 	mov	r6,r2
 c011a38:	c0106bc1 	jmpi	c0106bc <___vfiprintf_internal_r>

0c011a3c <__swbuf_r>:
 c011a3c:	defffc04 	addi	sp,sp,-16
 c011a40:	dc800215 	stw	r18,8(sp)
 c011a44:	dc400115 	stw	r17,4(sp)
 c011a48:	dc000015 	stw	r16,0(sp)
 c011a4c:	dfc00315 	stw	ra,12(sp)
 c011a50:	2025883a 	mov	r18,r4
 c011a54:	2823883a 	mov	r17,r5
 c011a58:	3021883a 	mov	r16,r6
 c011a5c:	20000226 	beq	r4,zero,c011a68 <__swbuf_r+0x2c>
 c011a60:	20800e17 	ldw	r2,56(r4)
 c011a64:	10004126 	beq	r2,zero,c011b6c <__swbuf_r+0x130>
 c011a68:	80c00617 	ldw	r3,24(r16)
 c011a6c:	8180030b 	ldhu	r6,12(r16)
 c011a70:	80c00215 	stw	r3,8(r16)
 c011a74:	30c0020c 	andi	r3,r6,8
 c011a78:	18003526 	beq	r3,zero,c011b50 <__swbuf_r+0x114>
 c011a7c:	80c00417 	ldw	r3,16(r16)
 c011a80:	18003326 	beq	r3,zero,c011b50 <__swbuf_r+0x114>
 c011a84:	3088000c 	andi	r2,r6,8192
 c011a88:	8c403fcc 	andi	r17,r17,255
 c011a8c:	10001726 	beq	r2,zero,c011aec <__swbuf_r+0xb0>
 c011a90:	80800017 	ldw	r2,0(r16)
 c011a94:	81000517 	ldw	r4,20(r16)
 c011a98:	10c7c83a 	sub	r3,r2,r3
 c011a9c:	19001d0e 	bge	r3,r4,c011b14 <__swbuf_r+0xd8>
 c011aa0:	18c00044 	addi	r3,r3,1
 c011aa4:	81400217 	ldw	r5,8(r16)
 c011aa8:	11000044 	addi	r4,r2,1
 c011aac:	81000015 	stw	r4,0(r16)
 c011ab0:	297fffc4 	addi	r5,r5,-1
 c011ab4:	81400215 	stw	r5,8(r16)
 c011ab8:	14400005 	stb	r17,0(r2)
 c011abc:	80800517 	ldw	r2,20(r16)
 c011ac0:	10c01d26 	beq	r2,r3,c011b38 <__swbuf_r+0xfc>
 c011ac4:	8080030b 	ldhu	r2,12(r16)
 c011ac8:	1080004c 	andi	r2,r2,1
 c011acc:	1000181e 	bne	r2,zero,c011b30 <__swbuf_r+0xf4>
 c011ad0:	8805883a 	mov	r2,r17
 c011ad4:	dfc00317 	ldw	ra,12(sp)
 c011ad8:	dc800217 	ldw	r18,8(sp)
 c011adc:	dc400117 	ldw	r17,4(sp)
 c011ae0:	dc000017 	ldw	r16,0(sp)
 c011ae4:	dec00404 	addi	sp,sp,16
 c011ae8:	f800283a 	ret
 c011aec:	81001917 	ldw	r4,100(r16)
 c011af0:	00b7ffc4 	movi	r2,-8193
 c011af4:	31880014 	ori	r6,r6,8192
 c011af8:	2084703a 	and	r2,r4,r2
 c011afc:	80801915 	stw	r2,100(r16)
 c011b00:	80800017 	ldw	r2,0(r16)
 c011b04:	81000517 	ldw	r4,20(r16)
 c011b08:	8180030d 	sth	r6,12(r16)
 c011b0c:	10c7c83a 	sub	r3,r2,r3
 c011b10:	193fe316 	blt	r3,r4,c011aa0 <__alt_data_end+0xfc011aa0>
 c011b14:	9009883a 	mov	r4,r18
 c011b18:	800b883a 	mov	r5,r16
 c011b1c:	c00d4c40 	call	c00d4c4 <_fflush_r>
 c011b20:	1000091e 	bne	r2,zero,c011b48 <__swbuf_r+0x10c>
 c011b24:	80800017 	ldw	r2,0(r16)
 c011b28:	00c00044 	movi	r3,1
 c011b2c:	003fdd06 	br	c011aa4 <__alt_data_end+0xfc011aa4>
 c011b30:	00800284 	movi	r2,10
 c011b34:	88bfe61e 	bne	r17,r2,c011ad0 <__alt_data_end+0xfc011ad0>
 c011b38:	9009883a 	mov	r4,r18
 c011b3c:	800b883a 	mov	r5,r16
 c011b40:	c00d4c40 	call	c00d4c4 <_fflush_r>
 c011b44:	103fe226 	beq	r2,zero,c011ad0 <__alt_data_end+0xfc011ad0>
 c011b48:	00bfffc4 	movi	r2,-1
 c011b4c:	003fe106 	br	c011ad4 <__alt_data_end+0xfc011ad4>
 c011b50:	9009883a 	mov	r4,r18
 c011b54:	800b883a 	mov	r5,r16
 c011b58:	c00ba540 	call	c00ba54 <__swsetup_r>
 c011b5c:	1000051e 	bne	r2,zero,c011b74 <__swbuf_r+0x138>
 c011b60:	8180030b 	ldhu	r6,12(r16)
 c011b64:	80c00417 	ldw	r3,16(r16)
 c011b68:	003fc606 	br	c011a84 <__alt_data_end+0xfc011a84>
 c011b6c:	c00da6c0 	call	c00da6c <__sinit>
 c011b70:	003fbd06 	br	c011a68 <__alt_data_end+0xfc011a68>
 c011b74:	80c0030b 	ldhu	r3,12(r16)
 c011b78:	00bfffc4 	movi	r2,-1
 c011b7c:	18c01014 	ori	r3,r3,64
 c011b80:	80c0030d 	sth	r3,12(r16)
 c011b84:	00c00244 	movi	r3,9
 c011b88:	90c00015 	stw	r3,0(r18)
 c011b8c:	003fd106 	br	c011ad4 <__alt_data_end+0xfc011ad4>

0c011b90 <__swbuf>:
 c011b90:	00c300b4 	movhi	r3,3074
 c011b94:	18d07604 	addi	r3,r3,16856
 c011b98:	2005883a 	mov	r2,r4
 c011b9c:	19000017 	ldw	r4,0(r3)
 c011ba0:	280d883a 	mov	r6,r5
 c011ba4:	100b883a 	mov	r5,r2
 c011ba8:	c011a3c1 	jmpi	c011a3c <__swbuf_r>

0c011bac <_write_r>:
 c011bac:	defffd04 	addi	sp,sp,-12
 c011bb0:	dc000015 	stw	r16,0(sp)
 c011bb4:	040300b4 	movhi	r16,3074
 c011bb8:	dc400115 	stw	r17,4(sp)
 c011bbc:	84175604 	addi	r16,r16,23896
 c011bc0:	2023883a 	mov	r17,r4
 c011bc4:	2809883a 	mov	r4,r5
 c011bc8:	300b883a 	mov	r5,r6
 c011bcc:	380d883a 	mov	r6,r7
 c011bd0:	dfc00215 	stw	ra,8(sp)
 c011bd4:	80000015 	stw	zero,0(r16)
 c011bd8:	c01569c0 	call	c01569c <write>
 c011bdc:	00ffffc4 	movi	r3,-1
 c011be0:	10c00526 	beq	r2,r3,c011bf8 <_write_r+0x4c>
 c011be4:	dfc00217 	ldw	ra,8(sp)
 c011be8:	dc400117 	ldw	r17,4(sp)
 c011bec:	dc000017 	ldw	r16,0(sp)
 c011bf0:	dec00304 	addi	sp,sp,12
 c011bf4:	f800283a 	ret
 c011bf8:	80c00017 	ldw	r3,0(r16)
 c011bfc:	183ff926 	beq	r3,zero,c011be4 <__alt_data_end+0xfc011be4>
 c011c00:	88c00015 	stw	r3,0(r17)
 c011c04:	003ff706 	br	c011be4 <__alt_data_end+0xfc011be4>

0c011c08 <_close_r>:
 c011c08:	defffd04 	addi	sp,sp,-12
 c011c0c:	dc000015 	stw	r16,0(sp)
 c011c10:	040300b4 	movhi	r16,3074
 c011c14:	dc400115 	stw	r17,4(sp)
 c011c18:	84175604 	addi	r16,r16,23896
 c011c1c:	2023883a 	mov	r17,r4
 c011c20:	2809883a 	mov	r4,r5
 c011c24:	dfc00215 	stw	ra,8(sp)
 c011c28:	80000015 	stw	zero,0(r16)
 c011c2c:	c014a8c0 	call	c014a8c <close>
 c011c30:	00ffffc4 	movi	r3,-1
 c011c34:	10c00526 	beq	r2,r3,c011c4c <_close_r+0x44>
 c011c38:	dfc00217 	ldw	ra,8(sp)
 c011c3c:	dc400117 	ldw	r17,4(sp)
 c011c40:	dc000017 	ldw	r16,0(sp)
 c011c44:	dec00304 	addi	sp,sp,12
 c011c48:	f800283a 	ret
 c011c4c:	80c00017 	ldw	r3,0(r16)
 c011c50:	183ff926 	beq	r3,zero,c011c38 <__alt_data_end+0xfc011c38>
 c011c54:	88c00015 	stw	r3,0(r17)
 c011c58:	003ff706 	br	c011c38 <__alt_data_end+0xfc011c38>

0c011c5c <_calloc_r>:
 c011c5c:	298b383a 	mul	r5,r5,r6
 c011c60:	defffe04 	addi	sp,sp,-8
 c011c64:	dc000015 	stw	r16,0(sp)
 c011c68:	dfc00115 	stw	ra,4(sp)
 c011c6c:	c008dd40 	call	c008dd4 <_malloc_r>
 c011c70:	1021883a 	mov	r16,r2
 c011c74:	10002826 	beq	r2,zero,c011d18 <_calloc_r+0xbc>
 c011c78:	11bfff17 	ldw	r6,-4(r2)
 c011c7c:	00bfff04 	movi	r2,-4
 c011c80:	00c00904 	movi	r3,36
 c011c84:	308c703a 	and	r6,r6,r2
 c011c88:	308d883a 	add	r6,r6,r2
 c011c8c:	19801436 	bltu	r3,r6,c011ce0 <_calloc_r+0x84>
 c011c90:	008004c4 	movi	r2,19
 c011c94:	11800936 	bltu	r2,r6,c011cbc <_calloc_r+0x60>
 c011c98:	8005883a 	mov	r2,r16
 c011c9c:	10000015 	stw	zero,0(r2)
 c011ca0:	10000115 	stw	zero,4(r2)
 c011ca4:	10000215 	stw	zero,8(r2)
 c011ca8:	8005883a 	mov	r2,r16
 c011cac:	dfc00117 	ldw	ra,4(sp)
 c011cb0:	dc000017 	ldw	r16,0(sp)
 c011cb4:	dec00204 	addi	sp,sp,8
 c011cb8:	f800283a 	ret
 c011cbc:	80000015 	stw	zero,0(r16)
 c011cc0:	80000115 	stw	zero,4(r16)
 c011cc4:	008006c4 	movi	r2,27
 c011cc8:	11800d2e 	bgeu	r2,r6,c011d00 <_calloc_r+0xa4>
 c011ccc:	80000215 	stw	zero,8(r16)
 c011cd0:	80000315 	stw	zero,12(r16)
 c011cd4:	30c00c26 	beq	r6,r3,c011d08 <_calloc_r+0xac>
 c011cd8:	80800404 	addi	r2,r16,16
 c011cdc:	003fef06 	br	c011c9c <__alt_data_end+0xfc011c9c>
 c011ce0:	8009883a 	mov	r4,r16
 c011ce4:	000b883a 	mov	r5,zero
 c011ce8:	c0096b40 	call	c0096b4 <memset>
 c011cec:	8005883a 	mov	r2,r16
 c011cf0:	dfc00117 	ldw	ra,4(sp)
 c011cf4:	dc000017 	ldw	r16,0(sp)
 c011cf8:	dec00204 	addi	sp,sp,8
 c011cfc:	f800283a 	ret
 c011d00:	80800204 	addi	r2,r16,8
 c011d04:	003fe506 	br	c011c9c <__alt_data_end+0xfc011c9c>
 c011d08:	80000415 	stw	zero,16(r16)
 c011d0c:	80800604 	addi	r2,r16,24
 c011d10:	80000515 	stw	zero,20(r16)
 c011d14:	003fe106 	br	c011c9c <__alt_data_end+0xfc011c9c>
 c011d18:	0005883a 	mov	r2,zero
 c011d1c:	003fe306 	br	c011cac <__alt_data_end+0xfc011cac>

0c011d20 <_fclose_r>:
 c011d20:	28003226 	beq	r5,zero,c011dec <_fclose_r+0xcc>
 c011d24:	defffc04 	addi	sp,sp,-16
 c011d28:	dc400115 	stw	r17,4(sp)
 c011d2c:	2023883a 	mov	r17,r4
 c011d30:	dc000015 	stw	r16,0(sp)
 c011d34:	dfc00315 	stw	ra,12(sp)
 c011d38:	dc800215 	stw	r18,8(sp)
 c011d3c:	2821883a 	mov	r16,r5
 c011d40:	c00da7c0 	call	c00da7c <__sfp_lock_acquire>
 c011d44:	88000226 	beq	r17,zero,c011d50 <_fclose_r+0x30>
 c011d48:	88800e17 	ldw	r2,56(r17)
 c011d4c:	10002926 	beq	r2,zero,c011df4 <_fclose_r+0xd4>
 c011d50:	8080030f 	ldh	r2,12(r16)
 c011d54:	10002226 	beq	r2,zero,c011de0 <_fclose_r+0xc0>
 c011d58:	8809883a 	mov	r4,r17
 c011d5c:	800b883a 	mov	r5,r16
 c011d60:	c00d4c40 	call	c00d4c4 <_fflush_r>
 c011d64:	1025883a 	mov	r18,r2
 c011d68:	80800b17 	ldw	r2,44(r16)
 c011d6c:	10000426 	beq	r2,zero,c011d80 <_fclose_r+0x60>
 c011d70:	81400717 	ldw	r5,28(r16)
 c011d74:	8809883a 	mov	r4,r17
 c011d78:	103ee83a 	callr	r2
 c011d7c:	10002616 	blt	r2,zero,c011e18 <_fclose_r+0xf8>
 c011d80:	8080030b 	ldhu	r2,12(r16)
 c011d84:	1080200c 	andi	r2,r2,128
 c011d88:	10001f1e 	bne	r2,zero,c011e08 <_fclose_r+0xe8>
 c011d8c:	81400c17 	ldw	r5,48(r16)
 c011d90:	28000526 	beq	r5,zero,c011da8 <_fclose_r+0x88>
 c011d94:	80801004 	addi	r2,r16,64
 c011d98:	28800226 	beq	r5,r2,c011da4 <_fclose_r+0x84>
 c011d9c:	8809883a 	mov	r4,r17
 c011da0:	c00dbe00 	call	c00dbe0 <_free_r>
 c011da4:	80000c15 	stw	zero,48(r16)
 c011da8:	81401117 	ldw	r5,68(r16)
 c011dac:	28000326 	beq	r5,zero,c011dbc <_fclose_r+0x9c>
 c011db0:	8809883a 	mov	r4,r17
 c011db4:	c00dbe00 	call	c00dbe0 <_free_r>
 c011db8:	80001115 	stw	zero,68(r16)
 c011dbc:	8000030d 	sth	zero,12(r16)
 c011dc0:	c00da800 	call	c00da80 <__sfp_lock_release>
 c011dc4:	9005883a 	mov	r2,r18
 c011dc8:	dfc00317 	ldw	ra,12(sp)
 c011dcc:	dc800217 	ldw	r18,8(sp)
 c011dd0:	dc400117 	ldw	r17,4(sp)
 c011dd4:	dc000017 	ldw	r16,0(sp)
 c011dd8:	dec00404 	addi	sp,sp,16
 c011ddc:	f800283a 	ret
 c011de0:	c00da800 	call	c00da80 <__sfp_lock_release>
 c011de4:	0005883a 	mov	r2,zero
 c011de8:	003ff706 	br	c011dc8 <__alt_data_end+0xfc011dc8>
 c011dec:	0005883a 	mov	r2,zero
 c011df0:	f800283a 	ret
 c011df4:	8809883a 	mov	r4,r17
 c011df8:	c00da6c0 	call	c00da6c <__sinit>
 c011dfc:	8080030f 	ldh	r2,12(r16)
 c011e00:	103fd51e 	bne	r2,zero,c011d58 <__alt_data_end+0xfc011d58>
 c011e04:	003ff606 	br	c011de0 <__alt_data_end+0xfc011de0>
 c011e08:	81400417 	ldw	r5,16(r16)
 c011e0c:	8809883a 	mov	r4,r17
 c011e10:	c00dbe00 	call	c00dbe0 <_free_r>
 c011e14:	003fdd06 	br	c011d8c <__alt_data_end+0xfc011d8c>
 c011e18:	04bfffc4 	movi	r18,-1
 c011e1c:	003fd806 	br	c011d80 <__alt_data_end+0xfc011d80>

0c011e20 <fclose>:
 c011e20:	008300b4 	movhi	r2,3074
 c011e24:	10907604 	addi	r2,r2,16856
 c011e28:	200b883a 	mov	r5,r4
 c011e2c:	11000017 	ldw	r4,0(r2)
 c011e30:	c011d201 	jmpi	c011d20 <_fclose_r>

0c011e34 <_fputwc_r>:
 c011e34:	3080030b 	ldhu	r2,12(r6)
 c011e38:	defff804 	addi	sp,sp,-32
 c011e3c:	dcc00415 	stw	r19,16(sp)
 c011e40:	dc800315 	stw	r18,12(sp)
 c011e44:	dc000115 	stw	r16,4(sp)
 c011e48:	dfc00715 	stw	ra,28(sp)
 c011e4c:	dd400615 	stw	r21,24(sp)
 c011e50:	dd000515 	stw	r20,20(sp)
 c011e54:	dc400215 	stw	r17,8(sp)
 c011e58:	10c8000c 	andi	r3,r2,8192
 c011e5c:	3021883a 	mov	r16,r6
 c011e60:	2027883a 	mov	r19,r4
 c011e64:	2825883a 	mov	r18,r5
 c011e68:	1800051e 	bne	r3,zero,c011e80 <_fputwc_r+0x4c>
 c011e6c:	30c01917 	ldw	r3,100(r6)
 c011e70:	10880014 	ori	r2,r2,8192
 c011e74:	3080030d 	sth	r2,12(r6)
 c011e78:	18880014 	ori	r2,r3,8192
 c011e7c:	30801915 	stw	r2,100(r6)
 c011e80:	c00e56c0 	call	c00e56c <__locale_mb_cur_max>
 c011e84:	00c00044 	movi	r3,1
 c011e88:	10c03e26 	beq	r2,r3,c011f84 <_fputwc_r+0x150>
 c011e8c:	9809883a 	mov	r4,r19
 c011e90:	d80b883a 	mov	r5,sp
 c011e94:	900d883a 	mov	r6,r18
 c011e98:	81c01704 	addi	r7,r16,92
 c011e9c:	c0121740 	call	c012174 <_wcrtomb_r>
 c011ea0:	1029883a 	mov	r20,r2
 c011ea4:	00bfffc4 	movi	r2,-1
 c011ea8:	a0802026 	beq	r20,r2,c011f2c <_fputwc_r+0xf8>
 c011eac:	d9400003 	ldbu	r5,0(sp)
 c011eb0:	a0001c26 	beq	r20,zero,c011f24 <_fputwc_r+0xf0>
 c011eb4:	0023883a 	mov	r17,zero
 c011eb8:	05400284 	movi	r21,10
 c011ebc:	00000906 	br	c011ee4 <_fputwc_r+0xb0>
 c011ec0:	80800017 	ldw	r2,0(r16)
 c011ec4:	11400005 	stb	r5,0(r2)
 c011ec8:	80c00017 	ldw	r3,0(r16)
 c011ecc:	18c00044 	addi	r3,r3,1
 c011ed0:	80c00015 	stw	r3,0(r16)
 c011ed4:	8c400044 	addi	r17,r17,1
 c011ed8:	dc45883a 	add	r2,sp,r17
 c011edc:	8d00112e 	bgeu	r17,r20,c011f24 <_fputwc_r+0xf0>
 c011ee0:	11400003 	ldbu	r5,0(r2)
 c011ee4:	80c00217 	ldw	r3,8(r16)
 c011ee8:	18ffffc4 	addi	r3,r3,-1
 c011eec:	80c00215 	stw	r3,8(r16)
 c011ef0:	183ff30e 	bge	r3,zero,c011ec0 <__alt_data_end+0xfc011ec0>
 c011ef4:	80800617 	ldw	r2,24(r16)
 c011ef8:	18801916 	blt	r3,r2,c011f60 <_fputwc_r+0x12c>
 c011efc:	80800017 	ldw	r2,0(r16)
 c011f00:	11400005 	stb	r5,0(r2)
 c011f04:	80800017 	ldw	r2,0(r16)
 c011f08:	10c00003 	ldbu	r3,0(r2)
 c011f0c:	10800044 	addi	r2,r2,1
 c011f10:	1d402326 	beq	r3,r21,c011fa0 <_fputwc_r+0x16c>
 c011f14:	80800015 	stw	r2,0(r16)
 c011f18:	8c400044 	addi	r17,r17,1
 c011f1c:	dc45883a 	add	r2,sp,r17
 c011f20:	8d3fef36 	bltu	r17,r20,c011ee0 <__alt_data_end+0xfc011ee0>
 c011f24:	9005883a 	mov	r2,r18
 c011f28:	00000406 	br	c011f3c <_fputwc_r+0x108>
 c011f2c:	80c0030b 	ldhu	r3,12(r16)
 c011f30:	a005883a 	mov	r2,r20
 c011f34:	18c01014 	ori	r3,r3,64
 c011f38:	80c0030d 	sth	r3,12(r16)
 c011f3c:	dfc00717 	ldw	ra,28(sp)
 c011f40:	dd400617 	ldw	r21,24(sp)
 c011f44:	dd000517 	ldw	r20,20(sp)
 c011f48:	dcc00417 	ldw	r19,16(sp)
 c011f4c:	dc800317 	ldw	r18,12(sp)
 c011f50:	dc400217 	ldw	r17,8(sp)
 c011f54:	dc000117 	ldw	r16,4(sp)
 c011f58:	dec00804 	addi	sp,sp,32
 c011f5c:	f800283a 	ret
 c011f60:	9809883a 	mov	r4,r19
 c011f64:	29403fcc 	andi	r5,r5,255
 c011f68:	800d883a 	mov	r6,r16
 c011f6c:	c011a3c0 	call	c011a3c <__swbuf_r>
 c011f70:	10bfffe0 	cmpeqi	r2,r2,-1
 c011f74:	10803fcc 	andi	r2,r2,255
 c011f78:	103fd626 	beq	r2,zero,c011ed4 <__alt_data_end+0xfc011ed4>
 c011f7c:	00bfffc4 	movi	r2,-1
 c011f80:	003fee06 	br	c011f3c <__alt_data_end+0xfc011f3c>
 c011f84:	90ffffc4 	addi	r3,r18,-1
 c011f88:	01003f84 	movi	r4,254
 c011f8c:	20ffbf36 	bltu	r4,r3,c011e8c <__alt_data_end+0xfc011e8c>
 c011f90:	900b883a 	mov	r5,r18
 c011f94:	dc800005 	stb	r18,0(sp)
 c011f98:	1029883a 	mov	r20,r2
 c011f9c:	003fc506 	br	c011eb4 <__alt_data_end+0xfc011eb4>
 c011fa0:	9809883a 	mov	r4,r19
 c011fa4:	a80b883a 	mov	r5,r21
 c011fa8:	800d883a 	mov	r6,r16
 c011fac:	c011a3c0 	call	c011a3c <__swbuf_r>
 c011fb0:	10bfffe0 	cmpeqi	r2,r2,-1
 c011fb4:	003fef06 	br	c011f74 <__alt_data_end+0xfc011f74>

0c011fb8 <fputwc>:
 c011fb8:	defffc04 	addi	sp,sp,-16
 c011fbc:	dc000115 	stw	r16,4(sp)
 c011fc0:	040300b4 	movhi	r16,3074
 c011fc4:	84107604 	addi	r16,r16,16856
 c011fc8:	dc400215 	stw	r17,8(sp)
 c011fcc:	2023883a 	mov	r17,r4
 c011fd0:	81000017 	ldw	r4,0(r16)
 c011fd4:	dfc00315 	stw	ra,12(sp)
 c011fd8:	280d883a 	mov	r6,r5
 c011fdc:	20000626 	beq	r4,zero,c011ff8 <fputwc+0x40>
 c011fe0:	20800e17 	ldw	r2,56(r4)
 c011fe4:	1000041e 	bne	r2,zero,c011ff8 <fputwc+0x40>
 c011fe8:	d9400015 	stw	r5,0(sp)
 c011fec:	c00da6c0 	call	c00da6c <__sinit>
 c011ff0:	81000017 	ldw	r4,0(r16)
 c011ff4:	d9800017 	ldw	r6,0(sp)
 c011ff8:	880b883a 	mov	r5,r17
 c011ffc:	dfc00317 	ldw	ra,12(sp)
 c012000:	dc400217 	ldw	r17,8(sp)
 c012004:	dc000117 	ldw	r16,4(sp)
 c012008:	dec00404 	addi	sp,sp,16
 c01200c:	c011e341 	jmpi	c011e34 <_fputwc_r>

0c012010 <_fstat_r>:
 c012010:	defffd04 	addi	sp,sp,-12
 c012014:	dc000015 	stw	r16,0(sp)
 c012018:	040300b4 	movhi	r16,3074
 c01201c:	dc400115 	stw	r17,4(sp)
 c012020:	84175604 	addi	r16,r16,23896
 c012024:	2023883a 	mov	r17,r4
 c012028:	2809883a 	mov	r4,r5
 c01202c:	300b883a 	mov	r5,r6
 c012030:	dfc00215 	stw	ra,8(sp)
 c012034:	80000015 	stw	zero,0(r16)
 c012038:	c014c0c0 	call	c014c0c <fstat>
 c01203c:	00ffffc4 	movi	r3,-1
 c012040:	10c00526 	beq	r2,r3,c012058 <_fstat_r+0x48>
 c012044:	dfc00217 	ldw	ra,8(sp)
 c012048:	dc400117 	ldw	r17,4(sp)
 c01204c:	dc000017 	ldw	r16,0(sp)
 c012050:	dec00304 	addi	sp,sp,12
 c012054:	f800283a 	ret
 c012058:	80c00017 	ldw	r3,0(r16)
 c01205c:	183ff926 	beq	r3,zero,c012044 <__alt_data_end+0xfc012044>
 c012060:	88c00015 	stw	r3,0(r17)
 c012064:	003ff706 	br	c012044 <__alt_data_end+0xfc012044>

0c012068 <_isatty_r>:
 c012068:	defffd04 	addi	sp,sp,-12
 c01206c:	dc000015 	stw	r16,0(sp)
 c012070:	040300b4 	movhi	r16,3074
 c012074:	dc400115 	stw	r17,4(sp)
 c012078:	84175604 	addi	r16,r16,23896
 c01207c:	2023883a 	mov	r17,r4
 c012080:	2809883a 	mov	r4,r5
 c012084:	dfc00215 	stw	ra,8(sp)
 c012088:	80000015 	stw	zero,0(r16)
 c01208c:	c014edc0 	call	c014edc <isatty>
 c012090:	00ffffc4 	movi	r3,-1
 c012094:	10c00526 	beq	r2,r3,c0120ac <_isatty_r+0x44>
 c012098:	dfc00217 	ldw	ra,8(sp)
 c01209c:	dc400117 	ldw	r17,4(sp)
 c0120a0:	dc000017 	ldw	r16,0(sp)
 c0120a4:	dec00304 	addi	sp,sp,12
 c0120a8:	f800283a 	ret
 c0120ac:	80c00017 	ldw	r3,0(r16)
 c0120b0:	183ff926 	beq	r3,zero,c012098 <__alt_data_end+0xfc012098>
 c0120b4:	88c00015 	stw	r3,0(r17)
 c0120b8:	003ff706 	br	c012098 <__alt_data_end+0xfc012098>

0c0120bc <_lseek_r>:
 c0120bc:	defffd04 	addi	sp,sp,-12
 c0120c0:	dc000015 	stw	r16,0(sp)
 c0120c4:	040300b4 	movhi	r16,3074
 c0120c8:	dc400115 	stw	r17,4(sp)
 c0120cc:	84175604 	addi	r16,r16,23896
 c0120d0:	2023883a 	mov	r17,r4
 c0120d4:	2809883a 	mov	r4,r5
 c0120d8:	300b883a 	mov	r5,r6
 c0120dc:	380d883a 	mov	r6,r7
 c0120e0:	dfc00215 	stw	ra,8(sp)
 c0120e4:	80000015 	stw	zero,0(r16)
 c0120e8:	c0152340 	call	c015234 <lseek>
 c0120ec:	00ffffc4 	movi	r3,-1
 c0120f0:	10c00526 	beq	r2,r3,c012108 <_lseek_r+0x4c>
 c0120f4:	dfc00217 	ldw	ra,8(sp)
 c0120f8:	dc400117 	ldw	r17,4(sp)
 c0120fc:	dc000017 	ldw	r16,0(sp)
 c012100:	dec00304 	addi	sp,sp,12
 c012104:	f800283a 	ret
 c012108:	80c00017 	ldw	r3,0(r16)
 c01210c:	183ff926 	beq	r3,zero,c0120f4 <__alt_data_end+0xfc0120f4>
 c012110:	88c00015 	stw	r3,0(r17)
 c012114:	003ff706 	br	c0120f4 <__alt_data_end+0xfc0120f4>

0c012118 <_read_r>:
 c012118:	defffd04 	addi	sp,sp,-12
 c01211c:	dc000015 	stw	r16,0(sp)
 c012120:	040300b4 	movhi	r16,3074
 c012124:	dc400115 	stw	r17,4(sp)
 c012128:	84175604 	addi	r16,r16,23896
 c01212c:	2023883a 	mov	r17,r4
 c012130:	2809883a 	mov	r4,r5
 c012134:	300b883a 	mov	r5,r6
 c012138:	380d883a 	mov	r6,r7
 c01213c:	dfc00215 	stw	ra,8(sp)
 c012140:	80000015 	stw	zero,0(r16)
 c012144:	c0154100 	call	c015410 <read>
 c012148:	00ffffc4 	movi	r3,-1
 c01214c:	10c00526 	beq	r2,r3,c012164 <_read_r+0x4c>
 c012150:	dfc00217 	ldw	ra,8(sp)
 c012154:	dc400117 	ldw	r17,4(sp)
 c012158:	dc000017 	ldw	r16,0(sp)
 c01215c:	dec00304 	addi	sp,sp,12
 c012160:	f800283a 	ret
 c012164:	80c00017 	ldw	r3,0(r16)
 c012168:	183ff926 	beq	r3,zero,c012150 <__alt_data_end+0xfc012150>
 c01216c:	88c00015 	stw	r3,0(r17)
 c012170:	003ff706 	br	c012150 <__alt_data_end+0xfc012150>

0c012174 <_wcrtomb_r>:
 c012174:	defff604 	addi	sp,sp,-40
 c012178:	008300b4 	movhi	r2,3074
 c01217c:	dc800815 	stw	r18,32(sp)
 c012180:	dc400715 	stw	r17,28(sp)
 c012184:	dc000615 	stw	r16,24(sp)
 c012188:	10907a04 	addi	r2,r2,16872
 c01218c:	dfc00915 	stw	ra,36(sp)
 c012190:	2021883a 	mov	r16,r4
 c012194:	3823883a 	mov	r17,r7
 c012198:	14800017 	ldw	r18,0(r2)
 c01219c:	28001426 	beq	r5,zero,c0121f0 <_wcrtomb_r+0x7c>
 c0121a0:	d9400415 	stw	r5,16(sp)
 c0121a4:	d9800515 	stw	r6,20(sp)
 c0121a8:	c00e5600 	call	c00e560 <__locale_charset>
 c0121ac:	d9400417 	ldw	r5,16(sp)
 c0121b0:	d9800517 	ldw	r6,20(sp)
 c0121b4:	8009883a 	mov	r4,r16
 c0121b8:	dc400015 	stw	r17,0(sp)
 c0121bc:	100f883a 	mov	r7,r2
 c0121c0:	903ee83a 	callr	r18
 c0121c4:	00ffffc4 	movi	r3,-1
 c0121c8:	10c0031e 	bne	r2,r3,c0121d8 <_wcrtomb_r+0x64>
 c0121cc:	88000015 	stw	zero,0(r17)
 c0121d0:	00c02284 	movi	r3,138
 c0121d4:	80c00015 	stw	r3,0(r16)
 c0121d8:	dfc00917 	ldw	ra,36(sp)
 c0121dc:	dc800817 	ldw	r18,32(sp)
 c0121e0:	dc400717 	ldw	r17,28(sp)
 c0121e4:	dc000617 	ldw	r16,24(sp)
 c0121e8:	dec00a04 	addi	sp,sp,40
 c0121ec:	f800283a 	ret
 c0121f0:	c00e5600 	call	c00e560 <__locale_charset>
 c0121f4:	8009883a 	mov	r4,r16
 c0121f8:	dc400015 	stw	r17,0(sp)
 c0121fc:	d9400104 	addi	r5,sp,4
 c012200:	000d883a 	mov	r6,zero
 c012204:	100f883a 	mov	r7,r2
 c012208:	903ee83a 	callr	r18
 c01220c:	003fed06 	br	c0121c4 <__alt_data_end+0xfc0121c4>

0c012210 <wcrtomb>:
 c012210:	defff504 	addi	sp,sp,-44
 c012214:	dc400515 	stw	r17,20(sp)
 c012218:	dc000415 	stw	r16,16(sp)
 c01221c:	dfc00a15 	stw	ra,40(sp)
 c012220:	dd400915 	stw	r21,36(sp)
 c012224:	dd000815 	stw	r20,32(sp)
 c012228:	dcc00715 	stw	r19,28(sp)
 c01222c:	dc800615 	stw	r18,24(sp)
 c012230:	2021883a 	mov	r16,r4
 c012234:	3023883a 	mov	r17,r6
 c012238:	20001d26 	beq	r4,zero,c0122b0 <wcrtomb+0xa0>
 c01223c:	048300b4 	movhi	r18,3074
 c012240:	94907604 	addi	r18,r18,16856
 c012244:	008300b4 	movhi	r2,3074
 c012248:	95400017 	ldw	r21,0(r18)
 c01224c:	10907a04 	addi	r2,r2,16872
 c012250:	15000017 	ldw	r20,0(r2)
 c012254:	2827883a 	mov	r19,r5
 c012258:	c00e5600 	call	c00e560 <__locale_charset>
 c01225c:	a809883a 	mov	r4,r21
 c012260:	dc400015 	stw	r17,0(sp)
 c012264:	800b883a 	mov	r5,r16
 c012268:	980d883a 	mov	r6,r19
 c01226c:	100f883a 	mov	r7,r2
 c012270:	a03ee83a 	callr	r20
 c012274:	00ffffc4 	movi	r3,-1
 c012278:	10c0041e 	bne	r2,r3,c01228c <wcrtomb+0x7c>
 c01227c:	90c00017 	ldw	r3,0(r18)
 c012280:	01002284 	movi	r4,138
 c012284:	88000015 	stw	zero,0(r17)
 c012288:	19000015 	stw	r4,0(r3)
 c01228c:	dfc00a17 	ldw	ra,40(sp)
 c012290:	dd400917 	ldw	r21,36(sp)
 c012294:	dd000817 	ldw	r20,32(sp)
 c012298:	dcc00717 	ldw	r19,28(sp)
 c01229c:	dc800617 	ldw	r18,24(sp)
 c0122a0:	dc400517 	ldw	r17,20(sp)
 c0122a4:	dc000417 	ldw	r16,16(sp)
 c0122a8:	dec00b04 	addi	sp,sp,44
 c0122ac:	f800283a 	ret
 c0122b0:	048300b4 	movhi	r18,3074
 c0122b4:	94907604 	addi	r18,r18,16856
 c0122b8:	008300b4 	movhi	r2,3074
 c0122bc:	94c00017 	ldw	r19,0(r18)
 c0122c0:	10907a04 	addi	r2,r2,16872
 c0122c4:	14000017 	ldw	r16,0(r2)
 c0122c8:	c00e5600 	call	c00e560 <__locale_charset>
 c0122cc:	9809883a 	mov	r4,r19
 c0122d0:	dc400015 	stw	r17,0(sp)
 c0122d4:	d9400104 	addi	r5,sp,4
 c0122d8:	000d883a 	mov	r6,zero
 c0122dc:	100f883a 	mov	r7,r2
 c0122e0:	803ee83a 	callr	r16
 c0122e4:	003fe306 	br	c012274 <__alt_data_end+0xfc012274>

0c0122e8 <__ascii_wctomb>:
 c0122e8:	28000526 	beq	r5,zero,c012300 <__ascii_wctomb+0x18>
 c0122ec:	00803fc4 	movi	r2,255
 c0122f0:	11800536 	bltu	r2,r6,c012308 <__ascii_wctomb+0x20>
 c0122f4:	29800005 	stb	r6,0(r5)
 c0122f8:	00800044 	movi	r2,1
 c0122fc:	f800283a 	ret
 c012300:	0005883a 	mov	r2,zero
 c012304:	f800283a 	ret
 c012308:	00802284 	movi	r2,138
 c01230c:	20800015 	stw	r2,0(r4)
 c012310:	00bfffc4 	movi	r2,-1
 c012314:	f800283a 	ret

0c012318 <_wctomb_r>:
 c012318:	008300b4 	movhi	r2,3074
 c01231c:	defff904 	addi	sp,sp,-28
 c012320:	10907a04 	addi	r2,r2,16872
 c012324:	dfc00615 	stw	ra,24(sp)
 c012328:	dc400515 	stw	r17,20(sp)
 c01232c:	dc000415 	stw	r16,16(sp)
 c012330:	3823883a 	mov	r17,r7
 c012334:	14000017 	ldw	r16,0(r2)
 c012338:	d9000115 	stw	r4,4(sp)
 c01233c:	d9400215 	stw	r5,8(sp)
 c012340:	d9800315 	stw	r6,12(sp)
 c012344:	c00e5600 	call	c00e560 <__locale_charset>
 c012348:	d9000117 	ldw	r4,4(sp)
 c01234c:	d9400217 	ldw	r5,8(sp)
 c012350:	d9800317 	ldw	r6,12(sp)
 c012354:	dc400015 	stw	r17,0(sp)
 c012358:	100f883a 	mov	r7,r2
 c01235c:	803ee83a 	callr	r16
 c012360:	dfc00617 	ldw	ra,24(sp)
 c012364:	dc400517 	ldw	r17,20(sp)
 c012368:	dc000417 	ldw	r16,16(sp)
 c01236c:	dec00704 	addi	sp,sp,28
 c012370:	f800283a 	ret

0c012374 <__udivdi3>:
 c012374:	defff504 	addi	sp,sp,-44
 c012378:	dcc00415 	stw	r19,16(sp)
 c01237c:	dc000115 	stw	r16,4(sp)
 c012380:	dfc00a15 	stw	ra,40(sp)
 c012384:	df000915 	stw	fp,36(sp)
 c012388:	ddc00815 	stw	r23,32(sp)
 c01238c:	dd800715 	stw	r22,28(sp)
 c012390:	dd400615 	stw	r21,24(sp)
 c012394:	dd000515 	stw	r20,20(sp)
 c012398:	dc800315 	stw	r18,12(sp)
 c01239c:	dc400215 	stw	r17,8(sp)
 c0123a0:	2027883a 	mov	r19,r4
 c0123a4:	2821883a 	mov	r16,r5
 c0123a8:	3800421e 	bne	r7,zero,c0124b4 <__udivdi3+0x140>
 c0123ac:	3025883a 	mov	r18,r6
 c0123b0:	2023883a 	mov	r17,r4
 c0123b4:	2980542e 	bgeu	r5,r6,c012508 <__udivdi3+0x194>
 c0123b8:	00bfffd4 	movui	r2,65535
 c0123bc:	282d883a 	mov	r22,r5
 c0123c0:	1180a836 	bltu	r2,r6,c012664 <__udivdi3+0x2f0>
 c0123c4:	00803fc4 	movi	r2,255
 c0123c8:	1181422e 	bgeu	r2,r6,c0128d4 <__udivdi3+0x560>
 c0123cc:	00800204 	movi	r2,8
 c0123d0:	1007883a 	mov	r3,r2
 c0123d4:	3084d83a 	srl	r2,r6,r2
 c0123d8:	010300b4 	movhi	r4,3074
 c0123dc:	2108e304 	addi	r4,r4,9100
 c0123e0:	2085883a 	add	r2,r4,r2
 c0123e4:	10800003 	ldbu	r2,0(r2)
 c0123e8:	10c7883a 	add	r3,r2,r3
 c0123ec:	00800804 	movi	r2,32
 c0123f0:	10c5c83a 	sub	r2,r2,r3
 c0123f4:	10000526 	beq	r2,zero,c01240c <__udivdi3+0x98>
 c0123f8:	80a0983a 	sll	r16,r16,r2
 c0123fc:	98c6d83a 	srl	r3,r19,r3
 c012400:	30a4983a 	sll	r18,r6,r2
 c012404:	98a2983a 	sll	r17,r19,r2
 c012408:	80ecb03a 	or	r22,r16,r3
 c01240c:	902ad43a 	srli	r21,r18,16
 c012410:	b009883a 	mov	r4,r22
 c012414:	953fffcc 	andi	r20,r18,65535
 c012418:	a80b883a 	mov	r5,r21
 c01241c:	c008cd00 	call	c008cd0 <__umodsi3>
 c012420:	b009883a 	mov	r4,r22
 c012424:	a80b883a 	mov	r5,r21
 c012428:	1027883a 	mov	r19,r2
 c01242c:	c008cc80 	call	c008cc8 <__udivsi3>
 c012430:	1021883a 	mov	r16,r2
 c012434:	8806d43a 	srli	r3,r17,16
 c012438:	9804943a 	slli	r2,r19,16
 c01243c:	8527383a 	mul	r19,r16,r20
 c012440:	10c4b03a 	or	r2,r2,r3
 c012444:	14c0052e 	bgeu	r2,r19,c01245c <__udivdi3+0xe8>
 c012448:	1485883a 	add	r2,r2,r18
 c01244c:	80ffffc4 	addi	r3,r16,-1
 c012450:	14800136 	bltu	r2,r18,c012458 <__udivdi3+0xe4>
 c012454:	14c13436 	bltu	r2,r19,c012928 <__udivdi3+0x5b4>
 c012458:	1821883a 	mov	r16,r3
 c01245c:	14e7c83a 	sub	r19,r2,r19
 c012460:	9809883a 	mov	r4,r19
 c012464:	a80b883a 	mov	r5,r21
 c012468:	c008cd00 	call	c008cd0 <__umodsi3>
 c01246c:	102d883a 	mov	r22,r2
 c012470:	9809883a 	mov	r4,r19
 c012474:	a80b883a 	mov	r5,r21
 c012478:	c008cc80 	call	c008cc8 <__udivsi3>
 c01247c:	b02c943a 	slli	r22,r22,16
 c012480:	1529383a 	mul	r20,r2,r20
 c012484:	8c7fffcc 	andi	r17,r17,65535
 c012488:	b462b03a 	or	r17,r22,r17
 c01248c:	8d00052e 	bgeu	r17,r20,c0124a4 <__udivdi3+0x130>
 c012490:	8ca3883a 	add	r17,r17,r18
 c012494:	10ffffc4 	addi	r3,r2,-1
 c012498:	8c80f636 	bltu	r17,r18,c012874 <__udivdi3+0x500>
 c01249c:	8d00f52e 	bgeu	r17,r20,c012874 <__udivdi3+0x500>
 c0124a0:	10bfff84 	addi	r2,r2,-2
 c0124a4:	8020943a 	slli	r16,r16,16
 c0124a8:	0007883a 	mov	r3,zero
 c0124ac:	1404b03a 	or	r2,r2,r16
 c0124b0:	00005b06 	br	c012620 <__udivdi3+0x2ac>
 c0124b4:	29c05836 	bltu	r5,r7,c012618 <__udivdi3+0x2a4>
 c0124b8:	00bfffd4 	movui	r2,65535
 c0124bc:	11c0642e 	bgeu	r2,r7,c012650 <__udivdi3+0x2dc>
 c0124c0:	00804034 	movhi	r2,256
 c0124c4:	10bfffc4 	addi	r2,r2,-1
 c0124c8:	11c0f32e 	bgeu	r2,r7,c012898 <__udivdi3+0x524>
 c0124cc:	00c00604 	movi	r3,24
 c0124d0:	180b883a 	mov	r5,r3
 c0124d4:	38c6d83a 	srl	r3,r7,r3
 c0124d8:	008300b4 	movhi	r2,3074
 c0124dc:	1088e304 	addi	r2,r2,9100
 c0124e0:	10c7883a 	add	r3,r2,r3
 c0124e4:	18c00003 	ldbu	r3,0(r3)
 c0124e8:	01000804 	movi	r4,32
 c0124ec:	1947883a 	add	r3,r3,r5
 c0124f0:	20e5c83a 	sub	r18,r4,r3
 c0124f4:	9000661e 	bne	r18,zero,c012690 <__udivdi3+0x31c>
 c0124f8:	3c00f936 	bltu	r7,r16,c0128e0 <__udivdi3+0x56c>
 c0124fc:	9985403a 	cmpgeu	r2,r19,r6
 c012500:	0007883a 	mov	r3,zero
 c012504:	00004606 	br	c012620 <__udivdi3+0x2ac>
 c012508:	3000041e 	bne	r6,zero,c01251c <__udivdi3+0x1a8>
 c01250c:	01000044 	movi	r4,1
 c012510:	000b883a 	mov	r5,zero
 c012514:	c008cc80 	call	c008cc8 <__udivsi3>
 c012518:	1025883a 	mov	r18,r2
 c01251c:	00bfffd4 	movui	r2,65535
 c012520:	1480562e 	bgeu	r2,r18,c01267c <__udivdi3+0x308>
 c012524:	00804034 	movhi	r2,256
 c012528:	10bfffc4 	addi	r2,r2,-1
 c01252c:	1480e32e 	bgeu	r2,r18,c0128bc <__udivdi3+0x548>
 c012530:	00800604 	movi	r2,24
 c012534:	1007883a 	mov	r3,r2
 c012538:	9084d83a 	srl	r2,r18,r2
 c01253c:	010300b4 	movhi	r4,3074
 c012540:	2108e304 	addi	r4,r4,9100
 c012544:	2085883a 	add	r2,r4,r2
 c012548:	10800003 	ldbu	r2,0(r2)
 c01254c:	10c5883a 	add	r2,r2,r3
 c012550:	00c00804 	movi	r3,32
 c012554:	1887c83a 	sub	r3,r3,r2
 c012558:	1800911e 	bne	r3,zero,c0127a0 <__udivdi3+0x42c>
 c01255c:	9028d43a 	srli	r20,r18,16
 c012560:	84a1c83a 	sub	r16,r16,r18
 c012564:	957fffcc 	andi	r21,r18,65535
 c012568:	00c00044 	movi	r3,1
 c01256c:	8009883a 	mov	r4,r16
 c012570:	a00b883a 	mov	r5,r20
 c012574:	d8c00015 	stw	r3,0(sp)
 c012578:	c008cd00 	call	c008cd0 <__umodsi3>
 c01257c:	8009883a 	mov	r4,r16
 c012580:	a00b883a 	mov	r5,r20
 c012584:	1027883a 	mov	r19,r2
 c012588:	c008cc80 	call	c008cc8 <__udivsi3>
 c01258c:	1021883a 	mov	r16,r2
 c012590:	880cd43a 	srli	r6,r17,16
 c012594:	9804943a 	slli	r2,r19,16
 c012598:	8567383a 	mul	r19,r16,r21
 c01259c:	d8c00017 	ldw	r3,0(sp)
 c0125a0:	1188b03a 	or	r4,r2,r6
 c0125a4:	24c0052e 	bgeu	r4,r19,c0125bc <__udivdi3+0x248>
 c0125a8:	2489883a 	add	r4,r4,r18
 c0125ac:	80bfffc4 	addi	r2,r16,-1
 c0125b0:	24800136 	bltu	r4,r18,c0125b8 <__udivdi3+0x244>
 c0125b4:	24c0d936 	bltu	r4,r19,c01291c <__udivdi3+0x5a8>
 c0125b8:	1021883a 	mov	r16,r2
 c0125bc:	24e7c83a 	sub	r19,r4,r19
 c0125c0:	9809883a 	mov	r4,r19
 c0125c4:	a00b883a 	mov	r5,r20
 c0125c8:	d8c00015 	stw	r3,0(sp)
 c0125cc:	c008cd00 	call	c008cd0 <__umodsi3>
 c0125d0:	102d883a 	mov	r22,r2
 c0125d4:	9809883a 	mov	r4,r19
 c0125d8:	a00b883a 	mov	r5,r20
 c0125dc:	c008cc80 	call	c008cc8 <__udivsi3>
 c0125e0:	b02c943a 	slli	r22,r22,16
 c0125e4:	156b383a 	mul	r21,r2,r21
 c0125e8:	8c7fffcc 	andi	r17,r17,65535
 c0125ec:	b462b03a 	or	r17,r22,r17
 c0125f0:	d8c00017 	ldw	r3,0(sp)
 c0125f4:	8d40052e 	bgeu	r17,r21,c01260c <__udivdi3+0x298>
 c0125f8:	8ca3883a 	add	r17,r17,r18
 c0125fc:	113fffc4 	addi	r4,r2,-1
 c012600:	8c809a36 	bltu	r17,r18,c01286c <__udivdi3+0x4f8>
 c012604:	8d40992e 	bgeu	r17,r21,c01286c <__udivdi3+0x4f8>
 c012608:	10bfff84 	addi	r2,r2,-2
 c01260c:	8020943a 	slli	r16,r16,16
 c012610:	1404b03a 	or	r2,r2,r16
 c012614:	00000206 	br	c012620 <__udivdi3+0x2ac>
 c012618:	0007883a 	mov	r3,zero
 c01261c:	0005883a 	mov	r2,zero
 c012620:	dfc00a17 	ldw	ra,40(sp)
 c012624:	df000917 	ldw	fp,36(sp)
 c012628:	ddc00817 	ldw	r23,32(sp)
 c01262c:	dd800717 	ldw	r22,28(sp)
 c012630:	dd400617 	ldw	r21,24(sp)
 c012634:	dd000517 	ldw	r20,20(sp)
 c012638:	dcc00417 	ldw	r19,16(sp)
 c01263c:	dc800317 	ldw	r18,12(sp)
 c012640:	dc400217 	ldw	r17,8(sp)
 c012644:	dc000117 	ldw	r16,4(sp)
 c012648:	dec00b04 	addi	sp,sp,44
 c01264c:	f800283a 	ret
 c012650:	00803fc4 	movi	r2,255
 c012654:	11c0932e 	bgeu	r2,r7,c0128a4 <__udivdi3+0x530>
 c012658:	00c00204 	movi	r3,8
 c01265c:	180b883a 	mov	r5,r3
 c012660:	003f9c06 	br	c0124d4 <__alt_data_end+0xfc0124d4>
 c012664:	00804034 	movhi	r2,256
 c012668:	10bfffc4 	addi	r2,r2,-1
 c01266c:	1180902e 	bgeu	r2,r6,c0128b0 <__udivdi3+0x53c>
 c012670:	00800604 	movi	r2,24
 c012674:	1007883a 	mov	r3,r2
 c012678:	003f5606 	br	c0123d4 <__alt_data_end+0xfc0123d4>
 c01267c:	00803fc4 	movi	r2,255
 c012680:	1480912e 	bgeu	r2,r18,c0128c8 <__udivdi3+0x554>
 c012684:	00800204 	movi	r2,8
 c012688:	1007883a 	mov	r3,r2
 c01268c:	003faa06 	br	c012538 <__alt_data_end+0xfc012538>
 c012690:	30eed83a 	srl	r23,r6,r3
 c012694:	3c8e983a 	sll	r7,r7,r18
 c012698:	80f8d83a 	srl	fp,r16,r3
 c01269c:	98c6d83a 	srl	r3,r19,r3
 c0126a0:	3deeb03a 	or	r23,r7,r23
 c0126a4:	b828d43a 	srli	r20,r23,16
 c0126a8:	84a0983a 	sll	r16,r16,r18
 c0126ac:	e009883a 	mov	r4,fp
 c0126b0:	a00b883a 	mov	r5,r20
 c0126b4:	80e2b03a 	or	r17,r16,r3
 c0126b8:	34aa983a 	sll	r21,r6,r18
 c0126bc:	c008cd00 	call	c008cd0 <__umodsi3>
 c0126c0:	e009883a 	mov	r4,fp
 c0126c4:	a00b883a 	mov	r5,r20
 c0126c8:	102d883a 	mov	r22,r2
 c0126cc:	c008cc80 	call	c008cc8 <__udivsi3>
 c0126d0:	1021883a 	mov	r16,r2
 c0126d4:	bf3fffcc 	andi	fp,r23,65535
 c0126d8:	b004943a 	slli	r2,r22,16
 c0126dc:	8808d43a 	srli	r4,r17,16
 c0126e0:	872d383a 	mul	r22,r16,fp
 c0126e4:	1104b03a 	or	r2,r2,r4
 c0126e8:	1580042e 	bgeu	r2,r22,c0126fc <__udivdi3+0x388>
 c0126ec:	15c5883a 	add	r2,r2,r23
 c0126f0:	80ffffc4 	addi	r3,r16,-1
 c0126f4:	15c0812e 	bgeu	r2,r23,c0128fc <__udivdi3+0x588>
 c0126f8:	1821883a 	mov	r16,r3
 c0126fc:	15adc83a 	sub	r22,r2,r22
 c012700:	b009883a 	mov	r4,r22
 c012704:	a00b883a 	mov	r5,r20
 c012708:	c008cd00 	call	c008cd0 <__umodsi3>
 c01270c:	a00b883a 	mov	r5,r20
 c012710:	b009883a 	mov	r4,r22
 c012714:	d8800015 	stw	r2,0(sp)
 c012718:	c008cc80 	call	c008cc8 <__udivsi3>
 c01271c:	d8c00017 	ldw	r3,0(sp)
 c012720:	170b383a 	mul	r5,r2,fp
 c012724:	8c7fffcc 	andi	r17,r17,65535
 c012728:	1806943a 	slli	r3,r3,16
 c01272c:	1c46b03a 	or	r3,r3,r17
 c012730:	1940042e 	bgeu	r3,r5,c012744 <__udivdi3+0x3d0>
 c012734:	1dc7883a 	add	r3,r3,r23
 c012738:	113fffc4 	addi	r4,r2,-1
 c01273c:	1dc06b2e 	bgeu	r3,r23,c0128ec <__udivdi3+0x578>
 c012740:	2005883a 	mov	r2,r4
 c012744:	8020943a 	slli	r16,r16,16
 c012748:	a9ffffcc 	andi	r7,r21,65535
 c01274c:	a82ad43a 	srli	r21,r21,16
 c012750:	1404b03a 	or	r2,r2,r16
 c012754:	113fffcc 	andi	r4,r2,65535
 c012758:	100cd43a 	srli	r6,r2,16
 c01275c:	21d3383a 	mul	r9,r4,r7
 c012760:	2549383a 	mul	r4,r4,r21
 c012764:	31cf383a 	mul	r7,r6,r7
 c012768:	4810d43a 	srli	r8,r9,16
 c01276c:	1947c83a 	sub	r3,r3,r5
 c012770:	3909883a 	add	r4,r7,r4
 c012774:	2209883a 	add	r4,r4,r8
 c012778:	354d383a 	mul	r6,r6,r21
 c01277c:	21c0022e 	bgeu	r4,r7,c012788 <__udivdi3+0x414>
 c012780:	01400074 	movhi	r5,1
 c012784:	314d883a 	add	r6,r6,r5
 c012788:	202ad43a 	srli	r21,r4,16
 c01278c:	354d883a 	add	r6,r6,r21
 c012790:	19803f36 	bltu	r3,r6,c012890 <__udivdi3+0x51c>
 c012794:	19803926 	beq	r3,r6,c01287c <__udivdi3+0x508>
 c012798:	0007883a 	mov	r3,zero
 c01279c:	003fa006 	br	c012620 <__alt_data_end+0xfc012620>
 c0127a0:	90e4983a 	sll	r18,r18,r3
 c0127a4:	80aad83a 	srl	r21,r16,r2
 c0127a8:	80e0983a 	sll	r16,r16,r3
 c0127ac:	9028d43a 	srli	r20,r18,16
 c0127b0:	9884d83a 	srl	r2,r19,r2
 c0127b4:	a809883a 	mov	r4,r21
 c0127b8:	a00b883a 	mov	r5,r20
 c0127bc:	80acb03a 	or	r22,r16,r2
 c0127c0:	98e2983a 	sll	r17,r19,r3
 c0127c4:	c008cd00 	call	c008cd0 <__umodsi3>
 c0127c8:	a809883a 	mov	r4,r21
 c0127cc:	a00b883a 	mov	r5,r20
 c0127d0:	1021883a 	mov	r16,r2
 c0127d4:	c008cc80 	call	c008cc8 <__udivsi3>
 c0127d8:	957fffcc 	andi	r21,r18,65535
 c0127dc:	8020943a 	slli	r16,r16,16
 c0127e0:	b00ad43a 	srli	r5,r22,16
 c0127e4:	1567383a 	mul	r19,r2,r21
 c0127e8:	102f883a 	mov	r23,r2
 c0127ec:	8148b03a 	or	r4,r16,r5
 c0127f0:	24c0062e 	bgeu	r4,r19,c01280c <__udivdi3+0x498>
 c0127f4:	2489883a 	add	r4,r4,r18
 c0127f8:	10bfffc4 	addi	r2,r2,-1
 c0127fc:	24804536 	bltu	r4,r18,c012914 <__udivdi3+0x5a0>
 c012800:	24c0442e 	bgeu	r4,r19,c012914 <__udivdi3+0x5a0>
 c012804:	bdffff84 	addi	r23,r23,-2
 c012808:	2489883a 	add	r4,r4,r18
 c01280c:	24e7c83a 	sub	r19,r4,r19
 c012810:	9809883a 	mov	r4,r19
 c012814:	a00b883a 	mov	r5,r20
 c012818:	c008cd00 	call	c008cd0 <__umodsi3>
 c01281c:	1021883a 	mov	r16,r2
 c012820:	9809883a 	mov	r4,r19
 c012824:	a00b883a 	mov	r5,r20
 c012828:	c008cc80 	call	c008cc8 <__udivsi3>
 c01282c:	8020943a 	slli	r16,r16,16
 c012830:	1007883a 	mov	r3,r2
 c012834:	1545383a 	mul	r2,r2,r21
 c012838:	b13fffcc 	andi	r4,r22,65535
 c01283c:	8108b03a 	or	r4,r16,r4
 c012840:	2080062e 	bgeu	r4,r2,c01285c <__udivdi3+0x4e8>
 c012844:	2489883a 	add	r4,r4,r18
 c012848:	197fffc4 	addi	r5,r3,-1
 c01284c:	24802f36 	bltu	r4,r18,c01290c <__udivdi3+0x598>
 c012850:	20802e2e 	bgeu	r4,r2,c01290c <__udivdi3+0x598>
 c012854:	18ffff84 	addi	r3,r3,-2
 c012858:	2489883a 	add	r4,r4,r18
 c01285c:	b82e943a 	slli	r23,r23,16
 c012860:	20a1c83a 	sub	r16,r4,r2
 c012864:	1dc6b03a 	or	r3,r3,r23
 c012868:	003f4006 	br	c01256c <__alt_data_end+0xfc01256c>
 c01286c:	2005883a 	mov	r2,r4
 c012870:	003f6606 	br	c01260c <__alt_data_end+0xfc01260c>
 c012874:	1805883a 	mov	r2,r3
 c012878:	003f0a06 	br	c0124a4 <__alt_data_end+0xfc0124a4>
 c01287c:	2006943a 	slli	r3,r4,16
 c012880:	9c88983a 	sll	r4,r19,r18
 c012884:	4a7fffcc 	andi	r9,r9,65535
 c012888:	1a47883a 	add	r3,r3,r9
 c01288c:	20ffc22e 	bgeu	r4,r3,c012798 <__alt_data_end+0xfc012798>
 c012890:	10bfffc4 	addi	r2,r2,-1
 c012894:	003fc006 	br	c012798 <__alt_data_end+0xfc012798>
 c012898:	00c00404 	movi	r3,16
 c01289c:	180b883a 	mov	r5,r3
 c0128a0:	003f0c06 	br	c0124d4 <__alt_data_end+0xfc0124d4>
 c0128a4:	0007883a 	mov	r3,zero
 c0128a8:	000b883a 	mov	r5,zero
 c0128ac:	003f0906 	br	c0124d4 <__alt_data_end+0xfc0124d4>
 c0128b0:	00800404 	movi	r2,16
 c0128b4:	1007883a 	mov	r3,r2
 c0128b8:	003ec606 	br	c0123d4 <__alt_data_end+0xfc0123d4>
 c0128bc:	00800404 	movi	r2,16
 c0128c0:	1007883a 	mov	r3,r2
 c0128c4:	003f1c06 	br	c012538 <__alt_data_end+0xfc012538>
 c0128c8:	0005883a 	mov	r2,zero
 c0128cc:	0007883a 	mov	r3,zero
 c0128d0:	003f1906 	br	c012538 <__alt_data_end+0xfc012538>
 c0128d4:	0005883a 	mov	r2,zero
 c0128d8:	0007883a 	mov	r3,zero
 c0128dc:	003ebd06 	br	c0123d4 <__alt_data_end+0xfc0123d4>
 c0128e0:	0007883a 	mov	r3,zero
 c0128e4:	00800044 	movi	r2,1
 c0128e8:	003f4d06 	br	c012620 <__alt_data_end+0xfc012620>
 c0128ec:	197f942e 	bgeu	r3,r5,c012740 <__alt_data_end+0xfc012740>
 c0128f0:	10bfff84 	addi	r2,r2,-2
 c0128f4:	1dc7883a 	add	r3,r3,r23
 c0128f8:	003f9206 	br	c012744 <__alt_data_end+0xfc012744>
 c0128fc:	15bf7e2e 	bgeu	r2,r22,c0126f8 <__alt_data_end+0xfc0126f8>
 c012900:	843fff84 	addi	r16,r16,-2
 c012904:	15c5883a 	add	r2,r2,r23
 c012908:	003f7c06 	br	c0126fc <__alt_data_end+0xfc0126fc>
 c01290c:	2807883a 	mov	r3,r5
 c012910:	003fd206 	br	c01285c <__alt_data_end+0xfc01285c>
 c012914:	102f883a 	mov	r23,r2
 c012918:	003fbc06 	br	c01280c <__alt_data_end+0xfc01280c>
 c01291c:	843fff84 	addi	r16,r16,-2
 c012920:	2489883a 	add	r4,r4,r18
 c012924:	003f2506 	br	c0125bc <__alt_data_end+0xfc0125bc>
 c012928:	843fff84 	addi	r16,r16,-2
 c01292c:	1485883a 	add	r2,r2,r18
 c012930:	003eca06 	br	c01245c <__alt_data_end+0xfc01245c>

0c012934 <__umoddi3>:
 c012934:	defff404 	addi	sp,sp,-48
 c012938:	ddc00915 	stw	r23,36(sp)
 c01293c:	dc400315 	stw	r17,12(sp)
 c012940:	dc000215 	stw	r16,8(sp)
 c012944:	dfc00b15 	stw	ra,44(sp)
 c012948:	df000a15 	stw	fp,40(sp)
 c01294c:	dd800815 	stw	r22,32(sp)
 c012950:	dd400715 	stw	r21,28(sp)
 c012954:	dd000615 	stw	r20,24(sp)
 c012958:	dcc00515 	stw	r19,20(sp)
 c01295c:	dc800415 	stw	r18,16(sp)
 c012960:	2021883a 	mov	r16,r4
 c012964:	2823883a 	mov	r17,r5
 c012968:	282f883a 	mov	r23,r5
 c01296c:	3800381e 	bne	r7,zero,c012a50 <__umoddi3+0x11c>
 c012970:	3027883a 	mov	r19,r6
 c012974:	2029883a 	mov	r20,r4
 c012978:	29804e2e 	bgeu	r5,r6,c012ab4 <__umoddi3+0x180>
 c01297c:	00bfffd4 	movui	r2,65535
 c012980:	11809c36 	bltu	r2,r6,c012bf4 <__umoddi3+0x2c0>
 c012984:	00803fc4 	movi	r2,255
 c012988:	11813b2e 	bgeu	r2,r6,c012e78 <__umoddi3+0x544>
 c01298c:	01400204 	movi	r5,8
 c012990:	2805883a 	mov	r2,r5
 c012994:	314ad83a 	srl	r5,r6,r5
 c012998:	00c300b4 	movhi	r3,3074
 c01299c:	18c8e304 	addi	r3,r3,9100
 c0129a0:	194b883a 	add	r5,r3,r5
 c0129a4:	29000003 	ldbu	r4,0(r5)
 c0129a8:	2089883a 	add	r4,r4,r2
 c0129ac:	00800804 	movi	r2,32
 c0129b0:	1105c83a 	sub	r2,r2,r4
 c0129b4:	1000ec26 	beq	r2,zero,c012d68 <__umoddi3+0x434>
 c0129b8:	88a2983a 	sll	r17,r17,r2
 c0129bc:	8108d83a 	srl	r4,r16,r4
 c0129c0:	30a6983a 	sll	r19,r6,r2
 c0129c4:	80a8983a 	sll	r20,r16,r2
 c0129c8:	1025883a 	mov	r18,r2
 c0129cc:	892eb03a 	or	r23,r17,r4
 c0129d0:	982cd43a 	srli	r22,r19,16
 c0129d4:	b809883a 	mov	r4,r23
 c0129d8:	9d7fffcc 	andi	r21,r19,65535
 c0129dc:	b00b883a 	mov	r5,r22
 c0129e0:	c008cd00 	call	c008cd0 <__umodsi3>
 c0129e4:	b809883a 	mov	r4,r23
 c0129e8:	b00b883a 	mov	r5,r22
 c0129ec:	1021883a 	mov	r16,r2
 c0129f0:	c008cc80 	call	c008cc8 <__udivsi3>
 c0129f4:	8020943a 	slli	r16,r16,16
 c0129f8:	a00cd43a 	srli	r6,r20,16
 c0129fc:	1545383a 	mul	r2,r2,r21
 c012a00:	8188b03a 	or	r4,r16,r6
 c012a04:	2080042e 	bgeu	r4,r2,c012a18 <__umoddi3+0xe4>
 c012a08:	24c9883a 	add	r4,r4,r19
 c012a0c:	24c00236 	bltu	r4,r19,c012a18 <__umoddi3+0xe4>
 c012a10:	2080012e 	bgeu	r4,r2,c012a18 <__umoddi3+0xe4>
 c012a14:	24c9883a 	add	r4,r4,r19
 c012a18:	20a3c83a 	sub	r17,r4,r2
 c012a1c:	8809883a 	mov	r4,r17
 c012a20:	b00b883a 	mov	r5,r22
 c012a24:	c008cd00 	call	c008cd0 <__umodsi3>
 c012a28:	8809883a 	mov	r4,r17
 c012a2c:	b00b883a 	mov	r5,r22
 c012a30:	1021883a 	mov	r16,r2
 c012a34:	c008cc80 	call	c008cc8 <__udivsi3>
 c012a38:	8006943a 	slli	r3,r16,16
 c012a3c:	1545383a 	mul	r2,r2,r21
 c012a40:	a13fffcc 	andi	r4,r20,65535
 c012a44:	1906b03a 	or	r3,r3,r4
 c012a48:	1880532e 	bgeu	r3,r2,c012b98 <__umoddi3+0x264>
 c012a4c:	00004e06 	br	c012b88 <__umoddi3+0x254>
 c012a50:	29c05536 	bltu	r5,r7,c012ba8 <__umoddi3+0x274>
 c012a54:	00bfffd4 	movui	r2,65535
 c012a58:	11c0612e 	bgeu	r2,r7,c012be0 <__umoddi3+0x2ac>
 c012a5c:	00804034 	movhi	r2,256
 c012a60:	10bfffc4 	addi	r2,r2,-1
 c012a64:	11c0f82e 	bgeu	r2,r7,c012e48 <__umoddi3+0x514>
 c012a68:	01400604 	movi	r5,24
 c012a6c:	282b883a 	mov	r21,r5
 c012a70:	394ad83a 	srl	r5,r7,r5
 c012a74:	00c300b4 	movhi	r3,3074
 c012a78:	18c8e304 	addi	r3,r3,9100
 c012a7c:	194b883a 	add	r5,r3,r5
 c012a80:	28800003 	ldbu	r2,0(r5)
 c012a84:	00c00804 	movi	r3,32
 c012a88:	156b883a 	add	r21,r2,r21
 c012a8c:	1d69c83a 	sub	r20,r3,r21
 c012a90:	a000631e 	bne	r20,zero,c012c20 <__umoddi3+0x2ec>
 c012a94:	3c400136 	bltu	r7,r17,c012a9c <__umoddi3+0x168>
 c012a98:	81810436 	bltu	r16,r6,c012eac <__umoddi3+0x578>
 c012a9c:	8185c83a 	sub	r2,r16,r6
 c012aa0:	89e3c83a 	sub	r17,r17,r7
 c012aa4:	8087803a 	cmpltu	r3,r16,r2
 c012aa8:	88efc83a 	sub	r23,r17,r3
 c012aac:	b807883a 	mov	r3,r23
 c012ab0:	00003f06 	br	c012bb0 <__umoddi3+0x27c>
 c012ab4:	3000041e 	bne	r6,zero,c012ac8 <__umoddi3+0x194>
 c012ab8:	01000044 	movi	r4,1
 c012abc:	000b883a 	mov	r5,zero
 c012ac0:	c008cc80 	call	c008cc8 <__udivsi3>
 c012ac4:	1027883a 	mov	r19,r2
 c012ac8:	00bfffd4 	movui	r2,65535
 c012acc:	14c04f2e 	bgeu	r2,r19,c012c0c <__umoddi3+0x2d8>
 c012ad0:	00804034 	movhi	r2,256
 c012ad4:	10bfffc4 	addi	r2,r2,-1
 c012ad8:	14c0e42e 	bgeu	r2,r19,c012e6c <__umoddi3+0x538>
 c012adc:	00800604 	movi	r2,24
 c012ae0:	1007883a 	mov	r3,r2
 c012ae4:	9884d83a 	srl	r2,r19,r2
 c012ae8:	010300b4 	movhi	r4,3074
 c012aec:	2108e304 	addi	r4,r4,9100
 c012af0:	2085883a 	add	r2,r4,r2
 c012af4:	11000003 	ldbu	r4,0(r2)
 c012af8:	00800804 	movi	r2,32
 c012afc:	20c7883a 	add	r3,r4,r3
 c012b00:	10c5c83a 	sub	r2,r2,r3
 c012b04:	10009a1e 	bne	r2,zero,c012d70 <__umoddi3+0x43c>
 c012b08:	982cd43a 	srli	r22,r19,16
 c012b0c:	8ce3c83a 	sub	r17,r17,r19
 c012b10:	9c3fffcc 	andi	r16,r19,65535
 c012b14:	0025883a 	mov	r18,zero
 c012b18:	8809883a 	mov	r4,r17
 c012b1c:	b00b883a 	mov	r5,r22
 c012b20:	c008cd00 	call	c008cd0 <__umodsi3>
 c012b24:	8809883a 	mov	r4,r17
 c012b28:	b00b883a 	mov	r5,r22
 c012b2c:	102b883a 	mov	r21,r2
 c012b30:	c008cc80 	call	c008cc8 <__udivsi3>
 c012b34:	a806943a 	slli	r3,r21,16
 c012b38:	a008d43a 	srli	r4,r20,16
 c012b3c:	1405383a 	mul	r2,r2,r16
 c012b40:	190cb03a 	or	r6,r3,r4
 c012b44:	3080032e 	bgeu	r6,r2,c012b54 <__umoddi3+0x220>
 c012b48:	34cd883a 	add	r6,r6,r19
 c012b4c:	34c00136 	bltu	r6,r19,c012b54 <__umoddi3+0x220>
 c012b50:	3080d436 	bltu	r6,r2,c012ea4 <__umoddi3+0x570>
 c012b54:	30abc83a 	sub	r21,r6,r2
 c012b58:	a809883a 	mov	r4,r21
 c012b5c:	b00b883a 	mov	r5,r22
 c012b60:	c008cd00 	call	c008cd0 <__umodsi3>
 c012b64:	1023883a 	mov	r17,r2
 c012b68:	a809883a 	mov	r4,r21
 c012b6c:	b00b883a 	mov	r5,r22
 c012b70:	c008cc80 	call	c008cc8 <__udivsi3>
 c012b74:	8822943a 	slli	r17,r17,16
 c012b78:	1405383a 	mul	r2,r2,r16
 c012b7c:	a13fffcc 	andi	r4,r20,65535
 c012b80:	8906b03a 	or	r3,r17,r4
 c012b84:	1880042e 	bgeu	r3,r2,c012b98 <__umoddi3+0x264>
 c012b88:	1cc7883a 	add	r3,r3,r19
 c012b8c:	1cc00236 	bltu	r3,r19,c012b98 <__umoddi3+0x264>
 c012b90:	1880012e 	bgeu	r3,r2,c012b98 <__umoddi3+0x264>
 c012b94:	1cc7883a 	add	r3,r3,r19
 c012b98:	1887c83a 	sub	r3,r3,r2
 c012b9c:	1c84d83a 	srl	r2,r3,r18
 c012ba0:	0007883a 	mov	r3,zero
 c012ba4:	00000206 	br	c012bb0 <__umoddi3+0x27c>
 c012ba8:	2005883a 	mov	r2,r4
 c012bac:	2807883a 	mov	r3,r5
 c012bb0:	dfc00b17 	ldw	ra,44(sp)
 c012bb4:	df000a17 	ldw	fp,40(sp)
 c012bb8:	ddc00917 	ldw	r23,36(sp)
 c012bbc:	dd800817 	ldw	r22,32(sp)
 c012bc0:	dd400717 	ldw	r21,28(sp)
 c012bc4:	dd000617 	ldw	r20,24(sp)
 c012bc8:	dcc00517 	ldw	r19,20(sp)
 c012bcc:	dc800417 	ldw	r18,16(sp)
 c012bd0:	dc400317 	ldw	r17,12(sp)
 c012bd4:	dc000217 	ldw	r16,8(sp)
 c012bd8:	dec00c04 	addi	sp,sp,48
 c012bdc:	f800283a 	ret
 c012be0:	00803fc4 	movi	r2,255
 c012be4:	11c0952e 	bgeu	r2,r7,c012e3c <__umoddi3+0x508>
 c012be8:	01400204 	movi	r5,8
 c012bec:	282b883a 	mov	r21,r5
 c012bf0:	003f9f06 	br	c012a70 <__alt_data_end+0xfc012a70>
 c012bf4:	00804034 	movhi	r2,256
 c012bf8:	10bfffc4 	addi	r2,r2,-1
 c012bfc:	1180952e 	bgeu	r2,r6,c012e54 <__umoddi3+0x520>
 c012c00:	01400604 	movi	r5,24
 c012c04:	2805883a 	mov	r2,r5
 c012c08:	003f6206 	br	c012994 <__alt_data_end+0xfc012994>
 c012c0c:	00803fc4 	movi	r2,255
 c012c10:	14c0932e 	bgeu	r2,r19,c012e60 <__umoddi3+0x52c>
 c012c14:	00800204 	movi	r2,8
 c012c18:	1007883a 	mov	r3,r2
 c012c1c:	003fb106 	br	c012ae4 <__alt_data_end+0xfc012ae4>
 c012c20:	3548d83a 	srl	r4,r6,r21
 c012c24:	3d0e983a 	sll	r7,r7,r20
 c012c28:	8d10983a 	sll	r8,r17,r20
 c012c2c:	8d6cd83a 	srl	r22,r17,r21
 c012c30:	3922b03a 	or	r17,r7,r4
 c012c34:	882ed43a 	srli	r23,r17,16
 c012c38:	8564d83a 	srl	r18,r16,r21
 c012c3c:	b009883a 	mov	r4,r22
 c012c40:	b80b883a 	mov	r5,r23
 c012c44:	44a4b03a 	or	r18,r8,r18
 c012c48:	3526983a 	sll	r19,r6,r20
 c012c4c:	c008cd00 	call	c008cd0 <__umodsi3>
 c012c50:	b009883a 	mov	r4,r22
 c012c54:	b80b883a 	mov	r5,r23
 c012c58:	1039883a 	mov	fp,r2
 c012c5c:	c008cc80 	call	c008cc8 <__udivsi3>
 c012c60:	102d883a 	mov	r22,r2
 c012c64:	8a3fffcc 	andi	r8,r17,65535
 c012c68:	e004943a 	slli	r2,fp,16
 c012c6c:	900cd43a 	srli	r6,r18,16
 c012c70:	b239383a 	mul	fp,r22,r8
 c012c74:	8520983a 	sll	r16,r16,r20
 c012c78:	118ab03a 	or	r5,r2,r6
 c012c7c:	2f00042e 	bgeu	r5,fp,c012c90 <__umoddi3+0x35c>
 c012c80:	2c4b883a 	add	r5,r5,r17
 c012c84:	b0bfffc4 	addi	r2,r22,-1
 c012c88:	2c40822e 	bgeu	r5,r17,c012e94 <__umoddi3+0x560>
 c012c8c:	102d883a 	mov	r22,r2
 c012c90:	2f39c83a 	sub	fp,r5,fp
 c012c94:	e009883a 	mov	r4,fp
 c012c98:	b80b883a 	mov	r5,r23
 c012c9c:	da000115 	stw	r8,4(sp)
 c012ca0:	c008cd00 	call	c008cd0 <__umodsi3>
 c012ca4:	e009883a 	mov	r4,fp
 c012ca8:	b80b883a 	mov	r5,r23
 c012cac:	d8800015 	stw	r2,0(sp)
 c012cb0:	c008cc80 	call	c008cc8 <__udivsi3>
 c012cb4:	d9800017 	ldw	r6,0(sp)
 c012cb8:	da000117 	ldw	r8,4(sp)
 c012cbc:	94bfffcc 	andi	r18,r18,65535
 c012cc0:	300c943a 	slli	r6,r6,16
 c012cc4:	1209383a 	mul	r4,r2,r8
 c012cc8:	3490b03a 	or	r8,r6,r18
 c012ccc:	4100042e 	bgeu	r8,r4,c012ce0 <__umoddi3+0x3ac>
 c012cd0:	4451883a 	add	r8,r8,r17
 c012cd4:	10ffffc4 	addi	r3,r2,-1
 c012cd8:	44406a2e 	bgeu	r8,r17,c012e84 <__umoddi3+0x550>
 c012cdc:	1805883a 	mov	r2,r3
 c012ce0:	b012943a 	slli	r9,r22,16
 c012ce4:	9abfffcc 	andi	r10,r19,65535
 c012ce8:	980ed43a 	srli	r7,r19,16
 c012cec:	124ab03a 	or	r5,r2,r9
 c012cf0:	2a7fffcc 	andi	r9,r5,65535
 c012cf4:	280ad43a 	srli	r5,r5,16
 c012cf8:	4a8d383a 	mul	r6,r9,r10
 c012cfc:	49d3383a 	mul	r9,r9,r7
 c012d00:	2a95383a 	mul	r10,r5,r10
 c012d04:	3004d43a 	srli	r2,r6,16
 c012d08:	4111c83a 	sub	r8,r8,r4
 c012d0c:	5253883a 	add	r9,r10,r9
 c012d10:	4893883a 	add	r9,r9,r2
 c012d14:	29cb383a 	mul	r5,r5,r7
 c012d18:	4a80022e 	bgeu	r9,r10,c012d24 <__umoddi3+0x3f0>
 c012d1c:	00800074 	movhi	r2,1
 c012d20:	288b883a 	add	r5,r5,r2
 c012d24:	4808d43a 	srli	r4,r9,16
 c012d28:	4812943a 	slli	r9,r9,16
 c012d2c:	31bfffcc 	andi	r6,r6,65535
 c012d30:	290b883a 	add	r5,r5,r4
 c012d34:	498d883a 	add	r6,r9,r6
 c012d38:	41403a36 	bltu	r8,r5,c012e24 <__umoddi3+0x4f0>
 c012d3c:	41405d26 	beq	r8,r5,c012eb4 <__umoddi3+0x580>
 c012d40:	4149c83a 	sub	r4,r8,r5
 c012d44:	300f883a 	mov	r7,r6
 c012d48:	81cfc83a 	sub	r7,r16,r7
 c012d4c:	81c7803a 	cmpltu	r3,r16,r7
 c012d50:	20c7c83a 	sub	r3,r4,r3
 c012d54:	1d44983a 	sll	r2,r3,r21
 c012d58:	3d0ed83a 	srl	r7,r7,r20
 c012d5c:	1d06d83a 	srl	r3,r3,r20
 c012d60:	11c4b03a 	or	r2,r2,r7
 c012d64:	003f9206 	br	c012bb0 <__alt_data_end+0xfc012bb0>
 c012d68:	0025883a 	mov	r18,zero
 c012d6c:	003f1806 	br	c0129d0 <__alt_data_end+0xfc0129d0>
 c012d70:	98a6983a 	sll	r19,r19,r2
 c012d74:	88e8d83a 	srl	r20,r17,r3
 c012d78:	80c6d83a 	srl	r3,r16,r3
 c012d7c:	982cd43a 	srli	r22,r19,16
 c012d80:	88a2983a 	sll	r17,r17,r2
 c012d84:	a009883a 	mov	r4,r20
 c012d88:	b00b883a 	mov	r5,r22
 c012d8c:	88eab03a 	or	r21,r17,r3
 c012d90:	1025883a 	mov	r18,r2
 c012d94:	c008cd00 	call	c008cd0 <__umodsi3>
 c012d98:	a009883a 	mov	r4,r20
 c012d9c:	b00b883a 	mov	r5,r22
 c012da0:	1023883a 	mov	r17,r2
 c012da4:	c008cc80 	call	c008cc8 <__udivsi3>
 c012da8:	9f3fffcc 	andi	fp,r19,65535
 c012dac:	8822943a 	slli	r17,r17,16
 c012db0:	a80ad43a 	srli	r5,r21,16
 c012db4:	1705383a 	mul	r2,r2,fp
 c012db8:	84a8983a 	sll	r20,r16,r18
 c012dbc:	8948b03a 	or	r4,r17,r5
 c012dc0:	2080042e 	bgeu	r4,r2,c012dd4 <__umoddi3+0x4a0>
 c012dc4:	24c9883a 	add	r4,r4,r19
 c012dc8:	24c00236 	bltu	r4,r19,c012dd4 <__umoddi3+0x4a0>
 c012dcc:	2080012e 	bgeu	r4,r2,c012dd4 <__umoddi3+0x4a0>
 c012dd0:	24c9883a 	add	r4,r4,r19
 c012dd4:	20afc83a 	sub	r23,r4,r2
 c012dd8:	b809883a 	mov	r4,r23
 c012ddc:	b00b883a 	mov	r5,r22
 c012de0:	c008cd00 	call	c008cd0 <__umodsi3>
 c012de4:	1023883a 	mov	r17,r2
 c012de8:	b809883a 	mov	r4,r23
 c012dec:	b00b883a 	mov	r5,r22
 c012df0:	c008cc80 	call	c008cc8 <__udivsi3>
 c012df4:	8822943a 	slli	r17,r17,16
 c012df8:	1705383a 	mul	r2,r2,fp
 c012dfc:	a93fffcc 	andi	r4,r21,65535
 c012e00:	8908b03a 	or	r4,r17,r4
 c012e04:	2080042e 	bgeu	r4,r2,c012e18 <__umoddi3+0x4e4>
 c012e08:	24c9883a 	add	r4,r4,r19
 c012e0c:	24c00236 	bltu	r4,r19,c012e18 <__umoddi3+0x4e4>
 c012e10:	2080012e 	bgeu	r4,r2,c012e18 <__umoddi3+0x4e4>
 c012e14:	24c9883a 	add	r4,r4,r19
 c012e18:	20a3c83a 	sub	r17,r4,r2
 c012e1c:	e021883a 	mov	r16,fp
 c012e20:	003f3d06 	br	c012b18 <__alt_data_end+0xfc012b18>
 c012e24:	34cfc83a 	sub	r7,r6,r19
 c012e28:	2c4bc83a 	sub	r5,r5,r17
 c012e2c:	31cd803a 	cmpltu	r6,r6,r7
 c012e30:	298dc83a 	sub	r6,r5,r6
 c012e34:	4189c83a 	sub	r4,r8,r6
 c012e38:	003fc306 	br	c012d48 <__alt_data_end+0xfc012d48>
 c012e3c:	000b883a 	mov	r5,zero
 c012e40:	002b883a 	mov	r21,zero
 c012e44:	003f0a06 	br	c012a70 <__alt_data_end+0xfc012a70>
 c012e48:	01400404 	movi	r5,16
 c012e4c:	282b883a 	mov	r21,r5
 c012e50:	003f0706 	br	c012a70 <__alt_data_end+0xfc012a70>
 c012e54:	01400404 	movi	r5,16
 c012e58:	2805883a 	mov	r2,r5
 c012e5c:	003ecd06 	br	c012994 <__alt_data_end+0xfc012994>
 c012e60:	0005883a 	mov	r2,zero
 c012e64:	0007883a 	mov	r3,zero
 c012e68:	003f1e06 	br	c012ae4 <__alt_data_end+0xfc012ae4>
 c012e6c:	00800404 	movi	r2,16
 c012e70:	1007883a 	mov	r3,r2
 c012e74:	003f1b06 	br	c012ae4 <__alt_data_end+0xfc012ae4>
 c012e78:	000b883a 	mov	r5,zero
 c012e7c:	0005883a 	mov	r2,zero
 c012e80:	003ec406 	br	c012994 <__alt_data_end+0xfc012994>
 c012e84:	413f952e 	bgeu	r8,r4,c012cdc <__alt_data_end+0xfc012cdc>
 c012e88:	10bfff84 	addi	r2,r2,-2
 c012e8c:	4451883a 	add	r8,r8,r17
 c012e90:	003f9306 	br	c012ce0 <__alt_data_end+0xfc012ce0>
 c012e94:	2f3f7d2e 	bgeu	r5,fp,c012c8c <__alt_data_end+0xfc012c8c>
 c012e98:	b5bfff84 	addi	r22,r22,-2
 c012e9c:	2c4b883a 	add	r5,r5,r17
 c012ea0:	003f7b06 	br	c012c90 <__alt_data_end+0xfc012c90>
 c012ea4:	34cd883a 	add	r6,r6,r19
 c012ea8:	003f2a06 	br	c012b54 <__alt_data_end+0xfc012b54>
 c012eac:	8005883a 	mov	r2,r16
 c012eb0:	003efe06 	br	c012aac <__alt_data_end+0xfc012aac>
 c012eb4:	81bfdb36 	bltu	r16,r6,c012e24 <__alt_data_end+0xfc012e24>
 c012eb8:	300f883a 	mov	r7,r6
 c012ebc:	0009883a 	mov	r4,zero
 c012ec0:	003fa106 	br	c012d48 <__alt_data_end+0xfc012d48>

0c012ec4 <__adddf3>:
 c012ec4:	02000434 	movhi	r8,16
 c012ec8:	423fffc4 	addi	r8,r8,-1
 c012ecc:	defffb04 	addi	sp,sp,-20
 c012ed0:	2a12703a 	and	r9,r5,r8
 c012ed4:	2806d7fa 	srli	r3,r5,31
 c012ed8:	3a10703a 	and	r8,r7,r8
 c012edc:	3804d53a 	srli	r2,r7,20
 c012ee0:	3014d77a 	srli	r10,r6,29
 c012ee4:	dc000015 	stw	r16,0(sp)
 c012ee8:	481290fa 	slli	r9,r9,3
 c012eec:	2820d53a 	srli	r16,r5,20
 c012ef0:	401090fa 	slli	r8,r8,3
 c012ef4:	200ad77a 	srli	r5,r4,29
 c012ef8:	380ed7fa 	srli	r7,r7,31
 c012efc:	dc800215 	stw	r18,8(sp)
 c012f00:	dc400115 	stw	r17,4(sp)
 c012f04:	dfc00415 	stw	ra,16(sp)
 c012f08:	dcc00315 	stw	r19,12(sp)
 c012f0c:	1c803fcc 	andi	r18,r3,255
 c012f10:	8401ffcc 	andi	r16,r16,2047
 c012f14:	494ab03a 	or	r5,r9,r5
 c012f18:	202290fa 	slli	r17,r4,3
 c012f1c:	1081ffcc 	andi	r2,r2,2047
 c012f20:	4290b03a 	or	r8,r8,r10
 c012f24:	300c90fa 	slli	r6,r6,3
 c012f28:	91c07026 	beq	r18,r7,c0130ec <__adddf3+0x228>
 c012f2c:	8087c83a 	sub	r3,r16,r2
 c012f30:	00c0b30e 	bge	zero,r3,c013200 <__adddf3+0x33c>
 c012f34:	10002a1e 	bne	r2,zero,c012fe0 <__adddf3+0x11c>
 c012f38:	4184b03a 	or	r2,r8,r6
 c012f3c:	1000991e 	bne	r2,zero,c0131a4 <__adddf3+0x2e0>
 c012f40:	888001cc 	andi	r2,r17,7
 c012f44:	10005b26 	beq	r2,zero,c0130b4 <__adddf3+0x1f0>
 c012f48:	88c003cc 	andi	r3,r17,15
 c012f4c:	00800104 	movi	r2,4
 c012f50:	18805826 	beq	r3,r2,c0130b4 <__adddf3+0x1f0>
 c012f54:	89800104 	addi	r6,r17,4
 c012f58:	3463803a 	cmpltu	r17,r6,r17
 c012f5c:	2c4b883a 	add	r5,r5,r17
 c012f60:	2880202c 	andhi	r2,r5,128
 c012f64:	9007883a 	mov	r3,r18
 c012f68:	3023883a 	mov	r17,r6
 c012f6c:	10005426 	beq	r2,zero,c0130c0 <__adddf3+0x1fc>
 c012f70:	84000044 	addi	r16,r16,1
 c012f74:	0081ffc4 	movi	r2,2047
 c012f78:	8080c126 	beq	r16,r2,c013280 <__adddf3+0x3bc>
 c012f7c:	013fe034 	movhi	r4,65408
 c012f80:	213fffc4 	addi	r4,r4,-1
 c012f84:	290a703a 	and	r5,r5,r4
 c012f88:	2804977a 	slli	r2,r5,29
 c012f8c:	280a927a 	slli	r5,r5,9
 c012f90:	8822d0fa 	srli	r17,r17,3
 c012f94:	8401ffcc 	andi	r16,r16,2047
 c012f98:	2808d33a 	srli	r4,r5,12
 c012f9c:	1444b03a 	or	r2,r2,r17
 c012fa0:	8401ffcc 	andi	r16,r16,2047
 c012fa4:	800a953a 	slli	r5,r16,20
 c012fa8:	18c03fcc 	andi	r3,r3,255
 c012fac:	04000434 	movhi	r16,16
 c012fb0:	180697fa 	slli	r3,r3,31
 c012fb4:	843fffc4 	addi	r16,r16,-1
 c012fb8:	2420703a 	and	r16,r4,r16
 c012fbc:	8160b03a 	or	r16,r16,r5
 c012fc0:	80c6b03a 	or	r3,r16,r3
 c012fc4:	dfc00417 	ldw	ra,16(sp)
 c012fc8:	dcc00317 	ldw	r19,12(sp)
 c012fcc:	dc800217 	ldw	r18,8(sp)
 c012fd0:	dc400117 	ldw	r17,4(sp)
 c012fd4:	dc000017 	ldw	r16,0(sp)
 c012fd8:	dec00504 	addi	sp,sp,20
 c012fdc:	f800283a 	ret
 c012fe0:	0081ffc4 	movi	r2,2047
 c012fe4:	80bfd626 	beq	r16,r2,c012f40 <__alt_data_end+0xfc012f40>
 c012fe8:	42002034 	orhi	r8,r8,128
 c012fec:	00800e04 	movi	r2,56
 c012ff0:	10c0a616 	blt	r2,r3,c01328c <__adddf3+0x3c8>
 c012ff4:	008007c4 	movi	r2,31
 c012ff8:	10c0c916 	blt	r2,r3,c013320 <__adddf3+0x45c>
 c012ffc:	00800804 	movi	r2,32
 c013000:	10c5c83a 	sub	r2,r2,r3
 c013004:	408e983a 	sll	r7,r8,r2
 c013008:	30c8d83a 	srl	r4,r6,r3
 c01300c:	3084983a 	sll	r2,r6,r2
 c013010:	40c6d83a 	srl	r3,r8,r3
 c013014:	390cb03a 	or	r6,r7,r4
 c013018:	1004c03a 	cmpne	r2,r2,zero
 c01301c:	308cb03a 	or	r6,r6,r2
 c013020:	898dc83a 	sub	r6,r17,r6
 c013024:	89a3803a 	cmpltu	r17,r17,r6
 c013028:	28cbc83a 	sub	r5,r5,r3
 c01302c:	2c4bc83a 	sub	r5,r5,r17
 c013030:	3023883a 	mov	r17,r6
 c013034:	2880202c 	andhi	r2,r5,128
 c013038:	10006d26 	beq	r2,zero,c0131f0 <__adddf3+0x32c>
 c01303c:	04c02034 	movhi	r19,128
 c013040:	9cffffc4 	addi	r19,r19,-1
 c013044:	2ce6703a 	and	r19,r5,r19
 c013048:	98007e26 	beq	r19,zero,c013244 <__adddf3+0x380>
 c01304c:	9809883a 	mov	r4,r19
 c013050:	c008b480 	call	c008b48 <__clzsi2>
 c013054:	10fffe04 	addi	r3,r2,-8
 c013058:	010007c4 	movi	r4,31
 c01305c:	20c07f16 	blt	r4,r3,c01325c <__adddf3+0x398>
 c013060:	01400a04 	movi	r5,40
 c013064:	2885c83a 	sub	r2,r5,r2
 c013068:	888ad83a 	srl	r5,r17,r2
 c01306c:	98e6983a 	sll	r19,r19,r3
 c013070:	88e2983a 	sll	r17,r17,r3
 c013074:	2ce6b03a 	or	r19,r5,r19
 c013078:	1c007c16 	blt	r3,r16,c01326c <__adddf3+0x3a8>
 c01307c:	1c21c83a 	sub	r16,r3,r16
 c013080:	81400044 	addi	r5,r16,1
 c013084:	00c007c4 	movi	r3,31
 c013088:	19409816 	blt	r3,r5,c0132ec <__adddf3+0x428>
 c01308c:	1c21c83a 	sub	r16,r3,r16
 c013090:	8c08983a 	sll	r4,r17,r16
 c013094:	8946d83a 	srl	r3,r17,r5
 c013098:	9c20983a 	sll	r16,r19,r16
 c01309c:	2008c03a 	cmpne	r4,r4,zero
 c0130a0:	994ad83a 	srl	r5,r19,r5
 c0130a4:	1c06b03a 	or	r3,r3,r16
 c0130a8:	1922b03a 	or	r17,r3,r4
 c0130ac:	0021883a 	mov	r16,zero
 c0130b0:	003fa306 	br	c012f40 <__alt_data_end+0xfc012f40>
 c0130b4:	2880202c 	andhi	r2,r5,128
 c0130b8:	9007883a 	mov	r3,r18
 c0130bc:	103fac1e 	bne	r2,zero,c012f70 <__alt_data_end+0xfc012f70>
 c0130c0:	2804977a 	slli	r2,r5,29
 c0130c4:	8822d0fa 	srli	r17,r17,3
 c0130c8:	0101ffc4 	movi	r4,2047
 c0130cc:	280ad0fa 	srli	r5,r5,3
 c0130d0:	1444b03a 	or	r2,r2,r17
 c0130d4:	81002c26 	beq	r16,r4,c013188 <__adddf3+0x2c4>
 c0130d8:	8120703a 	and	r16,r16,r4
 c0130dc:	01000434 	movhi	r4,16
 c0130e0:	213fffc4 	addi	r4,r4,-1
 c0130e4:	2908703a 	and	r4,r5,r4
 c0130e8:	003fad06 	br	c012fa0 <__alt_data_end+0xfc012fa0>
 c0130ec:	8089c83a 	sub	r4,r16,r2
 c0130f0:	01006a0e 	bge	zero,r4,c01329c <__adddf3+0x3d8>
 c0130f4:	10003326 	beq	r2,zero,c0131c4 <__adddf3+0x300>
 c0130f8:	0081ffc4 	movi	r2,2047
 c0130fc:	80bf9026 	beq	r16,r2,c012f40 <__alt_data_end+0xfc012f40>
 c013100:	42002034 	orhi	r8,r8,128
 c013104:	00800e04 	movi	r2,56
 c013108:	1100b116 	blt	r2,r4,c0133d0 <__adddf3+0x50c>
 c01310c:	008007c4 	movi	r2,31
 c013110:	1100e216 	blt	r2,r4,c01349c <__adddf3+0x5d8>
 c013114:	00800804 	movi	r2,32
 c013118:	1105c83a 	sub	r2,r2,r4
 c01311c:	4092983a 	sll	r9,r8,r2
 c013120:	310ed83a 	srl	r7,r6,r4
 c013124:	3084983a 	sll	r2,r6,r2
 c013128:	4110d83a 	srl	r8,r8,r4
 c01312c:	49ccb03a 	or	r6,r9,r7
 c013130:	1004c03a 	cmpne	r2,r2,zero
 c013134:	308cb03a 	or	r6,r6,r2
 c013138:	344d883a 	add	r6,r6,r17
 c01313c:	3463803a 	cmpltu	r17,r6,r17
 c013140:	414b883a 	add	r5,r8,r5
 c013144:	2c4b883a 	add	r5,r5,r17
 c013148:	3023883a 	mov	r17,r6
 c01314c:	2880202c 	andhi	r2,r5,128
 c013150:	10002726 	beq	r2,zero,c0131f0 <__adddf3+0x32c>
 c013154:	84000044 	addi	r16,r16,1
 c013158:	0081ffc4 	movi	r2,2047
 c01315c:	8080ae26 	beq	r16,r2,c013418 <__adddf3+0x554>
 c013160:	00bfe034 	movhi	r2,65408
 c013164:	10bfffc4 	addi	r2,r2,-1
 c013168:	288a703a 	and	r5,r5,r2
 c01316c:	880cd07a 	srli	r6,r17,1
 c013170:	280897fa 	slli	r4,r5,31
 c013174:	88c0004c 	andi	r3,r17,1
 c013178:	30e2b03a 	or	r17,r6,r3
 c01317c:	280ad07a 	srli	r5,r5,1
 c013180:	8922b03a 	or	r17,r17,r4
 c013184:	003f6e06 	br	c012f40 <__alt_data_end+0xfc012f40>
 c013188:	1148b03a 	or	r4,r2,r5
 c01318c:	20003c26 	beq	r4,zero,c013280 <__adddf3+0x3bc>
 c013190:	29000234 	orhi	r4,r5,8
 c013194:	01400434 	movhi	r5,16
 c013198:	297fffc4 	addi	r5,r5,-1
 c01319c:	2148703a 	and	r4,r4,r5
 c0131a0:	003f7f06 	br	c012fa0 <__alt_data_end+0xfc012fa0>
 c0131a4:	18ffffc4 	addi	r3,r3,-1
 c0131a8:	18004d1e 	bne	r3,zero,c0132e0 <__adddf3+0x41c>
 c0131ac:	898dc83a 	sub	r6,r17,r6
 c0131b0:	89a3803a 	cmpltu	r17,r17,r6
 c0131b4:	2a0bc83a 	sub	r5,r5,r8
 c0131b8:	2c4bc83a 	sub	r5,r5,r17
 c0131bc:	3023883a 	mov	r17,r6
 c0131c0:	003f9c06 	br	c013034 <__alt_data_end+0xfc013034>
 c0131c4:	4184b03a 	or	r2,r8,r6
 c0131c8:	103f5d26 	beq	r2,zero,c012f40 <__alt_data_end+0xfc012f40>
 c0131cc:	213fffc4 	addi	r4,r4,-1
 c0131d0:	203fd926 	beq	r4,zero,c013138 <__alt_data_end+0xfc013138>
 c0131d4:	0081ffc4 	movi	r2,2047
 c0131d8:	80bfca1e 	bne	r16,r2,c013104 <__alt_data_end+0xfc013104>
 c0131dc:	003f5806 	br	c012f40 <__alt_data_end+0xfc012f40>
 c0131e0:	10c8b03a 	or	r4,r2,r3
 c0131e4:	20008b26 	beq	r4,zero,c013414 <__adddf3+0x550>
 c0131e8:	100b883a 	mov	r5,r2
 c0131ec:	1823883a 	mov	r17,r3
 c0131f0:	888001cc 	andi	r2,r17,7
 c0131f4:	103f541e 	bne	r2,zero,c012f48 <__alt_data_end+0xfc012f48>
 c0131f8:	9007883a 	mov	r3,r18
 c0131fc:	003fb006 	br	c0130c0 <__alt_data_end+0xfc0130c0>
 c013200:	1800531e 	bne	r3,zero,c013350 <__adddf3+0x48c>
 c013204:	80800044 	addi	r2,r16,1
 c013208:	1081ffcc 	andi	r2,r2,2047
 c01320c:	00c00044 	movi	r3,1
 c013210:	1880990e 	bge	r3,r2,c013478 <__adddf3+0x5b4>
 c013214:	8985c83a 	sub	r2,r17,r6
 c013218:	8887803a 	cmpltu	r3,r17,r2
 c01321c:	2a27c83a 	sub	r19,r5,r8
 c013220:	98e7c83a 	sub	r19,r19,r3
 c013224:	98c0202c 	andhi	r3,r19,128
 c013228:	18006226 	beq	r3,zero,c0133b4 <__adddf3+0x4f0>
 c01322c:	3463c83a 	sub	r17,r6,r17
 c013230:	4151c83a 	sub	r8,r8,r5
 c013234:	344d803a 	cmpltu	r6,r6,r17
 c013238:	41a7c83a 	sub	r19,r8,r6
 c01323c:	3825883a 	mov	r18,r7
 c013240:	983f821e 	bne	r19,zero,c01304c <__alt_data_end+0xfc01304c>
 c013244:	8809883a 	mov	r4,r17
 c013248:	c008b480 	call	c008b48 <__clzsi2>
 c01324c:	10800804 	addi	r2,r2,32
 c013250:	10fffe04 	addi	r3,r2,-8
 c013254:	010007c4 	movi	r4,31
 c013258:	20ff810e 	bge	r4,r3,c013060 <__alt_data_end+0xfc013060>
 c01325c:	14fff604 	addi	r19,r2,-40
 c013260:	8ce6983a 	sll	r19,r17,r19
 c013264:	0023883a 	mov	r17,zero
 c013268:	1c3f840e 	bge	r3,r16,c01307c <__alt_data_end+0xfc01307c>
 c01326c:	017fe034 	movhi	r5,65408
 c013270:	297fffc4 	addi	r5,r5,-1
 c013274:	80e1c83a 	sub	r16,r16,r3
 c013278:	994a703a 	and	r5,r19,r5
 c01327c:	003f3006 	br	c012f40 <__alt_data_end+0xfc012f40>
 c013280:	0009883a 	mov	r4,zero
 c013284:	0005883a 	mov	r2,zero
 c013288:	003f4506 	br	c012fa0 <__alt_data_end+0xfc012fa0>
 c01328c:	418cb03a 	or	r6,r8,r6
 c013290:	300cc03a 	cmpne	r6,r6,zero
 c013294:	0007883a 	mov	r3,zero
 c013298:	003f6106 	br	c013020 <__alt_data_end+0xfc013020>
 c01329c:	2000921e 	bne	r4,zero,c0134e8 <__adddf3+0x624>
 c0132a0:	80800044 	addi	r2,r16,1
 c0132a4:	11c1ffcc 	andi	r7,r2,2047
 c0132a8:	01000044 	movi	r4,1
 c0132ac:	21c0610e 	bge	r4,r7,c013434 <__adddf3+0x570>
 c0132b0:	0101ffc4 	movi	r4,2047
 c0132b4:	1100a326 	beq	r2,r4,c013544 <__adddf3+0x680>
 c0132b8:	344d883a 	add	r6,r6,r17
 c0132bc:	3463803a 	cmpltu	r17,r6,r17
 c0132c0:	414b883a 	add	r5,r8,r5
 c0132c4:	2c4b883a 	add	r5,r5,r17
 c0132c8:	282297fa 	slli	r17,r5,31
 c0132cc:	300cd07a 	srli	r6,r6,1
 c0132d0:	280ad07a 	srli	r5,r5,1
 c0132d4:	1021883a 	mov	r16,r2
 c0132d8:	89a2b03a 	or	r17,r17,r6
 c0132dc:	003f1806 	br	c012f40 <__alt_data_end+0xfc012f40>
 c0132e0:	0081ffc4 	movi	r2,2047
 c0132e4:	80bf411e 	bne	r16,r2,c012fec <__alt_data_end+0xfc012fec>
 c0132e8:	003f1506 	br	c012f40 <__alt_data_end+0xfc012f40>
 c0132ec:	80bff844 	addi	r2,r16,-31
 c0132f0:	00c00804 	movi	r3,32
 c0132f4:	9884d83a 	srl	r2,r19,r2
 c0132f8:	28c04a26 	beq	r5,r3,c013424 <__adddf3+0x560>
 c0132fc:	00c00fc4 	movi	r3,63
 c013300:	1c21c83a 	sub	r16,r3,r16
 c013304:	9c26983a 	sll	r19,r19,r16
 c013308:	9c62b03a 	or	r17,r19,r17
 c01330c:	8822c03a 	cmpne	r17,r17,zero
 c013310:	88a2b03a 	or	r17,r17,r2
 c013314:	000b883a 	mov	r5,zero
 c013318:	0021883a 	mov	r16,zero
 c01331c:	003fb406 	br	c0131f0 <__alt_data_end+0xfc0131f0>
 c013320:	18bff804 	addi	r2,r3,-32
 c013324:	01000804 	movi	r4,32
 c013328:	4084d83a 	srl	r2,r8,r2
 c01332c:	19003f26 	beq	r3,r4,c01342c <__adddf3+0x568>
 c013330:	01001004 	movi	r4,64
 c013334:	20c7c83a 	sub	r3,r4,r3
 c013338:	40d0983a 	sll	r8,r8,r3
 c01333c:	418cb03a 	or	r6,r8,r6
 c013340:	300cc03a 	cmpne	r6,r6,zero
 c013344:	308cb03a 	or	r6,r6,r2
 c013348:	0007883a 	mov	r3,zero
 c01334c:	003f3406 	br	c013020 <__alt_data_end+0xfc013020>
 c013350:	80002326 	beq	r16,zero,c0133e0 <__adddf3+0x51c>
 c013354:	0101ffc4 	movi	r4,2047
 c013358:	11005e26 	beq	r2,r4,c0134d4 <__adddf3+0x610>
 c01335c:	00c7c83a 	sub	r3,zero,r3
 c013360:	29402034 	orhi	r5,r5,128
 c013364:	01000e04 	movi	r4,56
 c013368:	20c07216 	blt	r4,r3,c013534 <__adddf3+0x670>
 c01336c:	010007c4 	movi	r4,31
 c013370:	20c0ce16 	blt	r4,r3,c0136ac <__adddf3+0x7e8>
 c013374:	01000804 	movi	r4,32
 c013378:	20c9c83a 	sub	r4,r4,r3
 c01337c:	2914983a 	sll	r10,r5,r4
 c013380:	88d2d83a 	srl	r9,r17,r3
 c013384:	8908983a 	sll	r4,r17,r4
 c013388:	28c6d83a 	srl	r3,r5,r3
 c01338c:	5262b03a 	or	r17,r10,r9
 c013390:	2008c03a 	cmpne	r4,r4,zero
 c013394:	8922b03a 	or	r17,r17,r4
 c013398:	3463c83a 	sub	r17,r6,r17
 c01339c:	40c7c83a 	sub	r3,r8,r3
 c0133a0:	344d803a 	cmpltu	r6,r6,r17
 c0133a4:	198bc83a 	sub	r5,r3,r6
 c0133a8:	1021883a 	mov	r16,r2
 c0133ac:	3825883a 	mov	r18,r7
 c0133b0:	003f2006 	br	c013034 <__alt_data_end+0xfc013034>
 c0133b4:	9886b03a 	or	r3,r19,r2
 c0133b8:	1800141e 	bne	r3,zero,c01340c <__adddf3+0x548>
 c0133bc:	0007883a 	mov	r3,zero
 c0133c0:	000b883a 	mov	r5,zero
 c0133c4:	0023883a 	mov	r17,zero
 c0133c8:	0021883a 	mov	r16,zero
 c0133cc:	003f3c06 	br	c0130c0 <__alt_data_end+0xfc0130c0>
 c0133d0:	418cb03a 	or	r6,r8,r6
 c0133d4:	300cc03a 	cmpne	r6,r6,zero
 c0133d8:	0011883a 	mov	r8,zero
 c0133dc:	003f5606 	br	c013138 <__alt_data_end+0xfc013138>
 c0133e0:	2c48b03a 	or	r4,r5,r17
 c0133e4:	20003b26 	beq	r4,zero,c0134d4 <__adddf3+0x610>
 c0133e8:	00c6303a 	nor	r3,zero,r3
 c0133ec:	1800371e 	bne	r3,zero,c0134cc <__adddf3+0x608>
 c0133f0:	3463c83a 	sub	r17,r6,r17
 c0133f4:	414bc83a 	sub	r5,r8,r5
 c0133f8:	344d803a 	cmpltu	r6,r6,r17
 c0133fc:	298bc83a 	sub	r5,r5,r6
 c013400:	1021883a 	mov	r16,r2
 c013404:	3825883a 	mov	r18,r7
 c013408:	003f0a06 	br	c013034 <__alt_data_end+0xfc013034>
 c01340c:	1023883a 	mov	r17,r2
 c013410:	003f0d06 	br	c013048 <__alt_data_end+0xfc013048>
 c013414:	0007883a 	mov	r3,zero
 c013418:	000b883a 	mov	r5,zero
 c01341c:	0023883a 	mov	r17,zero
 c013420:	003f2706 	br	c0130c0 <__alt_data_end+0xfc0130c0>
 c013424:	0027883a 	mov	r19,zero
 c013428:	003fb706 	br	c013308 <__alt_data_end+0xfc013308>
 c01342c:	0011883a 	mov	r8,zero
 c013430:	003fc206 	br	c01333c <__alt_data_end+0xfc01333c>
 c013434:	2c44b03a 	or	r2,r5,r17
 c013438:	8000871e 	bne	r16,zero,c013658 <__adddf3+0x794>
 c01343c:	1000b126 	beq	r2,zero,c013704 <__adddf3+0x840>
 c013440:	4184b03a 	or	r2,r8,r6
 c013444:	103ebe26 	beq	r2,zero,c012f40 <__alt_data_end+0xfc012f40>
 c013448:	3445883a 	add	r2,r6,r17
 c01344c:	1463803a 	cmpltu	r17,r2,r17
 c013450:	414b883a 	add	r5,r8,r5
 c013454:	2c4b883a 	add	r5,r5,r17
 c013458:	28c0202c 	andhi	r3,r5,128
 c01345c:	1023883a 	mov	r17,r2
 c013460:	183f6326 	beq	r3,zero,c0131f0 <__alt_data_end+0xfc0131f0>
 c013464:	00bfe034 	movhi	r2,65408
 c013468:	10bfffc4 	addi	r2,r2,-1
 c01346c:	2021883a 	mov	r16,r4
 c013470:	288a703a 	and	r5,r5,r2
 c013474:	003eb206 	br	c012f40 <__alt_data_end+0xfc012f40>
 c013478:	2c44b03a 	or	r2,r5,r17
 c01347c:	8000251e 	bne	r16,zero,c013514 <__adddf3+0x650>
 c013480:	10004b1e 	bne	r2,zero,c0135b0 <__adddf3+0x6ec>
 c013484:	4184b03a 	or	r2,r8,r6
 c013488:	103fe226 	beq	r2,zero,c013414 <__alt_data_end+0xfc013414>
 c01348c:	400b883a 	mov	r5,r8
 c013490:	3023883a 	mov	r17,r6
 c013494:	3825883a 	mov	r18,r7
 c013498:	003ea906 	br	c012f40 <__alt_data_end+0xfc012f40>
 c01349c:	20bff804 	addi	r2,r4,-32
 c0134a0:	01c00804 	movi	r7,32
 c0134a4:	4084d83a 	srl	r2,r8,r2
 c0134a8:	21c07e26 	beq	r4,r7,c0136a4 <__adddf3+0x7e0>
 c0134ac:	01c01004 	movi	r7,64
 c0134b0:	3909c83a 	sub	r4,r7,r4
 c0134b4:	4110983a 	sll	r8,r8,r4
 c0134b8:	418cb03a 	or	r6,r8,r6
 c0134bc:	300cc03a 	cmpne	r6,r6,zero
 c0134c0:	308cb03a 	or	r6,r6,r2
 c0134c4:	0011883a 	mov	r8,zero
 c0134c8:	003f1b06 	br	c013138 <__alt_data_end+0xfc013138>
 c0134cc:	0101ffc4 	movi	r4,2047
 c0134d0:	113fa41e 	bne	r2,r4,c013364 <__alt_data_end+0xfc013364>
 c0134d4:	400b883a 	mov	r5,r8
 c0134d8:	3023883a 	mov	r17,r6
 c0134dc:	1021883a 	mov	r16,r2
 c0134e0:	3825883a 	mov	r18,r7
 c0134e4:	003e9606 	br	c012f40 <__alt_data_end+0xfc012f40>
 c0134e8:	80001a1e 	bne	r16,zero,c013554 <__adddf3+0x690>
 c0134ec:	2c4eb03a 	or	r7,r5,r17
 c0134f0:	38005526 	beq	r7,zero,c013648 <__adddf3+0x784>
 c0134f4:	0108303a 	nor	r4,zero,r4
 c0134f8:	2000511e 	bne	r4,zero,c013640 <__adddf3+0x77c>
 c0134fc:	89a3883a 	add	r17,r17,r6
 c013500:	414b883a 	add	r5,r8,r5
 c013504:	898d803a 	cmpltu	r6,r17,r6
 c013508:	298b883a 	add	r5,r5,r6
 c01350c:	1021883a 	mov	r16,r2
 c013510:	003f0e06 	br	c01314c <__alt_data_end+0xfc01314c>
 c013514:	1000341e 	bne	r2,zero,c0135e8 <__adddf3+0x724>
 c013518:	4184b03a 	or	r2,r8,r6
 c01351c:	10006f26 	beq	r2,zero,c0136dc <__adddf3+0x818>
 c013520:	400b883a 	mov	r5,r8
 c013524:	3023883a 	mov	r17,r6
 c013528:	3825883a 	mov	r18,r7
 c01352c:	0401ffc4 	movi	r16,2047
 c013530:	003e8306 	br	c012f40 <__alt_data_end+0xfc012f40>
 c013534:	2c62b03a 	or	r17,r5,r17
 c013538:	8822c03a 	cmpne	r17,r17,zero
 c01353c:	0007883a 	mov	r3,zero
 c013540:	003f9506 	br	c013398 <__alt_data_end+0xfc013398>
 c013544:	1021883a 	mov	r16,r2
 c013548:	000b883a 	mov	r5,zero
 c01354c:	0023883a 	mov	r17,zero
 c013550:	003edb06 	br	c0130c0 <__alt_data_end+0xfc0130c0>
 c013554:	01c1ffc4 	movi	r7,2047
 c013558:	11c03b26 	beq	r2,r7,c013648 <__adddf3+0x784>
 c01355c:	0109c83a 	sub	r4,zero,r4
 c013560:	29402034 	orhi	r5,r5,128
 c013564:	01c00e04 	movi	r7,56
 c013568:	39006216 	blt	r7,r4,c0136f4 <__adddf3+0x830>
 c01356c:	01c007c4 	movi	r7,31
 c013570:	39006b16 	blt	r7,r4,c013720 <__adddf3+0x85c>
 c013574:	01c00804 	movi	r7,32
 c013578:	390fc83a 	sub	r7,r7,r4
 c01357c:	29d4983a 	sll	r10,r5,r7
 c013580:	8912d83a 	srl	r9,r17,r4
 c013584:	89ce983a 	sll	r7,r17,r7
 c013588:	2908d83a 	srl	r4,r5,r4
 c01358c:	5262b03a 	or	r17,r10,r9
 c013590:	380ac03a 	cmpne	r5,r7,zero
 c013594:	8962b03a 	or	r17,r17,r5
 c013598:	89a3883a 	add	r17,r17,r6
 c01359c:	2211883a 	add	r8,r4,r8
 c0135a0:	898d803a 	cmpltu	r6,r17,r6
 c0135a4:	418b883a 	add	r5,r8,r6
 c0135a8:	1021883a 	mov	r16,r2
 c0135ac:	003ee706 	br	c01314c <__alt_data_end+0xfc01314c>
 c0135b0:	4184b03a 	or	r2,r8,r6
 c0135b4:	103e6226 	beq	r2,zero,c012f40 <__alt_data_end+0xfc012f40>
 c0135b8:	8987c83a 	sub	r3,r17,r6
 c0135bc:	88c9803a 	cmpltu	r4,r17,r3
 c0135c0:	2a05c83a 	sub	r2,r5,r8
 c0135c4:	1105c83a 	sub	r2,r2,r4
 c0135c8:	1100202c 	andhi	r4,r2,128
 c0135cc:	203f0426 	beq	r4,zero,c0131e0 <__alt_data_end+0xfc0131e0>
 c0135d0:	3463c83a 	sub	r17,r6,r17
 c0135d4:	414bc83a 	sub	r5,r8,r5
 c0135d8:	344d803a 	cmpltu	r6,r6,r17
 c0135dc:	298bc83a 	sub	r5,r5,r6
 c0135e0:	3825883a 	mov	r18,r7
 c0135e4:	003e5606 	br	c012f40 <__alt_data_end+0xfc012f40>
 c0135e8:	4184b03a 	or	r2,r8,r6
 c0135ec:	10002b26 	beq	r2,zero,c01369c <__adddf3+0x7d8>
 c0135f0:	2804d0fa 	srli	r2,r5,3
 c0135f4:	8822d0fa 	srli	r17,r17,3
 c0135f8:	280a977a 	slli	r5,r5,29
 c0135fc:	10c0022c 	andhi	r3,r2,8
 c013600:	2c62b03a 	or	r17,r5,r17
 c013604:	18000826 	beq	r3,zero,c013628 <__adddf3+0x764>
 c013608:	4008d0fa 	srli	r4,r8,3
 c01360c:	20c0022c 	andhi	r3,r4,8
 c013610:	1800051e 	bne	r3,zero,c013628 <__adddf3+0x764>
 c013614:	300cd0fa 	srli	r6,r6,3
 c013618:	4010977a 	slli	r8,r8,29
 c01361c:	2005883a 	mov	r2,r4
 c013620:	3825883a 	mov	r18,r7
 c013624:	41a2b03a 	or	r17,r8,r6
 c013628:	880ad77a 	srli	r5,r17,29
 c01362c:	100490fa 	slli	r2,r2,3
 c013630:	882290fa 	slli	r17,r17,3
 c013634:	0401ffc4 	movi	r16,2047
 c013638:	288ab03a 	or	r5,r5,r2
 c01363c:	003e4006 	br	c012f40 <__alt_data_end+0xfc012f40>
 c013640:	01c1ffc4 	movi	r7,2047
 c013644:	11ffc71e 	bne	r2,r7,c013564 <__alt_data_end+0xfc013564>
 c013648:	400b883a 	mov	r5,r8
 c01364c:	3023883a 	mov	r17,r6
 c013650:	1021883a 	mov	r16,r2
 c013654:	003e3a06 	br	c012f40 <__alt_data_end+0xfc012f40>
 c013658:	10002d26 	beq	r2,zero,c013710 <__adddf3+0x84c>
 c01365c:	4184b03a 	or	r2,r8,r6
 c013660:	10000e26 	beq	r2,zero,c01369c <__adddf3+0x7d8>
 c013664:	2804d0fa 	srli	r2,r5,3
 c013668:	8822d0fa 	srli	r17,r17,3
 c01366c:	280a977a 	slli	r5,r5,29
 c013670:	10c0022c 	andhi	r3,r2,8
 c013674:	2c62b03a 	or	r17,r5,r17
 c013678:	183feb26 	beq	r3,zero,c013628 <__alt_data_end+0xfc013628>
 c01367c:	4008d0fa 	srli	r4,r8,3
 c013680:	20c0022c 	andhi	r3,r4,8
 c013684:	183fe81e 	bne	r3,zero,c013628 <__alt_data_end+0xfc013628>
 c013688:	300cd0fa 	srli	r6,r6,3
 c01368c:	4010977a 	slli	r8,r8,29
 c013690:	2005883a 	mov	r2,r4
 c013694:	41a2b03a 	or	r17,r8,r6
 c013698:	003fe306 	br	c013628 <__alt_data_end+0xfc013628>
 c01369c:	0401ffc4 	movi	r16,2047
 c0136a0:	003e2706 	br	c012f40 <__alt_data_end+0xfc012f40>
 c0136a4:	0011883a 	mov	r8,zero
 c0136a8:	003f8306 	br	c0134b8 <__alt_data_end+0xfc0134b8>
 c0136ac:	193ff804 	addi	r4,r3,-32
 c0136b0:	02400804 	movi	r9,32
 c0136b4:	2908d83a 	srl	r4,r5,r4
 c0136b8:	1a402526 	beq	r3,r9,c013750 <__adddf3+0x88c>
 c0136bc:	02401004 	movi	r9,64
 c0136c0:	48c7c83a 	sub	r3,r9,r3
 c0136c4:	28ca983a 	sll	r5,r5,r3
 c0136c8:	2c62b03a 	or	r17,r5,r17
 c0136cc:	8822c03a 	cmpne	r17,r17,zero
 c0136d0:	8922b03a 	or	r17,r17,r4
 c0136d4:	0007883a 	mov	r3,zero
 c0136d8:	003f2f06 	br	c013398 <__alt_data_end+0xfc013398>
 c0136dc:	01402034 	movhi	r5,128
 c0136e0:	0007883a 	mov	r3,zero
 c0136e4:	297fffc4 	addi	r5,r5,-1
 c0136e8:	047ffe04 	movi	r17,-8
 c0136ec:	0401ffc4 	movi	r16,2047
 c0136f0:	003e7306 	br	c0130c0 <__alt_data_end+0xfc0130c0>
 c0136f4:	2c62b03a 	or	r17,r5,r17
 c0136f8:	8822c03a 	cmpne	r17,r17,zero
 c0136fc:	0009883a 	mov	r4,zero
 c013700:	003fa506 	br	c013598 <__alt_data_end+0xfc013598>
 c013704:	400b883a 	mov	r5,r8
 c013708:	3023883a 	mov	r17,r6
 c01370c:	003e0c06 	br	c012f40 <__alt_data_end+0xfc012f40>
 c013710:	400b883a 	mov	r5,r8
 c013714:	3023883a 	mov	r17,r6
 c013718:	0401ffc4 	movi	r16,2047
 c01371c:	003e0806 	br	c012f40 <__alt_data_end+0xfc012f40>
 c013720:	21fff804 	addi	r7,r4,-32
 c013724:	02400804 	movi	r9,32
 c013728:	29ced83a 	srl	r7,r5,r7
 c01372c:	22400a26 	beq	r4,r9,c013758 <__adddf3+0x894>
 c013730:	02401004 	movi	r9,64
 c013734:	4909c83a 	sub	r4,r9,r4
 c013738:	290a983a 	sll	r5,r5,r4
 c01373c:	2c62b03a 	or	r17,r5,r17
 c013740:	8822c03a 	cmpne	r17,r17,zero
 c013744:	89e2b03a 	or	r17,r17,r7
 c013748:	0009883a 	mov	r4,zero
 c01374c:	003f9206 	br	c013598 <__alt_data_end+0xfc013598>
 c013750:	000b883a 	mov	r5,zero
 c013754:	003fdc06 	br	c0136c8 <__alt_data_end+0xfc0136c8>
 c013758:	000b883a 	mov	r5,zero
 c01375c:	003ff706 	br	c01373c <__alt_data_end+0xfc01373c>

0c013760 <__eqdf2>:
 c013760:	2804d53a 	srli	r2,r5,20
 c013764:	3806d53a 	srli	r3,r7,20
 c013768:	02000434 	movhi	r8,16
 c01376c:	423fffc4 	addi	r8,r8,-1
 c013770:	1081ffcc 	andi	r2,r2,2047
 c013774:	0241ffc4 	movi	r9,2047
 c013778:	2a14703a 	and	r10,r5,r8
 c01377c:	18c1ffcc 	andi	r3,r3,2047
 c013780:	3a10703a 	and	r8,r7,r8
 c013784:	280ad7fa 	srli	r5,r5,31
 c013788:	380ed7fa 	srli	r7,r7,31
 c01378c:	12400f26 	beq	r2,r9,c0137cc <__eqdf2+0x6c>
 c013790:	0241ffc4 	movi	r9,2047
 c013794:	1a400326 	beq	r3,r9,c0137a4 <__eqdf2+0x44>
 c013798:	10c00526 	beq	r2,r3,c0137b0 <__eqdf2+0x50>
 c01379c:	00800044 	movi	r2,1
 c0137a0:	f800283a 	ret
 c0137a4:	4192b03a 	or	r9,r8,r6
 c0137a8:	483ffc1e 	bne	r9,zero,c01379c <__alt_data_end+0xfc01379c>
 c0137ac:	10fffb1e 	bne	r2,r3,c01379c <__alt_data_end+0xfc01379c>
 c0137b0:	523ffa1e 	bne	r10,r8,c01379c <__alt_data_end+0xfc01379c>
 c0137b4:	21bff91e 	bne	r4,r6,c01379c <__alt_data_end+0xfc01379c>
 c0137b8:	29c00826 	beq	r5,r7,c0137dc <__eqdf2+0x7c>
 c0137bc:	103ff71e 	bne	r2,zero,c01379c <__alt_data_end+0xfc01379c>
 c0137c0:	5104b03a 	or	r2,r10,r4
 c0137c4:	1004c03a 	cmpne	r2,r2,zero
 c0137c8:	f800283a 	ret
 c0137cc:	5112b03a 	or	r9,r10,r4
 c0137d0:	483fef26 	beq	r9,zero,c013790 <__alt_data_end+0xfc013790>
 c0137d4:	00800044 	movi	r2,1
 c0137d8:	f800283a 	ret
 c0137dc:	0005883a 	mov	r2,zero
 c0137e0:	f800283a 	ret

0c0137e4 <__gedf2>:
 c0137e4:	2804d53a 	srli	r2,r5,20
 c0137e8:	3806d53a 	srli	r3,r7,20
 c0137ec:	02000434 	movhi	r8,16
 c0137f0:	423fffc4 	addi	r8,r8,-1
 c0137f4:	0241ffc4 	movi	r9,2047
 c0137f8:	1081ffcc 	andi	r2,r2,2047
 c0137fc:	2a14703a 	and	r10,r5,r8
 c013800:	1a46703a 	and	r3,r3,r9
 c013804:	3a10703a 	and	r8,r7,r8
 c013808:	280ad7fa 	srli	r5,r5,31
 c01380c:	380ed7fa 	srli	r7,r7,31
 c013810:	12400b26 	beq	r2,r9,c013840 <__gedf2+0x5c>
 c013814:	1a401626 	beq	r3,r9,c013870 <__gedf2+0x8c>
 c013818:	10000c1e 	bne	r2,zero,c01384c <__gedf2+0x68>
 c01381c:	5112b03a 	or	r9,r10,r4
 c013820:	4813003a 	cmpeq	r9,r9,zero
 c013824:	4817883a 	mov	r11,r9
 c013828:	18000c1e 	bne	r3,zero,c01385c <__gedf2+0x78>
 c01382c:	4198b03a 	or	r12,r8,r6
 c013830:	60000a1e 	bne	r12,zero,c01385c <__gedf2+0x78>
 c013834:	48001326 	beq	r9,zero,c013884 <__gedf2+0xa0>
 c013838:	0005883a 	mov	r2,zero
 c01383c:	f800283a 	ret
 c013840:	5112b03a 	or	r9,r10,r4
 c013844:	4800191e 	bne	r9,zero,c0138ac <__gedf2+0xc8>
 c013848:	18800926 	beq	r3,r2,c013870 <__gedf2+0x8c>
 c01384c:	18000b1e 	bne	r3,zero,c01387c <__gedf2+0x98>
 c013850:	4192b03a 	or	r9,r8,r6
 c013854:	0017883a 	mov	r11,zero
 c013858:	48000a26 	beq	r9,zero,c013884 <__gedf2+0xa0>
 c01385c:	39c03fcc 	andi	r7,r7,255
 c013860:	58000726 	beq	r11,zero,c013880 <__gedf2+0x9c>
 c013864:	3800081e 	bne	r7,zero,c013888 <__gedf2+0xa4>
 c013868:	00bfffc4 	movi	r2,-1
 c01386c:	f800283a 	ret
 c013870:	4192b03a 	or	r9,r8,r6
 c013874:	48000d1e 	bne	r9,zero,c0138ac <__gedf2+0xc8>
 c013878:	103fe826 	beq	r2,zero,c01381c <__alt_data_end+0xfc01381c>
 c01387c:	39c03fcc 	andi	r7,r7,255
 c013880:	29c00326 	beq	r5,r7,c013890 <__gedf2+0xac>
 c013884:	283ff81e 	bne	r5,zero,c013868 <__alt_data_end+0xfc013868>
 c013888:	00800044 	movi	r2,1
 c01388c:	f800283a 	ret
 c013890:	18bffc16 	blt	r3,r2,c013884 <__alt_data_end+0xfc013884>
 c013894:	10c00316 	blt	r2,r3,c0138a4 <__gedf2+0xc0>
 c013898:	42bffa36 	bltu	r8,r10,c013884 <__alt_data_end+0xfc013884>
 c01389c:	52000526 	beq	r10,r8,c0138b4 <__gedf2+0xd0>
 c0138a0:	523fe52e 	bgeu	r10,r8,c013838 <__alt_data_end+0xfc013838>
 c0138a4:	283ff026 	beq	r5,zero,c013868 <__alt_data_end+0xfc013868>
 c0138a8:	003ff706 	br	c013888 <__alt_data_end+0xfc013888>
 c0138ac:	00bfff84 	movi	r2,-2
 c0138b0:	f800283a 	ret
 c0138b4:	313ff336 	bltu	r6,r4,c013884 <__alt_data_end+0xfc013884>
 c0138b8:	21bfdf2e 	bgeu	r4,r6,c013838 <__alt_data_end+0xfc013838>
 c0138bc:	283fea26 	beq	r5,zero,c013868 <__alt_data_end+0xfc013868>
 c0138c0:	003ff106 	br	c013888 <__alt_data_end+0xfc013888>

0c0138c4 <__ledf2>:
 c0138c4:	2804d53a 	srli	r2,r5,20
 c0138c8:	3810d53a 	srli	r8,r7,20
 c0138cc:	00c00434 	movhi	r3,16
 c0138d0:	18ffffc4 	addi	r3,r3,-1
 c0138d4:	0241ffc4 	movi	r9,2047
 c0138d8:	1081ffcc 	andi	r2,r2,2047
 c0138dc:	28d4703a 	and	r10,r5,r3
 c0138e0:	4250703a 	and	r8,r8,r9
 c0138e4:	38c6703a 	and	r3,r7,r3
 c0138e8:	280ad7fa 	srli	r5,r5,31
 c0138ec:	380ed7fa 	srli	r7,r7,31
 c0138f0:	12400b26 	beq	r2,r9,c013920 <__ledf2+0x5c>
 c0138f4:	42401926 	beq	r8,r9,c01395c <__ledf2+0x98>
 c0138f8:	10000c1e 	bne	r2,zero,c01392c <__ledf2+0x68>
 c0138fc:	5112b03a 	or	r9,r10,r4
 c013900:	4813003a 	cmpeq	r9,r9,zero
 c013904:	4817883a 	mov	r11,r9
 c013908:	40000f26 	beq	r8,zero,c013948 <__ledf2+0x84>
 c01390c:	39c03fcc 	andi	r7,r7,255
 c013910:	58001826 	beq	r11,zero,c013974 <__ledf2+0xb0>
 c013914:	38000a1e 	bne	r7,zero,c013940 <__ledf2+0x7c>
 c013918:	00bfffc4 	movi	r2,-1
 c01391c:	f800283a 	ret
 c013920:	5112b03a 	or	r9,r10,r4
 c013924:	48000f1e 	bne	r9,zero,c013964 <__ledf2+0xa0>
 c013928:	40800c26 	beq	r8,r2,c01395c <__ledf2+0x98>
 c01392c:	4000101e 	bne	r8,zero,c013970 <__ledf2+0xac>
 c013930:	1992b03a 	or	r9,r3,r6
 c013934:	0017883a 	mov	r11,zero
 c013938:	483ff41e 	bne	r9,zero,c01390c <__alt_data_end+0xfc01390c>
 c01393c:	283ff61e 	bne	r5,zero,c013918 <__alt_data_end+0xfc013918>
 c013940:	00800044 	movi	r2,1
 c013944:	f800283a 	ret
 c013948:	1998b03a 	or	r12,r3,r6
 c01394c:	603fef1e 	bne	r12,zero,c01390c <__alt_data_end+0xfc01390c>
 c013950:	483ffa26 	beq	r9,zero,c01393c <__alt_data_end+0xfc01393c>
 c013954:	0005883a 	mov	r2,zero
 c013958:	f800283a 	ret
 c01395c:	1992b03a 	or	r9,r3,r6
 c013960:	48000226 	beq	r9,zero,c01396c <__ledf2+0xa8>
 c013964:	00800084 	movi	r2,2
 c013968:	f800283a 	ret
 c01396c:	103fe326 	beq	r2,zero,c0138fc <__alt_data_end+0xfc0138fc>
 c013970:	39c03fcc 	andi	r7,r7,255
 c013974:	29fff11e 	bne	r5,r7,c01393c <__alt_data_end+0xfc01393c>
 c013978:	40bff016 	blt	r8,r2,c01393c <__alt_data_end+0xfc01393c>
 c01397c:	12000316 	blt	r2,r8,c01398c <__ledf2+0xc8>
 c013980:	1abfee36 	bltu	r3,r10,c01393c <__alt_data_end+0xfc01393c>
 c013984:	50c00326 	beq	r10,r3,c013994 <__ledf2+0xd0>
 c013988:	50fff22e 	bgeu	r10,r3,c013954 <__alt_data_end+0xfc013954>
 c01398c:	283fe226 	beq	r5,zero,c013918 <__alt_data_end+0xfc013918>
 c013990:	003feb06 	br	c013940 <__alt_data_end+0xfc013940>
 c013994:	313fe936 	bltu	r6,r4,c01393c <__alt_data_end+0xfc01393c>
 c013998:	21bfee2e 	bgeu	r4,r6,c013954 <__alt_data_end+0xfc013954>
 c01399c:	283fde26 	beq	r5,zero,c013918 <__alt_data_end+0xfc013918>
 c0139a0:	003fe706 	br	c013940 <__alt_data_end+0xfc013940>

0c0139a4 <__muldf3>:
 c0139a4:	defff204 	addi	sp,sp,-56
 c0139a8:	2804d53a 	srli	r2,r5,20
 c0139ac:	dd800a15 	stw	r22,40(sp)
 c0139b0:	282cd7fa 	srli	r22,r5,31
 c0139b4:	dc000415 	stw	r16,16(sp)
 c0139b8:	04000434 	movhi	r16,16
 c0139bc:	df000c15 	stw	fp,48(sp)
 c0139c0:	dd000815 	stw	r20,32(sp)
 c0139c4:	dcc00715 	stw	r19,28(sp)
 c0139c8:	dc800615 	stw	r18,24(sp)
 c0139cc:	dc400515 	stw	r17,20(sp)
 c0139d0:	843fffc4 	addi	r16,r16,-1
 c0139d4:	dfc00d15 	stw	ra,52(sp)
 c0139d8:	ddc00b15 	stw	r23,44(sp)
 c0139dc:	dd400915 	stw	r21,36(sp)
 c0139e0:	1501ffcc 	andi	r20,r2,2047
 c0139e4:	2023883a 	mov	r17,r4
 c0139e8:	2025883a 	mov	r18,r4
 c0139ec:	2c20703a 	and	r16,r5,r16
 c0139f0:	b027883a 	mov	r19,r22
 c0139f4:	b7003fcc 	andi	fp,r22,255
 c0139f8:	a0005926 	beq	r20,zero,c013b60 <__muldf3+0x1bc>
 c0139fc:	0081ffc4 	movi	r2,2047
 c013a00:	a0803426 	beq	r20,r2,c013ad4 <__muldf3+0x130>
 c013a04:	84000434 	orhi	r16,r16,16
 c013a08:	2004d77a 	srli	r2,r4,29
 c013a0c:	802090fa 	slli	r16,r16,3
 c013a10:	202490fa 	slli	r18,r4,3
 c013a14:	a53f0044 	addi	r20,r20,-1023
 c013a18:	80a0b03a 	or	r16,r16,r2
 c013a1c:	002b883a 	mov	r21,zero
 c013a20:	0015883a 	mov	r10,zero
 c013a24:	3812d53a 	srli	r9,r7,20
 c013a28:	3806d7fa 	srli	r3,r7,31
 c013a2c:	02000434 	movhi	r8,16
 c013a30:	423fffc4 	addi	r8,r8,-1
 c013a34:	4941ffcc 	andi	r5,r9,2047
 c013a38:	302f883a 	mov	r23,r6
 c013a3c:	3a22703a 	and	r17,r7,r8
 c013a40:	1ac03fcc 	andi	r11,r3,255
 c013a44:	28006226 	beq	r5,zero,c013bd0 <__muldf3+0x22c>
 c013a48:	0081ffc4 	movi	r2,2047
 c013a4c:	28805a26 	beq	r5,r2,c013bb8 <__muldf3+0x214>
 c013a50:	8a000434 	orhi	r8,r17,16
 c013a54:	3004d77a 	srli	r2,r6,29
 c013a58:	401090fa 	slli	r8,r8,3
 c013a5c:	302e90fa 	slli	r23,r6,3
 c013a60:	297f0044 	addi	r5,r5,-1023
 c013a64:	40a2b03a 	or	r17,r8,r2
 c013a68:	0013883a 	mov	r9,zero
 c013a6c:	4d4cb03a 	or	r6,r9,r21
 c013a70:	300c90ba 	slli	r6,r6,2
 c013a74:	02030074 	movhi	r8,3073
 c013a78:	420ea504 	addi	r8,r8,14996
 c013a7c:	320d883a 	add	r6,r6,r8
 c013a80:	31800017 	ldw	r6,0(r6)
 c013a84:	a14b883a 	add	r5,r20,r5
 c013a88:	1dacf03a 	xor	r22,r3,r22
 c013a8c:	2b000044 	addi	r12,r5,1
 c013a90:	3000683a 	jmp	r6
 c013a94:	0c013cd0 	cmplti	r16,at,1267
 c013a98:	0c013cbc 	xorhi	r16,at,1266
 c013a9c:	0c013cbc 	xorhi	r16,at,1266
 c013aa0:	0c013ca8 	cmpgeui	r16,at,1266
 c013aa4:	0c013af0 	cmpltui	r16,at,1259
 c013aa8:	0c013af0 	cmpltui	r16,at,1259
 c013aac:	0c013c90 	cmplti	r16,at,1266
 c013ab0:	0c013ca8 	cmpgeui	r16,at,1266
 c013ab4:	0c013af0 	cmpltui	r16,at,1259
 c013ab8:	0c013c90 	cmplti	r16,at,1266
 c013abc:	0c013af0 	cmpltui	r16,at,1259
 c013ac0:	0c013ca8 	cmpgeui	r16,at,1266
 c013ac4:	0c013af4 	orhi	r16,at,1259
 c013ac8:	0c013af4 	orhi	r16,at,1259
 c013acc:	0c013af4 	orhi	r16,at,1259
 c013ad0:	0c013ecc 	andi	r16,at,1275
 c013ad4:	8104b03a 	or	r2,r16,r4
 c013ad8:	10006a1e 	bne	r2,zero,c013c84 <__muldf3+0x2e0>
 c013adc:	05400204 	movi	r21,8
 c013ae0:	0021883a 	mov	r16,zero
 c013ae4:	0025883a 	mov	r18,zero
 c013ae8:	02800084 	movi	r10,2
 c013aec:	003fcd06 	br	c013a24 <__alt_data_end+0xfc013a24>
 c013af0:	b039883a 	mov	fp,r22
 c013af4:	00800084 	movi	r2,2
 c013af8:	50804e1e 	bne	r10,r2,c013c34 <__muldf3+0x290>
 c013afc:	e4c0004c 	andi	r19,fp,1
 c013b00:	0101ffc4 	movi	r4,2047
 c013b04:	0021883a 	mov	r16,zero
 c013b08:	0025883a 	mov	r18,zero
 c013b0c:	2008953a 	slli	r4,r4,20
 c013b10:	98c03fcc 	andi	r3,r19,255
 c013b14:	01400434 	movhi	r5,16
 c013b18:	297fffc4 	addi	r5,r5,-1
 c013b1c:	180697fa 	slli	r3,r3,31
 c013b20:	8160703a 	and	r16,r16,r5
 c013b24:	8120b03a 	or	r16,r16,r4
 c013b28:	80c6b03a 	or	r3,r16,r3
 c013b2c:	9005883a 	mov	r2,r18
 c013b30:	dfc00d17 	ldw	ra,52(sp)
 c013b34:	df000c17 	ldw	fp,48(sp)
 c013b38:	ddc00b17 	ldw	r23,44(sp)
 c013b3c:	dd800a17 	ldw	r22,40(sp)
 c013b40:	dd400917 	ldw	r21,36(sp)
 c013b44:	dd000817 	ldw	r20,32(sp)
 c013b48:	dcc00717 	ldw	r19,28(sp)
 c013b4c:	dc800617 	ldw	r18,24(sp)
 c013b50:	dc400517 	ldw	r17,20(sp)
 c013b54:	dc000417 	ldw	r16,16(sp)
 c013b58:	dec00e04 	addi	sp,sp,56
 c013b5c:	f800283a 	ret
 c013b60:	8104b03a 	or	r2,r16,r4
 c013b64:	10004226 	beq	r2,zero,c013c70 <__muldf3+0x2cc>
 c013b68:	8000f926 	beq	r16,zero,c013f50 <__muldf3+0x5ac>
 c013b6c:	8009883a 	mov	r4,r16
 c013b70:	d9800315 	stw	r6,12(sp)
 c013b74:	d9c00015 	stw	r7,0(sp)
 c013b78:	c008b480 	call	c008b48 <__clzsi2>
 c013b7c:	d9800317 	ldw	r6,12(sp)
 c013b80:	d9c00017 	ldw	r7,0(sp)
 c013b84:	1007883a 	mov	r3,r2
 c013b88:	01000a04 	movi	r4,40
 c013b8c:	18bffe04 	addi	r2,r3,-8
 c013b90:	20c9c83a 	sub	r4,r4,r3
 c013b94:	80a0983a 	sll	r16,r16,r2
 c013b98:	8908d83a 	srl	r4,r17,r4
 c013b9c:	88a4983a 	sll	r18,r17,r2
 c013ba0:	2420b03a 	or	r16,r4,r16
 c013ba4:	017f0344 	movi	r5,-1011
 c013ba8:	28e9c83a 	sub	r20,r5,r3
 c013bac:	002b883a 	mov	r21,zero
 c013bb0:	0015883a 	mov	r10,zero
 c013bb4:	003f9b06 	br	c013a24 <__alt_data_end+0xfc013a24>
 c013bb8:	8984b03a 	or	r2,r17,r6
 c013bbc:	10002a1e 	bne	r2,zero,c013c68 <__muldf3+0x2c4>
 c013bc0:	0023883a 	mov	r17,zero
 c013bc4:	002f883a 	mov	r23,zero
 c013bc8:	02400084 	movi	r9,2
 c013bcc:	003fa706 	br	c013a6c <__alt_data_end+0xfc013a6c>
 c013bd0:	8984b03a 	or	r2,r17,r6
 c013bd4:	10002026 	beq	r2,zero,c013c58 <__muldf3+0x2b4>
 c013bd8:	8800cc26 	beq	r17,zero,c013f0c <__muldf3+0x568>
 c013bdc:	8809883a 	mov	r4,r17
 c013be0:	d8c00215 	stw	r3,8(sp)
 c013be4:	d9800315 	stw	r6,12(sp)
 c013be8:	da800015 	stw	r10,0(sp)
 c013bec:	dac00115 	stw	r11,4(sp)
 c013bf0:	c008b480 	call	c008b48 <__clzsi2>
 c013bf4:	d8c00217 	ldw	r3,8(sp)
 c013bf8:	d9800317 	ldw	r6,12(sp)
 c013bfc:	da800017 	ldw	r10,0(sp)
 c013c00:	dac00117 	ldw	r11,4(sp)
 c013c04:	1009883a 	mov	r4,r2
 c013c08:	01400a04 	movi	r5,40
 c013c0c:	25fffe04 	addi	r23,r4,-8
 c013c10:	290bc83a 	sub	r5,r5,r4
 c013c14:	8dd0983a 	sll	r8,r17,r23
 c013c18:	314ad83a 	srl	r5,r6,r5
 c013c1c:	35ee983a 	sll	r23,r6,r23
 c013c20:	2a22b03a 	or	r17,r5,r8
 c013c24:	017f0344 	movi	r5,-1011
 c013c28:	290bc83a 	sub	r5,r5,r4
 c013c2c:	0013883a 	mov	r9,zero
 c013c30:	003f8e06 	br	c013a6c <__alt_data_end+0xfc013a6c>
 c013c34:	008000c4 	movi	r2,3
 c013c38:	50811d26 	beq	r10,r2,c0140b0 <__muldf3+0x70c>
 c013c3c:	00800044 	movi	r2,1
 c013c40:	5080e01e 	bne	r10,r2,c013fc4 <__muldf3+0x620>
 c013c44:	e0a6703a 	and	r19,fp,r2
 c013c48:	0009883a 	mov	r4,zero
 c013c4c:	0021883a 	mov	r16,zero
 c013c50:	0025883a 	mov	r18,zero
 c013c54:	003fad06 	br	c013b0c <__alt_data_end+0xfc013b0c>
 c013c58:	0023883a 	mov	r17,zero
 c013c5c:	002f883a 	mov	r23,zero
 c013c60:	02400044 	movi	r9,1
 c013c64:	003f8106 	br	c013a6c <__alt_data_end+0xfc013a6c>
 c013c68:	024000c4 	movi	r9,3
 c013c6c:	003f7f06 	br	c013a6c <__alt_data_end+0xfc013a6c>
 c013c70:	05400104 	movi	r21,4
 c013c74:	0021883a 	mov	r16,zero
 c013c78:	0025883a 	mov	r18,zero
 c013c7c:	02800044 	movi	r10,1
 c013c80:	003f6806 	br	c013a24 <__alt_data_end+0xfc013a24>
 c013c84:	05400304 	movi	r21,12
 c013c88:	028000c4 	movi	r10,3
 c013c8c:	003f6506 	br	c013a24 <__alt_data_end+0xfc013a24>
 c013c90:	04000434 	movhi	r16,16
 c013c94:	0027883a 	mov	r19,zero
 c013c98:	843fffc4 	addi	r16,r16,-1
 c013c9c:	04bfffc4 	movi	r18,-1
 c013ca0:	0101ffc4 	movi	r4,2047
 c013ca4:	003f9906 	br	c013b0c <__alt_data_end+0xfc013b0c>
 c013ca8:	8821883a 	mov	r16,r17
 c013cac:	b825883a 	mov	r18,r23
 c013cb0:	5839883a 	mov	fp,r11
 c013cb4:	4815883a 	mov	r10,r9
 c013cb8:	003f8e06 	br	c013af4 <__alt_data_end+0xfc013af4>
 c013cbc:	8821883a 	mov	r16,r17
 c013cc0:	b825883a 	mov	r18,r23
 c013cc4:	b039883a 	mov	fp,r22
 c013cc8:	4815883a 	mov	r10,r9
 c013ccc:	003f8906 	br	c013af4 <__alt_data_end+0xfc013af4>
 c013cd0:	b80cd43a 	srli	r6,r23,16
 c013cd4:	9006d43a 	srli	r3,r18,16
 c013cd8:	90bfffcc 	andi	r2,r18,65535
 c013cdc:	bdffffcc 	andi	r23,r23,65535
 c013ce0:	b891383a 	mul	r8,r23,r2
 c013ce4:	b8c9383a 	mul	r4,r23,r3
 c013ce8:	309b383a 	mul	r13,r6,r2
 c013cec:	400ed43a 	srli	r7,r8,16
 c013cf0:	30df383a 	mul	r15,r6,r3
 c013cf4:	235b883a 	add	r13,r4,r13
 c013cf8:	69db883a 	add	r13,r13,r7
 c013cfc:	6900022e 	bgeu	r13,r4,c013d08 <__muldf3+0x364>
 c013d00:	01000074 	movhi	r4,1
 c013d04:	791f883a 	add	r15,r15,r4
 c013d08:	8828d43a 	srli	r20,r17,16
 c013d0c:	8c7fffcc 	andi	r17,r17,65535
 c013d10:	888f383a 	mul	r7,r17,r2
 c013d14:	88d3383a 	mul	r9,r17,r3
 c013d18:	a0a5383a 	mul	r18,r20,r2
 c013d1c:	3816d43a 	srli	r11,r7,16
 c013d20:	6814943a 	slli	r10,r13,16
 c013d24:	4ca5883a 	add	r18,r9,r18
 c013d28:	423fffcc 	andi	r8,r8,65535
 c013d2c:	92e5883a 	add	r18,r18,r11
 c013d30:	6808d43a 	srli	r4,r13,16
 c013d34:	5215883a 	add	r10,r10,r8
 c013d38:	a0c7383a 	mul	r3,r20,r3
 c013d3c:	9240022e 	bgeu	r18,r9,c013d48 <__muldf3+0x3a4>
 c013d40:	00800074 	movhi	r2,1
 c013d44:	1887883a 	add	r3,r3,r2
 c013d48:	802ad43a 	srli	r21,r16,16
 c013d4c:	80bfffcc 	andi	r2,r16,65535
 c013d50:	b893383a 	mul	r9,r23,r2
 c013d54:	3091383a 	mul	r8,r6,r2
 c013d58:	bd6f383a 	mul	r23,r23,r21
 c013d5c:	9026943a 	slli	r19,r18,16
 c013d60:	481ad43a 	srli	r13,r9,16
 c013d64:	9024d43a 	srli	r18,r18,16
 c013d68:	39ffffcc 	andi	r7,r7,65535
 c013d6c:	ba11883a 	add	r8,r23,r8
 c013d70:	99e7883a 	add	r19,r19,r7
 c013d74:	4351883a 	add	r8,r8,r13
 c013d78:	1c97883a 	add	r11,r3,r18
 c013d7c:	354d383a 	mul	r6,r6,r21
 c013d80:	9925883a 	add	r18,r19,r4
 c013d84:	45c0022e 	bgeu	r8,r23,c013d90 <__muldf3+0x3ec>
 c013d88:	00c00074 	movhi	r3,1
 c013d8c:	30cd883a 	add	r6,r6,r3
 c013d90:	8889383a 	mul	r4,r17,r2
 c013d94:	8d63383a 	mul	r17,r17,r21
 c013d98:	a085383a 	mul	r2,r20,r2
 c013d9c:	200ed43a 	srli	r7,r4,16
 c013da0:	401cd43a 	srli	r14,r8,16
 c013da4:	401a943a 	slli	r13,r8,16
 c013da8:	8885883a 	add	r2,r17,r2
 c013dac:	4a3fffcc 	andi	r8,r9,65535
 c013db0:	11c5883a 	add	r2,r2,r7
 c013db4:	339d883a 	add	r14,r6,r14
 c013db8:	6a11883a 	add	r8,r13,r8
 c013dbc:	a561383a 	mul	r16,r20,r21
 c013dc0:	1440022e 	bgeu	r2,r17,c013dcc <__muldf3+0x428>
 c013dc4:	00c00074 	movhi	r3,1
 c013dc8:	80e1883a 	add	r16,r16,r3
 c013dcc:	1006943a 	slli	r3,r2,16
 c013dd0:	213fffcc 	andi	r4,r4,65535
 c013dd4:	93db883a 	add	r13,r18,r15
 c013dd8:	1909883a 	add	r4,r3,r4
 c013ddc:	22c7883a 	add	r3,r4,r11
 c013de0:	6cd3803a 	cmpltu	r9,r13,r19
 c013de4:	6a09883a 	add	r4,r13,r8
 c013de8:	1a5b883a 	add	r13,r3,r9
 c013dec:	2211803a 	cmpltu	r8,r4,r8
 c013df0:	734d883a 	add	r6,r14,r13
 c013df4:	100ed43a 	srli	r7,r2,16
 c013df8:	6a53803a 	cmpltu	r9,r13,r9
 c013dfc:	3205883a 	add	r2,r6,r8
 c013e00:	1ac7803a 	cmpltu	r3,r3,r11
 c013e04:	1211803a 	cmpltu	r8,r2,r8
 c013e08:	48c6b03a 	or	r3,r9,r3
 c013e0c:	338d803a 	cmpltu	r6,r6,r14
 c013e10:	19c7883a 	add	r3,r3,r7
 c013e14:	418cb03a 	or	r6,r8,r6
 c013e18:	1987883a 	add	r3,r3,r6
 c013e1c:	2024927a 	slli	r18,r4,9
 c013e20:	1c07883a 	add	r3,r3,r16
 c013e24:	1806927a 	slli	r3,r3,9
 c013e28:	1020d5fa 	srli	r16,r2,23
 c013e2c:	2008d5fa 	srli	r4,r4,23
 c013e30:	9294b03a 	or	r10,r18,r10
 c013e34:	1004927a 	slli	r2,r2,9
 c013e38:	5024c03a 	cmpne	r18,r10,zero
 c013e3c:	1c20b03a 	or	r16,r3,r16
 c013e40:	9108b03a 	or	r4,r18,r4
 c013e44:	80c0402c 	andhi	r3,r16,256
 c013e48:	20a4b03a 	or	r18,r4,r2
 c013e4c:	18000726 	beq	r3,zero,c013e6c <__muldf3+0x4c8>
 c013e50:	9006d07a 	srli	r3,r18,1
 c013e54:	800897fa 	slli	r4,r16,31
 c013e58:	9080004c 	andi	r2,r18,1
 c013e5c:	8020d07a 	srli	r16,r16,1
 c013e60:	10c4b03a 	or	r2,r2,r3
 c013e64:	1124b03a 	or	r18,r2,r4
 c013e68:	600b883a 	mov	r5,r12
 c013e6c:	2900ffc4 	addi	r4,r5,1023
 c013e70:	01004b0e 	bge	zero,r4,c013fa0 <__muldf3+0x5fc>
 c013e74:	908001cc 	andi	r2,r18,7
 c013e78:	10000726 	beq	r2,zero,c013e98 <__muldf3+0x4f4>
 c013e7c:	90c003cc 	andi	r3,r18,15
 c013e80:	00800104 	movi	r2,4
 c013e84:	18800426 	beq	r3,r2,c013e98 <__muldf3+0x4f4>
 c013e88:	9087883a 	add	r3,r18,r2
 c013e8c:	1c85803a 	cmpltu	r2,r3,r18
 c013e90:	80a1883a 	add	r16,r16,r2
 c013e94:	1825883a 	mov	r18,r3
 c013e98:	8080402c 	andhi	r2,r16,256
 c013e9c:	10000426 	beq	r2,zero,c013eb0 <__muldf3+0x50c>
 c013ea0:	00bfc034 	movhi	r2,65280
 c013ea4:	10bfffc4 	addi	r2,r2,-1
 c013ea8:	29010004 	addi	r4,r5,1024
 c013eac:	80a0703a 	and	r16,r16,r2
 c013eb0:	0081ff84 	movi	r2,2046
 c013eb4:	1100320e 	bge	r2,r4,c013f80 <__muldf3+0x5dc>
 c013eb8:	b4c0004c 	andi	r19,r22,1
 c013ebc:	0101ffc4 	movi	r4,2047
 c013ec0:	0021883a 	mov	r16,zero
 c013ec4:	0025883a 	mov	r18,zero
 c013ec8:	003f1006 	br	c013b0c <__alt_data_end+0xfc013b0c>
 c013ecc:	8080022c 	andhi	r2,r16,8
 c013ed0:	10000926 	beq	r2,zero,c013ef8 <__muldf3+0x554>
 c013ed4:	8880022c 	andhi	r2,r17,8
 c013ed8:	1000071e 	bne	r2,zero,c013ef8 <__muldf3+0x554>
 c013edc:	00800434 	movhi	r2,16
 c013ee0:	8c000234 	orhi	r16,r17,8
 c013ee4:	10bfffc4 	addi	r2,r2,-1
 c013ee8:	1827883a 	mov	r19,r3
 c013eec:	80a0703a 	and	r16,r16,r2
 c013ef0:	b825883a 	mov	r18,r23
 c013ef4:	003f6a06 	br	c013ca0 <__alt_data_end+0xfc013ca0>
 c013ef8:	00800434 	movhi	r2,16
 c013efc:	84000234 	orhi	r16,r16,8
 c013f00:	10bfffc4 	addi	r2,r2,-1
 c013f04:	80a0703a 	and	r16,r16,r2
 c013f08:	003f6506 	br	c013ca0 <__alt_data_end+0xfc013ca0>
 c013f0c:	3009883a 	mov	r4,r6
 c013f10:	d8c00215 	stw	r3,8(sp)
 c013f14:	d9800315 	stw	r6,12(sp)
 c013f18:	da800015 	stw	r10,0(sp)
 c013f1c:	dac00115 	stw	r11,4(sp)
 c013f20:	c008b480 	call	c008b48 <__clzsi2>
 c013f24:	11000804 	addi	r4,r2,32
 c013f28:	014009c4 	movi	r5,39
 c013f2c:	d8c00217 	ldw	r3,8(sp)
 c013f30:	d9800317 	ldw	r6,12(sp)
 c013f34:	da800017 	ldw	r10,0(sp)
 c013f38:	dac00117 	ldw	r11,4(sp)
 c013f3c:	293f320e 	bge	r5,r4,c013c08 <__alt_data_end+0xfc013c08>
 c013f40:	10bffe04 	addi	r2,r2,-8
 c013f44:	b8a2983a 	sll	r17,r23,r2
 c013f48:	002f883a 	mov	r23,zero
 c013f4c:	003f3506 	br	c013c24 <__alt_data_end+0xfc013c24>
 c013f50:	d9800315 	stw	r6,12(sp)
 c013f54:	d9c00015 	stw	r7,0(sp)
 c013f58:	c008b480 	call	c008b48 <__clzsi2>
 c013f5c:	10c00804 	addi	r3,r2,32
 c013f60:	010009c4 	movi	r4,39
 c013f64:	d9800317 	ldw	r6,12(sp)
 c013f68:	d9c00017 	ldw	r7,0(sp)
 c013f6c:	20ff060e 	bge	r4,r3,c013b88 <__alt_data_end+0xfc013b88>
 c013f70:	10bffe04 	addi	r2,r2,-8
 c013f74:	88a0983a 	sll	r16,r17,r2
 c013f78:	0025883a 	mov	r18,zero
 c013f7c:	003f0906 	br	c013ba4 <__alt_data_end+0xfc013ba4>
 c013f80:	9004d0fa 	srli	r2,r18,3
 c013f84:	8024977a 	slli	r18,r16,29
 c013f88:	8020927a 	slli	r16,r16,9
 c013f8c:	2101ffcc 	andi	r4,r4,2047
 c013f90:	90a4b03a 	or	r18,r18,r2
 c013f94:	8020d33a 	srli	r16,r16,12
 c013f98:	b4c0004c 	andi	r19,r22,1
 c013f9c:	003edb06 	br	c013b0c <__alt_data_end+0xfc013b0c>
 c013fa0:	00ff0084 	movi	r3,-1022
 c013fa4:	1947c83a 	sub	r3,r3,r5
 c013fa8:	00800e04 	movi	r2,56
 c013fac:	10c0080e 	bge	r2,r3,c013fd0 <__muldf3+0x62c>
 c013fb0:	b4c0004c 	andi	r19,r22,1
 c013fb4:	0009883a 	mov	r4,zero
 c013fb8:	0021883a 	mov	r16,zero
 c013fbc:	0025883a 	mov	r18,zero
 c013fc0:	003ed206 	br	c013b0c <__alt_data_end+0xfc013b0c>
 c013fc4:	600b883a 	mov	r5,r12
 c013fc8:	e02d883a 	mov	r22,fp
 c013fcc:	003fa706 	br	c013e6c <__alt_data_end+0xfc013e6c>
 c013fd0:	008007c4 	movi	r2,31
 c013fd4:	10c01816 	blt	r2,r3,c014038 <__muldf3+0x694>
 c013fd8:	29410784 	addi	r5,r5,1054
 c013fdc:	8144983a 	sll	r2,r16,r5
 c013fe0:	90c8d83a 	srl	r4,r18,r3
 c013fe4:	914a983a 	sll	r5,r18,r5
 c013fe8:	80c6d83a 	srl	r3,r16,r3
 c013fec:	2088b03a 	or	r4,r4,r2
 c013ff0:	2804c03a 	cmpne	r2,r5,zero
 c013ff4:	2084b03a 	or	r2,r4,r2
 c013ff8:	110001cc 	andi	r4,r2,7
 c013ffc:	20000726 	beq	r4,zero,c01401c <__muldf3+0x678>
 c014000:	114003cc 	andi	r5,r2,15
 c014004:	01000104 	movi	r4,4
 c014008:	29000426 	beq	r5,r4,c01401c <__muldf3+0x678>
 c01400c:	11000104 	addi	r4,r2,4
 c014010:	2085803a 	cmpltu	r2,r4,r2
 c014014:	1887883a 	add	r3,r3,r2
 c014018:	2005883a 	mov	r2,r4
 c01401c:	1900202c 	andhi	r4,r3,128
 c014020:	20001826 	beq	r4,zero,c014084 <__muldf3+0x6e0>
 c014024:	b4c0004c 	andi	r19,r22,1
 c014028:	01000044 	movi	r4,1
 c01402c:	0021883a 	mov	r16,zero
 c014030:	0025883a 	mov	r18,zero
 c014034:	003eb506 	br	c013b0c <__alt_data_end+0xfc013b0c>
 c014038:	00bef884 	movi	r2,-1054
 c01403c:	1145c83a 	sub	r2,r2,r5
 c014040:	8088d83a 	srl	r4,r16,r2
 c014044:	00800804 	movi	r2,32
 c014048:	18801726 	beq	r3,r2,c0140a8 <__muldf3+0x704>
 c01404c:	28810f84 	addi	r2,r5,1086
 c014050:	8084983a 	sll	r2,r16,r2
 c014054:	1484b03a 	or	r2,r2,r18
 c014058:	1004c03a 	cmpne	r2,r2,zero
 c01405c:	1104b03a 	or	r2,r2,r4
 c014060:	10c001cc 	andi	r3,r2,7
 c014064:	18000b1e 	bne	r3,zero,c014094 <__muldf3+0x6f0>
 c014068:	0021883a 	mov	r16,zero
 c01406c:	1004d0fa 	srli	r2,r2,3
 c014070:	b4c0004c 	andi	r19,r22,1
 c014074:	0009883a 	mov	r4,zero
 c014078:	10e4b03a 	or	r18,r2,r3
 c01407c:	003ea306 	br	c013b0c <__alt_data_end+0xfc013b0c>
 c014080:	0007883a 	mov	r3,zero
 c014084:	1820927a 	slli	r16,r3,9
 c014088:	1806977a 	slli	r3,r3,29
 c01408c:	8020d33a 	srli	r16,r16,12
 c014090:	003ff606 	br	c01406c <__alt_data_end+0xfc01406c>
 c014094:	110003cc 	andi	r4,r2,15
 c014098:	00c00104 	movi	r3,4
 c01409c:	20fff826 	beq	r4,r3,c014080 <__alt_data_end+0xfc014080>
 c0140a0:	0007883a 	mov	r3,zero
 c0140a4:	003fd906 	br	c01400c <__alt_data_end+0xfc01400c>
 c0140a8:	0005883a 	mov	r2,zero
 c0140ac:	003fe906 	br	c014054 <__alt_data_end+0xfc014054>
 c0140b0:	00800434 	movhi	r2,16
 c0140b4:	84000234 	orhi	r16,r16,8
 c0140b8:	10bfffc4 	addi	r2,r2,-1
 c0140bc:	e4c0004c 	andi	r19,fp,1
 c0140c0:	80a0703a 	and	r16,r16,r2
 c0140c4:	003ef606 	br	c013ca0 <__alt_data_end+0xfc013ca0>

0c0140c8 <__subdf3>:
 c0140c8:	00c00434 	movhi	r3,16
 c0140cc:	18ffffc4 	addi	r3,r3,-1
 c0140d0:	defffb04 	addi	sp,sp,-20
 c0140d4:	28d2703a 	and	r9,r5,r3
 c0140d8:	3814d53a 	srli	r10,r7,20
 c0140dc:	38c6703a 	and	r3,r7,r3
 c0140e0:	3004d77a 	srli	r2,r6,29
 c0140e4:	dc800215 	stw	r18,8(sp)
 c0140e8:	dc000015 	stw	r16,0(sp)
 c0140ec:	2824d7fa 	srli	r18,r5,31
 c0140f0:	2820d53a 	srli	r16,r5,20
 c0140f4:	481290fa 	slli	r9,r9,3
 c0140f8:	200ad77a 	srli	r5,r4,29
 c0140fc:	180690fa 	slli	r3,r3,3
 c014100:	dc400115 	stw	r17,4(sp)
 c014104:	dfc00415 	stw	ra,16(sp)
 c014108:	202290fa 	slli	r17,r4,3
 c01410c:	dcc00315 	stw	r19,12(sp)
 c014110:	5281ffcc 	andi	r10,r10,2047
 c014114:	0101ffc4 	movi	r4,2047
 c014118:	9011883a 	mov	r8,r18
 c01411c:	8401ffcc 	andi	r16,r16,2047
 c014120:	94803fcc 	andi	r18,r18,255
 c014124:	494ab03a 	or	r5,r9,r5
 c014128:	380ed7fa 	srli	r7,r7,31
 c01412c:	1886b03a 	or	r3,r3,r2
 c014130:	300c90fa 	slli	r6,r6,3
 c014134:	51009026 	beq	r10,r4,c014378 <__subdf3+0x2b0>
 c014138:	39c0005c 	xori	r7,r7,1
 c01413c:	8285c83a 	sub	r2,r16,r10
 c014140:	91c06f26 	beq	r18,r7,c014300 <__subdf3+0x238>
 c014144:	0080b10e 	bge	zero,r2,c01440c <__subdf3+0x344>
 c014148:	50002a1e 	bne	r10,zero,c0141f4 <__subdf3+0x12c>
 c01414c:	1988b03a 	or	r4,r3,r6
 c014150:	2000941e 	bne	r4,zero,c0143a4 <__subdf3+0x2dc>
 c014154:	888001cc 	andi	r2,r17,7
 c014158:	10005b26 	beq	r2,zero,c0142c8 <__subdf3+0x200>
 c01415c:	88c003cc 	andi	r3,r17,15
 c014160:	00800104 	movi	r2,4
 c014164:	18805826 	beq	r3,r2,c0142c8 <__subdf3+0x200>
 c014168:	88c00104 	addi	r3,r17,4
 c01416c:	1c63803a 	cmpltu	r17,r3,r17
 c014170:	2c4b883a 	add	r5,r5,r17
 c014174:	2880202c 	andhi	r2,r5,128
 c014178:	9200004c 	andi	r8,r18,1
 c01417c:	1823883a 	mov	r17,r3
 c014180:	10005426 	beq	r2,zero,c0142d4 <__subdf3+0x20c>
 c014184:	84000044 	addi	r16,r16,1
 c014188:	0081ffc4 	movi	r2,2047
 c01418c:	8080bf26 	beq	r16,r2,c01448c <__subdf3+0x3c4>
 c014190:	013fe034 	movhi	r4,65408
 c014194:	213fffc4 	addi	r4,r4,-1
 c014198:	290a703a 	and	r5,r5,r4
 c01419c:	2804977a 	slli	r2,r5,29
 c0141a0:	280a927a 	slli	r5,r5,9
 c0141a4:	8822d0fa 	srli	r17,r17,3
 c0141a8:	8401ffcc 	andi	r16,r16,2047
 c0141ac:	2808d33a 	srli	r4,r5,12
 c0141b0:	1444b03a 	or	r2,r2,r17
 c0141b4:	8401ffcc 	andi	r16,r16,2047
 c0141b8:	800a953a 	slli	r5,r16,20
 c0141bc:	40c03fcc 	andi	r3,r8,255
 c0141c0:	04000434 	movhi	r16,16
 c0141c4:	180697fa 	slli	r3,r3,31
 c0141c8:	843fffc4 	addi	r16,r16,-1
 c0141cc:	2420703a 	and	r16,r4,r16
 c0141d0:	8160b03a 	or	r16,r16,r5
 c0141d4:	80c6b03a 	or	r3,r16,r3
 c0141d8:	dfc00417 	ldw	ra,16(sp)
 c0141dc:	dcc00317 	ldw	r19,12(sp)
 c0141e0:	dc800217 	ldw	r18,8(sp)
 c0141e4:	dc400117 	ldw	r17,4(sp)
 c0141e8:	dc000017 	ldw	r16,0(sp)
 c0141ec:	dec00504 	addi	sp,sp,20
 c0141f0:	f800283a 	ret
 c0141f4:	0101ffc4 	movi	r4,2047
 c0141f8:	813fd626 	beq	r16,r4,c014154 <__alt_data_end+0xfc014154>
 c0141fc:	18c02034 	orhi	r3,r3,128
 c014200:	01000e04 	movi	r4,56
 c014204:	2080a416 	blt	r4,r2,c014498 <__subdf3+0x3d0>
 c014208:	010007c4 	movi	r4,31
 c01420c:	2080c716 	blt	r4,r2,c01452c <__subdf3+0x464>
 c014210:	01000804 	movi	r4,32
 c014214:	2089c83a 	sub	r4,r4,r2
 c014218:	1910983a 	sll	r8,r3,r4
 c01421c:	308ed83a 	srl	r7,r6,r2
 c014220:	3108983a 	sll	r4,r6,r4
 c014224:	1884d83a 	srl	r2,r3,r2
 c014228:	41ccb03a 	or	r6,r8,r7
 c01422c:	2008c03a 	cmpne	r4,r4,zero
 c014230:	310cb03a 	or	r6,r6,r4
 c014234:	898dc83a 	sub	r6,r17,r6
 c014238:	89a3803a 	cmpltu	r17,r17,r6
 c01423c:	288bc83a 	sub	r5,r5,r2
 c014240:	2c4bc83a 	sub	r5,r5,r17
 c014244:	3023883a 	mov	r17,r6
 c014248:	2880202c 	andhi	r2,r5,128
 c01424c:	10006b26 	beq	r2,zero,c0143fc <__subdf3+0x334>
 c014250:	04c02034 	movhi	r19,128
 c014254:	9cffffc4 	addi	r19,r19,-1
 c014258:	2ce6703a 	and	r19,r5,r19
 c01425c:	98007c26 	beq	r19,zero,c014450 <__subdf3+0x388>
 c014260:	9809883a 	mov	r4,r19
 c014264:	c008b480 	call	c008b48 <__clzsi2>
 c014268:	10fffe04 	addi	r3,r2,-8
 c01426c:	010007c4 	movi	r4,31
 c014270:	20c07d16 	blt	r4,r3,c014468 <__subdf3+0x3a0>
 c014274:	01400a04 	movi	r5,40
 c014278:	2885c83a 	sub	r2,r5,r2
 c01427c:	888ad83a 	srl	r5,r17,r2
 c014280:	98e6983a 	sll	r19,r19,r3
 c014284:	88e2983a 	sll	r17,r17,r3
 c014288:	2ce6b03a 	or	r19,r5,r19
 c01428c:	1c007a16 	blt	r3,r16,c014478 <__subdf3+0x3b0>
 c014290:	1c21c83a 	sub	r16,r3,r16
 c014294:	81400044 	addi	r5,r16,1
 c014298:	00c007c4 	movi	r3,31
 c01429c:	19409616 	blt	r3,r5,c0144f8 <__subdf3+0x430>
 c0142a0:	1c21c83a 	sub	r16,r3,r16
 c0142a4:	8c08983a 	sll	r4,r17,r16
 c0142a8:	8946d83a 	srl	r3,r17,r5
 c0142ac:	9c20983a 	sll	r16,r19,r16
 c0142b0:	2008c03a 	cmpne	r4,r4,zero
 c0142b4:	994ad83a 	srl	r5,r19,r5
 c0142b8:	1c06b03a 	or	r3,r3,r16
 c0142bc:	1922b03a 	or	r17,r3,r4
 c0142c0:	0021883a 	mov	r16,zero
 c0142c4:	003fa306 	br	c014154 <__alt_data_end+0xfc014154>
 c0142c8:	2880202c 	andhi	r2,r5,128
 c0142cc:	9200004c 	andi	r8,r18,1
 c0142d0:	103fac1e 	bne	r2,zero,c014184 <__alt_data_end+0xfc014184>
 c0142d4:	2804977a 	slli	r2,r5,29
 c0142d8:	8822d0fa 	srli	r17,r17,3
 c0142dc:	00c1ffc4 	movi	r3,2047
 c0142e0:	280ad0fa 	srli	r5,r5,3
 c0142e4:	1444b03a 	or	r2,r2,r17
 c0142e8:	80c02726 	beq	r16,r3,c014388 <__subdf3+0x2c0>
 c0142ec:	01000434 	movhi	r4,16
 c0142f0:	213fffc4 	addi	r4,r4,-1
 c0142f4:	80e0703a 	and	r16,r16,r3
 c0142f8:	2908703a 	and	r4,r5,r4
 c0142fc:	003fad06 	br	c0141b4 <__alt_data_end+0xfc0141b4>
 c014300:	0080690e 	bge	zero,r2,c0144a8 <__subdf3+0x3e0>
 c014304:	50002f26 	beq	r10,zero,c0143c4 <__subdf3+0x2fc>
 c014308:	0101ffc4 	movi	r4,2047
 c01430c:	813f9126 	beq	r16,r4,c014154 <__alt_data_end+0xfc014154>
 c014310:	18c02034 	orhi	r3,r3,128
 c014314:	01000e04 	movi	r4,56
 c014318:	2080b00e 	bge	r4,r2,c0145dc <__subdf3+0x514>
 c01431c:	198cb03a 	or	r6,r3,r6
 c014320:	300ec03a 	cmpne	r7,r6,zero
 c014324:	0005883a 	mov	r2,zero
 c014328:	3c4f883a 	add	r7,r7,r17
 c01432c:	3c63803a 	cmpltu	r17,r7,r17
 c014330:	114b883a 	add	r5,r2,r5
 c014334:	2c4b883a 	add	r5,r5,r17
 c014338:	3823883a 	mov	r17,r7
 c01433c:	2880202c 	andhi	r2,r5,128
 c014340:	10002e26 	beq	r2,zero,c0143fc <__subdf3+0x334>
 c014344:	84000044 	addi	r16,r16,1
 c014348:	0081ffc4 	movi	r2,2047
 c01434c:	8080de26 	beq	r16,r2,c0146c8 <__subdf3+0x600>
 c014350:	00bfe034 	movhi	r2,65408
 c014354:	10bfffc4 	addi	r2,r2,-1
 c014358:	288a703a 	and	r5,r5,r2
 c01435c:	880cd07a 	srli	r6,r17,1
 c014360:	280897fa 	slli	r4,r5,31
 c014364:	88c0004c 	andi	r3,r17,1
 c014368:	30e2b03a 	or	r17,r6,r3
 c01436c:	280ad07a 	srli	r5,r5,1
 c014370:	8922b03a 	or	r17,r17,r4
 c014374:	003f7706 	br	c014154 <__alt_data_end+0xfc014154>
 c014378:	1984b03a 	or	r2,r3,r6
 c01437c:	103f6e26 	beq	r2,zero,c014138 <__alt_data_end+0xfc014138>
 c014380:	39c03fcc 	andi	r7,r7,255
 c014384:	003f6d06 	br	c01413c <__alt_data_end+0xfc01413c>
 c014388:	1146b03a 	or	r3,r2,r5
 c01438c:	18003f26 	beq	r3,zero,c01448c <__subdf3+0x3c4>
 c014390:	00c00434 	movhi	r3,16
 c014394:	29000234 	orhi	r4,r5,8
 c014398:	18ffffc4 	addi	r3,r3,-1
 c01439c:	20c8703a 	and	r4,r4,r3
 c0143a0:	003f8406 	br	c0141b4 <__alt_data_end+0xfc0141b4>
 c0143a4:	10bfffc4 	addi	r2,r2,-1
 c0143a8:	1000501e 	bne	r2,zero,c0144ec <__subdf3+0x424>
 c0143ac:	898fc83a 	sub	r7,r17,r6
 c0143b0:	89e3803a 	cmpltu	r17,r17,r7
 c0143b4:	28cbc83a 	sub	r5,r5,r3
 c0143b8:	2c4bc83a 	sub	r5,r5,r17
 c0143bc:	3823883a 	mov	r17,r7
 c0143c0:	003fa106 	br	c014248 <__alt_data_end+0xfc014248>
 c0143c4:	1988b03a 	or	r4,r3,r6
 c0143c8:	203f6226 	beq	r4,zero,c014154 <__alt_data_end+0xfc014154>
 c0143cc:	10bfffc4 	addi	r2,r2,-1
 c0143d0:	10009b1e 	bne	r2,zero,c014640 <__subdf3+0x578>
 c0143d4:	344d883a 	add	r6,r6,r17
 c0143d8:	3463803a 	cmpltu	r17,r6,r17
 c0143dc:	194b883a 	add	r5,r3,r5
 c0143e0:	2c4b883a 	add	r5,r5,r17
 c0143e4:	3023883a 	mov	r17,r6
 c0143e8:	003fd406 	br	c01433c <__alt_data_end+0xfc01433c>
 c0143ec:	1106b03a 	or	r3,r2,r4
 c0143f0:	1800b426 	beq	r3,zero,c0146c4 <__subdf3+0x5fc>
 c0143f4:	100b883a 	mov	r5,r2
 c0143f8:	2023883a 	mov	r17,r4
 c0143fc:	888001cc 	andi	r2,r17,7
 c014400:	103f561e 	bne	r2,zero,c01415c <__alt_data_end+0xfc01415c>
 c014404:	9200004c 	andi	r8,r18,1
 c014408:	003fb206 	br	c0142d4 <__alt_data_end+0xfc0142d4>
 c01440c:	1000531e 	bne	r2,zero,c01455c <__subdf3+0x494>
 c014410:	80800044 	addi	r2,r16,1
 c014414:	1081ffcc 	andi	r2,r2,2047
 c014418:	01000044 	movi	r4,1
 c01441c:	2080a00e 	bge	r4,r2,c0146a0 <__subdf3+0x5d8>
 c014420:	8985c83a 	sub	r2,r17,r6
 c014424:	8889803a 	cmpltu	r4,r17,r2
 c014428:	28e7c83a 	sub	r19,r5,r3
 c01442c:	9927c83a 	sub	r19,r19,r4
 c014430:	9900202c 	andhi	r4,r19,128
 c014434:	20006226 	beq	r4,zero,c0145c0 <__subdf3+0x4f8>
 c014438:	3463c83a 	sub	r17,r6,r17
 c01443c:	194bc83a 	sub	r5,r3,r5
 c014440:	344d803a 	cmpltu	r6,r6,r17
 c014444:	29a7c83a 	sub	r19,r5,r6
 c014448:	3825883a 	mov	r18,r7
 c01444c:	983f841e 	bne	r19,zero,c014260 <__alt_data_end+0xfc014260>
 c014450:	8809883a 	mov	r4,r17
 c014454:	c008b480 	call	c008b48 <__clzsi2>
 c014458:	10800804 	addi	r2,r2,32
 c01445c:	10fffe04 	addi	r3,r2,-8
 c014460:	010007c4 	movi	r4,31
 c014464:	20ff830e 	bge	r4,r3,c014274 <__alt_data_end+0xfc014274>
 c014468:	14fff604 	addi	r19,r2,-40
 c01446c:	8ce6983a 	sll	r19,r17,r19
 c014470:	0023883a 	mov	r17,zero
 c014474:	1c3f860e 	bge	r3,r16,c014290 <__alt_data_end+0xfc014290>
 c014478:	017fe034 	movhi	r5,65408
 c01447c:	297fffc4 	addi	r5,r5,-1
 c014480:	80e1c83a 	sub	r16,r16,r3
 c014484:	994a703a 	and	r5,r19,r5
 c014488:	003f3206 	br	c014154 <__alt_data_end+0xfc014154>
 c01448c:	0009883a 	mov	r4,zero
 c014490:	0005883a 	mov	r2,zero
 c014494:	003f4706 	br	c0141b4 <__alt_data_end+0xfc0141b4>
 c014498:	198cb03a 	or	r6,r3,r6
 c01449c:	300cc03a 	cmpne	r6,r6,zero
 c0144a0:	0005883a 	mov	r2,zero
 c0144a4:	003f6306 	br	c014234 <__alt_data_end+0xfc014234>
 c0144a8:	10009d1e 	bne	r2,zero,c014720 <__subdf3+0x658>
 c0144ac:	81c00044 	addi	r7,r16,1
 c0144b0:	3881ffcc 	andi	r2,r7,2047
 c0144b4:	02400044 	movi	r9,1
 c0144b8:	4880680e 	bge	r9,r2,c01465c <__subdf3+0x594>
 c0144bc:	0081ffc4 	movi	r2,2047
 c0144c0:	3880ae26 	beq	r7,r2,c01477c <__subdf3+0x6b4>
 c0144c4:	344d883a 	add	r6,r6,r17
 c0144c8:	3463803a 	cmpltu	r17,r6,r17
 c0144cc:	194b883a 	add	r5,r3,r5
 c0144d0:	2c4b883a 	add	r5,r5,r17
 c0144d4:	282297fa 	slli	r17,r5,31
 c0144d8:	300cd07a 	srli	r6,r6,1
 c0144dc:	280ad07a 	srli	r5,r5,1
 c0144e0:	3821883a 	mov	r16,r7
 c0144e4:	89a2b03a 	or	r17,r17,r6
 c0144e8:	003f1a06 	br	c014154 <__alt_data_end+0xfc014154>
 c0144ec:	0101ffc4 	movi	r4,2047
 c0144f0:	813f431e 	bne	r16,r4,c014200 <__alt_data_end+0xfc014200>
 c0144f4:	003f1706 	br	c014154 <__alt_data_end+0xfc014154>
 c0144f8:	80bff844 	addi	r2,r16,-31
 c0144fc:	00c00804 	movi	r3,32
 c014500:	9884d83a 	srl	r2,r19,r2
 c014504:	28c05126 	beq	r5,r3,c01464c <__subdf3+0x584>
 c014508:	00c00fc4 	movi	r3,63
 c01450c:	1c21c83a 	sub	r16,r3,r16
 c014510:	9c26983a 	sll	r19,r19,r16
 c014514:	9c62b03a 	or	r17,r19,r17
 c014518:	8822c03a 	cmpne	r17,r17,zero
 c01451c:	88a2b03a 	or	r17,r17,r2
 c014520:	000b883a 	mov	r5,zero
 c014524:	0021883a 	mov	r16,zero
 c014528:	003fb406 	br	c0143fc <__alt_data_end+0xfc0143fc>
 c01452c:	113ff804 	addi	r4,r2,-32
 c014530:	01c00804 	movi	r7,32
 c014534:	1908d83a 	srl	r4,r3,r4
 c014538:	11c04626 	beq	r2,r7,c014654 <__subdf3+0x58c>
 c01453c:	01c01004 	movi	r7,64
 c014540:	3885c83a 	sub	r2,r7,r2
 c014544:	1884983a 	sll	r2,r3,r2
 c014548:	118cb03a 	or	r6,r2,r6
 c01454c:	300cc03a 	cmpne	r6,r6,zero
 c014550:	310cb03a 	or	r6,r6,r4
 c014554:	0005883a 	mov	r2,zero
 c014558:	003f3606 	br	c014234 <__alt_data_end+0xfc014234>
 c01455c:	80002b26 	beq	r16,zero,c01460c <__subdf3+0x544>
 c014560:	0101ffc4 	movi	r4,2047
 c014564:	51006926 	beq	r10,r4,c01470c <__subdf3+0x644>
 c014568:	0085c83a 	sub	r2,zero,r2
 c01456c:	29402034 	orhi	r5,r5,128
 c014570:	01000e04 	movi	r4,56
 c014574:	20807d16 	blt	r4,r2,c01476c <__subdf3+0x6a4>
 c014578:	010007c4 	movi	r4,31
 c01457c:	2080d916 	blt	r4,r2,c0148e4 <__subdf3+0x81c>
 c014580:	01000804 	movi	r4,32
 c014584:	2089c83a 	sub	r4,r4,r2
 c014588:	2912983a 	sll	r9,r5,r4
 c01458c:	8890d83a 	srl	r8,r17,r2
 c014590:	8908983a 	sll	r4,r17,r4
 c014594:	2884d83a 	srl	r2,r5,r2
 c014598:	4a22b03a 	or	r17,r9,r8
 c01459c:	2008c03a 	cmpne	r4,r4,zero
 c0145a0:	8922b03a 	or	r17,r17,r4
 c0145a4:	3463c83a 	sub	r17,r6,r17
 c0145a8:	1885c83a 	sub	r2,r3,r2
 c0145ac:	344d803a 	cmpltu	r6,r6,r17
 c0145b0:	118bc83a 	sub	r5,r2,r6
 c0145b4:	5021883a 	mov	r16,r10
 c0145b8:	3825883a 	mov	r18,r7
 c0145bc:	003f2206 	br	c014248 <__alt_data_end+0xfc014248>
 c0145c0:	9886b03a 	or	r3,r19,r2
 c0145c4:	18001c1e 	bne	r3,zero,c014638 <__subdf3+0x570>
 c0145c8:	0011883a 	mov	r8,zero
 c0145cc:	000b883a 	mov	r5,zero
 c0145d0:	0023883a 	mov	r17,zero
 c0145d4:	0021883a 	mov	r16,zero
 c0145d8:	003f3e06 	br	c0142d4 <__alt_data_end+0xfc0142d4>
 c0145dc:	010007c4 	movi	r4,31
 c0145e0:	20803c16 	blt	r4,r2,c0146d4 <__subdf3+0x60c>
 c0145e4:	01000804 	movi	r4,32
 c0145e8:	2089c83a 	sub	r4,r4,r2
 c0145ec:	1912983a 	sll	r9,r3,r4
 c0145f0:	308ed83a 	srl	r7,r6,r2
 c0145f4:	3108983a 	sll	r4,r6,r4
 c0145f8:	1884d83a 	srl	r2,r3,r2
 c0145fc:	49ceb03a 	or	r7,r9,r7
 c014600:	2008c03a 	cmpne	r4,r4,zero
 c014604:	390eb03a 	or	r7,r7,r4
 c014608:	003f4706 	br	c014328 <__alt_data_end+0xfc014328>
 c01460c:	2c48b03a 	or	r4,r5,r17
 c014610:	20003e26 	beq	r4,zero,c01470c <__subdf3+0x644>
 c014614:	0084303a 	nor	r2,zero,r2
 c014618:	10003a1e 	bne	r2,zero,c014704 <__subdf3+0x63c>
 c01461c:	3463c83a 	sub	r17,r6,r17
 c014620:	194bc83a 	sub	r5,r3,r5
 c014624:	344d803a 	cmpltu	r6,r6,r17
 c014628:	298bc83a 	sub	r5,r5,r6
 c01462c:	5021883a 	mov	r16,r10
 c014630:	3825883a 	mov	r18,r7
 c014634:	003f0406 	br	c014248 <__alt_data_end+0xfc014248>
 c014638:	1023883a 	mov	r17,r2
 c01463c:	003f0706 	br	c01425c <__alt_data_end+0xfc01425c>
 c014640:	0101ffc4 	movi	r4,2047
 c014644:	813f331e 	bne	r16,r4,c014314 <__alt_data_end+0xfc014314>
 c014648:	003ec206 	br	c014154 <__alt_data_end+0xfc014154>
 c01464c:	0027883a 	mov	r19,zero
 c014650:	003fb006 	br	c014514 <__alt_data_end+0xfc014514>
 c014654:	0005883a 	mov	r2,zero
 c014658:	003fbb06 	br	c014548 <__alt_data_end+0xfc014548>
 c01465c:	2c44b03a 	or	r2,r5,r17
 c014660:	80008b1e 	bne	r16,zero,c014890 <__subdf3+0x7c8>
 c014664:	1000b526 	beq	r2,zero,c01493c <__subdf3+0x874>
 c014668:	1984b03a 	or	r2,r3,r6
 c01466c:	103eb926 	beq	r2,zero,c014154 <__alt_data_end+0xfc014154>
 c014670:	3449883a 	add	r4,r6,r17
 c014674:	2463803a 	cmpltu	r17,r4,r17
 c014678:	194b883a 	add	r5,r3,r5
 c01467c:	2c4b883a 	add	r5,r5,r17
 c014680:	2880202c 	andhi	r2,r5,128
 c014684:	2023883a 	mov	r17,r4
 c014688:	103f5c26 	beq	r2,zero,c0143fc <__alt_data_end+0xfc0143fc>
 c01468c:	00bfe034 	movhi	r2,65408
 c014690:	10bfffc4 	addi	r2,r2,-1
 c014694:	4821883a 	mov	r16,r9
 c014698:	288a703a 	and	r5,r5,r2
 c01469c:	003ead06 	br	c014154 <__alt_data_end+0xfc014154>
 c0146a0:	2c44b03a 	or	r2,r5,r17
 c0146a4:	8000291e 	bne	r16,zero,c01474c <__subdf3+0x684>
 c0146a8:	10004f1e 	bne	r2,zero,c0147e8 <__subdf3+0x720>
 c0146ac:	1984b03a 	or	r2,r3,r6
 c0146b0:	10000426 	beq	r2,zero,c0146c4 <__subdf3+0x5fc>
 c0146b4:	180b883a 	mov	r5,r3
 c0146b8:	3023883a 	mov	r17,r6
 c0146bc:	3825883a 	mov	r18,r7
 c0146c0:	003ea406 	br	c014154 <__alt_data_end+0xfc014154>
 c0146c4:	0011883a 	mov	r8,zero
 c0146c8:	000b883a 	mov	r5,zero
 c0146cc:	0023883a 	mov	r17,zero
 c0146d0:	003f0006 	br	c0142d4 <__alt_data_end+0xfc0142d4>
 c0146d4:	11fff804 	addi	r7,r2,-32
 c0146d8:	19c8d83a 	srl	r4,r3,r7
 c0146dc:	01c00804 	movi	r7,32
 c0146e0:	11c07e26 	beq	r2,r7,c0148dc <__subdf3+0x814>
 c0146e4:	01c01004 	movi	r7,64
 c0146e8:	3885c83a 	sub	r2,r7,r2
 c0146ec:	1884983a 	sll	r2,r3,r2
 c0146f0:	118cb03a 	or	r6,r2,r6
 c0146f4:	300ec03a 	cmpne	r7,r6,zero
 c0146f8:	390eb03a 	or	r7,r7,r4
 c0146fc:	0005883a 	mov	r2,zero
 c014700:	003f0906 	br	c014328 <__alt_data_end+0xfc014328>
 c014704:	0101ffc4 	movi	r4,2047
 c014708:	513f991e 	bne	r10,r4,c014570 <__alt_data_end+0xfc014570>
 c01470c:	180b883a 	mov	r5,r3
 c014710:	3023883a 	mov	r17,r6
 c014714:	5021883a 	mov	r16,r10
 c014718:	3825883a 	mov	r18,r7
 c01471c:	003e8d06 	br	c014154 <__alt_data_end+0xfc014154>
 c014720:	80001a1e 	bne	r16,zero,c01478c <__subdf3+0x6c4>
 c014724:	2c48b03a 	or	r4,r5,r17
 c014728:	20005526 	beq	r4,zero,c014880 <__subdf3+0x7b8>
 c01472c:	0084303a 	nor	r2,zero,r2
 c014730:	1000511e 	bne	r2,zero,c014878 <__subdf3+0x7b0>
 c014734:	89a3883a 	add	r17,r17,r6
 c014738:	194b883a 	add	r5,r3,r5
 c01473c:	898d803a 	cmpltu	r6,r17,r6
 c014740:	298b883a 	add	r5,r5,r6
 c014744:	5021883a 	mov	r16,r10
 c014748:	003efc06 	br	c01433c <__alt_data_end+0xfc01433c>
 c01474c:	1000341e 	bne	r2,zero,c014820 <__subdf3+0x758>
 c014750:	1984b03a 	or	r2,r3,r6
 c014754:	10006f26 	beq	r2,zero,c014914 <__subdf3+0x84c>
 c014758:	180b883a 	mov	r5,r3
 c01475c:	3023883a 	mov	r17,r6
 c014760:	3825883a 	mov	r18,r7
 c014764:	0401ffc4 	movi	r16,2047
 c014768:	003e7a06 	br	c014154 <__alt_data_end+0xfc014154>
 c01476c:	2c62b03a 	or	r17,r5,r17
 c014770:	8822c03a 	cmpne	r17,r17,zero
 c014774:	0005883a 	mov	r2,zero
 c014778:	003f8a06 	br	c0145a4 <__alt_data_end+0xfc0145a4>
 c01477c:	3821883a 	mov	r16,r7
 c014780:	000b883a 	mov	r5,zero
 c014784:	0023883a 	mov	r17,zero
 c014788:	003ed206 	br	c0142d4 <__alt_data_end+0xfc0142d4>
 c01478c:	0101ffc4 	movi	r4,2047
 c014790:	51003b26 	beq	r10,r4,c014880 <__subdf3+0x7b8>
 c014794:	0085c83a 	sub	r2,zero,r2
 c014798:	29402034 	orhi	r5,r5,128
 c01479c:	01000e04 	movi	r4,56
 c0147a0:	20806216 	blt	r4,r2,c01492c <__subdf3+0x864>
 c0147a4:	010007c4 	movi	r4,31
 c0147a8:	20806b16 	blt	r4,r2,c014958 <__subdf3+0x890>
 c0147ac:	01000804 	movi	r4,32
 c0147b0:	2089c83a 	sub	r4,r4,r2
 c0147b4:	2912983a 	sll	r9,r5,r4
 c0147b8:	888ed83a 	srl	r7,r17,r2
 c0147bc:	8908983a 	sll	r4,r17,r4
 c0147c0:	2884d83a 	srl	r2,r5,r2
 c0147c4:	49e2b03a 	or	r17,r9,r7
 c0147c8:	2008c03a 	cmpne	r4,r4,zero
 c0147cc:	8922b03a 	or	r17,r17,r4
 c0147d0:	89a3883a 	add	r17,r17,r6
 c0147d4:	10c5883a 	add	r2,r2,r3
 c0147d8:	898d803a 	cmpltu	r6,r17,r6
 c0147dc:	118b883a 	add	r5,r2,r6
 c0147e0:	5021883a 	mov	r16,r10
 c0147e4:	003ed506 	br	c01433c <__alt_data_end+0xfc01433c>
 c0147e8:	1984b03a 	or	r2,r3,r6
 c0147ec:	103e5926 	beq	r2,zero,c014154 <__alt_data_end+0xfc014154>
 c0147f0:	8989c83a 	sub	r4,r17,r6
 c0147f4:	8911803a 	cmpltu	r8,r17,r4
 c0147f8:	28c5c83a 	sub	r2,r5,r3
 c0147fc:	1205c83a 	sub	r2,r2,r8
 c014800:	1200202c 	andhi	r8,r2,128
 c014804:	403ef926 	beq	r8,zero,c0143ec <__alt_data_end+0xfc0143ec>
 c014808:	3463c83a 	sub	r17,r6,r17
 c01480c:	194bc83a 	sub	r5,r3,r5
 c014810:	344d803a 	cmpltu	r6,r6,r17
 c014814:	298bc83a 	sub	r5,r5,r6
 c014818:	3825883a 	mov	r18,r7
 c01481c:	003e4d06 	br	c014154 <__alt_data_end+0xfc014154>
 c014820:	1984b03a 	or	r2,r3,r6
 c014824:	10002b26 	beq	r2,zero,c0148d4 <__subdf3+0x80c>
 c014828:	2808d0fa 	srli	r4,r5,3
 c01482c:	8822d0fa 	srli	r17,r17,3
 c014830:	280a977a 	slli	r5,r5,29
 c014834:	2080022c 	andhi	r2,r4,8
 c014838:	2c62b03a 	or	r17,r5,r17
 c01483c:	10000826 	beq	r2,zero,c014860 <__subdf3+0x798>
 c014840:	1810d0fa 	srli	r8,r3,3
 c014844:	4080022c 	andhi	r2,r8,8
 c014848:	1000051e 	bne	r2,zero,c014860 <__subdf3+0x798>
 c01484c:	300cd0fa 	srli	r6,r6,3
 c014850:	1804977a 	slli	r2,r3,29
 c014854:	4009883a 	mov	r4,r8
 c014858:	3825883a 	mov	r18,r7
 c01485c:	11a2b03a 	or	r17,r2,r6
 c014860:	880ad77a 	srli	r5,r17,29
 c014864:	200890fa 	slli	r4,r4,3
 c014868:	882290fa 	slli	r17,r17,3
 c01486c:	0401ffc4 	movi	r16,2047
 c014870:	290ab03a 	or	r5,r5,r4
 c014874:	003e3706 	br	c014154 <__alt_data_end+0xfc014154>
 c014878:	0101ffc4 	movi	r4,2047
 c01487c:	513fc71e 	bne	r10,r4,c01479c <__alt_data_end+0xfc01479c>
 c014880:	180b883a 	mov	r5,r3
 c014884:	3023883a 	mov	r17,r6
 c014888:	5021883a 	mov	r16,r10
 c01488c:	003e3106 	br	c014154 <__alt_data_end+0xfc014154>
 c014890:	10002d26 	beq	r2,zero,c014948 <__subdf3+0x880>
 c014894:	1984b03a 	or	r2,r3,r6
 c014898:	10000e26 	beq	r2,zero,c0148d4 <__subdf3+0x80c>
 c01489c:	2808d0fa 	srli	r4,r5,3
 c0148a0:	8822d0fa 	srli	r17,r17,3
 c0148a4:	280a977a 	slli	r5,r5,29
 c0148a8:	2080022c 	andhi	r2,r4,8
 c0148ac:	2c62b03a 	or	r17,r5,r17
 c0148b0:	103feb26 	beq	r2,zero,c014860 <__alt_data_end+0xfc014860>
 c0148b4:	180ed0fa 	srli	r7,r3,3
 c0148b8:	3880022c 	andhi	r2,r7,8
 c0148bc:	103fe81e 	bne	r2,zero,c014860 <__alt_data_end+0xfc014860>
 c0148c0:	300cd0fa 	srli	r6,r6,3
 c0148c4:	1804977a 	slli	r2,r3,29
 c0148c8:	3809883a 	mov	r4,r7
 c0148cc:	11a2b03a 	or	r17,r2,r6
 c0148d0:	003fe306 	br	c014860 <__alt_data_end+0xfc014860>
 c0148d4:	0401ffc4 	movi	r16,2047
 c0148d8:	003e1e06 	br	c014154 <__alt_data_end+0xfc014154>
 c0148dc:	0005883a 	mov	r2,zero
 c0148e0:	003f8306 	br	c0146f0 <__alt_data_end+0xfc0146f0>
 c0148e4:	113ff804 	addi	r4,r2,-32
 c0148e8:	02000804 	movi	r8,32
 c0148ec:	2908d83a 	srl	r4,r5,r4
 c0148f0:	12002526 	beq	r2,r8,c014988 <__subdf3+0x8c0>
 c0148f4:	02001004 	movi	r8,64
 c0148f8:	4085c83a 	sub	r2,r8,r2
 c0148fc:	288a983a 	sll	r5,r5,r2
 c014900:	2c62b03a 	or	r17,r5,r17
 c014904:	8822c03a 	cmpne	r17,r17,zero
 c014908:	8922b03a 	or	r17,r17,r4
 c01490c:	0005883a 	mov	r2,zero
 c014910:	003f2406 	br	c0145a4 <__alt_data_end+0xfc0145a4>
 c014914:	01402034 	movhi	r5,128
 c014918:	0011883a 	mov	r8,zero
 c01491c:	297fffc4 	addi	r5,r5,-1
 c014920:	047ffe04 	movi	r17,-8
 c014924:	0401ffc4 	movi	r16,2047
 c014928:	003e6a06 	br	c0142d4 <__alt_data_end+0xfc0142d4>
 c01492c:	2c62b03a 	or	r17,r5,r17
 c014930:	8822c03a 	cmpne	r17,r17,zero
 c014934:	0005883a 	mov	r2,zero
 c014938:	003fa506 	br	c0147d0 <__alt_data_end+0xfc0147d0>
 c01493c:	180b883a 	mov	r5,r3
 c014940:	3023883a 	mov	r17,r6
 c014944:	003e0306 	br	c014154 <__alt_data_end+0xfc014154>
 c014948:	180b883a 	mov	r5,r3
 c01494c:	3023883a 	mov	r17,r6
 c014950:	0401ffc4 	movi	r16,2047
 c014954:	003dff06 	br	c014154 <__alt_data_end+0xfc014154>
 c014958:	113ff804 	addi	r4,r2,-32
 c01495c:	01c00804 	movi	r7,32
 c014960:	2908d83a 	srl	r4,r5,r4
 c014964:	11c00a26 	beq	r2,r7,c014990 <__subdf3+0x8c8>
 c014968:	01c01004 	movi	r7,64
 c01496c:	3885c83a 	sub	r2,r7,r2
 c014970:	288a983a 	sll	r5,r5,r2
 c014974:	2c62b03a 	or	r17,r5,r17
 c014978:	8822c03a 	cmpne	r17,r17,zero
 c01497c:	8922b03a 	or	r17,r17,r4
 c014980:	0005883a 	mov	r2,zero
 c014984:	003f9206 	br	c0147d0 <__alt_data_end+0xfc0147d0>
 c014988:	000b883a 	mov	r5,zero
 c01498c:	003fdc06 	br	c014900 <__alt_data_end+0xfc014900>
 c014990:	000b883a 	mov	r5,zero
 c014994:	003ff706 	br	c014974 <__alt_data_end+0xfc014974>

0c014998 <__floatunsidf>:
 c014998:	defffe04 	addi	sp,sp,-8
 c01499c:	dc000015 	stw	r16,0(sp)
 c0149a0:	dfc00115 	stw	ra,4(sp)
 c0149a4:	2021883a 	mov	r16,r4
 c0149a8:	20001026 	beq	r4,zero,c0149ec <__floatunsidf+0x54>
 c0149ac:	c008b480 	call	c008b48 <__clzsi2>
 c0149b0:	01410784 	movi	r5,1054
 c0149b4:	100d883a 	mov	r6,r2
 c0149b8:	288bc83a 	sub	r5,r5,r2
 c0149bc:	00800284 	movi	r2,10
 c0149c0:	11801616 	blt	r2,r6,c014a1c <__floatunsidf+0x84>
 c0149c4:	008002c4 	movi	r2,11
 c0149c8:	1185c83a 	sub	r2,r2,r6
 c0149cc:	8084d83a 	srl	r2,r16,r2
 c0149d0:	00c00434 	movhi	r3,16
 c0149d4:	31c00544 	addi	r7,r6,21
 c0149d8:	18ffffc4 	addi	r3,r3,-1
 c0149dc:	81e0983a 	sll	r16,r16,r7
 c0149e0:	10cc703a 	and	r6,r2,r3
 c0149e4:	2941ffcc 	andi	r5,r5,2047
 c0149e8:	00000206 	br	c0149f4 <__floatunsidf+0x5c>
 c0149ec:	000b883a 	mov	r5,zero
 c0149f0:	000d883a 	mov	r6,zero
 c0149f4:	280a953a 	slli	r5,r5,20
 c0149f8:	00c00434 	movhi	r3,16
 c0149fc:	18ffffc4 	addi	r3,r3,-1
 c014a00:	30c6703a 	and	r3,r6,r3
 c014a04:	8005883a 	mov	r2,r16
 c014a08:	1946b03a 	or	r3,r3,r5
 c014a0c:	dfc00117 	ldw	ra,4(sp)
 c014a10:	dc000017 	ldw	r16,0(sp)
 c014a14:	dec00204 	addi	sp,sp,8
 c014a18:	f800283a 	ret
 c014a1c:	31bffd44 	addi	r6,r6,-11
 c014a20:	818c983a 	sll	r6,r16,r6
 c014a24:	00800434 	movhi	r2,16
 c014a28:	10bfffc4 	addi	r2,r2,-1
 c014a2c:	2941ffcc 	andi	r5,r5,2047
 c014a30:	0021883a 	mov	r16,zero
 c014a34:	308c703a 	and	r6,r6,r2
 c014a38:	003fee06 	br	c0149f4 <__alt_data_end+0xfc0149f4>

0c014a3c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 c014a3c:	defffe04 	addi	sp,sp,-8
 c014a40:	dfc00115 	stw	ra,4(sp)
 c014a44:	df000015 	stw	fp,0(sp)
 c014a48:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 c014a4c:	008300b4 	movhi	r2,3074
 c014a50:	10908004 	addi	r2,r2,16896
 c014a54:	10800017 	ldw	r2,0(r2)
 c014a58:	10000526 	beq	r2,zero,c014a70 <alt_get_errno+0x34>
 c014a5c:	008300b4 	movhi	r2,3074
 c014a60:	10908004 	addi	r2,r2,16896
 c014a64:	10800017 	ldw	r2,0(r2)
 c014a68:	103ee83a 	callr	r2
 c014a6c:	00000206 	br	c014a78 <alt_get_errno+0x3c>
 c014a70:	008300b4 	movhi	r2,3074
 c014a74:	10975604 	addi	r2,r2,23896
}
 c014a78:	e037883a 	mov	sp,fp
 c014a7c:	dfc00117 	ldw	ra,4(sp)
 c014a80:	df000017 	ldw	fp,0(sp)
 c014a84:	dec00204 	addi	sp,sp,8
 c014a88:	f800283a 	ret

0c014a8c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 c014a8c:	defffb04 	addi	sp,sp,-20
 c014a90:	dfc00415 	stw	ra,16(sp)
 c014a94:	df000315 	stw	fp,12(sp)
 c014a98:	df000304 	addi	fp,sp,12
 c014a9c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 c014aa0:	e0bfff17 	ldw	r2,-4(fp)
 c014aa4:	10000616 	blt	r2,zero,c014ac0 <close+0x34>
 c014aa8:	e0bfff17 	ldw	r2,-4(fp)
 c014aac:	10c00324 	muli	r3,r2,12
 c014ab0:	008300b4 	movhi	r2,3074
 c014ab4:	108bec04 	addi	r2,r2,12208
 c014ab8:	1885883a 	add	r2,r3,r2
 c014abc:	00000106 	br	c014ac4 <close+0x38>
 c014ac0:	0005883a 	mov	r2,zero
 c014ac4:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 c014ac8:	e0bffd17 	ldw	r2,-12(fp)
 c014acc:	10001926 	beq	r2,zero,c014b34 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 c014ad0:	e0bffd17 	ldw	r2,-12(fp)
 c014ad4:	10800017 	ldw	r2,0(r2)
 c014ad8:	10800417 	ldw	r2,16(r2)
 c014adc:	10000626 	beq	r2,zero,c014af8 <close+0x6c>
 c014ae0:	e0bffd17 	ldw	r2,-12(fp)
 c014ae4:	10800017 	ldw	r2,0(r2)
 c014ae8:	10800417 	ldw	r2,16(r2)
 c014aec:	e13ffd17 	ldw	r4,-12(fp)
 c014af0:	103ee83a 	callr	r2
 c014af4:	00000106 	br	c014afc <close+0x70>
 c014af8:	0005883a 	mov	r2,zero
 c014afc:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 c014b00:	e13fff17 	ldw	r4,-4(fp)
 c014b04:	c01550c0 	call	c01550c <alt_release_fd>
    if (rval < 0)
 c014b08:	e0bffe17 	ldw	r2,-8(fp)
 c014b0c:	1000070e 	bge	r2,zero,c014b2c <close+0xa0>
    {
      ALT_ERRNO = -rval;
 c014b10:	c014a3c0 	call	c014a3c <alt_get_errno>
 c014b14:	1007883a 	mov	r3,r2
 c014b18:	e0bffe17 	ldw	r2,-8(fp)
 c014b1c:	0085c83a 	sub	r2,zero,r2
 c014b20:	18800015 	stw	r2,0(r3)
      return -1;
 c014b24:	00bfffc4 	movi	r2,-1
 c014b28:	00000706 	br	c014b48 <close+0xbc>
    }
    return 0;
 c014b2c:	0005883a 	mov	r2,zero
 c014b30:	00000506 	br	c014b48 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 c014b34:	c014a3c0 	call	c014a3c <alt_get_errno>
 c014b38:	1007883a 	mov	r3,r2
 c014b3c:	00801444 	movi	r2,81
 c014b40:	18800015 	stw	r2,0(r3)
    return -1;
 c014b44:	00bfffc4 	movi	r2,-1
  }
}
 c014b48:	e037883a 	mov	sp,fp
 c014b4c:	dfc00117 	ldw	ra,4(sp)
 c014b50:	df000017 	ldw	fp,0(sp)
 c014b54:	dec00204 	addi	sp,sp,8
 c014b58:	f800283a 	ret

0c014b5c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 c014b5c:	defffc04 	addi	sp,sp,-16
 c014b60:	df000315 	stw	fp,12(sp)
 c014b64:	df000304 	addi	fp,sp,12
 c014b68:	e13ffd15 	stw	r4,-12(fp)
 c014b6c:	e17ffe15 	stw	r5,-8(fp)
 c014b70:	e1bfff15 	stw	r6,-4(fp)
  return len;
 c014b74:	e0bfff17 	ldw	r2,-4(fp)
}
 c014b78:	e037883a 	mov	sp,fp
 c014b7c:	df000017 	ldw	fp,0(sp)
 c014b80:	dec00104 	addi	sp,sp,4
 c014b84:	f800283a 	ret

0c014b88 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 c014b88:	defffd04 	addi	sp,sp,-12
 c014b8c:	df000215 	stw	fp,8(sp)
 c014b90:	df000204 	addi	fp,sp,8
 c014b94:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 c014b98:	0001883a 	nop
 c014b9c:	e0bfff17 	ldw	r2,-4(fp)
 c014ba0:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 c014ba4:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 c014ba8:	10000226 	beq	r2,zero,c014bb4 <_exit+0x2c>
    ALT_SIM_FAIL();
 c014bac:	002af070 	cmpltui	zero,zero,43969
 c014bb0:	00000106 	br	c014bb8 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 c014bb4:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 c014bb8:	003fff06 	br	c014bb8 <__alt_data_end+0xfc014bb8>

0c014bbc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 c014bbc:	defffe04 	addi	sp,sp,-8
 c014bc0:	dfc00115 	stw	ra,4(sp)
 c014bc4:	df000015 	stw	fp,0(sp)
 c014bc8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 c014bcc:	008300b4 	movhi	r2,3074
 c014bd0:	10908004 	addi	r2,r2,16896
 c014bd4:	10800017 	ldw	r2,0(r2)
 c014bd8:	10000526 	beq	r2,zero,c014bf0 <alt_get_errno+0x34>
 c014bdc:	008300b4 	movhi	r2,3074
 c014be0:	10908004 	addi	r2,r2,16896
 c014be4:	10800017 	ldw	r2,0(r2)
 c014be8:	103ee83a 	callr	r2
 c014bec:	00000206 	br	c014bf8 <alt_get_errno+0x3c>
 c014bf0:	008300b4 	movhi	r2,3074
 c014bf4:	10975604 	addi	r2,r2,23896
}
 c014bf8:	e037883a 	mov	sp,fp
 c014bfc:	dfc00117 	ldw	ra,4(sp)
 c014c00:	df000017 	ldw	fp,0(sp)
 c014c04:	dec00204 	addi	sp,sp,8
 c014c08:	f800283a 	ret

0c014c0c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 c014c0c:	defffb04 	addi	sp,sp,-20
 c014c10:	dfc00415 	stw	ra,16(sp)
 c014c14:	df000315 	stw	fp,12(sp)
 c014c18:	df000304 	addi	fp,sp,12
 c014c1c:	e13ffe15 	stw	r4,-8(fp)
 c014c20:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 c014c24:	e0bffe17 	ldw	r2,-8(fp)
 c014c28:	10000616 	blt	r2,zero,c014c44 <fstat+0x38>
 c014c2c:	e0bffe17 	ldw	r2,-8(fp)
 c014c30:	10c00324 	muli	r3,r2,12
 c014c34:	008300b4 	movhi	r2,3074
 c014c38:	108bec04 	addi	r2,r2,12208
 c014c3c:	1885883a 	add	r2,r3,r2
 c014c40:	00000106 	br	c014c48 <fstat+0x3c>
 c014c44:	0005883a 	mov	r2,zero
 c014c48:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 c014c4c:	e0bffd17 	ldw	r2,-12(fp)
 c014c50:	10001026 	beq	r2,zero,c014c94 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 c014c54:	e0bffd17 	ldw	r2,-12(fp)
 c014c58:	10800017 	ldw	r2,0(r2)
 c014c5c:	10800817 	ldw	r2,32(r2)
 c014c60:	10000726 	beq	r2,zero,c014c80 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
 c014c64:	e0bffd17 	ldw	r2,-12(fp)
 c014c68:	10800017 	ldw	r2,0(r2)
 c014c6c:	10800817 	ldw	r2,32(r2)
 c014c70:	e13ffd17 	ldw	r4,-12(fp)
 c014c74:	e17fff17 	ldw	r5,-4(fp)
 c014c78:	103ee83a 	callr	r2
 c014c7c:	00000a06 	br	c014ca8 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 c014c80:	e0bfff17 	ldw	r2,-4(fp)
 c014c84:	00c80004 	movi	r3,8192
 c014c88:	10c00115 	stw	r3,4(r2)
      return 0;
 c014c8c:	0005883a 	mov	r2,zero
 c014c90:	00000506 	br	c014ca8 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 c014c94:	c014bbc0 	call	c014bbc <alt_get_errno>
 c014c98:	1007883a 	mov	r3,r2
 c014c9c:	00801444 	movi	r2,81
 c014ca0:	18800015 	stw	r2,0(r3)
    return -1;
 c014ca4:	00bfffc4 	movi	r2,-1
  }
}
 c014ca8:	e037883a 	mov	sp,fp
 c014cac:	dfc00117 	ldw	ra,4(sp)
 c014cb0:	df000017 	ldw	fp,0(sp)
 c014cb4:	dec00204 	addi	sp,sp,8
 c014cb8:	f800283a 	ret

0c014cbc <getpid>:
 *
 * ALT_GETPID is mapped onto the getpid() system call in alt_syscall.h
 */
 
int ALT_GETPID (void)
{
 c014cbc:	deffff04 	addi	sp,sp,-4
 c014cc0:	df000015 	stw	fp,0(sp)
 c014cc4:	d839883a 	mov	fp,sp
  return 0;
 c014cc8:	0005883a 	mov	r2,zero
}
 c014ccc:	e037883a 	mov	sp,fp
 c014cd0:	df000017 	ldw	fp,0(sp)
 c014cd4:	dec00104 	addi	sp,sp,4
 c014cd8:	f800283a 	ret

0c014cdc <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
 c014cdc:	defff004 	addi	sp,sp,-64
 c014ce0:	df000f15 	stw	fp,60(sp)
 c014ce4:	df000f04 	addi	fp,sp,60
 c014ce8:	e13ffd15 	stw	r4,-12(fp)
 c014cec:	e17ffe15 	stw	r5,-8(fp)
 c014cf0:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
 c014cf4:	00bffa84 	movi	r2,-22
 c014cf8:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 c014cfc:	e0bffd17 	ldw	r2,-12(fp)
 c014d00:	10800828 	cmpgeui	r2,r2,32
 c014d04:	10005c1e 	bne	r2,zero,c014e78 <alt_irq_register+0x19c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 c014d08:	0005303a 	rdctl	r2,status
 c014d0c:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 c014d10:	e0fff317 	ldw	r3,-52(fp)
 c014d14:	00bfff84 	movi	r2,-2
 c014d18:	1884703a 	and	r2,r3,r2
 c014d1c:	1001703a 	wrctl	status,r2
  
  return context;
 c014d20:	e0bff317 	ldw	r2,-52(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
 c014d24:	e0bff215 	stw	r2,-56(fp)

    alt_irq[id].handler = handler;
 c014d28:	008302f4 	movhi	r2,3083
 c014d2c:	10a04a04 	addi	r2,r2,-32472
 c014d30:	e0fffd17 	ldw	r3,-12(fp)
 c014d34:	180690fa 	slli	r3,r3,3
 c014d38:	10c5883a 	add	r2,r2,r3
 c014d3c:	e0ffff17 	ldw	r3,-4(fp)
 c014d40:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
 c014d44:	008302f4 	movhi	r2,3083
 c014d48:	10a04a04 	addi	r2,r2,-32472
 c014d4c:	e0fffd17 	ldw	r3,-12(fp)
 c014d50:	180690fa 	slli	r3,r3,3
 c014d54:	10c5883a 	add	r2,r2,r3
 c014d58:	10800104 	addi	r2,r2,4
 c014d5c:	e0fffe17 	ldw	r3,-8(fp)
 c014d60:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
 c014d64:	e0bfff17 	ldw	r2,-4(fp)
 c014d68:	10001f26 	beq	r2,zero,c014de8 <alt_irq_register+0x10c>
 c014d6c:	e0bffd17 	ldw	r2,-12(fp)
 c014d70:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 c014d74:	0005303a 	rdctl	r2,status
 c014d78:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 c014d7c:	e0fff517 	ldw	r3,-44(fp)
 c014d80:	00bfff84 	movi	r2,-2
 c014d84:	1884703a 	and	r2,r3,r2
 c014d88:	1001703a 	wrctl	status,r2
  
  return context;
 c014d8c:	e0bff517 	ldw	r2,-44(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 c014d90:	e0bff615 	stw	r2,-40(fp)

  alt_irq_active |= (1 << id);
 c014d94:	e0bff417 	ldw	r2,-48(fp)
 c014d98:	00c00044 	movi	r3,1
 c014d9c:	1884983a 	sll	r2,r3,r2
 c014da0:	1007883a 	mov	r3,r2
 c014da4:	008300b4 	movhi	r2,3074
 c014da8:	10975a04 	addi	r2,r2,23912
 c014dac:	10800017 	ldw	r2,0(r2)
 c014db0:	1886b03a 	or	r3,r3,r2
 c014db4:	008300b4 	movhi	r2,3074
 c014db8:	10975a04 	addi	r2,r2,23912
 c014dbc:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 c014dc0:	008300b4 	movhi	r2,3074
 c014dc4:	10975a04 	addi	r2,r2,23912
 c014dc8:	10800017 	ldw	r2,0(r2)
 c014dcc:	100170fa 	wrctl	ienable,r2
 c014dd0:	e0bff617 	ldw	r2,-40(fp)
 c014dd4:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 c014dd8:	e0bff717 	ldw	r2,-36(fp)
 c014ddc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 c014de0:	0005883a 	mov	r2,zero
 c014de4:	00001f06 	br	c014e64 <alt_irq_register+0x188>
 c014de8:	e0bffd17 	ldw	r2,-12(fp)
 c014dec:	e0bff815 	stw	r2,-32(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 c014df0:	0005303a 	rdctl	r2,status
 c014df4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 c014df8:	e0fff917 	ldw	r3,-28(fp)
 c014dfc:	00bfff84 	movi	r2,-2
 c014e00:	1884703a 	and	r2,r3,r2
 c014e04:	1001703a 	wrctl	status,r2
  
  return context;
 c014e08:	e0bff917 	ldw	r2,-28(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 c014e0c:	e0bffa15 	stw	r2,-24(fp)

  alt_irq_active &= ~(1 << id);
 c014e10:	e0bff817 	ldw	r2,-32(fp)
 c014e14:	00c00044 	movi	r3,1
 c014e18:	1884983a 	sll	r2,r3,r2
 c014e1c:	0084303a 	nor	r2,zero,r2
 c014e20:	1007883a 	mov	r3,r2
 c014e24:	008300b4 	movhi	r2,3074
 c014e28:	10975a04 	addi	r2,r2,23912
 c014e2c:	10800017 	ldw	r2,0(r2)
 c014e30:	1886703a 	and	r3,r3,r2
 c014e34:	008300b4 	movhi	r2,3074
 c014e38:	10975a04 	addi	r2,r2,23912
 c014e3c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 c014e40:	008300b4 	movhi	r2,3074
 c014e44:	10975a04 	addi	r2,r2,23912
 c014e48:	10800017 	ldw	r2,0(r2)
 c014e4c:	100170fa 	wrctl	ienable,r2
 c014e50:	e0bffa17 	ldw	r2,-24(fp)
 c014e54:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 c014e58:	e0bffb17 	ldw	r2,-20(fp)
 c014e5c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 c014e60:	0005883a 	mov	r2,zero
 c014e64:	e0bff115 	stw	r2,-60(fp)
 c014e68:	e0bff217 	ldw	r2,-56(fp)
 c014e6c:	e0bffc15 	stw	r2,-16(fp)
 c014e70:	e0bffc17 	ldw	r2,-16(fp)
 c014e74:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
 c014e78:	e0bff117 	ldw	r2,-60(fp)
}
 c014e7c:	e037883a 	mov	sp,fp
 c014e80:	df000017 	ldw	fp,0(sp)
 c014e84:	dec00104 	addi	sp,sp,4
 c014e88:	f800283a 	ret

0c014e8c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 c014e8c:	defffe04 	addi	sp,sp,-8
 c014e90:	dfc00115 	stw	ra,4(sp)
 c014e94:	df000015 	stw	fp,0(sp)
 c014e98:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 c014e9c:	008300b4 	movhi	r2,3074
 c014ea0:	10908004 	addi	r2,r2,16896
 c014ea4:	10800017 	ldw	r2,0(r2)
 c014ea8:	10000526 	beq	r2,zero,c014ec0 <alt_get_errno+0x34>
 c014eac:	008300b4 	movhi	r2,3074
 c014eb0:	10908004 	addi	r2,r2,16896
 c014eb4:	10800017 	ldw	r2,0(r2)
 c014eb8:	103ee83a 	callr	r2
 c014ebc:	00000206 	br	c014ec8 <alt_get_errno+0x3c>
 c014ec0:	008300b4 	movhi	r2,3074
 c014ec4:	10975604 	addi	r2,r2,23896
}
 c014ec8:	e037883a 	mov	sp,fp
 c014ecc:	dfc00117 	ldw	ra,4(sp)
 c014ed0:	df000017 	ldw	fp,0(sp)
 c014ed4:	dec00204 	addi	sp,sp,8
 c014ed8:	f800283a 	ret

0c014edc <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 c014edc:	deffed04 	addi	sp,sp,-76
 c014ee0:	dfc01215 	stw	ra,72(sp)
 c014ee4:	df001115 	stw	fp,68(sp)
 c014ee8:	df001104 	addi	fp,sp,68
 c014eec:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 c014ef0:	e0bfff17 	ldw	r2,-4(fp)
 c014ef4:	10000616 	blt	r2,zero,c014f10 <isatty+0x34>
 c014ef8:	e0bfff17 	ldw	r2,-4(fp)
 c014efc:	10c00324 	muli	r3,r2,12
 c014f00:	008300b4 	movhi	r2,3074
 c014f04:	108bec04 	addi	r2,r2,12208
 c014f08:	1885883a 	add	r2,r3,r2
 c014f0c:	00000106 	br	c014f14 <isatty+0x38>
 c014f10:	0005883a 	mov	r2,zero
 c014f14:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 c014f18:	e0bfef17 	ldw	r2,-68(fp)
 c014f1c:	10000e26 	beq	r2,zero,c014f58 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 c014f20:	e0bfef17 	ldw	r2,-68(fp)
 c014f24:	10800017 	ldw	r2,0(r2)
 c014f28:	10800817 	ldw	r2,32(r2)
 c014f2c:	1000021e 	bne	r2,zero,c014f38 <isatty+0x5c>
    {
      return 1;
 c014f30:	00800044 	movi	r2,1
 c014f34:	00000d06 	br	c014f6c <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 c014f38:	e0bff004 	addi	r2,fp,-64
 c014f3c:	e13fff17 	ldw	r4,-4(fp)
 c014f40:	100b883a 	mov	r5,r2
 c014f44:	c014c0c0 	call	c014c0c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 c014f48:	e0bff117 	ldw	r2,-60(fp)
 c014f4c:	10880020 	cmpeqi	r2,r2,8192
 c014f50:	10803fcc 	andi	r2,r2,255
 c014f54:	00000506 	br	c014f6c <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 c014f58:	c014e8c0 	call	c014e8c <alt_get_errno>
 c014f5c:	1007883a 	mov	r3,r2
 c014f60:	00801444 	movi	r2,81
 c014f64:	18800015 	stw	r2,0(r3)
    return 0;
 c014f68:	0005883a 	mov	r2,zero
  }
}
 c014f6c:	e037883a 	mov	sp,fp
 c014f70:	dfc00117 	ldw	ra,4(sp)
 c014f74:	df000017 	ldw	fp,0(sp)
 c014f78:	dec00204 	addi	sp,sp,8
 c014f7c:	f800283a 	ret

0c014f80 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 c014f80:	defffe04 	addi	sp,sp,-8
 c014f84:	dfc00115 	stw	ra,4(sp)
 c014f88:	df000015 	stw	fp,0(sp)
 c014f8c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 c014f90:	008300b4 	movhi	r2,3074
 c014f94:	10908004 	addi	r2,r2,16896
 c014f98:	10800017 	ldw	r2,0(r2)
 c014f9c:	10000526 	beq	r2,zero,c014fb4 <alt_get_errno+0x34>
 c014fa0:	008300b4 	movhi	r2,3074
 c014fa4:	10908004 	addi	r2,r2,16896
 c014fa8:	10800017 	ldw	r2,0(r2)
 c014fac:	103ee83a 	callr	r2
 c014fb0:	00000206 	br	c014fbc <alt_get_errno+0x3c>
 c014fb4:	008300b4 	movhi	r2,3074
 c014fb8:	10975604 	addi	r2,r2,23896
}
 c014fbc:	e037883a 	mov	sp,fp
 c014fc0:	dfc00117 	ldw	ra,4(sp)
 c014fc4:	df000017 	ldw	fp,0(sp)
 c014fc8:	dec00204 	addi	sp,sp,8
 c014fcc:	f800283a 	ret

0c014fd0 <kill>:
 *
 * ALT_KILL is mapped onto the kill() system call in alt_syscall.h
 */

int ALT_KILL (int pid, int sig)
{
 c014fd0:	defffb04 	addi	sp,sp,-20
 c014fd4:	dfc00415 	stw	ra,16(sp)
 c014fd8:	df000315 	stw	fp,12(sp)
 c014fdc:	df000304 	addi	fp,sp,12
 c014fe0:	e13ffe15 	stw	r4,-8(fp)
 c014fe4:	e17fff15 	stw	r5,-4(fp)
  int status = 0;
 c014fe8:	e03ffd15 	stw	zero,-12(fp)

  if (pid <= 0)
 c014fec:	e0bffe17 	ldw	r2,-8(fp)
 c014ff0:	00803116 	blt	zero,r2,c0150b8 <kill+0xe8>
  {
    switch (sig)
 c014ff4:	e0bfff17 	ldw	r2,-4(fp)
 c014ff8:	10800828 	cmpgeui	r2,r2,32
 c014ffc:	1000291e 	bne	r2,zero,c0150a4 <kill+0xd4>
 c015000:	e0bfff17 	ldw	r2,-4(fp)
 c015004:	100690ba 	slli	r3,r2,2
 c015008:	00830074 	movhi	r2,3073
 c01500c:	10940704 	addi	r2,r2,20508
 c015010:	1885883a 	add	r2,r3,r2
 c015014:	10800017 	ldw	r2,0(r2)
 c015018:	1000683a 	jmp	r2
 c01501c:	0c0150b0 	cmpltui	r16,at,1346
 c015020:	0c0150a4 	muli	r16,at,1346
 c015024:	0c0150a4 	muli	r16,at,1346
 c015028:	0c01509c 	xori	r16,at,1346
 c01502c:	0c01509c 	xori	r16,at,1346
 c015030:	0c01509c 	xori	r16,at,1346
 c015034:	0c01509c 	xori	r16,at,1346
 c015038:	0c0150a4 	muli	r16,at,1346
 c01503c:	0c01509c 	xori	r16,at,1346
 c015040:	0c01509c 	xori	r16,at,1346
 c015044:	0c01509c 	xori	r16,at,1346
 c015048:	0c01509c 	xori	r16,at,1346
 c01504c:	0c01509c 	xori	r16,at,1346
 c015050:	0c01509c 	xori	r16,at,1346
 c015054:	0c01509c 	xori	r16,at,1346
 c015058:	0c01509c 	xori	r16,at,1346
 c01505c:	0c0150b0 	cmpltui	r16,at,1346
 c015060:	0c0150a4 	muli	r16,at,1346
 c015064:	0c0150a4 	muli	r16,at,1346
 c015068:	0c0150a4 	muli	r16,at,1346
 c01506c:	0c0150b0 	cmpltui	r16,at,1346
 c015070:	0c0150a4 	muli	r16,at,1346
 c015074:	0c0150a4 	muli	r16,at,1346
 c015078:	0c01509c 	xori	r16,at,1346
 c01507c:	0c01509c 	xori	r16,at,1346
 c015080:	0c01509c 	xori	r16,at,1346
 c015084:	0c01509c 	xori	r16,at,1346
 c015088:	0c01509c 	xori	r16,at,1346
 c01508c:	0c0150a4 	muli	r16,at,1346
 c015090:	0c0150a4 	muli	r16,at,1346
 c015094:	0c01509c 	xori	r16,at,1346
 c015098:	0c01509c 	xori	r16,at,1346
       * The Posix standard defines the default behaviour for all these signals 
       * as being eqivalent to a call to _exit(). No mechanism is provided to 
       * change this behaviour.
       */

      _exit(0);
 c01509c:	0009883a 	mov	r4,zero
 c0150a0:	c014b880 	call	c014b88 <_exit>
      break;
    default:

      /* Tried to send an unsupported signal */

      status = EINVAL;
 c0150a4:	00800584 	movi	r2,22
 c0150a8:	e0bffd15 	stw	r2,-12(fp)
 c0150ac:	00000606 	br	c0150c8 <kill+0xf8>
    {
    case 0:

      /* The null signal is used to check that a pid is valid. */

      break;
 c0150b0:	0001883a 	nop
 c0150b4:	00000406 	br	c0150c8 <kill+0xf8>

      status = EINVAL;
    }
  }

  else if (pid > 0)
 c0150b8:	e0bffe17 	ldw	r2,-8(fp)
 c0150bc:	0080020e 	bge	zero,r2,c0150c8 <kill+0xf8>
  {
    /* Attempted to signal a non-existant process */

    status = ESRCH;
 c0150c0:	008000c4 	movi	r2,3
 c0150c4:	e0bffd15 	stw	r2,-12(fp)
  }

  if (status)
 c0150c8:	e0bffd17 	ldw	r2,-12(fp)
 c0150cc:	10000626 	beq	r2,zero,c0150e8 <kill+0x118>
  {
    ALT_ERRNO = status;
 c0150d0:	c014f800 	call	c014f80 <alt_get_errno>
 c0150d4:	1007883a 	mov	r3,r2
 c0150d8:	e0bffd17 	ldw	r2,-12(fp)
 c0150dc:	18800015 	stw	r2,0(r3)
    return -1;
 c0150e0:	00bfffc4 	movi	r2,-1
 c0150e4:	00000106 	br	c0150ec <kill+0x11c>
  }

  return 0;
 c0150e8:	0005883a 	mov	r2,zero
}
 c0150ec:	e037883a 	mov	sp,fp
 c0150f0:	dfc00117 	ldw	ra,4(sp)
 c0150f4:	df000017 	ldw	fp,0(sp)
 c0150f8:	dec00204 	addi	sp,sp,8
 c0150fc:	f800283a 	ret

0c015100 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 c015100:	defffc04 	addi	sp,sp,-16
 c015104:	df000315 	stw	fp,12(sp)
 c015108:	df000304 	addi	fp,sp,12
 c01510c:	e13ffd15 	stw	r4,-12(fp)
 c015110:	e17ffe15 	stw	r5,-8(fp)
 c015114:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 c015118:	e0fffe17 	ldw	r3,-8(fp)
 c01511c:	e0bffd17 	ldw	r2,-12(fp)
 c015120:	18800c26 	beq	r3,r2,c015154 <alt_load_section+0x54>
  {
    while( to != end )
 c015124:	00000806 	br	c015148 <alt_load_section+0x48>
    {
      *to++ = *from++;
 c015128:	e0bffe17 	ldw	r2,-8(fp)
 c01512c:	10c00104 	addi	r3,r2,4
 c015130:	e0fffe15 	stw	r3,-8(fp)
 c015134:	e0fffd17 	ldw	r3,-12(fp)
 c015138:	19000104 	addi	r4,r3,4
 c01513c:	e13ffd15 	stw	r4,-12(fp)
 c015140:	18c00017 	ldw	r3,0(r3)
 c015144:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 c015148:	e0fffe17 	ldw	r3,-8(fp)
 c01514c:	e0bfff17 	ldw	r2,-4(fp)
 c015150:	18bff51e 	bne	r3,r2,c015128 <__alt_data_end+0xfc015128>
    {
      *to++ = *from++;
    }
  }
}
 c015154:	e037883a 	mov	sp,fp
 c015158:	df000017 	ldw	fp,0(sp)
 c01515c:	dec00104 	addi	sp,sp,4
 c015160:	f800283a 	ret

0c015164 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 c015164:	defffe04 	addi	sp,sp,-8
 c015168:	dfc00115 	stw	ra,4(sp)
 c01516c:	df000015 	stw	fp,0(sp)
 c015170:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 c015174:	010300b4 	movhi	r4,3074
 c015178:	21108504 	addi	r4,r4,16916
 c01517c:	014300b4 	movhi	r5,3074
 c015180:	2949b904 	addi	r5,r5,9956
 c015184:	018300b4 	movhi	r6,3074
 c015188:	31908504 	addi	r6,r6,16916
 c01518c:	c0151000 	call	c015100 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 c015190:	01030034 	movhi	r4,3072
 c015194:	21000804 	addi	r4,r4,32
 c015198:	01430034 	movhi	r5,3072
 c01519c:	29400804 	addi	r5,r5,32
 c0151a0:	01830034 	movhi	r6,3072
 c0151a4:	31806f04 	addi	r6,r6,444
 c0151a8:	c0151000 	call	c015100 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 c0151ac:	01030074 	movhi	r4,3073
 c0151b0:	211edf04 	addi	r4,r4,31612
 c0151b4:	01430074 	movhi	r5,3073
 c0151b8:	295edf04 	addi	r5,r5,31612
 c0151bc:	018300b4 	movhi	r6,3074
 c0151c0:	3189b904 	addi	r6,r6,9956
 c0151c4:	c0151000 	call	c015100 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 c0151c8:	c016af80 	call	c016af8 <alt_dcache_flush_all>
  alt_icache_flush_all();
 c0151cc:	c016d500 	call	c016d50 <alt_icache_flush_all>
}
 c0151d0:	e037883a 	mov	sp,fp
 c0151d4:	dfc00117 	ldw	ra,4(sp)
 c0151d8:	df000017 	ldw	fp,0(sp)
 c0151dc:	dec00204 	addi	sp,sp,8
 c0151e0:	f800283a 	ret

0c0151e4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 c0151e4:	defffe04 	addi	sp,sp,-8
 c0151e8:	dfc00115 	stw	ra,4(sp)
 c0151ec:	df000015 	stw	fp,0(sp)
 c0151f0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 c0151f4:	008300b4 	movhi	r2,3074
 c0151f8:	10908004 	addi	r2,r2,16896
 c0151fc:	10800017 	ldw	r2,0(r2)
 c015200:	10000526 	beq	r2,zero,c015218 <alt_get_errno+0x34>
 c015204:	008300b4 	movhi	r2,3074
 c015208:	10908004 	addi	r2,r2,16896
 c01520c:	10800017 	ldw	r2,0(r2)
 c015210:	103ee83a 	callr	r2
 c015214:	00000206 	br	c015220 <alt_get_errno+0x3c>
 c015218:	008300b4 	movhi	r2,3074
 c01521c:	10975604 	addi	r2,r2,23896
}
 c015220:	e037883a 	mov	sp,fp
 c015224:	dfc00117 	ldw	ra,4(sp)
 c015228:	df000017 	ldw	fp,0(sp)
 c01522c:	dec00204 	addi	sp,sp,8
 c015230:	f800283a 	ret

0c015234 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 c015234:	defff904 	addi	sp,sp,-28
 c015238:	dfc00615 	stw	ra,24(sp)
 c01523c:	df000515 	stw	fp,20(sp)
 c015240:	df000504 	addi	fp,sp,20
 c015244:	e13ffd15 	stw	r4,-12(fp)
 c015248:	e17ffe15 	stw	r5,-8(fp)
 c01524c:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 c015250:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 c015254:	e0bffd17 	ldw	r2,-12(fp)
 c015258:	10000616 	blt	r2,zero,c015274 <lseek+0x40>
 c01525c:	e0bffd17 	ldw	r2,-12(fp)
 c015260:	10c00324 	muli	r3,r2,12
 c015264:	008300b4 	movhi	r2,3074
 c015268:	108bec04 	addi	r2,r2,12208
 c01526c:	1885883a 	add	r2,r3,r2
 c015270:	00000106 	br	c015278 <lseek+0x44>
 c015274:	0005883a 	mov	r2,zero
 c015278:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 c01527c:	e0bffc17 	ldw	r2,-16(fp)
 c015280:	10001026 	beq	r2,zero,c0152c4 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 c015284:	e0bffc17 	ldw	r2,-16(fp)
 c015288:	10800017 	ldw	r2,0(r2)
 c01528c:	10800717 	ldw	r2,28(r2)
 c015290:	10000926 	beq	r2,zero,c0152b8 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 c015294:	e0bffc17 	ldw	r2,-16(fp)
 c015298:	10800017 	ldw	r2,0(r2)
 c01529c:	10800717 	ldw	r2,28(r2)
 c0152a0:	e13ffc17 	ldw	r4,-16(fp)
 c0152a4:	e17ffe17 	ldw	r5,-8(fp)
 c0152a8:	e1bfff17 	ldw	r6,-4(fp)
 c0152ac:	103ee83a 	callr	r2
 c0152b0:	e0bffb15 	stw	r2,-20(fp)
 c0152b4:	00000506 	br	c0152cc <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 c0152b8:	00bfde84 	movi	r2,-134
 c0152bc:	e0bffb15 	stw	r2,-20(fp)
 c0152c0:	00000206 	br	c0152cc <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
 c0152c4:	00bfebc4 	movi	r2,-81
 c0152c8:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 c0152cc:	e0bffb17 	ldw	r2,-20(fp)
 c0152d0:	1000070e 	bge	r2,zero,c0152f0 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
 c0152d4:	c0151e40 	call	c0151e4 <alt_get_errno>
 c0152d8:	1007883a 	mov	r3,r2
 c0152dc:	e0bffb17 	ldw	r2,-20(fp)
 c0152e0:	0085c83a 	sub	r2,zero,r2
 c0152e4:	18800015 	stw	r2,0(r3)
    rc = -1;
 c0152e8:	00bfffc4 	movi	r2,-1
 c0152ec:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 c0152f0:	e0bffb17 	ldw	r2,-20(fp)
}
 c0152f4:	e037883a 	mov	sp,fp
 c0152f8:	dfc00117 	ldw	ra,4(sp)
 c0152fc:	df000017 	ldw	fp,0(sp)
 c015300:	dec00204 	addi	sp,sp,8
 c015304:	f800283a 	ret

0c015308 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 c015308:	defffd04 	addi	sp,sp,-12
 c01530c:	dfc00215 	stw	ra,8(sp)
 c015310:	df000115 	stw	fp,4(sp)
 c015314:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 c015318:	0009883a 	mov	r4,zero
 c01531c:	c0157cc0 	call	c0157cc <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 c015320:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 c015324:	c0158000 	call	c015800 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 c015328:	010300b4 	movhi	r4,3074
 c01532c:	2109a904 	addi	r4,r4,9892
 c015330:	014300b4 	movhi	r5,3074
 c015334:	2949a904 	addi	r5,r5,9892
 c015338:	018300b4 	movhi	r6,3074
 c01533c:	3189a904 	addi	r6,r6,9892
 c015340:	c0171100 	call	c017110 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 c015344:	c016c080 	call	c016c08 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 c015348:	01030074 	movhi	r4,3073
 c01534c:	211b1904 	addi	r4,r4,27748
 c015350:	c01780c0 	call	c01780c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 c015354:	d126ec17 	ldw	r4,-25680(gp)
 c015358:	d0e6ed17 	ldw	r3,-25676(gp)
 c01535c:	d0a6ee17 	ldw	r2,-25672(gp)
 c015360:	180b883a 	mov	r5,r3
 c015364:	100d883a 	mov	r6,r2
 c015368:	c0072ec0 	call	c0072ec <main>
 c01536c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 c015370:	01000044 	movi	r4,1
 c015374:	c014a8c0 	call	c014a8c <close>
  exit (result);
 c015378:	e13fff17 	ldw	r4,-4(fp)
 c01537c:	c0178200 	call	c017820 <exit>

0c015380 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 c015380:	defffe04 	addi	sp,sp,-8
 c015384:	df000115 	stw	fp,4(sp)
 c015388:	df000104 	addi	fp,sp,4
 c01538c:	e13fff15 	stw	r4,-4(fp)
}
 c015390:	e037883a 	mov	sp,fp
 c015394:	df000017 	ldw	fp,0(sp)
 c015398:	dec00104 	addi	sp,sp,4
 c01539c:	f800283a 	ret

0c0153a0 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 c0153a0:	defffe04 	addi	sp,sp,-8
 c0153a4:	df000115 	stw	fp,4(sp)
 c0153a8:	df000104 	addi	fp,sp,4
 c0153ac:	e13fff15 	stw	r4,-4(fp)
}
 c0153b0:	e037883a 	mov	sp,fp
 c0153b4:	df000017 	ldw	fp,0(sp)
 c0153b8:	dec00104 	addi	sp,sp,4
 c0153bc:	f800283a 	ret

0c0153c0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 c0153c0:	defffe04 	addi	sp,sp,-8
 c0153c4:	dfc00115 	stw	ra,4(sp)
 c0153c8:	df000015 	stw	fp,0(sp)
 c0153cc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 c0153d0:	008300b4 	movhi	r2,3074
 c0153d4:	10908004 	addi	r2,r2,16896
 c0153d8:	10800017 	ldw	r2,0(r2)
 c0153dc:	10000526 	beq	r2,zero,c0153f4 <alt_get_errno+0x34>
 c0153e0:	008300b4 	movhi	r2,3074
 c0153e4:	10908004 	addi	r2,r2,16896
 c0153e8:	10800017 	ldw	r2,0(r2)
 c0153ec:	103ee83a 	callr	r2
 c0153f0:	00000206 	br	c0153fc <alt_get_errno+0x3c>
 c0153f4:	008300b4 	movhi	r2,3074
 c0153f8:	10975604 	addi	r2,r2,23896
}
 c0153fc:	e037883a 	mov	sp,fp
 c015400:	dfc00117 	ldw	ra,4(sp)
 c015404:	df000017 	ldw	fp,0(sp)
 c015408:	dec00204 	addi	sp,sp,8
 c01540c:	f800283a 	ret

0c015410 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 c015410:	defff904 	addi	sp,sp,-28
 c015414:	dfc00615 	stw	ra,24(sp)
 c015418:	df000515 	stw	fp,20(sp)
 c01541c:	df000504 	addi	fp,sp,20
 c015420:	e13ffd15 	stw	r4,-12(fp)
 c015424:	e17ffe15 	stw	r5,-8(fp)
 c015428:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 c01542c:	e0bffd17 	ldw	r2,-12(fp)
 c015430:	10000616 	blt	r2,zero,c01544c <read+0x3c>
 c015434:	e0bffd17 	ldw	r2,-12(fp)
 c015438:	10c00324 	muli	r3,r2,12
 c01543c:	008300b4 	movhi	r2,3074
 c015440:	108bec04 	addi	r2,r2,12208
 c015444:	1885883a 	add	r2,r3,r2
 c015448:	00000106 	br	c015450 <read+0x40>
 c01544c:	0005883a 	mov	r2,zero
 c015450:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 c015454:	e0bffb17 	ldw	r2,-20(fp)
 c015458:	10002226 	beq	r2,zero,c0154e4 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 c01545c:	e0bffb17 	ldw	r2,-20(fp)
 c015460:	10800217 	ldw	r2,8(r2)
 c015464:	108000cc 	andi	r2,r2,3
 c015468:	10800060 	cmpeqi	r2,r2,1
 c01546c:	1000181e 	bne	r2,zero,c0154d0 <read+0xc0>
        (fd->dev->read))
 c015470:	e0bffb17 	ldw	r2,-20(fp)
 c015474:	10800017 	ldw	r2,0(r2)
 c015478:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 c01547c:	10001426 	beq	r2,zero,c0154d0 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 c015480:	e0bffb17 	ldw	r2,-20(fp)
 c015484:	10800017 	ldw	r2,0(r2)
 c015488:	10800517 	ldw	r2,20(r2)
 c01548c:	e0ffff17 	ldw	r3,-4(fp)
 c015490:	e13ffb17 	ldw	r4,-20(fp)
 c015494:	e17ffe17 	ldw	r5,-8(fp)
 c015498:	180d883a 	mov	r6,r3
 c01549c:	103ee83a 	callr	r2
 c0154a0:	e0bffc15 	stw	r2,-16(fp)
 c0154a4:	e0bffc17 	ldw	r2,-16(fp)
 c0154a8:	1000070e 	bge	r2,zero,c0154c8 <read+0xb8>
        {
          ALT_ERRNO = -rval;
 c0154ac:	c0153c00 	call	c0153c0 <alt_get_errno>
 c0154b0:	1007883a 	mov	r3,r2
 c0154b4:	e0bffc17 	ldw	r2,-16(fp)
 c0154b8:	0085c83a 	sub	r2,zero,r2
 c0154bc:	18800015 	stw	r2,0(r3)
          return -1;
 c0154c0:	00bfffc4 	movi	r2,-1
 c0154c4:	00000c06 	br	c0154f8 <read+0xe8>
        }
        return rval;
 c0154c8:	e0bffc17 	ldw	r2,-16(fp)
 c0154cc:	00000a06 	br	c0154f8 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
 c0154d0:	c0153c00 	call	c0153c0 <alt_get_errno>
 c0154d4:	1007883a 	mov	r3,r2
 c0154d8:	00800344 	movi	r2,13
 c0154dc:	18800015 	stw	r2,0(r3)
 c0154e0:	00000406 	br	c0154f4 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 c0154e4:	c0153c00 	call	c0153c0 <alt_get_errno>
 c0154e8:	1007883a 	mov	r3,r2
 c0154ec:	00801444 	movi	r2,81
 c0154f0:	18800015 	stw	r2,0(r3)
  }
  return -1;
 c0154f4:	00bfffc4 	movi	r2,-1
}
 c0154f8:	e037883a 	mov	sp,fp
 c0154fc:	dfc00117 	ldw	ra,4(sp)
 c015500:	df000017 	ldw	fp,0(sp)
 c015504:	dec00204 	addi	sp,sp,8
 c015508:	f800283a 	ret

0c01550c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 c01550c:	defffe04 	addi	sp,sp,-8
 c015510:	df000115 	stw	fp,4(sp)
 c015514:	df000104 	addi	fp,sp,4
 c015518:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 c01551c:	e0bfff17 	ldw	r2,-4(fp)
 c015520:	108000d0 	cmplti	r2,r2,3
 c015524:	10000d1e 	bne	r2,zero,c01555c <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 c015528:	008300b4 	movhi	r2,3074
 c01552c:	108bec04 	addi	r2,r2,12208
 c015530:	e0ffff17 	ldw	r3,-4(fp)
 c015534:	18c00324 	muli	r3,r3,12
 c015538:	10c5883a 	add	r2,r2,r3
 c01553c:	10800204 	addi	r2,r2,8
 c015540:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 c015544:	008300b4 	movhi	r2,3074
 c015548:	108bec04 	addi	r2,r2,12208
 c01554c:	e0ffff17 	ldw	r3,-4(fp)
 c015550:	18c00324 	muli	r3,r3,12
 c015554:	10c5883a 	add	r2,r2,r3
 c015558:	10000015 	stw	zero,0(r2)
  }
}
 c01555c:	e037883a 	mov	sp,fp
 c015560:	df000017 	ldw	fp,0(sp)
 c015564:	dec00104 	addi	sp,sp,4
 c015568:	f800283a 	ret

0c01556c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 c01556c:	defff904 	addi	sp,sp,-28
 c015570:	df000615 	stw	fp,24(sp)
 c015574:	df000604 	addi	fp,sp,24
 c015578:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 c01557c:	0005303a 	rdctl	r2,status
 c015580:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 c015584:	e0fffc17 	ldw	r3,-16(fp)
 c015588:	00bfff84 	movi	r2,-2
 c01558c:	1884703a 	and	r2,r3,r2
 c015590:	1001703a 	wrctl	status,r2
  
  return context;
 c015594:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 c015598:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 c01559c:	d0a01317 	ldw	r2,-32692(gp)
 c0155a0:	10c000c4 	addi	r3,r2,3
 c0155a4:	00bfff04 	movi	r2,-4
 c0155a8:	1884703a 	and	r2,r3,r2
 c0155ac:	d0a01315 	stw	r2,-32692(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 c0155b0:	d0e01317 	ldw	r3,-32692(gp)
 c0155b4:	e0bfff17 	ldw	r2,-4(fp)
 c0155b8:	1887883a 	add	r3,r3,r2
 c0155bc:	00840034 	movhi	r2,4096
 c0155c0:	10800004 	addi	r2,r2,0
 c0155c4:	10c0062e 	bgeu	r2,r3,c0155e0 <sbrk+0x74>
 c0155c8:	e0bffa17 	ldw	r2,-24(fp)
 c0155cc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 c0155d0:	e0bffd17 	ldw	r2,-12(fp)
 c0155d4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 c0155d8:	00bfffc4 	movi	r2,-1
 c0155dc:	00000b06 	br	c01560c <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 c0155e0:	d0a01317 	ldw	r2,-32692(gp)
 c0155e4:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
 c0155e8:	d0e01317 	ldw	r3,-32692(gp)
 c0155ec:	e0bfff17 	ldw	r2,-4(fp)
 c0155f0:	1885883a 	add	r2,r3,r2
 c0155f4:	d0a01315 	stw	r2,-32692(gp)
 c0155f8:	e0bffa17 	ldw	r2,-24(fp)
 c0155fc:	e0bffe15 	stw	r2,-8(fp)
 c015600:	e0bffe17 	ldw	r2,-8(fp)
 c015604:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 c015608:	e0bffb17 	ldw	r2,-20(fp)
} 
 c01560c:	e037883a 	mov	sp,fp
 c015610:	df000017 	ldw	fp,0(sp)
 c015614:	dec00104 	addi	sp,sp,4
 c015618:	f800283a 	ret

0c01561c <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 c01561c:	defffd04 	addi	sp,sp,-12
 c015620:	dfc00215 	stw	ra,8(sp)
 c015624:	df000115 	stw	fp,4(sp)
 c015628:	df000104 	addi	fp,sp,4
 c01562c:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 c015630:	e13fff17 	ldw	r4,-4(fp)
 c015634:	c0169d00 	call	c0169d0 <alt_busy_sleep>
}
 c015638:	e037883a 	mov	sp,fp
 c01563c:	dfc00117 	ldw	ra,4(sp)
 c015640:	df000017 	ldw	fp,0(sp)
 c015644:	dec00204 	addi	sp,sp,8
 c015648:	f800283a 	ret

0c01564c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 c01564c:	defffe04 	addi	sp,sp,-8
 c015650:	dfc00115 	stw	ra,4(sp)
 c015654:	df000015 	stw	fp,0(sp)
 c015658:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 c01565c:	008300b4 	movhi	r2,3074
 c015660:	10908004 	addi	r2,r2,16896
 c015664:	10800017 	ldw	r2,0(r2)
 c015668:	10000526 	beq	r2,zero,c015680 <alt_get_errno+0x34>
 c01566c:	008300b4 	movhi	r2,3074
 c015670:	10908004 	addi	r2,r2,16896
 c015674:	10800017 	ldw	r2,0(r2)
 c015678:	103ee83a 	callr	r2
 c01567c:	00000206 	br	c015688 <alt_get_errno+0x3c>
 c015680:	008300b4 	movhi	r2,3074
 c015684:	10975604 	addi	r2,r2,23896
}
 c015688:	e037883a 	mov	sp,fp
 c01568c:	dfc00117 	ldw	ra,4(sp)
 c015690:	df000017 	ldw	fp,0(sp)
 c015694:	dec00204 	addi	sp,sp,8
 c015698:	f800283a 	ret

0c01569c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 c01569c:	defff904 	addi	sp,sp,-28
 c0156a0:	dfc00615 	stw	ra,24(sp)
 c0156a4:	df000515 	stw	fp,20(sp)
 c0156a8:	df000504 	addi	fp,sp,20
 c0156ac:	e13ffd15 	stw	r4,-12(fp)
 c0156b0:	e17ffe15 	stw	r5,-8(fp)
 c0156b4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 c0156b8:	e0bffd17 	ldw	r2,-12(fp)
 c0156bc:	10000616 	blt	r2,zero,c0156d8 <write+0x3c>
 c0156c0:	e0bffd17 	ldw	r2,-12(fp)
 c0156c4:	10c00324 	muli	r3,r2,12
 c0156c8:	008300b4 	movhi	r2,3074
 c0156cc:	108bec04 	addi	r2,r2,12208
 c0156d0:	1885883a 	add	r2,r3,r2
 c0156d4:	00000106 	br	c0156dc <write+0x40>
 c0156d8:	0005883a 	mov	r2,zero
 c0156dc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 c0156e0:	e0bffb17 	ldw	r2,-20(fp)
 c0156e4:	10002126 	beq	r2,zero,c01576c <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 c0156e8:	e0bffb17 	ldw	r2,-20(fp)
 c0156ec:	10800217 	ldw	r2,8(r2)
 c0156f0:	108000cc 	andi	r2,r2,3
 c0156f4:	10001826 	beq	r2,zero,c015758 <write+0xbc>
 c0156f8:	e0bffb17 	ldw	r2,-20(fp)
 c0156fc:	10800017 	ldw	r2,0(r2)
 c015700:	10800617 	ldw	r2,24(r2)
 c015704:	10001426 	beq	r2,zero,c015758 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 c015708:	e0bffb17 	ldw	r2,-20(fp)
 c01570c:	10800017 	ldw	r2,0(r2)
 c015710:	10800617 	ldw	r2,24(r2)
 c015714:	e0ffff17 	ldw	r3,-4(fp)
 c015718:	e13ffb17 	ldw	r4,-20(fp)
 c01571c:	e17ffe17 	ldw	r5,-8(fp)
 c015720:	180d883a 	mov	r6,r3
 c015724:	103ee83a 	callr	r2
 c015728:	e0bffc15 	stw	r2,-16(fp)
 c01572c:	e0bffc17 	ldw	r2,-16(fp)
 c015730:	1000070e 	bge	r2,zero,c015750 <write+0xb4>
      {
        ALT_ERRNO = -rval;
 c015734:	c01564c0 	call	c01564c <alt_get_errno>
 c015738:	1007883a 	mov	r3,r2
 c01573c:	e0bffc17 	ldw	r2,-16(fp)
 c015740:	0085c83a 	sub	r2,zero,r2
 c015744:	18800015 	stw	r2,0(r3)
        return -1;
 c015748:	00bfffc4 	movi	r2,-1
 c01574c:	00000c06 	br	c015780 <write+0xe4>
      }
      return rval;
 c015750:	e0bffc17 	ldw	r2,-16(fp)
 c015754:	00000a06 	br	c015780 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
 c015758:	c01564c0 	call	c01564c <alt_get_errno>
 c01575c:	1007883a 	mov	r3,r2
 c015760:	00800344 	movi	r2,13
 c015764:	18800015 	stw	r2,0(r3)
 c015768:	00000406 	br	c01577c <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 c01576c:	c01564c0 	call	c01564c <alt_get_errno>
 c015770:	1007883a 	mov	r3,r2
 c015774:	00801444 	movi	r2,81
 c015778:	18800015 	stw	r2,0(r3)
  }
  return -1;
 c01577c:	00bfffc4 	movi	r2,-1
}
 c015780:	e037883a 	mov	sp,fp
 c015784:	dfc00117 	ldw	ra,4(sp)
 c015788:	df000017 	ldw	fp,0(sp)
 c01578c:	dec00204 	addi	sp,sp,8
 c015790:	f800283a 	ret

0c015794 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 c015794:	defffd04 	addi	sp,sp,-12
 c015798:	dfc00215 	stw	ra,8(sp)
 c01579c:	df000115 	stw	fp,4(sp)
 c0157a0:	df000104 	addi	fp,sp,4
 c0157a4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 c0157a8:	e13fff17 	ldw	r4,-4(fp)
 c0157ac:	014300b4 	movhi	r5,3074
 c0157b0:	29507d04 	addi	r5,r5,16884
 c0157b4:	c016b640 	call	c016b64 <alt_dev_llist_insert>
}
 c0157b8:	e037883a 	mov	sp,fp
 c0157bc:	dfc00117 	ldw	ra,4(sp)
 c0157c0:	df000017 	ldw	fp,0(sp)
 c0157c4:	dec00204 	addi	sp,sp,8
 c0157c8:	f800283a 	ret

0c0157cc <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 c0157cc:	defffd04 	addi	sp,sp,-12
 c0157d0:	dfc00215 	stw	ra,8(sp)
 c0157d4:	df000115 	stw	fp,4(sp)
 c0157d8:	df000104 	addi	fp,sp,4
 c0157dc:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
 c0157e0:	c0175980 	call	c017598 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 c0157e4:	00800044 	movi	r2,1
 c0157e8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 c0157ec:	e037883a 	mov	sp,fp
 c0157f0:	dfc00117 	ldw	ra,4(sp)
 c0157f4:	df000017 	ldw	fp,0(sp)
 c0157f8:	dec00204 	addi	sp,sp,8
 c0157fc:	f800283a 	ret

0c015800 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 c015800:	defffe04 	addi	sp,sp,-8
 c015804:	dfc00115 	stw	ra,4(sp)
 c015808:	df000015 	stw	fp,0(sp)
 c01580c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
 c015810:	01082004 	movi	r4,8320
 c015814:	000b883a 	mov	r5,zero
 c015818:	01800104 	movi	r6,4
 c01581c:	01c0fa04 	movi	r7,1000
 c015820:	c0163300 	call	c016330 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 c015824:	010300b4 	movhi	r4,3074
 c015828:	210c5604 	addi	r4,r4,12632
 c01582c:	000b883a 	mov	r5,zero
 c015830:	01800144 	movi	r6,5
 c015834:	c0159d40 	call	c0159d4 <altera_avalon_jtag_uart_init>
 c015838:	010300b4 	movhi	r4,3074
 c01583c:	210c4c04 	addi	r4,r4,12592
 c015840:	c0157940 	call	c015794 <alt_dev_reg>
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHARACTER_LCD_0, character_lcd_0);
 c015844:	010300b4 	movhi	r4,3074
 c015848:	21106404 	addi	r4,r4,16784
 c01584c:	c0164680 	call	c016468 <alt_up_character_lcd_init>
 c015850:	010300b4 	movhi	r4,3074
 c015854:	21106404 	addi	r4,r4,16784
 c015858:	c0157940 	call	c015794 <alt_dev_reg>
}
 c01585c:	e037883a 	mov	sp,fp
 c015860:	dfc00117 	ldw	ra,4(sp)
 c015864:	df000017 	ldw	fp,0(sp)
 c015868:	dec00204 	addi	sp,sp,8
 c01586c:	f800283a 	ret

0c015870 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 c015870:	defffa04 	addi	sp,sp,-24
 c015874:	dfc00515 	stw	ra,20(sp)
 c015878:	df000415 	stw	fp,16(sp)
 c01587c:	df000404 	addi	fp,sp,16
 c015880:	e13ffd15 	stw	r4,-12(fp)
 c015884:	e17ffe15 	stw	r5,-8(fp)
 c015888:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 c01588c:	e0bffd17 	ldw	r2,-12(fp)
 c015890:	10800017 	ldw	r2,0(r2)
 c015894:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 c015898:	e0bffc17 	ldw	r2,-16(fp)
 c01589c:	10c00a04 	addi	r3,r2,40
 c0158a0:	e0bffd17 	ldw	r2,-12(fp)
 c0158a4:	10800217 	ldw	r2,8(r2)
 c0158a8:	1809883a 	mov	r4,r3
 c0158ac:	e17ffe17 	ldw	r5,-8(fp)
 c0158b0:	e1bfff17 	ldw	r6,-4(fp)
 c0158b4:	100f883a 	mov	r7,r2
 c0158b8:	c015e980 	call	c015e98 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 c0158bc:	e037883a 	mov	sp,fp
 c0158c0:	dfc00117 	ldw	ra,4(sp)
 c0158c4:	df000017 	ldw	fp,0(sp)
 c0158c8:	dec00204 	addi	sp,sp,8
 c0158cc:	f800283a 	ret

0c0158d0 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 c0158d0:	defffa04 	addi	sp,sp,-24
 c0158d4:	dfc00515 	stw	ra,20(sp)
 c0158d8:	df000415 	stw	fp,16(sp)
 c0158dc:	df000404 	addi	fp,sp,16
 c0158e0:	e13ffd15 	stw	r4,-12(fp)
 c0158e4:	e17ffe15 	stw	r5,-8(fp)
 c0158e8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 c0158ec:	e0bffd17 	ldw	r2,-12(fp)
 c0158f0:	10800017 	ldw	r2,0(r2)
 c0158f4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 c0158f8:	e0bffc17 	ldw	r2,-16(fp)
 c0158fc:	10c00a04 	addi	r3,r2,40
 c015900:	e0bffd17 	ldw	r2,-12(fp)
 c015904:	10800217 	ldw	r2,8(r2)
 c015908:	1809883a 	mov	r4,r3
 c01590c:	e17ffe17 	ldw	r5,-8(fp)
 c015910:	e1bfff17 	ldw	r6,-4(fp)
 c015914:	100f883a 	mov	r7,r2
 c015918:	c0160a40 	call	c0160a4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 c01591c:	e037883a 	mov	sp,fp
 c015920:	dfc00117 	ldw	ra,4(sp)
 c015924:	df000017 	ldw	fp,0(sp)
 c015928:	dec00204 	addi	sp,sp,8
 c01592c:	f800283a 	ret

0c015930 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 c015930:	defffc04 	addi	sp,sp,-16
 c015934:	dfc00315 	stw	ra,12(sp)
 c015938:	df000215 	stw	fp,8(sp)
 c01593c:	df000204 	addi	fp,sp,8
 c015940:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 c015944:	e0bfff17 	ldw	r2,-4(fp)
 c015948:	10800017 	ldw	r2,0(r2)
 c01594c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 c015950:	e0bffe17 	ldw	r2,-8(fp)
 c015954:	10c00a04 	addi	r3,r2,40
 c015958:	e0bfff17 	ldw	r2,-4(fp)
 c01595c:	10800217 	ldw	r2,8(r2)
 c015960:	1809883a 	mov	r4,r3
 c015964:	100b883a 	mov	r5,r2
 c015968:	c015d440 	call	c015d44 <altera_avalon_jtag_uart_close>
}
 c01596c:	e037883a 	mov	sp,fp
 c015970:	dfc00117 	ldw	ra,4(sp)
 c015974:	df000017 	ldw	fp,0(sp)
 c015978:	dec00204 	addi	sp,sp,8
 c01597c:	f800283a 	ret

0c015980 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 c015980:	defffa04 	addi	sp,sp,-24
 c015984:	dfc00515 	stw	ra,20(sp)
 c015988:	df000415 	stw	fp,16(sp)
 c01598c:	df000404 	addi	fp,sp,16
 c015990:	e13ffd15 	stw	r4,-12(fp)
 c015994:	e17ffe15 	stw	r5,-8(fp)
 c015998:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 c01599c:	e0bffd17 	ldw	r2,-12(fp)
 c0159a0:	10800017 	ldw	r2,0(r2)
 c0159a4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 c0159a8:	e0bffc17 	ldw	r2,-16(fp)
 c0159ac:	10800a04 	addi	r2,r2,40
 c0159b0:	1009883a 	mov	r4,r2
 c0159b4:	e17ffe17 	ldw	r5,-8(fp)
 c0159b8:	e1bfff17 	ldw	r6,-4(fp)
 c0159bc:	c015dac0 	call	c015dac <altera_avalon_jtag_uart_ioctl>
}
 c0159c0:	e037883a 	mov	sp,fp
 c0159c4:	dfc00117 	ldw	ra,4(sp)
 c0159c8:	df000017 	ldw	fp,0(sp)
 c0159cc:	dec00204 	addi	sp,sp,8
 c0159d0:	f800283a 	ret

0c0159d4 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 c0159d4:	defffa04 	addi	sp,sp,-24
 c0159d8:	dfc00515 	stw	ra,20(sp)
 c0159dc:	df000415 	stw	fp,16(sp)
 c0159e0:	df000404 	addi	fp,sp,16
 c0159e4:	e13ffd15 	stw	r4,-12(fp)
 c0159e8:	e17ffe15 	stw	r5,-8(fp)
 c0159ec:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 c0159f0:	e0bffd17 	ldw	r2,-12(fp)
 c0159f4:	00c00044 	movi	r3,1
 c0159f8:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 c0159fc:	e0bffd17 	ldw	r2,-12(fp)
 c015a00:	10800017 	ldw	r2,0(r2)
 c015a04:	10800104 	addi	r2,r2,4
 c015a08:	1007883a 	mov	r3,r2
 c015a0c:	e0bffd17 	ldw	r2,-12(fp)
 c015a10:	10800817 	ldw	r2,32(r2)
 c015a14:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 c015a18:	e0fffe17 	ldw	r3,-8(fp)
 c015a1c:	e0bfff17 	ldw	r2,-4(fp)
 c015a20:	d8000015 	stw	zero,0(sp)
 c015a24:	1809883a 	mov	r4,r3
 c015a28:	100b883a 	mov	r5,r2
 c015a2c:	01830074 	movhi	r6,3073
 c015a30:	3196a604 	addi	r6,r6,23192
 c015a34:	e1fffd17 	ldw	r7,-12(fp)
 c015a38:	c016d800 	call	c016d80 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 c015a3c:	e0bffd17 	ldw	r2,-12(fp)
 c015a40:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 c015a44:	e0bffd17 	ldw	r2,-12(fp)
 c015a48:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 c015a4c:	008300b4 	movhi	r2,3074
 c015a50:	10975e04 	addi	r2,r2,23928
 c015a54:	10800017 	ldw	r2,0(r2)
 c015a58:	1809883a 	mov	r4,r3
 c015a5c:	100b883a 	mov	r5,r2
 c015a60:	01830074 	movhi	r6,3073
 c015a64:	31972704 	addi	r6,r6,23708
 c015a68:	e1fffd17 	ldw	r7,-12(fp)
 c015a6c:	c0168900 	call	c016890 <alt_alarm_start>
 c015a70:	1000040e 	bge	r2,zero,c015a84 <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 c015a74:	e0fffd17 	ldw	r3,-12(fp)
 c015a78:	00a00034 	movhi	r2,32768
 c015a7c:	10bfffc4 	addi	r2,r2,-1
 c015a80:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 c015a84:	e037883a 	mov	sp,fp
 c015a88:	dfc00117 	ldw	ra,4(sp)
 c015a8c:	df000017 	ldw	fp,0(sp)
 c015a90:	dec00204 	addi	sp,sp,8
 c015a94:	f800283a 	ret

0c015a98 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 c015a98:	defff804 	addi	sp,sp,-32
 c015a9c:	df000715 	stw	fp,28(sp)
 c015aa0:	df000704 	addi	fp,sp,28
 c015aa4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 c015aa8:	e0bfff17 	ldw	r2,-4(fp)
 c015aac:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 c015ab0:	e0bffb17 	ldw	r2,-20(fp)
 c015ab4:	10800017 	ldw	r2,0(r2)
 c015ab8:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 c015abc:	e0bffc17 	ldw	r2,-16(fp)
 c015ac0:	10800104 	addi	r2,r2,4
 c015ac4:	10800037 	ldwio	r2,0(r2)
 c015ac8:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 c015acc:	e0bffd17 	ldw	r2,-12(fp)
 c015ad0:	1080c00c 	andi	r2,r2,768
 c015ad4:	1000011e 	bne	r2,zero,c015adc <altera_avalon_jtag_uart_irq+0x44>
      break;
 c015ad8:	00006c06 	br	c015c8c <altera_avalon_jtag_uart_irq+0x1f4>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 c015adc:	e0bffd17 	ldw	r2,-12(fp)
 c015ae0:	1080400c 	andi	r2,r2,256
 c015ae4:	10003426 	beq	r2,zero,c015bb8 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 c015ae8:	00800074 	movhi	r2,1
 c015aec:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 c015af0:	e0bffb17 	ldw	r2,-20(fp)
 c015af4:	10800a17 	ldw	r2,40(r2)
 c015af8:	10800044 	addi	r2,r2,1
 c015afc:	1081ffcc 	andi	r2,r2,2047
 c015b00:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 c015b04:	e0bffb17 	ldw	r2,-20(fp)
 c015b08:	10c00b17 	ldw	r3,44(r2)
 c015b0c:	e0bffe17 	ldw	r2,-8(fp)
 c015b10:	1880011e 	bne	r3,r2,c015b18 <altera_avalon_jtag_uart_irq+0x80>
          break;
 c015b14:	00001606 	br	c015b70 <altera_avalon_jtag_uart_irq+0xd8>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 c015b18:	e0bffc17 	ldw	r2,-16(fp)
 c015b1c:	10800037 	ldwio	r2,0(r2)
 c015b20:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 c015b24:	e0bff917 	ldw	r2,-28(fp)
 c015b28:	10a0000c 	andi	r2,r2,32768
 c015b2c:	1000011e 	bne	r2,zero,c015b34 <altera_avalon_jtag_uart_irq+0x9c>
          break;
 c015b30:	00000f06 	br	c015b70 <altera_avalon_jtag_uart_irq+0xd8>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 c015b34:	e0bffb17 	ldw	r2,-20(fp)
 c015b38:	10800a17 	ldw	r2,40(r2)
 c015b3c:	e0fff917 	ldw	r3,-28(fp)
 c015b40:	1809883a 	mov	r4,r3
 c015b44:	e0fffb17 	ldw	r3,-20(fp)
 c015b48:	1885883a 	add	r2,r3,r2
 c015b4c:	10800e04 	addi	r2,r2,56
 c015b50:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 c015b54:	e0bffb17 	ldw	r2,-20(fp)
 c015b58:	10800a17 	ldw	r2,40(r2)
 c015b5c:	10800044 	addi	r2,r2,1
 c015b60:	10c1ffcc 	andi	r3,r2,2047
 c015b64:	e0bffb17 	ldw	r2,-20(fp)
 c015b68:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 c015b6c:	003fe006 	br	c015af0 <__alt_data_end+0xfc015af0>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 c015b70:	e0bff917 	ldw	r2,-28(fp)
 c015b74:	10bfffec 	andhi	r2,r2,65535
 c015b78:	10000f26 	beq	r2,zero,c015bb8 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 c015b7c:	e0bffb17 	ldw	r2,-20(fp)
 c015b80:	10c00817 	ldw	r3,32(r2)
 c015b84:	00bfff84 	movi	r2,-2
 c015b88:	1886703a 	and	r3,r3,r2
 c015b8c:	e0bffb17 	ldw	r2,-20(fp)
 c015b90:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 c015b94:	e0bffc17 	ldw	r2,-16(fp)
 c015b98:	10800104 	addi	r2,r2,4
 c015b9c:	1007883a 	mov	r3,r2
 c015ba0:	e0bffb17 	ldw	r2,-20(fp)
 c015ba4:	10800817 	ldw	r2,32(r2)
 c015ba8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 c015bac:	e0bffc17 	ldw	r2,-16(fp)
 c015bb0:	10800104 	addi	r2,r2,4
 c015bb4:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 c015bb8:	e0bffd17 	ldw	r2,-12(fp)
 c015bbc:	1080800c 	andi	r2,r2,512
 c015bc0:	10003126 	beq	r2,zero,c015c88 <altera_avalon_jtag_uart_irq+0x1f0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 c015bc4:	e0bffd17 	ldw	r2,-12(fp)
 c015bc8:	1004d43a 	srli	r2,r2,16
 c015bcc:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 c015bd0:	00001406 	br	c015c24 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 c015bd4:	e0bffc17 	ldw	r2,-16(fp)
 c015bd8:	e0fffb17 	ldw	r3,-20(fp)
 c015bdc:	18c00d17 	ldw	r3,52(r3)
 c015be0:	e13ffb17 	ldw	r4,-20(fp)
 c015be4:	20c7883a 	add	r3,r4,r3
 c015be8:	18c20e04 	addi	r3,r3,2104
 c015bec:	18c00003 	ldbu	r3,0(r3)
 c015bf0:	18c03fcc 	andi	r3,r3,255
 c015bf4:	18c0201c 	xori	r3,r3,128
 c015bf8:	18ffe004 	addi	r3,r3,-128
 c015bfc:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 c015c00:	e0bffb17 	ldw	r2,-20(fp)
 c015c04:	10800d17 	ldw	r2,52(r2)
 c015c08:	10800044 	addi	r2,r2,1
 c015c0c:	10c1ffcc 	andi	r3,r2,2047
 c015c10:	e0bffb17 	ldw	r2,-20(fp)
 c015c14:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 c015c18:	e0bffa17 	ldw	r2,-24(fp)
 c015c1c:	10bfffc4 	addi	r2,r2,-1
 c015c20:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 c015c24:	e0bffa17 	ldw	r2,-24(fp)
 c015c28:	10000526 	beq	r2,zero,c015c40 <altera_avalon_jtag_uart_irq+0x1a8>
 c015c2c:	e0bffb17 	ldw	r2,-20(fp)
 c015c30:	10c00d17 	ldw	r3,52(r2)
 c015c34:	e0bffb17 	ldw	r2,-20(fp)
 c015c38:	10800c17 	ldw	r2,48(r2)
 c015c3c:	18bfe51e 	bne	r3,r2,c015bd4 <__alt_data_end+0xfc015bd4>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 c015c40:	e0bffa17 	ldw	r2,-24(fp)
 c015c44:	10001026 	beq	r2,zero,c015c88 <altera_avalon_jtag_uart_irq+0x1f0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 c015c48:	e0bffb17 	ldw	r2,-20(fp)
 c015c4c:	10c00817 	ldw	r3,32(r2)
 c015c50:	00bfff44 	movi	r2,-3
 c015c54:	1886703a 	and	r3,r3,r2
 c015c58:	e0bffb17 	ldw	r2,-20(fp)
 c015c5c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 c015c60:	e0bffb17 	ldw	r2,-20(fp)
 c015c64:	10800017 	ldw	r2,0(r2)
 c015c68:	10800104 	addi	r2,r2,4
 c015c6c:	1007883a 	mov	r3,r2
 c015c70:	e0bffb17 	ldw	r2,-20(fp)
 c015c74:	10800817 	ldw	r2,32(r2)
 c015c78:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 c015c7c:	e0bffc17 	ldw	r2,-16(fp)
 c015c80:	10800104 	addi	r2,r2,4
 c015c84:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 c015c88:	003f8c06 	br	c015abc <__alt_data_end+0xfc015abc>
}
 c015c8c:	e037883a 	mov	sp,fp
 c015c90:	df000017 	ldw	fp,0(sp)
 c015c94:	dec00104 	addi	sp,sp,4
 c015c98:	f800283a 	ret

0c015c9c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 c015c9c:	defff804 	addi	sp,sp,-32
 c015ca0:	df000715 	stw	fp,28(sp)
 c015ca4:	df000704 	addi	fp,sp,28
 c015ca8:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 c015cac:	e0bffb17 	ldw	r2,-20(fp)
 c015cb0:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 c015cb4:	e0bff917 	ldw	r2,-28(fp)
 c015cb8:	10800017 	ldw	r2,0(r2)
 c015cbc:	10800104 	addi	r2,r2,4
 c015cc0:	10800037 	ldwio	r2,0(r2)
 c015cc4:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 c015cc8:	e0bffa17 	ldw	r2,-24(fp)
 c015ccc:	1081000c 	andi	r2,r2,1024
 c015cd0:	10000b26 	beq	r2,zero,c015d00 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 c015cd4:	e0bff917 	ldw	r2,-28(fp)
 c015cd8:	10800017 	ldw	r2,0(r2)
 c015cdc:	10800104 	addi	r2,r2,4
 c015ce0:	1007883a 	mov	r3,r2
 c015ce4:	e0bff917 	ldw	r2,-28(fp)
 c015ce8:	10800817 	ldw	r2,32(r2)
 c015cec:	10810014 	ori	r2,r2,1024
 c015cf0:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 c015cf4:	e0bff917 	ldw	r2,-28(fp)
 c015cf8:	10000915 	stw	zero,36(r2)
 c015cfc:	00000a06 	br	c015d28 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 c015d00:	e0bff917 	ldw	r2,-28(fp)
 c015d04:	10c00917 	ldw	r3,36(r2)
 c015d08:	00a00034 	movhi	r2,32768
 c015d0c:	10bfff04 	addi	r2,r2,-4
 c015d10:	10c00536 	bltu	r2,r3,c015d28 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 c015d14:	e0bff917 	ldw	r2,-28(fp)
 c015d18:	10800917 	ldw	r2,36(r2)
 c015d1c:	10c00044 	addi	r3,r2,1
 c015d20:	e0bff917 	ldw	r2,-28(fp)
 c015d24:	10c00915 	stw	r3,36(r2)
 c015d28:	008300b4 	movhi	r2,3074
 c015d2c:	10975e04 	addi	r2,r2,23928
 c015d30:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 c015d34:	e037883a 	mov	sp,fp
 c015d38:	df000017 	ldw	fp,0(sp)
 c015d3c:	dec00104 	addi	sp,sp,4
 c015d40:	f800283a 	ret

0c015d44 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 c015d44:	defffd04 	addi	sp,sp,-12
 c015d48:	df000215 	stw	fp,8(sp)
 c015d4c:	df000204 	addi	fp,sp,8
 c015d50:	e13ffe15 	stw	r4,-8(fp)
 c015d54:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 c015d58:	00000506 	br	c015d70 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 c015d5c:	e0bfff17 	ldw	r2,-4(fp)
 c015d60:	1090000c 	andi	r2,r2,16384
 c015d64:	10000226 	beq	r2,zero,c015d70 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 c015d68:	00bffd44 	movi	r2,-11
 c015d6c:	00000b06 	br	c015d9c <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 c015d70:	e0bffe17 	ldw	r2,-8(fp)
 c015d74:	10c00d17 	ldw	r3,52(r2)
 c015d78:	e0bffe17 	ldw	r2,-8(fp)
 c015d7c:	10800c17 	ldw	r2,48(r2)
 c015d80:	18800526 	beq	r3,r2,c015d98 <altera_avalon_jtag_uart_close+0x54>
 c015d84:	e0bffe17 	ldw	r2,-8(fp)
 c015d88:	10c00917 	ldw	r3,36(r2)
 c015d8c:	e0bffe17 	ldw	r2,-8(fp)
 c015d90:	10800117 	ldw	r2,4(r2)
 c015d94:	18bff136 	bltu	r3,r2,c015d5c <__alt_data_end+0xfc015d5c>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 c015d98:	0005883a 	mov	r2,zero
}
 c015d9c:	e037883a 	mov	sp,fp
 c015da0:	df000017 	ldw	fp,0(sp)
 c015da4:	dec00104 	addi	sp,sp,4
 c015da8:	f800283a 	ret

0c015dac <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 c015dac:	defffa04 	addi	sp,sp,-24
 c015db0:	df000515 	stw	fp,20(sp)
 c015db4:	df000504 	addi	fp,sp,20
 c015db8:	e13ffd15 	stw	r4,-12(fp)
 c015dbc:	e17ffe15 	stw	r5,-8(fp)
 c015dc0:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 c015dc4:	00bff9c4 	movi	r2,-25
 c015dc8:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 c015dcc:	e0bffe17 	ldw	r2,-8(fp)
 c015dd0:	10da8060 	cmpeqi	r3,r2,27137
 c015dd4:	1800031e 	bne	r3,zero,c015de4 <altera_avalon_jtag_uart_ioctl+0x38>
 c015dd8:	109a80a0 	cmpeqi	r2,r2,27138
 c015ddc:	1000191e 	bne	r2,zero,c015e44 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
 c015de0:	00002806 	br	c015e84 <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 c015de4:	e0bffd17 	ldw	r2,-12(fp)
 c015de8:	10c00117 	ldw	r3,4(r2)
 c015dec:	00a00034 	movhi	r2,32768
 c015df0:	10bfffc4 	addi	r2,r2,-1
 c015df4:	18801226 	beq	r3,r2,c015e40 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
 c015df8:	e0bfff17 	ldw	r2,-4(fp)
 c015dfc:	10800017 	ldw	r2,0(r2)
 c015e00:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 c015e04:	e0bffc17 	ldw	r2,-16(fp)
 c015e08:	10800090 	cmplti	r2,r2,2
 c015e0c:	1000061e 	bne	r2,zero,c015e28 <altera_avalon_jtag_uart_ioctl+0x7c>
 c015e10:	e0fffc17 	ldw	r3,-16(fp)
 c015e14:	00a00034 	movhi	r2,32768
 c015e18:	10bfffc4 	addi	r2,r2,-1
 c015e1c:	18800226 	beq	r3,r2,c015e28 <altera_avalon_jtag_uart_ioctl+0x7c>
 c015e20:	e0bffc17 	ldw	r2,-16(fp)
 c015e24:	00000206 	br	c015e30 <altera_avalon_jtag_uart_ioctl+0x84>
 c015e28:	00a00034 	movhi	r2,32768
 c015e2c:	10bfff84 	addi	r2,r2,-2
 c015e30:	e0fffd17 	ldw	r3,-12(fp)
 c015e34:	18800115 	stw	r2,4(r3)
      rc = 0;
 c015e38:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 c015e3c:	00001106 	br	c015e84 <altera_avalon_jtag_uart_ioctl+0xd8>
 c015e40:	00001006 	br	c015e84 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 c015e44:	e0bffd17 	ldw	r2,-12(fp)
 c015e48:	10c00117 	ldw	r3,4(r2)
 c015e4c:	00a00034 	movhi	r2,32768
 c015e50:	10bfffc4 	addi	r2,r2,-1
 c015e54:	18800a26 	beq	r3,r2,c015e80 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 c015e58:	e0bffd17 	ldw	r2,-12(fp)
 c015e5c:	10c00917 	ldw	r3,36(r2)
 c015e60:	e0bffd17 	ldw	r2,-12(fp)
 c015e64:	10800117 	ldw	r2,4(r2)
 c015e68:	1885803a 	cmpltu	r2,r3,r2
 c015e6c:	10c03fcc 	andi	r3,r2,255
 c015e70:	e0bfff17 	ldw	r2,-4(fp)
 c015e74:	10c00015 	stw	r3,0(r2)
      rc = 0;
 c015e78:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 c015e7c:	00000006 	br	c015e80 <altera_avalon_jtag_uart_ioctl+0xd4>
 c015e80:	0001883a 	nop

  default:
    break;
  }

  return rc;
 c015e84:	e0bffb17 	ldw	r2,-20(fp)
}
 c015e88:	e037883a 	mov	sp,fp
 c015e8c:	df000017 	ldw	fp,0(sp)
 c015e90:	dec00104 	addi	sp,sp,4
 c015e94:	f800283a 	ret

0c015e98 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 c015e98:	defff304 	addi	sp,sp,-52
 c015e9c:	dfc00c15 	stw	ra,48(sp)
 c015ea0:	df000b15 	stw	fp,44(sp)
 c015ea4:	df000b04 	addi	fp,sp,44
 c015ea8:	e13ffc15 	stw	r4,-16(fp)
 c015eac:	e17ffd15 	stw	r5,-12(fp)
 c015eb0:	e1bffe15 	stw	r6,-8(fp)
 c015eb4:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 c015eb8:	e0bffd17 	ldw	r2,-12(fp)
 c015ebc:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 c015ec0:	00004906 	br	c015fe8 <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 c015ec4:	e0bffc17 	ldw	r2,-16(fp)
 c015ec8:	10800a17 	ldw	r2,40(r2)
 c015ecc:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 c015ed0:	e0bffc17 	ldw	r2,-16(fp)
 c015ed4:	10800b17 	ldw	r2,44(r2)
 c015ed8:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 c015edc:	e0fff717 	ldw	r3,-36(fp)
 c015ee0:	e0bff817 	ldw	r2,-32(fp)
 c015ee4:	18800536 	bltu	r3,r2,c015efc <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 c015ee8:	e0fff717 	ldw	r3,-36(fp)
 c015eec:	e0bff817 	ldw	r2,-32(fp)
 c015ef0:	1885c83a 	sub	r2,r3,r2
 c015ef4:	e0bff615 	stw	r2,-40(fp)
 c015ef8:	00000406 	br	c015f0c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 c015efc:	00c20004 	movi	r3,2048
 c015f00:	e0bff817 	ldw	r2,-32(fp)
 c015f04:	1885c83a 	sub	r2,r3,r2
 c015f08:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 c015f0c:	e0bff617 	ldw	r2,-40(fp)
 c015f10:	1000011e 	bne	r2,zero,c015f18 <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
 c015f14:	00001d06 	br	c015f8c <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
 c015f18:	e0fffe17 	ldw	r3,-8(fp)
 c015f1c:	e0bff617 	ldw	r2,-40(fp)
 c015f20:	1880022e 	bgeu	r3,r2,c015f2c <altera_avalon_jtag_uart_read+0x94>
        n = space;
 c015f24:	e0bffe17 	ldw	r2,-8(fp)
 c015f28:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 c015f2c:	e0bff817 	ldw	r2,-32(fp)
 c015f30:	10800e04 	addi	r2,r2,56
 c015f34:	e0fffc17 	ldw	r3,-16(fp)
 c015f38:	1885883a 	add	r2,r3,r2
 c015f3c:	e13ff517 	ldw	r4,-44(fp)
 c015f40:	100b883a 	mov	r5,r2
 c015f44:	e1bff617 	ldw	r6,-40(fp)
 c015f48:	c00957c0 	call	c00957c <memcpy>
      ptr   += n;
 c015f4c:	e0fff517 	ldw	r3,-44(fp)
 c015f50:	e0bff617 	ldw	r2,-40(fp)
 c015f54:	1885883a 	add	r2,r3,r2
 c015f58:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 c015f5c:	e0fffe17 	ldw	r3,-8(fp)
 c015f60:	e0bff617 	ldw	r2,-40(fp)
 c015f64:	1885c83a 	sub	r2,r3,r2
 c015f68:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 c015f6c:	e0fff817 	ldw	r3,-32(fp)
 c015f70:	e0bff617 	ldw	r2,-40(fp)
 c015f74:	1885883a 	add	r2,r3,r2
 c015f78:	10c1ffcc 	andi	r3,r2,2047
 c015f7c:	e0bffc17 	ldw	r2,-16(fp)
 c015f80:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 c015f84:	e0bffe17 	ldw	r2,-8(fp)
 c015f88:	00bfce16 	blt	zero,r2,c015ec4 <__alt_data_end+0xfc015ec4>

    /* If we read any data then return it */
    if (ptr != buffer)
 c015f8c:	e0fff517 	ldw	r3,-44(fp)
 c015f90:	e0bffd17 	ldw	r2,-12(fp)
 c015f94:	18800126 	beq	r3,r2,c015f9c <altera_avalon_jtag_uart_read+0x104>
      break;
 c015f98:	00001506 	br	c015ff0 <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 c015f9c:	e0bfff17 	ldw	r2,-4(fp)
 c015fa0:	1090000c 	andi	r2,r2,16384
 c015fa4:	10000126 	beq	r2,zero,c015fac <altera_avalon_jtag_uart_read+0x114>
      break;
 c015fa8:	00001106 	br	c015ff0 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 c015fac:	0001883a 	nop
 c015fb0:	e0bffc17 	ldw	r2,-16(fp)
 c015fb4:	10c00a17 	ldw	r3,40(r2)
 c015fb8:	e0bff717 	ldw	r2,-36(fp)
 c015fbc:	1880051e 	bne	r3,r2,c015fd4 <altera_avalon_jtag_uart_read+0x13c>
 c015fc0:	e0bffc17 	ldw	r2,-16(fp)
 c015fc4:	10c00917 	ldw	r3,36(r2)
 c015fc8:	e0bffc17 	ldw	r2,-16(fp)
 c015fcc:	10800117 	ldw	r2,4(r2)
 c015fd0:	18bff736 	bltu	r3,r2,c015fb0 <__alt_data_end+0xfc015fb0>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 c015fd4:	e0bffc17 	ldw	r2,-16(fp)
 c015fd8:	10c00a17 	ldw	r3,40(r2)
 c015fdc:	e0bff717 	ldw	r2,-36(fp)
 c015fe0:	1880011e 	bne	r3,r2,c015fe8 <altera_avalon_jtag_uart_read+0x150>
      break;
 c015fe4:	00000206 	br	c015ff0 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 c015fe8:	e0bffe17 	ldw	r2,-8(fp)
 c015fec:	00bfb516 	blt	zero,r2,c015ec4 <__alt_data_end+0xfc015ec4>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 c015ff0:	e0fff517 	ldw	r3,-44(fp)
 c015ff4:	e0bffd17 	ldw	r2,-12(fp)
 c015ff8:	18801826 	beq	r3,r2,c01605c <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 c015ffc:	0005303a 	rdctl	r2,status
 c016000:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 c016004:	e0fffa17 	ldw	r3,-24(fp)
 c016008:	00bfff84 	movi	r2,-2
 c01600c:	1884703a 	and	r2,r3,r2
 c016010:	1001703a 	wrctl	status,r2
  
  return context;
 c016014:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 c016018:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 c01601c:	e0bffc17 	ldw	r2,-16(fp)
 c016020:	10800817 	ldw	r2,32(r2)
 c016024:	10c00054 	ori	r3,r2,1
 c016028:	e0bffc17 	ldw	r2,-16(fp)
 c01602c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 c016030:	e0bffc17 	ldw	r2,-16(fp)
 c016034:	10800017 	ldw	r2,0(r2)
 c016038:	10800104 	addi	r2,r2,4
 c01603c:	1007883a 	mov	r3,r2
 c016040:	e0bffc17 	ldw	r2,-16(fp)
 c016044:	10800817 	ldw	r2,32(r2)
 c016048:	18800035 	stwio	r2,0(r3)
 c01604c:	e0bff917 	ldw	r2,-28(fp)
 c016050:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 c016054:	e0bffb17 	ldw	r2,-20(fp)
 c016058:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 c01605c:	e0fff517 	ldw	r3,-44(fp)
 c016060:	e0bffd17 	ldw	r2,-12(fp)
 c016064:	18800426 	beq	r3,r2,c016078 <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
 c016068:	e0fff517 	ldw	r3,-44(fp)
 c01606c:	e0bffd17 	ldw	r2,-12(fp)
 c016070:	1885c83a 	sub	r2,r3,r2
 c016074:	00000606 	br	c016090 <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
 c016078:	e0bfff17 	ldw	r2,-4(fp)
 c01607c:	1090000c 	andi	r2,r2,16384
 c016080:	10000226 	beq	r2,zero,c01608c <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
 c016084:	00bffd44 	movi	r2,-11
 c016088:	00000106 	br	c016090 <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
 c01608c:	00bffec4 	movi	r2,-5
}
 c016090:	e037883a 	mov	sp,fp
 c016094:	dfc00117 	ldw	ra,4(sp)
 c016098:	df000017 	ldw	fp,0(sp)
 c01609c:	dec00204 	addi	sp,sp,8
 c0160a0:	f800283a 	ret

0c0160a4 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 c0160a4:	defff304 	addi	sp,sp,-52
 c0160a8:	dfc00c15 	stw	ra,48(sp)
 c0160ac:	df000b15 	stw	fp,44(sp)
 c0160b0:	df000b04 	addi	fp,sp,44
 c0160b4:	e13ffc15 	stw	r4,-16(fp)
 c0160b8:	e17ffd15 	stw	r5,-12(fp)
 c0160bc:	e1bffe15 	stw	r6,-8(fp)
 c0160c0:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 c0160c4:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 c0160c8:	e0bffd17 	ldw	r2,-12(fp)
 c0160cc:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 c0160d0:	00003806 	br	c0161b4 <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 c0160d4:	e0bffc17 	ldw	r2,-16(fp)
 c0160d8:	10800c17 	ldw	r2,48(r2)
 c0160dc:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
 c0160e0:	e0bffc17 	ldw	r2,-16(fp)
 c0160e4:	10800d17 	ldw	r2,52(r2)
 c0160e8:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 c0160ec:	e0fff817 	ldw	r3,-32(fp)
 c0160f0:	e0bff517 	ldw	r2,-44(fp)
 c0160f4:	1880062e 	bgeu	r3,r2,c016110 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 c0160f8:	e0fff517 	ldw	r3,-44(fp)
 c0160fc:	e0bff817 	ldw	r2,-32(fp)
 c016100:	1885c83a 	sub	r2,r3,r2
 c016104:	10bfffc4 	addi	r2,r2,-1
 c016108:	e0bff615 	stw	r2,-40(fp)
 c01610c:	00000b06 	br	c01613c <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 c016110:	e0bff517 	ldw	r2,-44(fp)
 c016114:	10000526 	beq	r2,zero,c01612c <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 c016118:	00c20004 	movi	r3,2048
 c01611c:	e0bff817 	ldw	r2,-32(fp)
 c016120:	1885c83a 	sub	r2,r3,r2
 c016124:	e0bff615 	stw	r2,-40(fp)
 c016128:	00000406 	br	c01613c <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 c01612c:	00c1ffc4 	movi	r3,2047
 c016130:	e0bff817 	ldw	r2,-32(fp)
 c016134:	1885c83a 	sub	r2,r3,r2
 c016138:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 c01613c:	e0bff617 	ldw	r2,-40(fp)
 c016140:	1000011e 	bne	r2,zero,c016148 <altera_avalon_jtag_uart_write+0xa4>
        break;
 c016144:	00001d06 	br	c0161bc <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
 c016148:	e0fffe17 	ldw	r3,-8(fp)
 c01614c:	e0bff617 	ldw	r2,-40(fp)
 c016150:	1880022e 	bgeu	r3,r2,c01615c <altera_avalon_jtag_uart_write+0xb8>
        n = count;
 c016154:	e0bffe17 	ldw	r2,-8(fp)
 c016158:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 c01615c:	e0bff817 	ldw	r2,-32(fp)
 c016160:	10820e04 	addi	r2,r2,2104
 c016164:	e0fffc17 	ldw	r3,-16(fp)
 c016168:	1885883a 	add	r2,r3,r2
 c01616c:	1009883a 	mov	r4,r2
 c016170:	e17ffd17 	ldw	r5,-12(fp)
 c016174:	e1bff617 	ldw	r6,-40(fp)
 c016178:	c00957c0 	call	c00957c <memcpy>
      ptr   += n;
 c01617c:	e0fffd17 	ldw	r3,-12(fp)
 c016180:	e0bff617 	ldw	r2,-40(fp)
 c016184:	1885883a 	add	r2,r3,r2
 c016188:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 c01618c:	e0fffe17 	ldw	r3,-8(fp)
 c016190:	e0bff617 	ldw	r2,-40(fp)
 c016194:	1885c83a 	sub	r2,r3,r2
 c016198:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 c01619c:	e0fff817 	ldw	r3,-32(fp)
 c0161a0:	e0bff617 	ldw	r2,-40(fp)
 c0161a4:	1885883a 	add	r2,r3,r2
 c0161a8:	10c1ffcc 	andi	r3,r2,2047
 c0161ac:	e0bffc17 	ldw	r2,-16(fp)
 c0161b0:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 c0161b4:	e0bffe17 	ldw	r2,-8(fp)
 c0161b8:	00bfc616 	blt	zero,r2,c0160d4 <__alt_data_end+0xfc0160d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 c0161bc:	0005303a 	rdctl	r2,status
 c0161c0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 c0161c4:	e0fffa17 	ldw	r3,-24(fp)
 c0161c8:	00bfff84 	movi	r2,-2
 c0161cc:	1884703a 	and	r2,r3,r2
 c0161d0:	1001703a 	wrctl	status,r2
  
  return context;
 c0161d4:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 c0161d8:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 c0161dc:	e0bffc17 	ldw	r2,-16(fp)
 c0161e0:	10800817 	ldw	r2,32(r2)
 c0161e4:	10c00094 	ori	r3,r2,2
 c0161e8:	e0bffc17 	ldw	r2,-16(fp)
 c0161ec:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 c0161f0:	e0bffc17 	ldw	r2,-16(fp)
 c0161f4:	10800017 	ldw	r2,0(r2)
 c0161f8:	10800104 	addi	r2,r2,4
 c0161fc:	1007883a 	mov	r3,r2
 c016200:	e0bffc17 	ldw	r2,-16(fp)
 c016204:	10800817 	ldw	r2,32(r2)
 c016208:	18800035 	stwio	r2,0(r3)
 c01620c:	e0bff917 	ldw	r2,-28(fp)
 c016210:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 c016214:	e0bffb17 	ldw	r2,-20(fp)
 c016218:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 c01621c:	e0bffe17 	ldw	r2,-8(fp)
 c016220:	0080120e 	bge	zero,r2,c01626c <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
 c016224:	e0bfff17 	ldw	r2,-4(fp)
 c016228:	1090000c 	andi	r2,r2,16384
 c01622c:	10000126 	beq	r2,zero,c016234 <altera_avalon_jtag_uart_write+0x190>
        break;
 c016230:	00001006 	br	c016274 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 c016234:	0001883a 	nop
 c016238:	e0bffc17 	ldw	r2,-16(fp)
 c01623c:	10c00d17 	ldw	r3,52(r2)
 c016240:	e0bff517 	ldw	r2,-44(fp)
 c016244:	1880051e 	bne	r3,r2,c01625c <altera_avalon_jtag_uart_write+0x1b8>
 c016248:	e0bffc17 	ldw	r2,-16(fp)
 c01624c:	10c00917 	ldw	r3,36(r2)
 c016250:	e0bffc17 	ldw	r2,-16(fp)
 c016254:	10800117 	ldw	r2,4(r2)
 c016258:	18bff736 	bltu	r3,r2,c016238 <__alt_data_end+0xfc016238>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 c01625c:	e0bffc17 	ldw	r2,-16(fp)
 c016260:	10800917 	ldw	r2,36(r2)
 c016264:	10000126 	beq	r2,zero,c01626c <altera_avalon_jtag_uart_write+0x1c8>
         break;
 c016268:	00000206 	br	c016274 <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
 c01626c:	e0bffe17 	ldw	r2,-8(fp)
 c016270:	00bf9716 	blt	zero,r2,c0160d0 <__alt_data_end+0xfc0160d0>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 c016274:	e0fffd17 	ldw	r3,-12(fp)
 c016278:	e0bff717 	ldw	r2,-36(fp)
 c01627c:	18800426 	beq	r3,r2,c016290 <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
 c016280:	e0fffd17 	ldw	r3,-12(fp)
 c016284:	e0bff717 	ldw	r2,-36(fp)
 c016288:	1885c83a 	sub	r2,r3,r2
 c01628c:	00000606 	br	c0162a8 <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
 c016290:	e0bfff17 	ldw	r2,-4(fp)
 c016294:	1090000c 	andi	r2,r2,16384
 c016298:	10000226 	beq	r2,zero,c0162a4 <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
 c01629c:	00bffd44 	movi	r2,-11
 c0162a0:	00000106 	br	c0162a8 <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 c0162a4:	00bffec4 	movi	r2,-5
}
 c0162a8:	e037883a 	mov	sp,fp
 c0162ac:	dfc00117 	ldw	ra,4(sp)
 c0162b0:	df000017 	ldw	fp,0(sp)
 c0162b4:	dec00204 	addi	sp,sp,8
 c0162b8:	f800283a 	ret

0c0162bc <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 c0162bc:	defffa04 	addi	sp,sp,-24
 c0162c0:	dfc00515 	stw	ra,20(sp)
 c0162c4:	df000415 	stw	fp,16(sp)
 c0162c8:	df000404 	addi	fp,sp,16
 c0162cc:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 c0162d0:	0007883a 	mov	r3,zero
 c0162d4:	e0bfff17 	ldw	r2,-4(fp)
 c0162d8:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 c0162dc:	e0bfff17 	ldw	r2,-4(fp)
 c0162e0:	10800104 	addi	r2,r2,4
 c0162e4:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 c0162e8:	0005303a 	rdctl	r2,status
 c0162ec:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 c0162f0:	e0fffd17 	ldw	r3,-12(fp)
 c0162f4:	00bfff84 	movi	r2,-2
 c0162f8:	1884703a 	and	r2,r3,r2
 c0162fc:	1001703a 	wrctl	status,r2
  
  return context;
 c016300:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 c016304:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 c016308:	c0174940 	call	c017494 <alt_tick>
 c01630c:	e0bffc17 	ldw	r2,-16(fp)
 c016310:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 c016314:	e0bffe17 	ldw	r2,-8(fp)
 c016318:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 c01631c:	e037883a 	mov	sp,fp
 c016320:	dfc00117 	ldw	ra,4(sp)
 c016324:	df000017 	ldw	fp,0(sp)
 c016328:	dec00204 	addi	sp,sp,8
 c01632c:	f800283a 	ret

0c016330 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 c016330:	defff804 	addi	sp,sp,-32
 c016334:	dfc00715 	stw	ra,28(sp)
 c016338:	df000615 	stw	fp,24(sp)
 c01633c:	df000604 	addi	fp,sp,24
 c016340:	e13ffc15 	stw	r4,-16(fp)
 c016344:	e17ffd15 	stw	r5,-12(fp)
 c016348:	e1bffe15 	stw	r6,-8(fp)
 c01634c:	e1ffff15 	stw	r7,-4(fp)
 c016350:	e0bfff17 	ldw	r2,-4(fp)
 c016354:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 c016358:	008300b4 	movhi	r2,3074
 c01635c:	10975e04 	addi	r2,r2,23928
 c016360:	10800017 	ldw	r2,0(r2)
 c016364:	1000041e 	bne	r2,zero,c016378 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
 c016368:	008300b4 	movhi	r2,3074
 c01636c:	10975e04 	addi	r2,r2,23928
 c016370:	e0fffb17 	ldw	r3,-20(fp)
 c016374:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 c016378:	e0bffc17 	ldw	r2,-16(fp)
 c01637c:	10800104 	addi	r2,r2,4
 c016380:	00c001c4 	movi	r3,7
 c016384:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 c016388:	d8000015 	stw	zero,0(sp)
 c01638c:	e13ffd17 	ldw	r4,-12(fp)
 c016390:	e17ffe17 	ldw	r5,-8(fp)
 c016394:	01830074 	movhi	r6,3073
 c016398:	3198af04 	addi	r6,r6,25276
 c01639c:	e1fffc17 	ldw	r7,-16(fp)
 c0163a0:	c016d800 	call	c016d80 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 c0163a4:	e037883a 	mov	sp,fp
 c0163a8:	dfc00117 	ldw	ra,4(sp)
 c0163ac:	df000017 	ldw	fp,0(sp)
 c0163b0:	dec00204 	addi	sp,sp,8
 c0163b4:	f800283a 	ret

0c0163b8 <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
 c0163b8:	defffc04 	addi	sp,sp,-16
 c0163bc:	df000315 	stw	fp,12(sp)
 c0163c0:	df000304 	addi	fp,sp,12
 c0163c4:	e13ffe15 	stw	r4,-8(fp)
 c0163c8:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
 c0163cc:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
 c0163d0:	e0bfff17 	ldw	r2,-4(fp)
 c0163d4:	1000061e 	bne	r2,zero,c0163f0 <get_DDRAM_addr+0x38>
	{
		addr |= x_pos;
 c0163d8:	e0bffe17 	ldw	r2,-8(fp)
 c0163dc:	1007883a 	mov	r3,r2
 c0163e0:	e0bffd03 	ldbu	r2,-12(fp)
 c0163e4:	1884b03a 	or	r2,r3,r2
 c0163e8:	e0bffd05 	stb	r2,-12(fp)
 c0163ec:	00000806 	br	c016410 <get_DDRAM_addr+0x58>
	}
	else
	{
		addr |= x_pos;
 c0163f0:	e0bffe17 	ldw	r2,-8(fp)
 c0163f4:	1007883a 	mov	r3,r2
 c0163f8:	e0bffd03 	ldbu	r2,-12(fp)
 c0163fc:	1884b03a 	or	r2,r3,r2
 c016400:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
 c016404:	e0bffd03 	ldbu	r2,-12(fp)
 c016408:	10801014 	ori	r2,r2,64
 c01640c:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
 c016410:	e0fffd03 	ldbu	r3,-12(fp)
 c016414:	00bfe004 	movi	r2,-128
 c016418:	1884b03a 	or	r2,r3,r2
}
 c01641c:	e037883a 	mov	sp,fp
 c016420:	df000017 	ldw	fp,0(sp)
 c016424:	dec00104 	addi	sp,sp,4
 c016428:	f800283a 	ret

0c01642c <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
 c01642c:	defffd04 	addi	sp,sp,-12
 c016430:	df000215 	stw	fp,8(sp)
 c016434:	df000204 	addi	fp,sp,8
 c016438:	e13ffe15 	stw	r4,-8(fp)
 c01643c:	2805883a 	mov	r2,r5
 c016440:	e0bfff05 	stb	r2,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
 c016444:	e0bffe17 	ldw	r2,-8(fp)
 c016448:	10800a17 	ldw	r2,40(r2)
 c01644c:	1007883a 	mov	r3,r2
 c016450:	e0bfff03 	ldbu	r2,-4(fp)
 c016454:	18800025 	stbio	r2,0(r3)
}
 c016458:	e037883a 	mov	sp,fp
 c01645c:	df000017 	ldw	fp,0(sp)
 c016460:	dec00104 	addi	sp,sp,4
 c016464:	f800283a 	ret

0c016468 <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
 c016468:	defffe04 	addi	sp,sp,-8
 c01646c:	df000115 	stw	fp,4(sp)
 c016470:	df000104 	addi	fp,sp,4
 c016474:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
 c016478:	e0bfff17 	ldw	r2,-4(fp)
 c01647c:	10800a17 	ldw	r2,40(r2)
 c016480:	1007883a 	mov	r3,r2
 c016484:	00800044 	movi	r2,1
 c016488:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
 c01648c:	e037883a 	mov	sp,fp
 c016490:	df000017 	ldw	fp,0(sp)
 c016494:	dec00104 	addi	sp,sp,4
 c016498:	f800283a 	ret

0c01649c <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
 c01649c:	defffc04 	addi	sp,sp,-16
 c0164a0:	dfc00315 	stw	ra,12(sp)
 c0164a4:	df000215 	stw	fp,8(sp)
 c0164a8:	df000204 	addi	fp,sp,8
 c0164ac:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
 c0164b0:	e13fff17 	ldw	r4,-4(fp)
 c0164b4:	014300b4 	movhi	r5,3074
 c0164b8:	29507d04 	addi	r5,r5,16884
 c0164bc:	c016cc00 	call	c016cc0 <alt_find_dev>
 c0164c0:	e0bffe15 	stw	r2,-8(fp)

  return dev;
 c0164c4:	e0bffe17 	ldw	r2,-8(fp)
}
 c0164c8:	e037883a 	mov	sp,fp
 c0164cc:	dfc00117 	ldw	ra,4(sp)
 c0164d0:	df000017 	ldw	fp,0(sp)
 c0164d4:	dec00204 	addi	sp,sp,8
 c0164d8:	f800283a 	ret

0c0164dc <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
 c0164dc:	defffb04 	addi	sp,sp,-20
 c0164e0:	df000415 	stw	fp,16(sp)
 c0164e4:	df000404 	addi	fp,sp,16
 c0164e8:	e13ffd15 	stw	r4,-12(fp)
 c0164ec:	e17ffe15 	stw	r5,-8(fp)
 c0164f0:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
 c0164f4:	e03ffc15 	stw	zero,-16(fp)
 c0164f8:	00000f06 	br	c016538 <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
 c0164fc:	e0bffd17 	ldw	r2,-12(fp)
 c016500:	10800a17 	ldw	r2,40(r2)
 c016504:	10800044 	addi	r2,r2,1
 c016508:	1009883a 	mov	r4,r2
 c01650c:	e0fffe17 	ldw	r3,-8(fp)
 c016510:	e0bffc17 	ldw	r2,-16(fp)
 c016514:	1885883a 	add	r2,r3,r2
 c016518:	10800003 	ldbu	r2,0(r2)
 c01651c:	10803fcc 	andi	r2,r2,255
 c016520:	1080201c 	xori	r2,r2,128
 c016524:	10bfe004 	addi	r2,r2,-128
 c016528:	20800025 	stbio	r2,0(r4)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
 c01652c:	e0bffc17 	ldw	r2,-16(fp)
 c016530:	10800044 	addi	r2,r2,1
 c016534:	e0bffc15 	stw	r2,-16(fp)
 c016538:	e0fffc17 	ldw	r3,-16(fp)
 c01653c:	e0bfff17 	ldw	r2,-4(fp)
 c016540:	18bfee36 	bltu	r3,r2,c0164fc <__alt_data_end+0xfc0164fc>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
 c016544:	e037883a 	mov	sp,fp
 c016548:	df000017 	ldw	fp,0(sp)
 c01654c:	dec00104 	addi	sp,sp,4
 c016550:	f800283a 	ret

0c016554 <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
 c016554:	defffd04 	addi	sp,sp,-12
 c016558:	df000215 	stw	fp,8(sp)
 c01655c:	df000204 	addi	fp,sp,8
 c016560:	e13ffe15 	stw	r4,-8(fp)
 c016564:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
 c016568:	00000d06 	br	c0165a0 <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
 c01656c:	e0bffe17 	ldw	r2,-8(fp)
 c016570:	10800a17 	ldw	r2,40(r2)
 c016574:	10800044 	addi	r2,r2,1
 c016578:	1007883a 	mov	r3,r2
 c01657c:	e0bfff17 	ldw	r2,-4(fp)
 c016580:	10800003 	ldbu	r2,0(r2)
 c016584:	10803fcc 	andi	r2,r2,255
 c016588:	1080201c 	xori	r2,r2,128
 c01658c:	10bfe004 	addi	r2,r2,-128
 c016590:	18800025 	stbio	r2,0(r3)
		++ptr;
 c016594:	e0bfff17 	ldw	r2,-4(fp)
 c016598:	10800044 	addi	r2,r2,1
 c01659c:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
 c0165a0:	e0bfff17 	ldw	r2,-4(fp)
 c0165a4:	10800003 	ldbu	r2,0(r2)
 c0165a8:	10803fcc 	andi	r2,r2,255
 c0165ac:	1080201c 	xori	r2,r2,128
 c0165b0:	10bfe004 	addi	r2,r2,-128
 c0165b4:	103fed1e 	bne	r2,zero,c01656c <__alt_data_end+0xfc01656c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
 c0165b8:	e037883a 	mov	sp,fp
 c0165bc:	df000017 	ldw	fp,0(sp)
 c0165c0:	dec00104 	addi	sp,sp,4
 c0165c4:	f800283a 	ret

0c0165c8 <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
 c0165c8:	defffb04 	addi	sp,sp,-20
 c0165cc:	dfc00415 	stw	ra,16(sp)
 c0165d0:	df000315 	stw	fp,12(sp)
 c0165d4:	df000304 	addi	fp,sp,12
 c0165d8:	e13ffd15 	stw	r4,-12(fp)
 c0165dc:	e17ffe15 	stw	r5,-8(fp)
 c0165e0:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
 c0165e4:	e0bffd17 	ldw	r2,-12(fp)
 c0165e8:	10c00017 	ldw	r3,0(r2)
 c0165ec:	e0bfff17 	ldw	r2,-4(fp)
 c0165f0:	1809883a 	mov	r4,r3
 c0165f4:	e17ffe17 	ldw	r5,-8(fp)
 c0165f8:	100d883a 	mov	r6,r2
 c0165fc:	c0164dc0 	call	c0164dc <alt_up_character_lcd_write>
	return 0;
 c016600:	0005883a 	mov	r2,zero
}
 c016604:	e037883a 	mov	sp,fp
 c016608:	dfc00117 	ldw	ra,4(sp)
 c01660c:	df000017 	ldw	fp,0(sp)
 c016610:	dec00204 	addi	sp,sp,8
 c016614:	f800283a 	ret

0c016618 <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
 c016618:	defffa04 	addi	sp,sp,-24
 c01661c:	dfc00515 	stw	ra,20(sp)
 c016620:	df000415 	stw	fp,16(sp)
 c016624:	df000404 	addi	fp,sp,16
 c016628:	e13ffd15 	stw	r4,-12(fp)
 c01662c:	e17ffe15 	stw	r5,-8(fp)
 c016630:	e1bfff15 	stw	r6,-4(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
 c016634:	e0bffe17 	ldw	r2,-8(fp)
 c016638:	10800a28 	cmpgeui	r2,r2,40
 c01663c:	1000031e 	bne	r2,zero,c01664c <alt_up_character_lcd_set_cursor_pos+0x34>
 c016640:	e0bfff17 	ldw	r2,-4(fp)
 c016644:	108000b0 	cmpltui	r2,r2,2
 c016648:	1000021e 	bne	r2,zero,c016654 <alt_up_character_lcd_set_cursor_pos+0x3c>
		// invalid argument
		return -1;
 c01664c:	00bfffc4 	movi	r2,-1
 c016650:	00000906 	br	c016678 <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
 c016654:	e13ffe17 	ldw	r4,-8(fp)
 c016658:	e17fff17 	ldw	r5,-4(fp)
 c01665c:	c0163b80 	call	c0163b8 <get_DDRAM_addr>
 c016660:	e0bffc05 	stb	r2,-16(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
 c016664:	e0bffc03 	ldbu	r2,-16(fp)
 c016668:	e13ffd17 	ldw	r4,-12(fp)
 c01666c:	100b883a 	mov	r5,r2
 c016670:	c01642c0 	call	c01642c <alt_up_character_lcd_send_cmd>
	return 0;
 c016674:	0005883a 	mov	r2,zero
}
 c016678:	e037883a 	mov	sp,fp
 c01667c:	dfc00117 	ldw	ra,4(sp)
 c016680:	df000017 	ldw	fp,0(sp)
 c016684:	dec00204 	addi	sp,sp,8
 c016688:	f800283a 	ret

0c01668c <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
 c01668c:	defffb04 	addi	sp,sp,-20
 c016690:	dfc00415 	stw	ra,16(sp)
 c016694:	df000315 	stw	fp,12(sp)
 c016698:	df000304 	addi	fp,sp,12
 c01669c:	e13ffe15 	stw	r4,-8(fp)
 c0166a0:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
 c0166a4:	e0bfff17 	ldw	r2,-4(fp)
 c0166a8:	1000011e 	bne	r2,zero,c0166b0 <alt_up_character_lcd_shift_cursor+0x24>
		// don't ask me to do nothing 
		return;
 c0166ac:	00001406 	br	c016700 <alt_up_character_lcd_shift_cursor+0x74>

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
 c0166b0:	e0bfff17 	ldw	r2,-4(fp)
 c0166b4:	0080020e 	bge	zero,r2,c0166c0 <alt_up_character_lcd_shift_cursor+0x34>
 c0166b8:	00800504 	movi	r2,20
 c0166bc:	00000106 	br	c0166c4 <alt_up_character_lcd_shift_cursor+0x38>
 c0166c0:	00800404 	movi	r2,16
 c0166c4:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
 c0166c8:	e0bfff17 	ldw	r2,-4(fp)
 c0166cc:	1000010e 	bge	r2,zero,c0166d4 <alt_up_character_lcd_shift_cursor+0x48>
 c0166d0:	0085c83a 	sub	r2,zero,r2
 c0166d4:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 c0166d8:	00000406 	br	c0166ec <alt_up_character_lcd_shift_cursor+0x60>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
 c0166dc:	e0bffd43 	ldbu	r2,-11(fp)
 c0166e0:	e13ffe17 	ldw	r4,-8(fp)
 c0166e4:	100b883a 	mov	r5,r2
 c0166e8:	c01642c0 	call	c01642c <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 c0166ec:	e0bffd03 	ldbu	r2,-12(fp)
 c0166f0:	10ffffc4 	addi	r3,r2,-1
 c0166f4:	e0fffd05 	stb	r3,-12(fp)
 c0166f8:	10803fcc 	andi	r2,r2,255
 c0166fc:	103ff71e 	bne	r2,zero,c0166dc <__alt_data_end+0xfc0166dc>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
 c016700:	e037883a 	mov	sp,fp
 c016704:	dfc00117 	ldw	ra,4(sp)
 c016708:	df000017 	ldw	fp,0(sp)
 c01670c:	dec00204 	addi	sp,sp,8
 c016710:	f800283a 	ret

0c016714 <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
 c016714:	defffb04 	addi	sp,sp,-20
 c016718:	dfc00415 	stw	ra,16(sp)
 c01671c:	df000315 	stw	fp,12(sp)
 c016720:	df000304 	addi	fp,sp,12
 c016724:	e13ffe15 	stw	r4,-8(fp)
 c016728:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
 c01672c:	e0bfff17 	ldw	r2,-4(fp)
 c016730:	1000011e 	bne	r2,zero,c016738 <alt_up_character_lcd_shift_display+0x24>
		// don't ask me to do nothing 
		return;
 c016734:	00001406 	br	c016788 <alt_up_character_lcd_shift_display+0x74>

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
 c016738:	e0bfff17 	ldw	r2,-4(fp)
 c01673c:	0080020e 	bge	zero,r2,c016748 <alt_up_character_lcd_shift_display+0x34>
 c016740:	00800704 	movi	r2,28
 c016744:	00000106 	br	c01674c <alt_up_character_lcd_shift_display+0x38>
 c016748:	00800604 	movi	r2,24
 c01674c:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
 c016750:	e0bfff17 	ldw	r2,-4(fp)
 c016754:	1000010e 	bge	r2,zero,c01675c <alt_up_character_lcd_shift_display+0x48>
 c016758:	0085c83a 	sub	r2,zero,r2
 c01675c:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 c016760:	00000406 	br	c016774 <alt_up_character_lcd_shift_display+0x60>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
 c016764:	e0bffd43 	ldbu	r2,-11(fp)
 c016768:	e13ffe17 	ldw	r4,-8(fp)
 c01676c:	100b883a 	mov	r5,r2
 c016770:	c01642c0 	call	c01642c <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 c016774:	e0bffd03 	ldbu	r2,-12(fp)
 c016778:	10ffffc4 	addi	r3,r2,-1
 c01677c:	e0fffd05 	stb	r3,-12(fp)
 c016780:	10803fcc 	andi	r2,r2,255
 c016784:	103ff71e 	bne	r2,zero,c016764 <__alt_data_end+0xfc016764>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
 c016788:	e037883a 	mov	sp,fp
 c01678c:	dfc00117 	ldw	ra,4(sp)
 c016790:	df000017 	ldw	fp,0(sp)
 c016794:	dec00204 	addi	sp,sp,8
 c016798:	f800283a 	ret

0c01679c <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
 c01679c:	defffa04 	addi	sp,sp,-24
 c0167a0:	dfc00515 	stw	ra,20(sp)
 c0167a4:	df000415 	stw	fp,16(sp)
 c0167a8:	df000404 	addi	fp,sp,16
 c0167ac:	e13ffd15 	stw	r4,-12(fp)
 c0167b0:	e17ffe15 	stw	r5,-8(fp)
 c0167b4:	e1bfff15 	stw	r6,-4(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
 c0167b8:	e0bffe17 	ldw	r2,-8(fp)
 c0167bc:	10800a28 	cmpgeui	r2,r2,40
 c0167c0:	1000031e 	bne	r2,zero,c0167d0 <alt_up_character_lcd_erase_pos+0x34>
 c0167c4:	e0bfff17 	ldw	r2,-4(fp)
 c0167c8:	108000b0 	cmpltui	r2,r2,2
 c0167cc:	1000021e 	bne	r2,zero,c0167d8 <alt_up_character_lcd_erase_pos+0x3c>
		return -1;
 c0167d0:	00bfffc4 	movi	r2,-1
 c0167d4:	00000f06 	br	c016814 <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
 c0167d8:	e13ffe17 	ldw	r4,-8(fp)
 c0167dc:	e17fff17 	ldw	r5,-4(fp)
 c0167e0:	c0163b80 	call	c0163b8 <get_DDRAM_addr>
 c0167e4:	e0bffc05 	stb	r2,-16(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
 c0167e8:	e0bffc03 	ldbu	r2,-16(fp)
 c0167ec:	e13ffd17 	ldw	r4,-12(fp)
 c0167f0:	100b883a 	mov	r5,r2
 c0167f4:	c01642c0 	call	c01642c <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
 c0167f8:	e0bffd17 	ldw	r2,-12(fp)
 c0167fc:	10800a17 	ldw	r2,40(r2)
 c016800:	10800044 	addi	r2,r2,1
 c016804:	1007883a 	mov	r3,r2
 c016808:	00800084 	movi	r2,2
 c01680c:	18800025 	stbio	r2,0(r3)
	return 0;
 c016810:	0005883a 	mov	r2,zero
}
 c016814:	e037883a 	mov	sp,fp
 c016818:	dfc00117 	ldw	ra,4(sp)
 c01681c:	df000017 	ldw	fp,0(sp)
 c016820:	dec00204 	addi	sp,sp,8
 c016824:	f800283a 	ret

0c016828 <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
 c016828:	defffd04 	addi	sp,sp,-12
 c01682c:	dfc00215 	stw	ra,8(sp)
 c016830:	df000115 	stw	fp,4(sp)
 c016834:	df000104 	addi	fp,sp,4
 c016838:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
 c01683c:	e13fff17 	ldw	r4,-4(fp)
 c016840:	01400304 	movi	r5,12
 c016844:	c01642c0 	call	c01642c <alt_up_character_lcd_send_cmd>
}
 c016848:	e037883a 	mov	sp,fp
 c01684c:	dfc00117 	ldw	ra,4(sp)
 c016850:	df000017 	ldw	fp,0(sp)
 c016854:	dec00204 	addi	sp,sp,8
 c016858:	f800283a 	ret

0c01685c <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
 c01685c:	defffd04 	addi	sp,sp,-12
 c016860:	dfc00215 	stw	ra,8(sp)
 c016864:	df000115 	stw	fp,4(sp)
 c016868:	df000104 	addi	fp,sp,4
 c01686c:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
 c016870:	e13fff17 	ldw	r4,-4(fp)
 c016874:	014003c4 	movi	r5,15
 c016878:	c01642c0 	call	c01642c <alt_up_character_lcd_send_cmd>
}
 c01687c:	e037883a 	mov	sp,fp
 c016880:	dfc00117 	ldw	ra,4(sp)
 c016884:	df000017 	ldw	fp,0(sp)
 c016888:	dec00204 	addi	sp,sp,8
 c01688c:	f800283a 	ret

0c016890 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 c016890:	defff504 	addi	sp,sp,-44
 c016894:	df000a15 	stw	fp,40(sp)
 c016898:	df000a04 	addi	fp,sp,40
 c01689c:	e13ffc15 	stw	r4,-16(fp)
 c0168a0:	e17ffd15 	stw	r5,-12(fp)
 c0168a4:	e1bffe15 	stw	r6,-8(fp)
 c0168a8:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 c0168ac:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 c0168b0:	008300b4 	movhi	r2,3074
 c0168b4:	10975e04 	addi	r2,r2,23928
 c0168b8:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 c0168bc:	10003f26 	beq	r2,zero,c0169bc <alt_alarm_start+0x12c>
  {
    if (alarm)
 c0168c0:	e0bffc17 	ldw	r2,-16(fp)
 c0168c4:	10003b26 	beq	r2,zero,c0169b4 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
 c0168c8:	e0bffc17 	ldw	r2,-16(fp)
 c0168cc:	e0fffe17 	ldw	r3,-8(fp)
 c0168d0:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 c0168d4:	e0bffc17 	ldw	r2,-16(fp)
 c0168d8:	e0ffff17 	ldw	r3,-4(fp)
 c0168dc:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 c0168e0:	0005303a 	rdctl	r2,status
 c0168e4:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 c0168e8:	e0fff817 	ldw	r3,-32(fp)
 c0168ec:	00bfff84 	movi	r2,-2
 c0168f0:	1884703a 	and	r2,r3,r2
 c0168f4:	1001703a 	wrctl	status,r2
  
  return context;
 c0168f8:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 c0168fc:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 c016900:	008300b4 	movhi	r2,3074
 c016904:	10975f04 	addi	r2,r2,23932
 c016908:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 c01690c:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 c016910:	e0fffd17 	ldw	r3,-12(fp)
 c016914:	e0bff617 	ldw	r2,-40(fp)
 c016918:	1885883a 	add	r2,r3,r2
 c01691c:	10c00044 	addi	r3,r2,1
 c016920:	e0bffc17 	ldw	r2,-16(fp)
 c016924:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 c016928:	e0bffc17 	ldw	r2,-16(fp)
 c01692c:	10c00217 	ldw	r3,8(r2)
 c016930:	e0bff617 	ldw	r2,-40(fp)
 c016934:	1880042e 	bgeu	r3,r2,c016948 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
 c016938:	e0bffc17 	ldw	r2,-16(fp)
 c01693c:	00c00044 	movi	r3,1
 c016940:	10c00405 	stb	r3,16(r2)
 c016944:	00000206 	br	c016950 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
 c016948:	e0bffc17 	ldw	r2,-16(fp)
 c01694c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 c016950:	e0fffc17 	ldw	r3,-16(fp)
 c016954:	008300b4 	movhi	r2,3074
 c016958:	10908304 	addi	r2,r2,16908
 c01695c:	e0bff915 	stw	r2,-28(fp)
 c016960:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 c016964:	e0bffa17 	ldw	r2,-24(fp)
 c016968:	e0fff917 	ldw	r3,-28(fp)
 c01696c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 c016970:	e0bff917 	ldw	r2,-28(fp)
 c016974:	10c00017 	ldw	r3,0(r2)
 c016978:	e0bffa17 	ldw	r2,-24(fp)
 c01697c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 c016980:	e0bff917 	ldw	r2,-28(fp)
 c016984:	10800017 	ldw	r2,0(r2)
 c016988:	e0fffa17 	ldw	r3,-24(fp)
 c01698c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 c016990:	e0bff917 	ldw	r2,-28(fp)
 c016994:	e0fffa17 	ldw	r3,-24(fp)
 c016998:	10c00015 	stw	r3,0(r2)
 c01699c:	e0bff717 	ldw	r2,-36(fp)
 c0169a0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 c0169a4:	e0bffb17 	ldw	r2,-20(fp)
 c0169a8:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 c0169ac:	0005883a 	mov	r2,zero
 c0169b0:	00000306 	br	c0169c0 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
 c0169b4:	00bffa84 	movi	r2,-22
 c0169b8:	00000106 	br	c0169c0 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
 c0169bc:	00bfde84 	movi	r2,-134
  }
}
 c0169c0:	e037883a 	mov	sp,fp
 c0169c4:	df000017 	ldw	fp,0(sp)
 c0169c8:	dec00104 	addi	sp,sp,4
 c0169cc:	f800283a 	ret

0c0169d0 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 c0169d0:	defffb04 	addi	sp,sp,-20
 c0169d4:	df000415 	stw	fp,16(sp)
 c0169d8:	df000404 	addi	fp,sp,16
 c0169dc:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
 c0169e0:	008000c4 	movi	r2,3
 c0169e4:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 c0169e8:	e0fffd17 	ldw	r3,-12(fp)
 c0169ec:	008003f4 	movhi	r2,15
 c0169f0:	10909004 	addi	r2,r2,16960
 c0169f4:	1887383a 	mul	r3,r3,r2
 c0169f8:	0080bef4 	movhi	r2,763
 c0169fc:	10bc2004 	addi	r2,r2,-3968
 c016a00:	10c7203a 	divu	r3,r2,r3
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 c016a04:	00a00034 	movhi	r2,32768
 c016a08:	10bfffc4 	addi	r2,r2,-1
 c016a0c:	10c5203a 	divu	r2,r2,r3
 c016a10:	e0ffff17 	ldw	r3,-4(fp)
 c016a14:	1885203a 	divu	r2,r3,r2
 c016a18:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 c016a1c:	e0bffe17 	ldw	r2,-8(fp)
 c016a20:	10002526 	beq	r2,zero,c016ab8 <alt_busy_sleep+0xe8>
  {
    for(i=0;i<big_loops;i++)
 c016a24:	e03ffc15 	stw	zero,-16(fp)
 c016a28:	00001406 	br	c016a7c <alt_busy_sleep+0xac>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 c016a2c:	00a00034 	movhi	r2,32768
 c016a30:	10bfffc4 	addi	r2,r2,-1
 c016a34:	10bfffc4 	addi	r2,r2,-1
 c016a38:	103ffe1e 	bne	r2,zero,c016a34 <__alt_data_end+0xfc016a34>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 c016a3c:	e0fffd17 	ldw	r3,-12(fp)
 c016a40:	008003f4 	movhi	r2,15
 c016a44:	10909004 	addi	r2,r2,16960
 c016a48:	1887383a 	mul	r3,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 c016a4c:	0080bef4 	movhi	r2,763
 c016a50:	10bc2004 	addi	r2,r2,-3968
 c016a54:	10c7203a 	divu	r3,r2,r3
 c016a58:	00a00034 	movhi	r2,32768
 c016a5c:	10bfffc4 	addi	r2,r2,-1
 c016a60:	10c5203a 	divu	r2,r2,r3
 c016a64:	e0ffff17 	ldw	r3,-4(fp)
 c016a68:	1885c83a 	sub	r2,r3,r2
 c016a6c:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 c016a70:	e0bffc17 	ldw	r2,-16(fp)
 c016a74:	10800044 	addi	r2,r2,1
 c016a78:	e0bffc15 	stw	r2,-16(fp)
 c016a7c:	e0fffc17 	ldw	r3,-16(fp)
 c016a80:	e0bffe17 	ldw	r2,-8(fp)
 c016a84:	18bfe916 	blt	r3,r2,c016a2c <__alt_data_end+0xfc016a2c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 c016a88:	e0fffd17 	ldw	r3,-12(fp)
 c016a8c:	008003f4 	movhi	r2,15
 c016a90:	10909004 	addi	r2,r2,16960
 c016a94:	1887383a 	mul	r3,r3,r2
 c016a98:	0080bef4 	movhi	r2,763
 c016a9c:	10bc2004 	addi	r2,r2,-3968
 c016aa0:	10c7203a 	divu	r3,r2,r3
 c016aa4:	e0bfff17 	ldw	r2,-4(fp)
 c016aa8:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 c016aac:	10bfffc4 	addi	r2,r2,-1
 c016ab0:	103ffe1e 	bne	r2,zero,c016aac <__alt_data_end+0xfc016aac>
 c016ab4:	00000b06 	br	c016ae4 <alt_busy_sleep+0x114>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 c016ab8:	e0fffd17 	ldw	r3,-12(fp)
 c016abc:	008003f4 	movhi	r2,15
 c016ac0:	10909004 	addi	r2,r2,16960
 c016ac4:	1887383a 	mul	r3,r3,r2
 c016ac8:	0080bef4 	movhi	r2,763
 c016acc:	10bc2004 	addi	r2,r2,-3968
 c016ad0:	10c7203a 	divu	r3,r2,r3
 c016ad4:	e0bfff17 	ldw	r2,-4(fp)
 c016ad8:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 c016adc:	10bfffc4 	addi	r2,r2,-1
 c016ae0:	00bffe16 	blt	zero,r2,c016adc <__alt_data_end+0xfc016adc>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 c016ae4:	0005883a 	mov	r2,zero
}
 c016ae8:	e037883a 	mov	sp,fp
 c016aec:	df000017 	ldw	fp,0(sp)
 c016af0:	dec00104 	addi	sp,sp,4
 c016af4:	f800283a 	ret

0c016af8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 c016af8:	deffff04 	addi	sp,sp,-4
 c016afc:	df000015 	stw	fp,0(sp)
 c016b00:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 c016b04:	e037883a 	mov	sp,fp
 c016b08:	df000017 	ldw	fp,0(sp)
 c016b0c:	dec00104 	addi	sp,sp,4
 c016b10:	f800283a 	ret

0c016b14 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 c016b14:	defffe04 	addi	sp,sp,-8
 c016b18:	dfc00115 	stw	ra,4(sp)
 c016b1c:	df000015 	stw	fp,0(sp)
 c016b20:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 c016b24:	008300b4 	movhi	r2,3074
 c016b28:	10908004 	addi	r2,r2,16896
 c016b2c:	10800017 	ldw	r2,0(r2)
 c016b30:	10000526 	beq	r2,zero,c016b48 <alt_get_errno+0x34>
 c016b34:	008300b4 	movhi	r2,3074
 c016b38:	10908004 	addi	r2,r2,16896
 c016b3c:	10800017 	ldw	r2,0(r2)
 c016b40:	103ee83a 	callr	r2
 c016b44:	00000206 	br	c016b50 <alt_get_errno+0x3c>
 c016b48:	008300b4 	movhi	r2,3074
 c016b4c:	10975604 	addi	r2,r2,23896
}
 c016b50:	e037883a 	mov	sp,fp
 c016b54:	dfc00117 	ldw	ra,4(sp)
 c016b58:	df000017 	ldw	fp,0(sp)
 c016b5c:	dec00204 	addi	sp,sp,8
 c016b60:	f800283a 	ret

0c016b64 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 c016b64:	defffa04 	addi	sp,sp,-24
 c016b68:	dfc00515 	stw	ra,20(sp)
 c016b6c:	df000415 	stw	fp,16(sp)
 c016b70:	df000404 	addi	fp,sp,16
 c016b74:	e13ffe15 	stw	r4,-8(fp)
 c016b78:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 c016b7c:	e0bffe17 	ldw	r2,-8(fp)
 c016b80:	10000326 	beq	r2,zero,c016b90 <alt_dev_llist_insert+0x2c>
 c016b84:	e0bffe17 	ldw	r2,-8(fp)
 c016b88:	10800217 	ldw	r2,8(r2)
 c016b8c:	1000061e 	bne	r2,zero,c016ba8 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 c016b90:	c016b140 	call	c016b14 <alt_get_errno>
 c016b94:	1007883a 	mov	r3,r2
 c016b98:	00800584 	movi	r2,22
 c016b9c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 c016ba0:	00bffa84 	movi	r2,-22
 c016ba4:	00001306 	br	c016bf4 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 c016ba8:	e0bffe17 	ldw	r2,-8(fp)
 c016bac:	e0ffff17 	ldw	r3,-4(fp)
 c016bb0:	e0fffc15 	stw	r3,-16(fp)
 c016bb4:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 c016bb8:	e0bffd17 	ldw	r2,-12(fp)
 c016bbc:	e0fffc17 	ldw	r3,-16(fp)
 c016bc0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 c016bc4:	e0bffc17 	ldw	r2,-16(fp)
 c016bc8:	10c00017 	ldw	r3,0(r2)
 c016bcc:	e0bffd17 	ldw	r2,-12(fp)
 c016bd0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 c016bd4:	e0bffc17 	ldw	r2,-16(fp)
 c016bd8:	10800017 	ldw	r2,0(r2)
 c016bdc:	e0fffd17 	ldw	r3,-12(fp)
 c016be0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 c016be4:	e0bffc17 	ldw	r2,-16(fp)
 c016be8:	e0fffd17 	ldw	r3,-12(fp)
 c016bec:	10c00015 	stw	r3,0(r2)

  return 0;  
 c016bf0:	0005883a 	mov	r2,zero
}
 c016bf4:	e037883a 	mov	sp,fp
 c016bf8:	dfc00117 	ldw	ra,4(sp)
 c016bfc:	df000017 	ldw	fp,0(sp)
 c016c00:	dec00204 	addi	sp,sp,8
 c016c04:	f800283a 	ret

0c016c08 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 c016c08:	defffd04 	addi	sp,sp,-12
 c016c0c:	dfc00215 	stw	ra,8(sp)
 c016c10:	df000115 	stw	fp,4(sp)
 c016c14:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 c016c18:	00830074 	movhi	r2,3073
 c016c1c:	109ede04 	addi	r2,r2,31608
 c016c20:	e0bfff15 	stw	r2,-4(fp)
 c016c24:	00000606 	br	c016c40 <_do_ctors+0x38>
        (*ctor) (); 
 c016c28:	e0bfff17 	ldw	r2,-4(fp)
 c016c2c:	10800017 	ldw	r2,0(r2)
 c016c30:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 c016c34:	e0bfff17 	ldw	r2,-4(fp)
 c016c38:	10bfff04 	addi	r2,r2,-4
 c016c3c:	e0bfff15 	stw	r2,-4(fp)
 c016c40:	e0ffff17 	ldw	r3,-4(fp)
 c016c44:	00830074 	movhi	r2,3073
 c016c48:	109edf04 	addi	r2,r2,31612
 c016c4c:	18bff62e 	bgeu	r3,r2,c016c28 <__alt_data_end+0xfc016c28>
        (*ctor) (); 
}
 c016c50:	e037883a 	mov	sp,fp
 c016c54:	dfc00117 	ldw	ra,4(sp)
 c016c58:	df000017 	ldw	fp,0(sp)
 c016c5c:	dec00204 	addi	sp,sp,8
 c016c60:	f800283a 	ret

0c016c64 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 c016c64:	defffd04 	addi	sp,sp,-12
 c016c68:	dfc00215 	stw	ra,8(sp)
 c016c6c:	df000115 	stw	fp,4(sp)
 c016c70:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 c016c74:	00830074 	movhi	r2,3073
 c016c78:	109ede04 	addi	r2,r2,31608
 c016c7c:	e0bfff15 	stw	r2,-4(fp)
 c016c80:	00000606 	br	c016c9c <_do_dtors+0x38>
        (*dtor) (); 
 c016c84:	e0bfff17 	ldw	r2,-4(fp)
 c016c88:	10800017 	ldw	r2,0(r2)
 c016c8c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 c016c90:	e0bfff17 	ldw	r2,-4(fp)
 c016c94:	10bfff04 	addi	r2,r2,-4
 c016c98:	e0bfff15 	stw	r2,-4(fp)
 c016c9c:	e0ffff17 	ldw	r3,-4(fp)
 c016ca0:	00830074 	movhi	r2,3073
 c016ca4:	109edf04 	addi	r2,r2,31612
 c016ca8:	18bff62e 	bgeu	r3,r2,c016c84 <__alt_data_end+0xfc016c84>
        (*dtor) (); 
}
 c016cac:	e037883a 	mov	sp,fp
 c016cb0:	dfc00117 	ldw	ra,4(sp)
 c016cb4:	df000017 	ldw	fp,0(sp)
 c016cb8:	dec00204 	addi	sp,sp,8
 c016cbc:	f800283a 	ret

0c016cc0 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 c016cc0:	defffa04 	addi	sp,sp,-24
 c016cc4:	dfc00515 	stw	ra,20(sp)
 c016cc8:	df000415 	stw	fp,16(sp)
 c016ccc:	df000404 	addi	fp,sp,16
 c016cd0:	e13ffe15 	stw	r4,-8(fp)
 c016cd4:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 c016cd8:	e0bfff17 	ldw	r2,-4(fp)
 c016cdc:	10800017 	ldw	r2,0(r2)
 c016ce0:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 c016ce4:	e13ffe17 	ldw	r4,-8(fp)
 c016ce8:	c0099800 	call	c009980 <strlen>
 c016cec:	10800044 	addi	r2,r2,1
 c016cf0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 c016cf4:	00000d06 	br	c016d2c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 c016cf8:	e0bffc17 	ldw	r2,-16(fp)
 c016cfc:	10c00217 	ldw	r3,8(r2)
 c016d00:	e0bffd17 	ldw	r2,-12(fp)
 c016d04:	1809883a 	mov	r4,r3
 c016d08:	e17ffe17 	ldw	r5,-8(fp)
 c016d0c:	100d883a 	mov	r6,r2
 c016d10:	c0178580 	call	c017858 <memcmp>
 c016d14:	1000021e 	bne	r2,zero,c016d20 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 c016d18:	e0bffc17 	ldw	r2,-16(fp)
 c016d1c:	00000706 	br	c016d3c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 c016d20:	e0bffc17 	ldw	r2,-16(fp)
 c016d24:	10800017 	ldw	r2,0(r2)
 c016d28:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 c016d2c:	e0fffc17 	ldw	r3,-16(fp)
 c016d30:	e0bfff17 	ldw	r2,-4(fp)
 c016d34:	18bff01e 	bne	r3,r2,c016cf8 <__alt_data_end+0xfc016cf8>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 c016d38:	0005883a 	mov	r2,zero
}
 c016d3c:	e037883a 	mov	sp,fp
 c016d40:	dfc00117 	ldw	ra,4(sp)
 c016d44:	df000017 	ldw	fp,0(sp)
 c016d48:	dec00204 	addi	sp,sp,8
 c016d4c:	f800283a 	ret

0c016d50 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 c016d50:	defffe04 	addi	sp,sp,-8
 c016d54:	dfc00115 	stw	ra,4(sp)
 c016d58:	df000015 	stw	fp,0(sp)
 c016d5c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 c016d60:	0009883a 	mov	r4,zero
 c016d64:	01440004 	movi	r5,4096
 c016d68:	c0177800 	call	c017780 <alt_icache_flush>
#endif
}
 c016d6c:	e037883a 	mov	sp,fp
 c016d70:	dfc00117 	ldw	ra,4(sp)
 c016d74:	df000017 	ldw	fp,0(sp)
 c016d78:	dec00204 	addi	sp,sp,8
 c016d7c:	f800283a 	ret

0c016d80 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 c016d80:	defff904 	addi	sp,sp,-28
 c016d84:	dfc00615 	stw	ra,24(sp)
 c016d88:	df000515 	stw	fp,20(sp)
 c016d8c:	df000504 	addi	fp,sp,20
 c016d90:	e13ffc15 	stw	r4,-16(fp)
 c016d94:	e17ffd15 	stw	r5,-12(fp)
 c016d98:	e1bffe15 	stw	r6,-8(fp)
 c016d9c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 c016da0:	e0800217 	ldw	r2,8(fp)
 c016da4:	d8800015 	stw	r2,0(sp)
 c016da8:	e13ffc17 	ldw	r4,-16(fp)
 c016dac:	e17ffd17 	ldw	r5,-12(fp)
 c016db0:	e1bffe17 	ldw	r6,-8(fp)
 c016db4:	e1ffff17 	ldw	r7,-4(fp)
 c016db8:	c016f600 	call	c016f60 <alt_iic_isr_register>
}  
 c016dbc:	e037883a 	mov	sp,fp
 c016dc0:	dfc00117 	ldw	ra,4(sp)
 c016dc4:	df000017 	ldw	fp,0(sp)
 c016dc8:	dec00204 	addi	sp,sp,8
 c016dcc:	f800283a 	ret

0c016dd0 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 c016dd0:	defff904 	addi	sp,sp,-28
 c016dd4:	df000615 	stw	fp,24(sp)
 c016dd8:	df000604 	addi	fp,sp,24
 c016ddc:	e13ffe15 	stw	r4,-8(fp)
 c016de0:	e17fff15 	stw	r5,-4(fp)
 c016de4:	e0bfff17 	ldw	r2,-4(fp)
 c016de8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 c016dec:	0005303a 	rdctl	r2,status
 c016df0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 c016df4:	e0fffb17 	ldw	r3,-20(fp)
 c016df8:	00bfff84 	movi	r2,-2
 c016dfc:	1884703a 	and	r2,r3,r2
 c016e00:	1001703a 	wrctl	status,r2
  
  return context;
 c016e04:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 c016e08:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 c016e0c:	e0bffa17 	ldw	r2,-24(fp)
 c016e10:	00c00044 	movi	r3,1
 c016e14:	1884983a 	sll	r2,r3,r2
 c016e18:	1007883a 	mov	r3,r2
 c016e1c:	008300b4 	movhi	r2,3074
 c016e20:	10975a04 	addi	r2,r2,23912
 c016e24:	10800017 	ldw	r2,0(r2)
 c016e28:	1886b03a 	or	r3,r3,r2
 c016e2c:	008300b4 	movhi	r2,3074
 c016e30:	10975a04 	addi	r2,r2,23912
 c016e34:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 c016e38:	008300b4 	movhi	r2,3074
 c016e3c:	10975a04 	addi	r2,r2,23912
 c016e40:	10800017 	ldw	r2,0(r2)
 c016e44:	100170fa 	wrctl	ienable,r2
 c016e48:	e0bffc17 	ldw	r2,-16(fp)
 c016e4c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 c016e50:	e0bffd17 	ldw	r2,-12(fp)
 c016e54:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 c016e58:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 c016e5c:	0001883a 	nop
}
 c016e60:	e037883a 	mov	sp,fp
 c016e64:	df000017 	ldw	fp,0(sp)
 c016e68:	dec00104 	addi	sp,sp,4
 c016e6c:	f800283a 	ret

0c016e70 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 c016e70:	defff904 	addi	sp,sp,-28
 c016e74:	df000615 	stw	fp,24(sp)
 c016e78:	df000604 	addi	fp,sp,24
 c016e7c:	e13ffe15 	stw	r4,-8(fp)
 c016e80:	e17fff15 	stw	r5,-4(fp)
 c016e84:	e0bfff17 	ldw	r2,-4(fp)
 c016e88:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 c016e8c:	0005303a 	rdctl	r2,status
 c016e90:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 c016e94:	e0fffb17 	ldw	r3,-20(fp)
 c016e98:	00bfff84 	movi	r2,-2
 c016e9c:	1884703a 	and	r2,r3,r2
 c016ea0:	1001703a 	wrctl	status,r2
  
  return context;
 c016ea4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 c016ea8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 c016eac:	e0bffa17 	ldw	r2,-24(fp)
 c016eb0:	00c00044 	movi	r3,1
 c016eb4:	1884983a 	sll	r2,r3,r2
 c016eb8:	0084303a 	nor	r2,zero,r2
 c016ebc:	1007883a 	mov	r3,r2
 c016ec0:	008300b4 	movhi	r2,3074
 c016ec4:	10975a04 	addi	r2,r2,23912
 c016ec8:	10800017 	ldw	r2,0(r2)
 c016ecc:	1886703a 	and	r3,r3,r2
 c016ed0:	008300b4 	movhi	r2,3074
 c016ed4:	10975a04 	addi	r2,r2,23912
 c016ed8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 c016edc:	008300b4 	movhi	r2,3074
 c016ee0:	10975a04 	addi	r2,r2,23912
 c016ee4:	10800017 	ldw	r2,0(r2)
 c016ee8:	100170fa 	wrctl	ienable,r2
 c016eec:	e0bffc17 	ldw	r2,-16(fp)
 c016ef0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 c016ef4:	e0bffd17 	ldw	r2,-12(fp)
 c016ef8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 c016efc:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 c016f00:	0001883a 	nop
}
 c016f04:	e037883a 	mov	sp,fp
 c016f08:	df000017 	ldw	fp,0(sp)
 c016f0c:	dec00104 	addi	sp,sp,4
 c016f10:	f800283a 	ret

0c016f14 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 c016f14:	defffc04 	addi	sp,sp,-16
 c016f18:	df000315 	stw	fp,12(sp)
 c016f1c:	df000304 	addi	fp,sp,12
 c016f20:	e13ffe15 	stw	r4,-8(fp)
 c016f24:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 c016f28:	000530fa 	rdctl	r2,ienable
 c016f2c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 c016f30:	e0bfff17 	ldw	r2,-4(fp)
 c016f34:	00c00044 	movi	r3,1
 c016f38:	1884983a 	sll	r2,r3,r2
 c016f3c:	1007883a 	mov	r3,r2
 c016f40:	e0bffd17 	ldw	r2,-12(fp)
 c016f44:	1884703a 	and	r2,r3,r2
 c016f48:	1004c03a 	cmpne	r2,r2,zero
 c016f4c:	10803fcc 	andi	r2,r2,255
}
 c016f50:	e037883a 	mov	sp,fp
 c016f54:	df000017 	ldw	fp,0(sp)
 c016f58:	dec00104 	addi	sp,sp,4
 c016f5c:	f800283a 	ret

0c016f60 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 c016f60:	defff504 	addi	sp,sp,-44
 c016f64:	dfc00a15 	stw	ra,40(sp)
 c016f68:	df000915 	stw	fp,36(sp)
 c016f6c:	df000904 	addi	fp,sp,36
 c016f70:	e13ffc15 	stw	r4,-16(fp)
 c016f74:	e17ffd15 	stw	r5,-12(fp)
 c016f78:	e1bffe15 	stw	r6,-8(fp)
 c016f7c:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 c016f80:	00bffa84 	movi	r2,-22
 c016f84:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 c016f88:	e0bffd17 	ldw	r2,-12(fp)
 c016f8c:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 c016f90:	e0bff817 	ldw	r2,-32(fp)
 c016f94:	10800808 	cmpgei	r2,r2,32
 c016f98:	1000271e 	bne	r2,zero,c017038 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 c016f9c:	0005303a 	rdctl	r2,status
 c016fa0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 c016fa4:	e0fffa17 	ldw	r3,-24(fp)
 c016fa8:	00bfff84 	movi	r2,-2
 c016fac:	1884703a 	and	r2,r3,r2
 c016fb0:	1001703a 	wrctl	status,r2
  
  return context;
 c016fb4:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 c016fb8:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
 c016fbc:	008302f4 	movhi	r2,3083
 c016fc0:	10a04a04 	addi	r2,r2,-32472
 c016fc4:	e0fff817 	ldw	r3,-32(fp)
 c016fc8:	180690fa 	slli	r3,r3,3
 c016fcc:	10c5883a 	add	r2,r2,r3
 c016fd0:	e0fffe17 	ldw	r3,-8(fp)
 c016fd4:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 c016fd8:	008302f4 	movhi	r2,3083
 c016fdc:	10a04a04 	addi	r2,r2,-32472
 c016fe0:	e0fff817 	ldw	r3,-32(fp)
 c016fe4:	180690fa 	slli	r3,r3,3
 c016fe8:	10c5883a 	add	r2,r2,r3
 c016fec:	10800104 	addi	r2,r2,4
 c016ff0:	e0ffff17 	ldw	r3,-4(fp)
 c016ff4:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 c016ff8:	e0bffe17 	ldw	r2,-8(fp)
 c016ffc:	10000526 	beq	r2,zero,c017014 <alt_iic_isr_register+0xb4>
 c017000:	e0bff817 	ldw	r2,-32(fp)
 c017004:	e13ffc17 	ldw	r4,-16(fp)
 c017008:	100b883a 	mov	r5,r2
 c01700c:	c016dd00 	call	c016dd0 <alt_ic_irq_enable>
 c017010:	00000406 	br	c017024 <alt_iic_isr_register+0xc4>
 c017014:	e0bff817 	ldw	r2,-32(fp)
 c017018:	e13ffc17 	ldw	r4,-16(fp)
 c01701c:	100b883a 	mov	r5,r2
 c017020:	c016e700 	call	c016e70 <alt_ic_irq_disable>
 c017024:	e0bff715 	stw	r2,-36(fp)
 c017028:	e0bff917 	ldw	r2,-28(fp)
 c01702c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 c017030:	e0bffb17 	ldw	r2,-20(fp)
 c017034:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 c017038:	e0bff717 	ldw	r2,-36(fp)
}
 c01703c:	e037883a 	mov	sp,fp
 c017040:	dfc00117 	ldw	ra,4(sp)
 c017044:	df000017 	ldw	fp,0(sp)
 c017048:	dec00204 	addi	sp,sp,8
 c01704c:	f800283a 	ret

0c017050 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 c017050:	defff904 	addi	sp,sp,-28
 c017054:	dfc00615 	stw	ra,24(sp)
 c017058:	df000515 	stw	fp,20(sp)
 c01705c:	df000504 	addi	fp,sp,20
 c017060:	e13ffc15 	stw	r4,-16(fp)
 c017064:	e17ffd15 	stw	r5,-12(fp)
 c017068:	e1bffe15 	stw	r6,-8(fp)
 c01706c:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 c017070:	e13ffd17 	ldw	r4,-12(fp)
 c017074:	e17ffe17 	ldw	r5,-8(fp)
 c017078:	e1bfff17 	ldw	r6,-4(fp)
 c01707c:	c0172a40 	call	c0172a4 <open>
 c017080:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 c017084:	e0bffb17 	ldw	r2,-20(fp)
 c017088:	10001c16 	blt	r2,zero,c0170fc <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
 c01708c:	008300b4 	movhi	r2,3074
 c017090:	108bec04 	addi	r2,r2,12208
 c017094:	e0fffb17 	ldw	r3,-20(fp)
 c017098:	18c00324 	muli	r3,r3,12
 c01709c:	10c5883a 	add	r2,r2,r3
 c0170a0:	10c00017 	ldw	r3,0(r2)
 c0170a4:	e0bffc17 	ldw	r2,-16(fp)
 c0170a8:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 c0170ac:	008300b4 	movhi	r2,3074
 c0170b0:	108bec04 	addi	r2,r2,12208
 c0170b4:	e0fffb17 	ldw	r3,-20(fp)
 c0170b8:	18c00324 	muli	r3,r3,12
 c0170bc:	10c5883a 	add	r2,r2,r3
 c0170c0:	10800104 	addi	r2,r2,4
 c0170c4:	10c00017 	ldw	r3,0(r2)
 c0170c8:	e0bffc17 	ldw	r2,-16(fp)
 c0170cc:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 c0170d0:	008300b4 	movhi	r2,3074
 c0170d4:	108bec04 	addi	r2,r2,12208
 c0170d8:	e0fffb17 	ldw	r3,-20(fp)
 c0170dc:	18c00324 	muli	r3,r3,12
 c0170e0:	10c5883a 	add	r2,r2,r3
 c0170e4:	10800204 	addi	r2,r2,8
 c0170e8:	10c00017 	ldw	r3,0(r2)
 c0170ec:	e0bffc17 	ldw	r2,-16(fp)
 c0170f0:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 c0170f4:	e13ffb17 	ldw	r4,-20(fp)
 c0170f8:	c01550c0 	call	c01550c <alt_release_fd>
  }
} 
 c0170fc:	e037883a 	mov	sp,fp
 c017100:	dfc00117 	ldw	ra,4(sp)
 c017104:	df000017 	ldw	fp,0(sp)
 c017108:	dec00204 	addi	sp,sp,8
 c01710c:	f800283a 	ret

0c017110 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 c017110:	defffb04 	addi	sp,sp,-20
 c017114:	dfc00415 	stw	ra,16(sp)
 c017118:	df000315 	stw	fp,12(sp)
 c01711c:	df000304 	addi	fp,sp,12
 c017120:	e13ffd15 	stw	r4,-12(fp)
 c017124:	e17ffe15 	stw	r5,-8(fp)
 c017128:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 c01712c:	010300b4 	movhi	r4,3074
 c017130:	210bef04 	addi	r4,r4,12220
 c017134:	e17ffd17 	ldw	r5,-12(fp)
 c017138:	01800044 	movi	r6,1
 c01713c:	01c07fc4 	movi	r7,511
 c017140:	c0170500 	call	c017050 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 c017144:	010300b4 	movhi	r4,3074
 c017148:	210bec04 	addi	r4,r4,12208
 c01714c:	e17ffe17 	ldw	r5,-8(fp)
 c017150:	000d883a 	mov	r6,zero
 c017154:	01c07fc4 	movi	r7,511
 c017158:	c0170500 	call	c017050 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 c01715c:	010300b4 	movhi	r4,3074
 c017160:	210bf204 	addi	r4,r4,12232
 c017164:	e17fff17 	ldw	r5,-4(fp)
 c017168:	01800044 	movi	r6,1
 c01716c:	01c07fc4 	movi	r7,511
 c017170:	c0170500 	call	c017050 <alt_open_fd>
}  
 c017174:	e037883a 	mov	sp,fp
 c017178:	dfc00117 	ldw	ra,4(sp)
 c01717c:	df000017 	ldw	fp,0(sp)
 c017180:	dec00204 	addi	sp,sp,8
 c017184:	f800283a 	ret

0c017188 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 c017188:	defffe04 	addi	sp,sp,-8
 c01718c:	dfc00115 	stw	ra,4(sp)
 c017190:	df000015 	stw	fp,0(sp)
 c017194:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 c017198:	008300b4 	movhi	r2,3074
 c01719c:	10908004 	addi	r2,r2,16896
 c0171a0:	10800017 	ldw	r2,0(r2)
 c0171a4:	10000526 	beq	r2,zero,c0171bc <alt_get_errno+0x34>
 c0171a8:	008300b4 	movhi	r2,3074
 c0171ac:	10908004 	addi	r2,r2,16896
 c0171b0:	10800017 	ldw	r2,0(r2)
 c0171b4:	103ee83a 	callr	r2
 c0171b8:	00000206 	br	c0171c4 <alt_get_errno+0x3c>
 c0171bc:	008300b4 	movhi	r2,3074
 c0171c0:	10975604 	addi	r2,r2,23896
}
 c0171c4:	e037883a 	mov	sp,fp
 c0171c8:	dfc00117 	ldw	ra,4(sp)
 c0171cc:	df000017 	ldw	fp,0(sp)
 c0171d0:	dec00204 	addi	sp,sp,8
 c0171d4:	f800283a 	ret

0c0171d8 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 c0171d8:	defffd04 	addi	sp,sp,-12
 c0171dc:	df000215 	stw	fp,8(sp)
 c0171e0:	df000204 	addi	fp,sp,8
 c0171e4:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 c0171e8:	e0bfff17 	ldw	r2,-4(fp)
 c0171ec:	10800217 	ldw	r2,8(r2)
 c0171f0:	10d00034 	orhi	r3,r2,16384
 c0171f4:	e0bfff17 	ldw	r2,-4(fp)
 c0171f8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 c0171fc:	e03ffe15 	stw	zero,-8(fp)
 c017200:	00001d06 	br	c017278 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 c017204:	008300b4 	movhi	r2,3074
 c017208:	108bec04 	addi	r2,r2,12208
 c01720c:	e0fffe17 	ldw	r3,-8(fp)
 c017210:	18c00324 	muli	r3,r3,12
 c017214:	10c5883a 	add	r2,r2,r3
 c017218:	10c00017 	ldw	r3,0(r2)
 c01721c:	e0bfff17 	ldw	r2,-4(fp)
 c017220:	10800017 	ldw	r2,0(r2)
 c017224:	1880111e 	bne	r3,r2,c01726c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 c017228:	008300b4 	movhi	r2,3074
 c01722c:	108bec04 	addi	r2,r2,12208
 c017230:	e0fffe17 	ldw	r3,-8(fp)
 c017234:	18c00324 	muli	r3,r3,12
 c017238:	10c5883a 	add	r2,r2,r3
 c01723c:	10800204 	addi	r2,r2,8
 c017240:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 c017244:	1000090e 	bge	r2,zero,c01726c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 c017248:	e0bffe17 	ldw	r2,-8(fp)
 c01724c:	10c00324 	muli	r3,r2,12
 c017250:	008300b4 	movhi	r2,3074
 c017254:	108bec04 	addi	r2,r2,12208
 c017258:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 c01725c:	e0bfff17 	ldw	r2,-4(fp)
 c017260:	18800226 	beq	r3,r2,c01726c <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 c017264:	00bffcc4 	movi	r2,-13
 c017268:	00000a06 	br	c017294 <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 c01726c:	e0bffe17 	ldw	r2,-8(fp)
 c017270:	10800044 	addi	r2,r2,1
 c017274:	e0bffe15 	stw	r2,-8(fp)
 c017278:	008300b4 	movhi	r2,3074
 c01727c:	10907f04 	addi	r2,r2,16892
 c017280:	10800017 	ldw	r2,0(r2)
 c017284:	1007883a 	mov	r3,r2
 c017288:	e0bffe17 	ldw	r2,-8(fp)
 c01728c:	18bfdd2e 	bgeu	r3,r2,c017204 <__alt_data_end+0xfc017204>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 c017290:	0005883a 	mov	r2,zero
}
 c017294:	e037883a 	mov	sp,fp
 c017298:	df000017 	ldw	fp,0(sp)
 c01729c:	dec00104 	addi	sp,sp,4
 c0172a0:	f800283a 	ret

0c0172a4 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 c0172a4:	defff604 	addi	sp,sp,-40
 c0172a8:	dfc00915 	stw	ra,36(sp)
 c0172ac:	df000815 	stw	fp,32(sp)
 c0172b0:	df000804 	addi	fp,sp,32
 c0172b4:	e13ffd15 	stw	r4,-12(fp)
 c0172b8:	e17ffe15 	stw	r5,-8(fp)
 c0172bc:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 c0172c0:	00bfffc4 	movi	r2,-1
 c0172c4:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 c0172c8:	00bffb44 	movi	r2,-19
 c0172cc:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 c0172d0:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 c0172d4:	e13ffd17 	ldw	r4,-12(fp)
 c0172d8:	014300b4 	movhi	r5,3074
 c0172dc:	29507d04 	addi	r5,r5,16884
 c0172e0:	c016cc00 	call	c016cc0 <alt_find_dev>
 c0172e4:	e0bff815 	stw	r2,-32(fp)
 c0172e8:	e0bff817 	ldw	r2,-32(fp)
 c0172ec:	1000051e 	bne	r2,zero,c017304 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 c0172f0:	e13ffd17 	ldw	r4,-12(fp)
 c0172f4:	c0175b80 	call	c0175b8 <alt_find_file>
 c0172f8:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 c0172fc:	00800044 	movi	r2,1
 c017300:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 c017304:	e0bff817 	ldw	r2,-32(fp)
 c017308:	10002926 	beq	r2,zero,c0173b0 <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
 c01730c:	e13ff817 	ldw	r4,-32(fp)
 c017310:	c0176cc0 	call	c0176cc <alt_get_fd>
 c017314:	e0bff915 	stw	r2,-28(fp)
 c017318:	e0bff917 	ldw	r2,-28(fp)
 c01731c:	1000030e 	bge	r2,zero,c01732c <open+0x88>
    {
      status = index;
 c017320:	e0bff917 	ldw	r2,-28(fp)
 c017324:	e0bffa15 	stw	r2,-24(fp)
 c017328:	00002306 	br	c0173b8 <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
 c01732c:	e0bff917 	ldw	r2,-28(fp)
 c017330:	10c00324 	muli	r3,r2,12
 c017334:	008300b4 	movhi	r2,3074
 c017338:	108bec04 	addi	r2,r2,12208
 c01733c:	1885883a 	add	r2,r3,r2
 c017340:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 c017344:	e0fffe17 	ldw	r3,-8(fp)
 c017348:	00900034 	movhi	r2,16384
 c01734c:	10bfffc4 	addi	r2,r2,-1
 c017350:	1886703a 	and	r3,r3,r2
 c017354:	e0bffc17 	ldw	r2,-16(fp)
 c017358:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 c01735c:	e0bffb17 	ldw	r2,-20(fp)
 c017360:	1000051e 	bne	r2,zero,c017378 <open+0xd4>
 c017364:	e13ffc17 	ldw	r4,-16(fp)
 c017368:	c0171d80 	call	c0171d8 <alt_file_locked>
 c01736c:	e0bffa15 	stw	r2,-24(fp)
 c017370:	e0bffa17 	ldw	r2,-24(fp)
 c017374:	10001016 	blt	r2,zero,c0173b8 <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 c017378:	e0bff817 	ldw	r2,-32(fp)
 c01737c:	10800317 	ldw	r2,12(r2)
 c017380:	10000826 	beq	r2,zero,c0173a4 <open+0x100>
 c017384:	e0bff817 	ldw	r2,-32(fp)
 c017388:	10800317 	ldw	r2,12(r2)
 c01738c:	e13ffc17 	ldw	r4,-16(fp)
 c017390:	e17ffd17 	ldw	r5,-12(fp)
 c017394:	e1bffe17 	ldw	r6,-8(fp)
 c017398:	e1ffff17 	ldw	r7,-4(fp)
 c01739c:	103ee83a 	callr	r2
 c0173a0:	00000106 	br	c0173a8 <open+0x104>
 c0173a4:	0005883a 	mov	r2,zero
 c0173a8:	e0bffa15 	stw	r2,-24(fp)
 c0173ac:	00000206 	br	c0173b8 <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
 c0173b0:	00bffb44 	movi	r2,-19
 c0173b4:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 c0173b8:	e0bffa17 	ldw	r2,-24(fp)
 c0173bc:	1000090e 	bge	r2,zero,c0173e4 <open+0x140>
  {
    alt_release_fd (index);  
 c0173c0:	e13ff917 	ldw	r4,-28(fp)
 c0173c4:	c01550c0 	call	c01550c <alt_release_fd>
    ALT_ERRNO = -status;
 c0173c8:	c0171880 	call	c017188 <alt_get_errno>
 c0173cc:	1007883a 	mov	r3,r2
 c0173d0:	e0bffa17 	ldw	r2,-24(fp)
 c0173d4:	0085c83a 	sub	r2,zero,r2
 c0173d8:	18800015 	stw	r2,0(r3)
    return -1;
 c0173dc:	00bfffc4 	movi	r2,-1
 c0173e0:	00000106 	br	c0173e8 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
 c0173e4:	e0bff917 	ldw	r2,-28(fp)
}
 c0173e8:	e037883a 	mov	sp,fp
 c0173ec:	dfc00117 	ldw	ra,4(sp)
 c0173f0:	df000017 	ldw	fp,0(sp)
 c0173f4:	dec00204 	addi	sp,sp,8
 c0173f8:	f800283a 	ret

0c0173fc <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 c0173fc:	defffa04 	addi	sp,sp,-24
 c017400:	df000515 	stw	fp,20(sp)
 c017404:	df000504 	addi	fp,sp,20
 c017408:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 c01740c:	0005303a 	rdctl	r2,status
 c017410:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 c017414:	e0fffc17 	ldw	r3,-16(fp)
 c017418:	00bfff84 	movi	r2,-2
 c01741c:	1884703a 	and	r2,r3,r2
 c017420:	1001703a 	wrctl	status,r2
  
  return context;
 c017424:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 c017428:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 c01742c:	e0bfff17 	ldw	r2,-4(fp)
 c017430:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 c017434:	e0bffd17 	ldw	r2,-12(fp)
 c017438:	10800017 	ldw	r2,0(r2)
 c01743c:	e0fffd17 	ldw	r3,-12(fp)
 c017440:	18c00117 	ldw	r3,4(r3)
 c017444:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 c017448:	e0bffd17 	ldw	r2,-12(fp)
 c01744c:	10800117 	ldw	r2,4(r2)
 c017450:	e0fffd17 	ldw	r3,-12(fp)
 c017454:	18c00017 	ldw	r3,0(r3)
 c017458:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 c01745c:	e0bffd17 	ldw	r2,-12(fp)
 c017460:	e0fffd17 	ldw	r3,-12(fp)
 c017464:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 c017468:	e0bffd17 	ldw	r2,-12(fp)
 c01746c:	e0fffd17 	ldw	r3,-12(fp)
 c017470:	10c00015 	stw	r3,0(r2)
 c017474:	e0bffb17 	ldw	r2,-20(fp)
 c017478:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 c01747c:	e0bffe17 	ldw	r2,-8(fp)
 c017480:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 c017484:	e037883a 	mov	sp,fp
 c017488:	df000017 	ldw	fp,0(sp)
 c01748c:	dec00104 	addi	sp,sp,4
 c017490:	f800283a 	ret

0c017494 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 c017494:	defffb04 	addi	sp,sp,-20
 c017498:	dfc00415 	stw	ra,16(sp)
 c01749c:	df000315 	stw	fp,12(sp)
 c0174a0:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 c0174a4:	d0a01417 	ldw	r2,-32688(gp)
 c0174a8:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 c0174ac:	d0a6f017 	ldw	r2,-25664(gp)
 c0174b0:	10800044 	addi	r2,r2,1
 c0174b4:	d0a6f015 	stw	r2,-25664(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 c0174b8:	00002e06 	br	c017574 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 c0174bc:	e0bffd17 	ldw	r2,-12(fp)
 c0174c0:	10800017 	ldw	r2,0(r2)
 c0174c4:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 c0174c8:	e0bffd17 	ldw	r2,-12(fp)
 c0174cc:	10800403 	ldbu	r2,16(r2)
 c0174d0:	10803fcc 	andi	r2,r2,255
 c0174d4:	10000426 	beq	r2,zero,c0174e8 <alt_tick+0x54>
 c0174d8:	d0a6f017 	ldw	r2,-25664(gp)
 c0174dc:	1000021e 	bne	r2,zero,c0174e8 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 c0174e0:	e0bffd17 	ldw	r2,-12(fp)
 c0174e4:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 c0174e8:	e0bffd17 	ldw	r2,-12(fp)
 c0174ec:	10800217 	ldw	r2,8(r2)
 c0174f0:	d0e6f017 	ldw	r3,-25664(gp)
 c0174f4:	18801d36 	bltu	r3,r2,c01756c <alt_tick+0xd8>
 c0174f8:	e0bffd17 	ldw	r2,-12(fp)
 c0174fc:	10800403 	ldbu	r2,16(r2)
 c017500:	10803fcc 	andi	r2,r2,255
 c017504:	1000191e 	bne	r2,zero,c01756c <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 c017508:	e0bffd17 	ldw	r2,-12(fp)
 c01750c:	10800317 	ldw	r2,12(r2)
 c017510:	e0fffd17 	ldw	r3,-12(fp)
 c017514:	18c00517 	ldw	r3,20(r3)
 c017518:	1809883a 	mov	r4,r3
 c01751c:	103ee83a 	callr	r2
 c017520:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 c017524:	e0bfff17 	ldw	r2,-4(fp)
 c017528:	1000031e 	bne	r2,zero,c017538 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 c01752c:	e13ffd17 	ldw	r4,-12(fp)
 c017530:	c0173fc0 	call	c0173fc <alt_alarm_stop>
 c017534:	00000d06 	br	c01756c <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 c017538:	e0bffd17 	ldw	r2,-12(fp)
 c01753c:	10c00217 	ldw	r3,8(r2)
 c017540:	e0bfff17 	ldw	r2,-4(fp)
 c017544:	1887883a 	add	r3,r3,r2
 c017548:	e0bffd17 	ldw	r2,-12(fp)
 c01754c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 c017550:	e0bffd17 	ldw	r2,-12(fp)
 c017554:	10c00217 	ldw	r3,8(r2)
 c017558:	d0a6f017 	ldw	r2,-25664(gp)
 c01755c:	1880032e 	bgeu	r3,r2,c01756c <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 c017560:	e0bffd17 	ldw	r2,-12(fp)
 c017564:	00c00044 	movi	r3,1
 c017568:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 c01756c:	e0bffe17 	ldw	r2,-8(fp)
 c017570:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 c017574:	e0fffd17 	ldw	r3,-12(fp)
 c017578:	d0a01404 	addi	r2,gp,-32688
 c01757c:	18bfcf1e 	bne	r3,r2,c0174bc <__alt_data_end+0xfc0174bc>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 c017580:	0001883a 	nop
}
 c017584:	e037883a 	mov	sp,fp
 c017588:	dfc00117 	ldw	ra,4(sp)
 c01758c:	df000017 	ldw	fp,0(sp)
 c017590:	dec00204 	addi	sp,sp,8
 c017594:	f800283a 	ret

0c017598 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
 c017598:	deffff04 	addi	sp,sp,-4
 c01759c:	df000015 	stw	fp,0(sp)
 c0175a0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 c0175a4:	000170fa 	wrctl	ienable,zero
}
 c0175a8:	e037883a 	mov	sp,fp
 c0175ac:	df000017 	ldw	fp,0(sp)
 c0175b0:	dec00104 	addi	sp,sp,4
 c0175b4:	f800283a 	ret

0c0175b8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 c0175b8:	defffb04 	addi	sp,sp,-20
 c0175bc:	dfc00415 	stw	ra,16(sp)
 c0175c0:	df000315 	stw	fp,12(sp)
 c0175c4:	df000304 	addi	fp,sp,12
 c0175c8:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 c0175cc:	008300b4 	movhi	r2,3074
 c0175d0:	10907b04 	addi	r2,r2,16876
 c0175d4:	10800017 	ldw	r2,0(r2)
 c0175d8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 c0175dc:	00003106 	br	c0176a4 <alt_find_file+0xec>
  {
    len = strlen(next->name);
 c0175e0:	e0bffd17 	ldw	r2,-12(fp)
 c0175e4:	10800217 	ldw	r2,8(r2)
 c0175e8:	1009883a 	mov	r4,r2
 c0175ec:	c0099800 	call	c009980 <strlen>
 c0175f0:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 c0175f4:	e0bffd17 	ldw	r2,-12(fp)
 c0175f8:	10c00217 	ldw	r3,8(r2)
 c0175fc:	e0bffe17 	ldw	r2,-8(fp)
 c017600:	10bfffc4 	addi	r2,r2,-1
 c017604:	1885883a 	add	r2,r3,r2
 c017608:	10800003 	ldbu	r2,0(r2)
 c01760c:	10803fcc 	andi	r2,r2,255
 c017610:	1080201c 	xori	r2,r2,128
 c017614:	10bfe004 	addi	r2,r2,-128
 c017618:	10800bd8 	cmpnei	r2,r2,47
 c01761c:	1000031e 	bne	r2,zero,c01762c <alt_find_file+0x74>
    {
      len -= 1;
 c017620:	e0bffe17 	ldw	r2,-8(fp)
 c017624:	10bfffc4 	addi	r2,r2,-1
 c017628:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 c01762c:	e0bffe17 	ldw	r2,-8(fp)
 c017630:	e0ffff17 	ldw	r3,-4(fp)
 c017634:	1885883a 	add	r2,r3,r2
 c017638:	10800003 	ldbu	r2,0(r2)
 c01763c:	10803fcc 	andi	r2,r2,255
 c017640:	1080201c 	xori	r2,r2,128
 c017644:	10bfe004 	addi	r2,r2,-128
 c017648:	10800be0 	cmpeqi	r2,r2,47
 c01764c:	1000081e 	bne	r2,zero,c017670 <alt_find_file+0xb8>
 c017650:	e0bffe17 	ldw	r2,-8(fp)
 c017654:	e0ffff17 	ldw	r3,-4(fp)
 c017658:	1885883a 	add	r2,r3,r2
 c01765c:	10800003 	ldbu	r2,0(r2)
 c017660:	10803fcc 	andi	r2,r2,255
 c017664:	1080201c 	xori	r2,r2,128
 c017668:	10bfe004 	addi	r2,r2,-128
 c01766c:	10000a1e 	bne	r2,zero,c017698 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
 c017670:	e0bffd17 	ldw	r2,-12(fp)
 c017674:	10c00217 	ldw	r3,8(r2)
 c017678:	e0bffe17 	ldw	r2,-8(fp)
 c01767c:	1809883a 	mov	r4,r3
 c017680:	e17fff17 	ldw	r5,-4(fp)
 c017684:	100d883a 	mov	r6,r2
 c017688:	c0178580 	call	c017858 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 c01768c:	1000021e 	bne	r2,zero,c017698 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 c017690:	e0bffd17 	ldw	r2,-12(fp)
 c017694:	00000806 	br	c0176b8 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
 c017698:	e0bffd17 	ldw	r2,-12(fp)
 c01769c:	10800017 	ldw	r2,0(r2)
 c0176a0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 c0176a4:	e0fffd17 	ldw	r3,-12(fp)
 c0176a8:	008300b4 	movhi	r2,3074
 c0176ac:	10907b04 	addi	r2,r2,16876
 c0176b0:	18bfcb1e 	bne	r3,r2,c0175e0 <__alt_data_end+0xfc0175e0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 c0176b4:	0005883a 	mov	r2,zero
}
 c0176b8:	e037883a 	mov	sp,fp
 c0176bc:	dfc00117 	ldw	ra,4(sp)
 c0176c0:	df000017 	ldw	fp,0(sp)
 c0176c4:	dec00204 	addi	sp,sp,8
 c0176c8:	f800283a 	ret

0c0176cc <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 c0176cc:	defffc04 	addi	sp,sp,-16
 c0176d0:	df000315 	stw	fp,12(sp)
 c0176d4:	df000304 	addi	fp,sp,12
 c0176d8:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 c0176dc:	00bffa04 	movi	r2,-24
 c0176e0:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 c0176e4:	e03ffd15 	stw	zero,-12(fp)
 c0176e8:	00001d06 	br	c017760 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
 c0176ec:	008300b4 	movhi	r2,3074
 c0176f0:	108bec04 	addi	r2,r2,12208
 c0176f4:	e0fffd17 	ldw	r3,-12(fp)
 c0176f8:	18c00324 	muli	r3,r3,12
 c0176fc:	10c5883a 	add	r2,r2,r3
 c017700:	10800017 	ldw	r2,0(r2)
 c017704:	1000131e 	bne	r2,zero,c017754 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
 c017708:	008300b4 	movhi	r2,3074
 c01770c:	108bec04 	addi	r2,r2,12208
 c017710:	e0fffd17 	ldw	r3,-12(fp)
 c017714:	18c00324 	muli	r3,r3,12
 c017718:	10c5883a 	add	r2,r2,r3
 c01771c:	e0ffff17 	ldw	r3,-4(fp)
 c017720:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 c017724:	008300b4 	movhi	r2,3074
 c017728:	10907f04 	addi	r2,r2,16892
 c01772c:	10c00017 	ldw	r3,0(r2)
 c017730:	e0bffd17 	ldw	r2,-12(fp)
 c017734:	1880040e 	bge	r3,r2,c017748 <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
 c017738:	008300b4 	movhi	r2,3074
 c01773c:	10907f04 	addi	r2,r2,16892
 c017740:	e0fffd17 	ldw	r3,-12(fp)
 c017744:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
 c017748:	e0bffd17 	ldw	r2,-12(fp)
 c01774c:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
 c017750:	00000606 	br	c01776c <alt_get_fd+0xa0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 c017754:	e0bffd17 	ldw	r2,-12(fp)
 c017758:	10800044 	addi	r2,r2,1
 c01775c:	e0bffd15 	stw	r2,-12(fp)
 c017760:	e0bffd17 	ldw	r2,-12(fp)
 c017764:	10800810 	cmplti	r2,r2,32
 c017768:	103fe01e 	bne	r2,zero,c0176ec <__alt_data_end+0xfc0176ec>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 c01776c:	e0bffe17 	ldw	r2,-8(fp)
}
 c017770:	e037883a 	mov	sp,fp
 c017774:	df000017 	ldw	fp,0(sp)
 c017778:	dec00104 	addi	sp,sp,4
 c01777c:	f800283a 	ret

0c017780 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 c017780:	defffb04 	addi	sp,sp,-20
 c017784:	df000415 	stw	fp,16(sp)
 c017788:	df000404 	addi	fp,sp,16
 c01778c:	e13ffe15 	stw	r4,-8(fp)
 c017790:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 c017794:	e0bfff17 	ldw	r2,-4(fp)
 c017798:	10840070 	cmpltui	r2,r2,4097
 c01779c:	1000021e 	bne	r2,zero,c0177a8 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 c0177a0:	00840004 	movi	r2,4096
 c0177a4:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 c0177a8:	e0fffe17 	ldw	r3,-8(fp)
 c0177ac:	e0bfff17 	ldw	r2,-4(fp)
 c0177b0:	1885883a 	add	r2,r3,r2
 c0177b4:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 c0177b8:	e0bffe17 	ldw	r2,-8(fp)
 c0177bc:	e0bffc15 	stw	r2,-16(fp)
 c0177c0:	00000506 	br	c0177d8 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 c0177c4:	e0bffc17 	ldw	r2,-16(fp)
 c0177c8:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 c0177cc:	e0bffc17 	ldw	r2,-16(fp)
 c0177d0:	10800804 	addi	r2,r2,32
 c0177d4:	e0bffc15 	stw	r2,-16(fp)
 c0177d8:	e0fffc17 	ldw	r3,-16(fp)
 c0177dc:	e0bffd17 	ldw	r2,-12(fp)
 c0177e0:	18bff836 	bltu	r3,r2,c0177c4 <__alt_data_end+0xfc0177c4>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 c0177e4:	e0bffe17 	ldw	r2,-8(fp)
 c0177e8:	108007cc 	andi	r2,r2,31
 c0177ec:	10000226 	beq	r2,zero,c0177f8 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 c0177f0:	e0bffc17 	ldw	r2,-16(fp)
 c0177f4:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 c0177f8:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 c0177fc:	e037883a 	mov	sp,fp
 c017800:	df000017 	ldw	fp,0(sp)
 c017804:	dec00104 	addi	sp,sp,4
 c017808:	f800283a 	ret

0c01780c <atexit>:
 c01780c:	200b883a 	mov	r5,r4
 c017810:	000d883a 	mov	r6,zero
 c017814:	0009883a 	mov	r4,zero
 c017818:	000f883a 	mov	r7,zero
 c01781c:	c0178d41 	jmpi	c0178d4 <__register_exitproc>

0c017820 <exit>:
 c017820:	defffe04 	addi	sp,sp,-8
 c017824:	000b883a 	mov	r5,zero
 c017828:	dc000015 	stw	r16,0(sp)
 c01782c:	dfc00115 	stw	ra,4(sp)
 c017830:	2021883a 	mov	r16,r4
 c017834:	c0179e80 	call	c0179e8 <__call_exitprocs>
 c017838:	008300b4 	movhi	r2,3074
 c01783c:	10907504 	addi	r2,r2,16852
 c017840:	11000017 	ldw	r4,0(r2)
 c017844:	20800f17 	ldw	r2,60(r4)
 c017848:	10000126 	beq	r2,zero,c017850 <exit+0x30>
 c01784c:	103ee83a 	callr	r2
 c017850:	8009883a 	mov	r4,r16
 c017854:	c014b880 	call	c014b88 <_exit>

0c017858 <memcmp>:
 c017858:	01c000c4 	movi	r7,3
 c01785c:	3980192e 	bgeu	r7,r6,c0178c4 <memcmp+0x6c>
 c017860:	2144b03a 	or	r2,r4,r5
 c017864:	11c4703a 	and	r2,r2,r7
 c017868:	10000f26 	beq	r2,zero,c0178a8 <memcmp+0x50>
 c01786c:	20800003 	ldbu	r2,0(r4)
 c017870:	28c00003 	ldbu	r3,0(r5)
 c017874:	10c0151e 	bne	r2,r3,c0178cc <memcmp+0x74>
 c017878:	31bfff84 	addi	r6,r6,-2
 c01787c:	01ffffc4 	movi	r7,-1
 c017880:	00000406 	br	c017894 <memcmp+0x3c>
 c017884:	20800003 	ldbu	r2,0(r4)
 c017888:	28c00003 	ldbu	r3,0(r5)
 c01788c:	31bfffc4 	addi	r6,r6,-1
 c017890:	10c00e1e 	bne	r2,r3,c0178cc <memcmp+0x74>
 c017894:	21000044 	addi	r4,r4,1
 c017898:	29400044 	addi	r5,r5,1
 c01789c:	31fff91e 	bne	r6,r7,c017884 <__alt_data_end+0xfc017884>
 c0178a0:	0005883a 	mov	r2,zero
 c0178a4:	f800283a 	ret
 c0178a8:	20c00017 	ldw	r3,0(r4)
 c0178ac:	28800017 	ldw	r2,0(r5)
 c0178b0:	1880041e 	bne	r3,r2,c0178c4 <memcmp+0x6c>
 c0178b4:	31bfff04 	addi	r6,r6,-4
 c0178b8:	21000104 	addi	r4,r4,4
 c0178bc:	29400104 	addi	r5,r5,4
 c0178c0:	39bff936 	bltu	r7,r6,c0178a8 <__alt_data_end+0xfc0178a8>
 c0178c4:	303fe91e 	bne	r6,zero,c01786c <__alt_data_end+0xfc01786c>
 c0178c8:	003ff506 	br	c0178a0 <__alt_data_end+0xfc0178a0>
 c0178cc:	10c5c83a 	sub	r2,r2,r3
 c0178d0:	f800283a 	ret

0c0178d4 <__register_exitproc>:
 c0178d4:	008300b4 	movhi	r2,3074
 c0178d8:	defffa04 	addi	sp,sp,-24
 c0178dc:	10907504 	addi	r2,r2,16852
 c0178e0:	dc000315 	stw	r16,12(sp)
 c0178e4:	14000017 	ldw	r16,0(r2)
 c0178e8:	dc400415 	stw	r17,16(sp)
 c0178ec:	dfc00515 	stw	ra,20(sp)
 c0178f0:	80805217 	ldw	r2,328(r16)
 c0178f4:	2023883a 	mov	r17,r4
 c0178f8:	10003626 	beq	r2,zero,c0179d4 <__register_exitproc+0x100>
 c0178fc:	10c00117 	ldw	r3,4(r2)
 c017900:	010007c4 	movi	r4,31
 c017904:	20c00e16 	blt	r4,r3,c017940 <__register_exitproc+0x6c>
 c017908:	1a400044 	addi	r9,r3,1
 c01790c:	8800211e 	bne	r17,zero,c017994 <__register_exitproc+0xc0>
 c017910:	18c00084 	addi	r3,r3,2
 c017914:	18c7883a 	add	r3,r3,r3
 c017918:	18c7883a 	add	r3,r3,r3
 c01791c:	12400115 	stw	r9,4(r2)
 c017920:	10c7883a 	add	r3,r2,r3
 c017924:	19400015 	stw	r5,0(r3)
 c017928:	0005883a 	mov	r2,zero
 c01792c:	dfc00517 	ldw	ra,20(sp)
 c017930:	dc400417 	ldw	r17,16(sp)
 c017934:	dc000317 	ldw	r16,12(sp)
 c017938:	dec00604 	addi	sp,sp,24
 c01793c:	f800283a 	ret
 c017940:	00830074 	movhi	r2,3073
 c017944:	10a36b04 	addi	r2,r2,-29268
 c017948:	10002526 	beq	r2,zero,c0179e0 <__register_exitproc+0x10c>
 c01794c:	01006404 	movi	r4,400
 c017950:	d9400015 	stw	r5,0(sp)
 c017954:	d9800115 	stw	r6,4(sp)
 c017958:	d9c00215 	stw	r7,8(sp)
 c01795c:	c008dac0 	call	c008dac <malloc>
 c017960:	d9400017 	ldw	r5,0(sp)
 c017964:	d9800117 	ldw	r6,4(sp)
 c017968:	d9c00217 	ldw	r7,8(sp)
 c01796c:	10001c26 	beq	r2,zero,c0179e0 <__register_exitproc+0x10c>
 c017970:	80c05217 	ldw	r3,328(r16)
 c017974:	10000115 	stw	zero,4(r2)
 c017978:	02400044 	movi	r9,1
 c01797c:	10c00015 	stw	r3,0(r2)
 c017980:	80805215 	stw	r2,328(r16)
 c017984:	10006215 	stw	zero,392(r2)
 c017988:	10006315 	stw	zero,396(r2)
 c01798c:	0007883a 	mov	r3,zero
 c017990:	883fdf26 	beq	r17,zero,c017910 <__alt_data_end+0xfc017910>
 c017994:	18d1883a 	add	r8,r3,r3
 c017998:	4211883a 	add	r8,r8,r8
 c01799c:	1211883a 	add	r8,r2,r8
 c0179a0:	41802215 	stw	r6,136(r8)
 c0179a4:	01000044 	movi	r4,1
 c0179a8:	11806217 	ldw	r6,392(r2)
 c0179ac:	20c8983a 	sll	r4,r4,r3
 c0179b0:	310cb03a 	or	r6,r6,r4
 c0179b4:	11806215 	stw	r6,392(r2)
 c0179b8:	41c04215 	stw	r7,264(r8)
 c0179bc:	01800084 	movi	r6,2
 c0179c0:	89bfd31e 	bne	r17,r6,c017910 <__alt_data_end+0xfc017910>
 c0179c4:	11806317 	ldw	r6,396(r2)
 c0179c8:	3108b03a 	or	r4,r6,r4
 c0179cc:	11006315 	stw	r4,396(r2)
 c0179d0:	003fcf06 	br	c017910 <__alt_data_end+0xfc017910>
 c0179d4:	80805304 	addi	r2,r16,332
 c0179d8:	80805215 	stw	r2,328(r16)
 c0179dc:	003fc706 	br	c0178fc <__alt_data_end+0xfc0178fc>
 c0179e0:	00bfffc4 	movi	r2,-1
 c0179e4:	003fd106 	br	c01792c <__alt_data_end+0xfc01792c>

0c0179e8 <__call_exitprocs>:
 c0179e8:	008300b4 	movhi	r2,3074
 c0179ec:	10907504 	addi	r2,r2,16852
 c0179f0:	10800017 	ldw	r2,0(r2)
 c0179f4:	defff404 	addi	sp,sp,-48
 c0179f8:	dd800815 	stw	r22,32(sp)
 c0179fc:	d8800015 	stw	r2,0(sp)
 c017a00:	10805204 	addi	r2,r2,328
 c017a04:	dd000615 	stw	r20,24(sp)
 c017a08:	dc800415 	stw	r18,16(sp)
 c017a0c:	dfc00b15 	stw	ra,44(sp)
 c017a10:	df000a15 	stw	fp,40(sp)
 c017a14:	ddc00915 	stw	r23,36(sp)
 c017a18:	dd400715 	stw	r21,28(sp)
 c017a1c:	dcc00515 	stw	r19,20(sp)
 c017a20:	dc400315 	stw	r17,12(sp)
 c017a24:	dc000215 	stw	r16,8(sp)
 c017a28:	2025883a 	mov	r18,r4
 c017a2c:	2829883a 	mov	r20,r5
 c017a30:	d8800115 	stw	r2,4(sp)
 c017a34:	05bfffc4 	movi	r22,-1
 c017a38:	d8800017 	ldw	r2,0(sp)
 c017a3c:	14c05217 	ldw	r19,328(r2)
 c017a40:	98001d26 	beq	r19,zero,c017ab8 <__call_exitprocs+0xd0>
 c017a44:	dd400117 	ldw	r21,4(sp)
 c017a48:	98800117 	ldw	r2,4(r19)
 c017a4c:	173fffc4 	addi	fp,r2,-1
 c017a50:	e0000d16 	blt	fp,zero,c017a88 <__call_exitprocs+0xa0>
 c017a54:	14000044 	addi	r16,r2,1
 c017a58:	8421883a 	add	r16,r16,r16
 c017a5c:	8421883a 	add	r16,r16,r16
 c017a60:	84402004 	addi	r17,r16,128
 c017a64:	9c63883a 	add	r17,r19,r17
 c017a68:	9c21883a 	add	r16,r19,r16
 c017a6c:	a0001e26 	beq	r20,zero,c017ae8 <__call_exitprocs+0x100>
 c017a70:	80804017 	ldw	r2,256(r16)
 c017a74:	15001c26 	beq	r2,r20,c017ae8 <__call_exitprocs+0x100>
 c017a78:	e73fffc4 	addi	fp,fp,-1
 c017a7c:	843fff04 	addi	r16,r16,-4
 c017a80:	8c7fff04 	addi	r17,r17,-4
 c017a84:	e5bff91e 	bne	fp,r22,c017a6c <__alt_data_end+0xfc017a6c>
 c017a88:	00830074 	movhi	r2,3073
 c017a8c:	10a37004 	addi	r2,r2,-29248
 c017a90:	10000926 	beq	r2,zero,c017ab8 <__call_exitprocs+0xd0>
 c017a94:	98800117 	ldw	r2,4(r19)
 c017a98:	1000311e 	bne	r2,zero,c017b60 <__call_exitprocs+0x178>
 c017a9c:	98800017 	ldw	r2,0(r19)
 c017aa0:	10003426 	beq	r2,zero,c017b74 <__call_exitprocs+0x18c>
 c017aa4:	9809883a 	mov	r4,r19
 c017aa8:	a8800015 	stw	r2,0(r21)
 c017aac:	c008dc00 	call	c008dc0 <free>
 c017ab0:	acc00017 	ldw	r19,0(r21)
 c017ab4:	983fe41e 	bne	r19,zero,c017a48 <__alt_data_end+0xfc017a48>
 c017ab8:	dfc00b17 	ldw	ra,44(sp)
 c017abc:	df000a17 	ldw	fp,40(sp)
 c017ac0:	ddc00917 	ldw	r23,36(sp)
 c017ac4:	dd800817 	ldw	r22,32(sp)
 c017ac8:	dd400717 	ldw	r21,28(sp)
 c017acc:	dd000617 	ldw	r20,24(sp)
 c017ad0:	dcc00517 	ldw	r19,20(sp)
 c017ad4:	dc800417 	ldw	r18,16(sp)
 c017ad8:	dc400317 	ldw	r17,12(sp)
 c017adc:	dc000217 	ldw	r16,8(sp)
 c017ae0:	dec00c04 	addi	sp,sp,48
 c017ae4:	f800283a 	ret
 c017ae8:	98800117 	ldw	r2,4(r19)
 c017aec:	80c00017 	ldw	r3,0(r16)
 c017af0:	10bfffc4 	addi	r2,r2,-1
 c017af4:	17001526 	beq	r2,fp,c017b4c <__call_exitprocs+0x164>
 c017af8:	80000015 	stw	zero,0(r16)
 c017afc:	183fde26 	beq	r3,zero,c017a78 <__alt_data_end+0xfc017a78>
 c017b00:	00800044 	movi	r2,1
 c017b04:	1708983a 	sll	r4,r2,fp
 c017b08:	98806217 	ldw	r2,392(r19)
 c017b0c:	9dc00117 	ldw	r23,4(r19)
 c017b10:	2084703a 	and	r2,r4,r2
 c017b14:	1000061e 	bne	r2,zero,c017b30 <__call_exitprocs+0x148>
 c017b18:	183ee83a 	callr	r3
 c017b1c:	98800117 	ldw	r2,4(r19)
 c017b20:	15ffc51e 	bne	r2,r23,c017a38 <__alt_data_end+0xfc017a38>
 c017b24:	a8800017 	ldw	r2,0(r21)
 c017b28:	14ffd326 	beq	r2,r19,c017a78 <__alt_data_end+0xfc017a78>
 c017b2c:	003fc206 	br	c017a38 <__alt_data_end+0xfc017a38>
 c017b30:	98806317 	ldw	r2,396(r19)
 c017b34:	2084703a 	and	r2,r4,r2
 c017b38:	1000061e 	bne	r2,zero,c017b54 <__call_exitprocs+0x16c>
 c017b3c:	89400017 	ldw	r5,0(r17)
 c017b40:	9009883a 	mov	r4,r18
 c017b44:	183ee83a 	callr	r3
 c017b48:	003ff406 	br	c017b1c <__alt_data_end+0xfc017b1c>
 c017b4c:	9f000115 	stw	fp,4(r19)
 c017b50:	003fea06 	br	c017afc <__alt_data_end+0xfc017afc>
 c017b54:	89000017 	ldw	r4,0(r17)
 c017b58:	183ee83a 	callr	r3
 c017b5c:	003fef06 	br	c017b1c <__alt_data_end+0xfc017b1c>
 c017b60:	98800017 	ldw	r2,0(r19)
 c017b64:	982b883a 	mov	r21,r19
 c017b68:	1027883a 	mov	r19,r2
 c017b6c:	983fb61e 	bne	r19,zero,c017a48 <__alt_data_end+0xfc017a48>
 c017b70:	003fd106 	br	c017ab8 <__alt_data_end+0xfc017ab8>
 c017b74:	0005883a 	mov	r2,zero
 c017b78:	003ffa06 	br	c017b64 <__alt_data_end+0xfc017b64>
